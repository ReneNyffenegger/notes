$ Unicode Character

The → development/Unicode standard Version 14.0 contains 144697 characters.

A character is the *minimum unit* of text with semantic value.

There are mutliple ways to represent a character, one of which is → development/Unicode/UTF-8[UTF-8].

{ Normalization #unicode-normalization

  Some Unicode chracters can be (equivalently) represented with multiple binary representations.
  -
  For example, the character ắ is represented by the following code points:
    • `→ https://www.compart.com/en/unicode/U+1EAF[U+1EAF]` (ắ)
    • `→ https://www.compart.com/en/unicode/U+0103[U+0103] → https://www.compart.com/en/unicode/U+0301[U+0301]` (ă + ◌́)
    • `→ https://www.compart.com/en/unicode/U+0061[U+0061] → https://www.compart.com/en/unicode/U+0306[U+0306] → https://www.compart.com/en/unicode/U+0301[U+0301]` (a + ◌̆ + ◌́)

  Needless to say that this phenomonen complicates some text related operations such as searching, sorting and matching.

  In order to somewhat make things easier, the → development/Unicode#unicode-standard[Unicode standard] defined processes with which the different representations of a characters can be *normalized* into
 *one* representation.
  -
  After normalizing Unicode strings, they can then be compared or operated on more easily.

  These processes, or algorithms, are referred to as *normalization forms*, for example C, D, KC or KD. 

  See also the .NET class `System.Text.NormalizationForm`.

}

sa:
  → development/Unicode/character-set

  The → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Globalization/CharUnicodeInfo[`System.Globalization.CharUnicodeInfo`] provides information about
  a Unicode character.

 *TODO*: should this page be merged with → development/Unicode/Codepoints?
