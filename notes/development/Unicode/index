
At its heart, Unicode defines a → development/Unicode/character-set that (hopefully) contains every → development/Unicode/character someone can possibly think of.
Thus, its goal is to UNIfy all enCODEings (=UNICODE) of the world.
-
It allegedly consists of 1114112 → development/Unicode/Codepoints[codepoints].
-
The same character set is also defined by → misc/ISO/10646.

? With Unicode, there is not a one to one relationship anymore between characters and bytes.

{ Goal

  The original goal of Unicode was «to unify the many hundreds of conflicting ways to encode characters, replacing them with a single, universal standard.»

}
{ Standard

  The Unicode standard aims at being
    • Universal
    • Efficient
    • Unambiguous

  On 2021-09-14, Version 14.0 of the Unicode® Standard was → http://blog.unicode.org/2021/09/announcing-unicode-standard-version-140.html[announced].
  -
  This version consists of
  table { ll
    The core specification ☰ Available as a → https://www.unicode.org/versions/Unicode14.0.0/UnicodeStandard-14.0.pdf[single PDF document].
    The code charts ☰ Representative → design/font/glyph[glyphs] for all → development/Unicode/character[Unicode characters], online → https://www.unicode.org/charts/[here].
    The Unicode Standard Annexes ☰ Normative information about particular aspects of the standard.
    The → development/Unicode/character/database[Unicode Character Database] (UCD) ☰ Normative and informative data for implementers of the standard.
  table }

  The Unicode standard Version 14.0 contains 144697 → development/Unicode/character[characters].

  The standard does not only deal with characters but also covers aspects of *text manipulation* such as
    • Dividing words
    • Breaking lines
    • Formatting of numbers, dates, times etc. according to a locale
    • Writing left-to-right and right-to-left
    • Specialities of written asian languages
    • Security particularities like similarly looking characters

  Although the standard comes with *representative glyphs*, it does not *define* glyph images. The standard concentrates on interpreting characters, not drawing them.

}
{ Properties of Unicode characters

  Unicode is not only the definition of the characters, but also assigns properties to characters that are dependent on the region where these characters are used.

  Such properties include:
    • How characters are sorted
    • What a lower case character's uppercase version is, and vice vera

  The following properties can be set (think: `true`) or absent (`false`) in each character.
    • Cased Letter (set if any of Uppercase, Lowercase or Titlecase Letter is set)
    • Uppercase Letter
    • Lowercase Letter
    • Titlecase Letter
    • Modifier Letter
    • Other Letter
    • Mark
    • Nonspacing Mark
    • Spacing Mark
    • Enclosing Mark
    • Number
    • Decimal Number (also Digit)
    • Letter Number
    • Other Number
    • Punctuation (also Punct)
    • Connector Punctuation
    • Dash Punctuation
    • Open Punctuation
    • Close Punctuation
    • Initial Punctuation (Behaves either as Open Punctuation or Close Punctuation, depending on usage)
    • Final Punctuation (Behaves either as Open Punctuation or Close Punctuation, depending on usage)
    • Other Punctuation
    • Symbol
    • Math Symbol - not all math symbols are visible.
    • Currency Symbol
    • Modifier Symbol
    • Other Symbol
    • Separator
    • Space Separator
    • Line Separator
    • Paragraph Separator
    • Other
    • Control (also Cntrl)
    • Format
    • Surrogate
    • Private Use
    • Unassigned 
}
{ Extended Grapheme Clusters (Logical Characters)

  Unicode considers a character with a thingy (circles, graves etc, such as *é*) to consist of two characters: the base character (*e*) and the thingy.

}
{ Cases

   Three cases: Upper-, lower and titlecase.

   Changing the case in a string might change the string's length.

   Σ is the uppercase version of both σ and ς.

   ª has no uppercase version.

   ᵃ and ᴬ are letters and are lowercase, but they are not lowercase letters.

   The case might be → development/locale[locale] dependent.

}
{ Scripts

  Latin, Cyrillic, Greek, Hiragana, Katakan …

}
{ Interesting Characters

  table { ll
     ZERO WIDTH SPACE ☰ 0x200b, sometimes abbreviated with *ZWS*. HTML: `&#8203` or `&ZeroWidthSpace;`
     ZERO WIDTH NON-JOINER ☰ 0x200c, sometimes abbreviated with *WSNJ*. HTML: `&#8204;` or `&zwnj;`
     ZERO WIDTH JOINER ☰ 0x200d, sometimes abbreviated with *ZWJ*. HTML: `&#8205;` or `&zwj;`
    REPLACEMENT CHARACTER ☰ � (Hex: fffc, Dec: 65533): used to replace an incoming character whose value is unknown or unrepresentable in Unicode.
  table }



  → http://www.fileformat.info/info/unicode/block/miscellaneous_symbols_and_pictographs/images.htm[Miscellaneous Symbols and Pictographs]

  → http://www.fileformat.info/info/unicode/block/letterlike_symbols/images.htm[Letterlike symbols]

}
{ Entering Unicode characters

  In → Windows, the → Windows/registry[registry] value of → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Input-Method#reg-EnableHexNumpad[`EnableHexNumpad`]
  under → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Input-Method[`HKEY_CURRENT_USER\Control Panel\Input Method`] can be set to `1` which allows to enter Unicode characters with the *Alt* key.

}

sa:
  → development/languages/Java/classes/java/lang/String/getBytes

  → development/languages/Perl/modules/Unicode/index

  The → development/languages/Perl[Perl] function → development/languages/Perl/functions/ord[`ord`] returns the code point of a given character (on most systems, that is) - it's reverse
  function is → development/languages/Perl/functions/chr[`chr`].
  -
  The → development/languages/JavaScript[JavaScript] method → development/languages/JavaScript/code-snippets/objects/String/fromCharCode[`String.fromCharCode`]
  creates a string from one or more → development/Unicode/Codepoints[code points].

  → development/languages/JavaScript/code-snippets/unicode[Unicode related JavaScript code snippets].

  → misc/ISO/10646

  → http://renenyffenegger.ch/development/Unicode/Find-Unicode-Character-by-Appearance.html[Find Unicode by visual appearance]
  -
  → http://renenyffenegger.ch/development/Unicode/subscript-superscript.html[Superscript letters]

  → Windows/development/WinAPI/data-types/Definition-of-TCHAR-and-TEXT-depending-on-UNICODE

  → development/Unicode/collation

  The → Microsoft/Office/Excel/functions[Excel worksheet function] `unichar()`

  → Windows/dirs/Windows/System32/charmap_exe[`charmap.exe`] offers some limited functionality to search for a Unicode character by its name.
  

links:
  The → https://www.unicode.org/ucd/[Unicode Character Database] consists of a number of data files listing Unicode character properties and related data. It also includes data files containing test data for conformance to several important Unicode algorithms.

  → http://www.unicode.org/charts/[Unicode Character Code Charts]

