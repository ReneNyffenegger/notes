

Ethereum aims at providing a Turing-complete programming language for scripts with which *smart contracts* can be written.
Such a script (or smart contract) is then stored in the blockchain.
-
The script can then be executed in an Ethereum virtual machine (EVM).

{ Solidity

  The high level programming language to write such scripts is called *Solidity*.

}
{ Gas


  When a script is executed, it needs »gas« for each instruction. When the gas is exhausted, the script stops. This makes sure that
  a script does not run indefinitly long.

  Gas is paid for with *Ether*, the currency of Ehtereum.

}
{ GHOST

  GHOST is the protocoll to determine the consensus branch.

}
{ Smart contracts

  Ehtereum's smart contracts are written in a stack-based byte code language.
  -
  The language is *turing-complete*, unlike → development/Crypto-Currencies/Bitcoin[Bitcoin's].
  -
  A prominent high language to create the byte code is *Solidity*.
 
}
{ Misc

  A ~token~ represents a fungible good which is *countable* and whose ownership is *transferable*.

  An ~oracle~ is a contract that is used to query externa data.

  Creating a ~random number~ is not a trivial task for a contract because all nodes must generate the same value when executing the contract.

}

{ TODO

  The → https://github.com/melonproject/greenpaper[Melon protocol] is a blockchain protocol for digital asset management on the Ethereum platform.
  It enables participants to set up, manage and invest in digital asset management strategies in an open, competetitive and decentralised manner.

}


sa:
  → development/Crypto-Currencies/
