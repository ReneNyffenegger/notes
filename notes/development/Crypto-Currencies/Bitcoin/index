
Bitcoin: an electronic peer to peer version of money. Bitcoins can be sent from buyer to seller
without the overhead of financial institutions.

It also solves the problem of *double spending* without using a »man in the middle« (such as a financial institution).

Bitcoin is based on ~cryptographic proof~ rather than ~trust~.

Bitcoin has three main components:
  • P2P among → development/Crypto-Currencies/Bitcoin/clients[clients]
  • The distributed consensus
  • The selection of the → development/Crypto-Currencies/Bitcoin/node responsible for creating the next → development/Crypto-Currencies/Bitcoin/block

Because bitcoin is decentralized and has no government, (central-!) bank or company regulating it, there is
nobody than can prevent the payment to anyone nor does anyone need someone's permission to send
→ development/Crypto-Currencies/Bitcoin/coin[bitcoins]. This is a good thing.

{ Fundamental Principles

  There will never be more than 21 million → development/Crypto-Currencies/Bitcoin/coin[bitcoins].

  No organization (such as governments!) must be able to reject (censor?) valid txs from being confirmed or
  to prevent someone to use the network (be it as user, node, miner etc.) 

  Source code is → development/open-source.

  No one should have to identify himself with his/her name when using bitcoin.

  No bitcoins are special, rather, they're all equal.

  Confirmed → development/Crypto-Currencies/Bitcoin/block[blocks] cannot be changed. The history
  of the → development/Crypto-Currencies/Bitcoin/blockchain cannot be changed, either.

}

{ Achieving decentralization

  The following five questions need to be addressed:
    • Who maintains the ledger of transactions (→ development/Crypto-Currencies/Bitcoin/blockchain)?
    • Who has authority over which → development/Crypto-Currencies/Bitcoin/transactions are valid?
    • Who creates new → development/Crypto-Currencies/Bitcoin/coin[Bitcoins]?
    • Who determines how the rules of the system change?
    • How do bitcoins acquire exchange value?

  See Narayanan, Bonneau, Felten, Miller, Goldfeder: *Bitcoin and Cryptocurrency Techologies*, p. 52.

}

{ Proving the ownership of a bitcoin

  The bitcoin technology allows someone to prove he *is* actually in possession of a specific bitcoin.
  
  In order to do that, they have to send their public → development/Crypto-Currencies/Bitcoin/address[address], signed
  with their private key.

  If this message can be decoded, the ownership of their → development/Crypto-Currencies/Bitcoin/account is proven. Then
  it's possible to check the balance and the → development/Crypto-Currencies/Bitcoin/transactions[transaction] history.
}
{ Upgrading the Bitcoin network

  There are four ways to upgrade the Bitcoin network (for example to handle more transactions, improve scalability etc.):
    • minor activated hard → development/Crypto-Currencies/Bitcoin/fork
    • minor activated soft fork
    • user activated hard fork
    • user activated soft fork (UASF)

}
{ Misc

  { No encryption

    Although called a → development/Crypto-Currencies[crypto currency], there is no encryption in Bitcoin: nothing needs to be encrypted.

  }

  { Historic snippets

    The earliest ideas of applying cryptography to cash came from David Chaum in 1983.
    
    1988, along with Fiat and Naor, proposed *offline* electronic cash.

    A paper by Okamoto and Ohta describe *Merkle trees* to subdivide coins.

    Nakamoto started programming on Bitcoin around May 2007.
    -
    In 2008, he published → https://bitcoin.org/bitcoin.pdf[Bitcoin: A Peer-to-Peer Electronic Cash System]

    Nakamoto's last known signal was recorded April 23, 2011 when in an eMail to Mike Hearn he wrote
    → https://www.bitcoin.com/satoshi-archive/emails/mike-hearn/16/[I've moved on to other things].

    Compare *Printeton bitcoin book*, p. 9 ff

  }

  { Bitcoin systems/networks

    The ~main network~ is where people trade goods and servces. Default port: 8333. Network id: *main*.

    The ~public test network~. It is reset from time to time. Default port: 18333. Network id: *test*.
    Bitcoins for testing (faucets) can be acquired from → http://tpfaucet.appspot.com or
    → https://testnet.coinfaucet.eu/en/

    The ~regression test (network)~. It is not public with a minimum
    diffuclty. Default port: 18444. Network id: *regtest*.

  }

  { Mempool («Memory pool»)

    A mempool is the queue of pending and unconfirmed transactions of a given node on the network

    Because every node maintains its own mempool, there is no global mempool.

  }

  { Bitcoin Improval Proposal (BIP)

    BIPs are Bitcoin Improval Proposals.

    A BIP is a design document
      • providing information to the Bitcoin community, or
      • describing a new feature for Bitcoin or its processes or environment.

    BIPs are used to
      • propose new features,
      • collect community input on an issue
      • document design decisions that have gone into Bitcoin

    There are three kinds of BIP:
      • Standards Track BIP
      • Informational BIP
      • Process BIP (like Standards Track BIPs but apply to areas other than the Bitcoin protocol itself)

    The typical path through the various states («status field») of a BIP (Draft, Proposed, Final/Active, Deferred, Rejected, Withdrawn, Replaced, Obsolete) is outlined in
    → https://github.com/bitcoin/bips/blob/master/bip-0002/process.png[BIP 2].

    A BIP is *formally accepted* if its status is *Final* or *Active*.

    BIPs are maintained as text files in a versioned repository (which I believe to be → https://github.com/bitcoin/bips[github.com/bitcoin/bips]) , thus, their revision history is the historical record of the feature proposal.

    Intersting, IMHO, BIPs include
    table { ll
      BIP 64 ☰ Bitcoin XT fork?
      BIP 101 ☰ Increase of the block size
      BIP 141 ☰ Segregated Witness (Consensus layer)
    table }

    Compare BIPs with bLIPs.

  }

  { Lightning 
  
   *Lightning* is a protocol for making fast payments with Bitcoin using a network of channels.

    { Basis of Lightning Technology (BOLT)

      The *Basis of Lightning Technology* → https://github.com/lightning/bolts[(BOLT) documents] describe a layer-2 protocol for off-chain bitcoin transfer by mutual cooperation, relying on on-chain transactions for enforcement if necessary.

    }
    { Bitcoin Lightning Improvement Proposal (bLIP)

      A → https://github.com/lightning/blips[bLIP] is a design document providing information to the Lightning community, or describing a new feature for the Lightning Network.

      Compare bLIPs with BIPs.

    }
    { Misc

     The format for a Lightning invoice → https://github.com/lightning/bolts/blob/c41536829c1461fe5109183ce8a7f88f5c81348b/11-payment-encoding.md?plain=1#L21C1-L23C53[uses bech32 encoding], which is already used for Bitcoin Segregated Witness. 

    }

  }
  { bitcoin.info REST API

    Some examples for the → https://www.blockchain.com/explorer/api/blockchain_api[Blockchain Data API] offered by blockchain.com (via blockchain.info?).

    Downloading the information for a block with the `bitcoin.info` REST API because the JSON file is rather large (approx 7 MB): 
code {
$ curl -s https://blockchain.info/rawblock/875049 -o /tmp/bitcoin-block-875049.json
code }

    Extract some information pertaining to the block
code {
$ → development/languages/JavaScript/JSON/tools/jq → development/languages/JavaScript/JSON/tools/jq/options/r-raw-output[-r]  '
  ["Block index"   , .block_index ],
  ["Height"        , .height],
  ["Size"          , .size],
  ["Time"          , (.time | todateiso8601)],
  ["Version"       , .ver],                     # seems to be a flag field
  ["Weight"        , .weight],
  ["Fee"           , .fee],
  ["hash"          , .hash],
  ["Nonce"         , .nonce],
  ["Main chain"    , .main_chain],
  ["Merkle root"   , .mrkl_root],
  ["nof Trx"       , .n_tx],
  ["Next block[0]" , .next_block[0]],
  ["Prev block"    , .prev_block] |
     @tsv' \
     /tmp/bitcoin-block-875049.json   |
  → Linux/shell/commands/column -ts $'\t'

Block index    875049
Height         875049
Size           1542584
Time           2024-12-16T19:45:11Z
Version        1073676288
Weight         3993407
Fee            10052973
hash           0000000000000000000256360f807b002c9a993db921212a9700c5805f30ca82
nonce          847395996
main chain     true
merkle root    f6ea21c6e23ec74b65a079a97c283a9f96daffc7734b84a05ffddde303f5f588
nof trx        3822
next block[0]  000000000000000000023703272844fe1d2b713deaf69d8f5fa97835fb079e0e
prev block     0000000000000000000185d0f248f6aefecf5ae2acc0a12398eed5f76f8b79e4
code }

    The *version* is a bit field:
code {
$ printf "%x\n" 1073676288
3fff0000
code }

    Display the block's first transaction:
code {
$ jq -r  '.tx[0]' /tmp/bitcoin-block-875049.json
…
code }

    Show an address's balance:
code {
$ curl -s https://blockchain.info/balance?active=33TbzA5AMiTKUCmeVEdsnTj3GiVXuavCAH | jq
{
  "33TbzA5AMiTKUCmeVEdsnTj3GiVXuavCAH": {
    "final_balance": 640863808,
    "n_tx": 2179,
    "total_received": 728660071967
  }
}
code }

    Unspent outputs:
code {
$ curl -s https://blockchain.info/unspent?active=33TbzA5AMiTKUCmeVEdsnTj3GiVXuavCAH | jq
code }

    Unconfirmed transactions
code {
$ curl -s https://blockchain.info/unconfirmed-transactions?format=json | jq
code }

  }

}


links:

  Searching for → development/Crypto-Currencies/Bitcoin/block[blocks], → development/Crypto-Currencies/Bitcoin/address[addresses] and
  → development/Crypto-Currencies/Bitcoin/transactions[transactions]: → https://bitcoinchain.com/[bitcoinchain.com].

  → https://coin.dance/

{ TODO

  → https://glacierprotocol.org/

  Stevens et al: → https://eprint.iacr.org/2016/757.pdf[Redactable Blockchain -or- Rewriting History in Bitcoin and Friends]

}

sa:
  → development/Crypto-Currencies/Bitcoin/account,
  → development/Crypto-Currencies/Bitcoin/address,
  → development/Crypto-Currencies/Bitcoin/blockchain,
  → development/Crypto-Currencies/Bitcoin/block,
  → development/Crypto-Currencies/Bitcoin/buying,
  → development/Crypto-Currencies/Bitcoin/clients[clients],
  → development/Crypto-Currencies/Bitcoin/consensus-rules,
  → development/Crypto-Currencies/Bitcoin/coin,
  → development/Crypto-Currencies/Bitcoin/fork,
  → development/Crypto-Currencies/Bitcoin/mining,
  → development/Crypto-Currencies/Bitcoin/node,
  → development/Crypto-Currencies/Bitcoin/nonce,
  → development/Crypto-Currencies/Bitcoin/Proof-of-Work,
  → development/Crypto-Currencies/Bitcoin/script[scripting language],
  → development/Crypto-Currencies/Bitcoin/Timestamp-Server,
  → development/Crypto-Currencies/Bitcoin/transactions,
  → development/Crypto-Currencies/Bitcoin/wallet

  → development/Crypto-Currencies

  → development/Crypto-Currencies/Bitcoin/Switzerland



rem {

Bitcoin in Switzerland:
  • https://www.bitcoinsuisse.ch/ (Founder: Niklas Nikolajsen, Partner: Johannes Schweifer)
  • Bitcoin Association Switzerland (Board member: Luzius Meisser)
  • → https://melonport.com[Melonport] builds Melon, a blockchain=-based asset management protocol. (VR: Mona Elisa, Reto Trinkler)
  • Stefan Thomas, a Swiss coder and active community member
  • R3: 50 companies (with CS and UBS) are experimenting with smart contracts.

rem }
