$ Connect to SQL Server with Oracle's SQL Developer

→ development/Software/Oracle-SQL-Developer[SQL Developer] can be used to connect to → development/databases/SQL-Server[MS SQL Server] if → https://sourceforge.net/projects/jtds/files/jtds/1.3.1/[jTDS] (TDS =
→ https://en.wikipedia.org/wiki/Tabular_Data_Stream[Tabular Data Stream]) is installed. Such an installation requires the following steps:
  • Download *jTDS* from → https://sourceforge.net/projects/jtds/files/jtds/1.3.1[SourceForge, version 1.3.1] or → https://github.com/milesibastos/jTDS/releases[github, current version 1.3.3])
  • Unzip the downloaded → development/archive-files/zip[ZIP file]
  • Copy the `jtds-1.3.x.jar` to a «safe» location.

Then, in SQL Developer, this jar file needs to be pointed at in menu
→ development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Third-Party-JDBC-Drivers[Tools -> Preferences -> Database -> Third Party JDBC Driver].
-
Probably, SQL Developer should be restarted now.
-
Note: the dialog displays the .jar file as a folder rather than a file.

Update *2020-11-11*: I have written a → Windows/PowerShell script that is supposed to automate these steps: → #install-jTDS-ps1[`install-jTDS.ps1`].

The connection dialog box now comes with the possibility to choose SQL Server as database to connect to:
gh|about-SQL-Developer|/SQL-Server/img/connect.png||

In order to connect to my local SQL Server 2017 (developer edition), I had to change the default port of 1433 to 1434. I determined the port with
code {
use → development/databases/SQL-Server/administration/system-databases/master[master];
go

xp_readerrorlog 0, 1, N'Server is listening on';
go
code }

{ Specifying an instance and database name

  The name of the instance needs to be stated in the *port* field(!): `1433;instance=INSTNAME`.

  In the same vein, the database name to connect to can (also in the port field) be specified with `…;databaseName=DBNAME`.

  See also → https://dba.stackexchange.com/a/149561/515[this dba.stackechange.com answer].

}
{ Using Windows Authentication (SSO Failed: Native SSPI library not loaded)

  In order to be able to use → Windows/security/authentication[Windows authentication],
  I also had to copy the file `x64\SSO\ntlmauth.dll` (which implements the → https://docs.microsoft.com/en-us/windows/win32/secauthn/sspi[Security SupportProvider Interface (SSPI)] and is
  also found in the jtds zip file) to the directory `jre\bin` under the root directory of the JDK used.
  -
 (Without that → Windows/development/Portable-Executable/DLL, the error message *Status: Failure -Test failed: I/O Error: SSO Failed: Native SSPI library not loaded* was thrown.)

  When connecting, the username-password requires a username. With Windows authentication, such a username is technically not necessary. I was able to proceed with the connection by
  just entering a space into the username field.

  { Circumenventing the entering of a blank username

    ~Dennis Laliberte~ notified me that is is possible to circumvent the entering of a space by following these steps in the SQL Developer connection properties:
      • Uncheck *Use Windows Authentication*
      • Check *Use Default Password*
      • Check *Use Windows Authentication*

  }

}
{ begin transaction / rollback

  When trying to enter `begin transaction`, *SQL Developer* seems to recognize `begin` as a → development/databases/Oracle/PL-SQL[PL/SQL] keyword and the error
 *Incorrect syntax near the keyword 'begin'* is thrown.
  
  I was able to start a transaction by prepending the `begin` and `rollback` with a semicolon like so:
code {
; begin transaction;

update tab …

; rollback;
code }

}
{ PowerShell script to install jTDS #install-jTDS-ps1

  This → Windows/PowerShell script tries to download `jTDS.jar` and install it so that it can be used in SQL Developer.

 *Note*: I didn't thoroughly test the script, so *use at your own risk!*

  gh|about-SQL-Developer|/SQL-Server/install-jTDS.ps1||

}
