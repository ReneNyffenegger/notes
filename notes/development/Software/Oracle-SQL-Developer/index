$ Oracle SQL Developer

{ Main functionality

  SQL Developer has four core areas where it aims to help the user
    • Development (create, browse and edit → development/databases/Oracle/objects[objects], run → development/databases/Oracle/SQL[SQL statements], debug → development/databases/Oracle/PL-SQL[PL/SQL execution])
    • Database administration (Utilities such as DB Diff, DB Copy, graphical user interface for RMAN, Data Pump, Real Time SQL Monitoring, Explain Plan, Autotrace)
    • Modelling
    • Migration (SQL Developer supports migration of IBM DB2 UDB LUW, → development/databases/SQL-Server[SQL Server], Sybase Adaptive Server, → Companies-Products/Teradata)

  The → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet is the place where → development/databases/Oracle/SQL[SQL], → development/databases/Oracle/PL-SQL and → development/databases/Oracle/SQL-Plus statements can be entered and executed.

}

{ Installing

  An Oracle account is required to download and/or install SQL Developer.

  { Windows

    The downloaded → development/archive-files/zip does not contain an installer. Thus, it can be extracted to the desired location.

    It is possible to install SQL Developer with → Windows/Chocolatey. The Oracle account name and password need to be passed with the `-params` argument. In order to remember name and password for future
    upgrades, `… feature enable -n=useRememberedArgumentsForUpgrade` might be executed first:
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] feature  enable -n=useRememberedArgumentsForUpgrades
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y oracle-sql-developer --params "/Username:whoAmI /Password:andWhatIsMyPassword"
code }

    Strangely, when installing SQL developer with chocolatey, the executable was found under
   `→ Windows/dirs/ProgramData/chocolatey/bin[C:\ProgramData\chocolatey\bin]\sqldeveloper.exe`. Not sure if this is expected?

  }
  { Debian 11

    In Debian 11, I was able to install SQL Developer as follows.

    From the → https://www.oracle.com/database/sqldeveloper/technologies/download/[download page], I downloaded *Other Platforms* (i. e. *not* the RPM version),
    -
    and executed this simple script:
code {
zipfile=$(ls -1 ~/Downloads/sqldeveloper*no-jre.zip | tail -1)
if [[ ! -f $zipfile ]]; then
   echo no zip file found
   exit 1
fi

destdir=~/bin
if [[ ! -d $destdir ]]; then
   echo creating directory $destdir
   mkdir -p $destdir
fi

echo unzipping $zipfile to $destdir
unzip -d $destdir $zipfile
code }

    SQL Developer can then be started with
code {
$ ~/bin/sqldeveloper/sqldeveloper.sh &
code }

    I got this message/error:
code {
Found /usr/lib/jvm/java-11-openjdk-amd64 to run this product, and the major version of this Java is 11.
The mandatory minimum major version to run this product is 17.
This product cannot run with this Java.
code }

    Indeed:
code {
$ java --version | head -1
openjdk 11.0.25 2024-10-15
code }

    So…
code {
$ sudo → Linux/package-managers/APT/commands/apt/install openjdk-17-jdk
$ java --version | head -1
openjdk 17.0.13 2024-10-15
code }

  }

}
{ No Oracle Home required

  SQL Developer connects to a → development/databases[database] through the *JDBC thin driver*. Thus, no → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n[Oracle Home] is required.

  In fact, because SQL Developer uses JDBC thin driver, it is also possible to connect to
  → development/Software/Oracle-SQL-Developer/connect-to-MySQL[MySQL] and → development/Software/Oracle-SQL-Developer/connect-to-SQL-Server[SQL Server] from SQL Developer.

}
{ Command line

? The functionality of SQL Developer is also available on the command line through → development/databases/Oracle/SQLcl[SQLcl].

}
{ Startup arguments

  table { ll
    `--verbose` ☰ Show JNI options and verbose progress of launcher (this option deprecates `-verbose`
    `-client` ☰ Use Client as the Java VM
    `-server` ☰ Use Hotspot Server as the Java VM
    `--<directive>=<value>` ☰ Override a directive from the configuration file
    `-J<flag>` ☰ Pass `<flag>` directory to the runtime system
    `-conf[igure] <file.conf>` ☰ Use the specified configuration file
    `-multi` ☰ Start a new instance
    `-migrate` ☰ Migrate user settings from a previous installation
  table }

}
{ Code templates

  German: »Codevorlagen«

  A *code template* is textual abbreviation for a predefined text snippet (the template). This abbreviation is epxanded with `ctrl+space`.

  Code templates can be entered under the menu
  → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/SQL-Editor-Code-Templates[Tools -> Preferences -> Database -> SQL Editor Code Templates].

  Apparently, these code templates are stored (in Windows) under `"%appdata%\SQL Developer\CodeTemplate.xml"`.

}
{ Some keyboard shortcuts #sql-developer-keyboard-shortcuts

  table { ll

    `ctrl+enter` ☰  executes the (one) → development/databases/SQL/statement[statement] under or «behind» the cursor.
    `F5` ☰ on the other hand runs all statements in the worksheet.
    `ctrl+space` ☰ expands column names
    `shift+alt+F8` ☰  enters → https://www.thatjeffsmith.com/archive/2019/06/hide-or-full-screen-query-results/[splitter moving mode]. When in this mode, `home` shows the entire SQL-panel and hides the query output, `end` does the opposite, and the `up/down` arrows move the splitter between these panes.
    `alt+pageDown` / `alt+pageUp` ☰ cycles through tabs
    `ctrl+up/down arrow` ☰ replaces the content of the → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet with SQL statements from the *SQL history*.
    `ctrl+shift+n` ☰ creates an *unshared* (that is: dedicated) → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet[worksheet].
    `ctrl+shift+enter` ☰ is supposed to show only the editor (but does not work on my installation)
    `ctrl+F7` ☰ Format text of → development/databases/Oracle/SQL/statement. See also → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Code-Editor/Format/Advanced-Format[Tools -> Preferences -> Code Editor -> Format -> Advanced Format]


  table }

   Keyboard shortcuts can be configured under → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Shortcut-Keys[Tools -> Preferences -> Shortcut Keys] and
   seem to be stored  under the → development/Software/Oracle-SQL-Developer/directories/user-information[user information directory] in the file
   → development/Software/Oracle-SQL-Developer/directories/user-information/systemV_W_X_Y_Z/ide-extension-prefs_xml[`SystemV.W.X.Y.Z/o.ide.x.x.x.x.x.x/settings.xml`].

}
{ Configuring SQL Developer

  { Specify startup SQL script

    It is possible to have SQL Developer run an SQL script when it is started up.

    The location of the startup script is configured in the menu under
    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database#sql-dev-filename-for-startup-script[Tools -> Preferences -> Database: Filename for connection startup script].

  }

  { Enabling dbms_output #sql-developer-turn-on-dbms_output

  Apparently, SQL Developer does not print the output of → development/databases/Oracle/installed/packages/dbms/output/index[`dbms_output`] by default.
  It can be turned on as follows:
    • Menu → development/Software/Oracle-SQL-Developer/GUI/menu/View/Dbms-Output[View -> Dbms Output] (german: *Ansicht -> DBMS-Ausgabe*).
    • This opens »dbms_output panel«.
    • Click green plus sign (or ctrl+n).
    • Optionally change *buffer size* (to »unlimited«, german: »unbegrenzt«).

  { Enabling dbms_output by default

    It's possible to enble `dbms_output` by default by putting the following line in the SQL Developer startup script:
code {
set serveroutput on
code }


    }
  }
  { Turn auto commit off

    Turning off autocommit apparently is an advanced feature:
    -
    Preferences -> Database -> Advanced, check box *Autocommit*

  }
  { Open unshared worksheet

    Use `ctrl` + `shift` + `n` to open an *unshared worksheet*.

    With an unshared worksheet, SQL statements run in the background (the SQL connection is »unshared«), so multiple SQL statements
    can be run in parallel.

    Alternatively, → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet[Tools > Preferences > Database > Worksheet] and then checking *New Worksheet to use unshared connction* allows to execute
    multiple queries at the same time by default.
    -
    German: Extras -> Voreinstellungen -> Datenbank -> Arbeitsblatt: *Neues Arbeitsblatt mit eigener Verbindung*

  }
  { Set line terminator

    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Environment[Tools -> Preferences -> Environment], set *Line Terminator*.

  }
  { Specify default location to look for SQL scripts

    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet[Tools -> Preferences -> Database -> Worksheet],
    option *Select default path to look for scripts*.

  }
  { Date format for SQL results

    The date format (especially important for for → development/databases/Oracle/SQL/select[select statement] results) and other NLS settings can be changed under the
    menu → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/NLS[Tools -> Preferences -> Database -> NLS].

  }
  { Don't display (null) for null valus

    Suppress the explicit writing of `(null)` in the query result window for `null` values:
    -
    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Advanced[Tools -> Preferences -> Database -> Advanced] -> *Display Null Value As …*

   (Apparently, that is an «advanced» setting…)

  }
  { Run multiple queries in parallel

    In order to be able to run multiple queries at the same time, the option
    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet#sql-dev-new-worksheet-unshared-connection[New Worksheet to use unshared connection], found under
    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet[Tools -> Preferences -> Database -> Worksheet], must be enabled.

  }
  { Define word boundaries

    Untick *Use Change of Case As Word Boundary* under → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Code-Editor[Tools -> Preferences -> Code Editor] so that `ctrl+arrowKey` or `shift+backspace` jumps over or deletes an entire word (as
    opposed to stopping at an underscore).

  }
  { Only 5,000 rows currently supported in a script results

    When executing a script with F5, by default at most 5000 records are printed to the result pane.

    This default can be changed under: *Tools -> Preferences -> Database -> Worksheet -> Max rows to print in a script*.

  }
  { Encoding

    Tools -> Preferences -> Environment: encoding box
    -
    German: Extras -> Voreinstellungen -> Umgebung

    For exports: Tools -> Preferences -> Database -> Utilities -> Export

  }
  { Better support to cancel queries

    Menu → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Advanced[Tools -> Preferences -> Database (tree on the left) -> Advanced] -> check *Use OCI/Thick driver*.
   (Apparently, *Use Oracle-Client* needs to be checked, too).

  }
  { Appearance

     ? The appearance of SQL Developer can be configured under the *Environment* preferences (Look and Feel).

   }

}
{ F5 vs F9 #sql-developer-f5-vs-f9

  In order to use → development/databases/Oracle/SQL-Plus[SQL*Plus] features (such as → development/databases/Oracle/SQL-Plus/new_value), a script must
  be executed with `F5` rather than `F9`.

}
{ Column order

  Apparently, an executed select statement stores the column order. This stored order is not reset after re-creating a table. In order to take the order of the
  table, a right click on the result's colum headers and choosing *delete persisted settings* is needed.

  → https://www.thatjeffsmith.com/[That Jeff Smith] has more to say on that in → https://www.thatjeffsmith.com/archive/2013/10/sql-developer-quick-tip-reordering-columns[Reordering Columns].

}
{ Snippets

  Menu: → development/Software/Oracle-SQL-Developer/GUI/menu/View/Snippets[View -> Snippets]

  Then drag the snippets to the → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet[SQL worksheet] as needed.

}
{ Adminstering Oracle REST Data Services

  ? Apparently, it's possible to adminster → development/databases/Oracle/REST-Data-Services with SQL Developer by enabling it with someting like
code {
java -jar → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/ords/ords_war[ords.war] user adminlistener "Listener Administrator"
code }

}
{ SQLDEV:GAUGE

code {
with params as (
   select
           0 min_ ,
         100 max_ ,
          33 low_ ,
          67 high_
    from dual
),
val as (
  select  80 ue from dual union all
  select  11 ue from dual union all
  select  42 ud from dual union all
  select  98 ue from dual union all
  select  27 ue from dual
)
select
  'SQLDEV:GAUGE:'  ||
    p.min_  || ':' ||
    p.max_  || ':' ||
    p.low_  || ':' ||
    p.high_ || ':' ||
    val.ue                 "Column name for a wide output."
from
  params p cross join
  val    val;
code }

code {
create table tq84_sqldev_gauge (
  vc varchar2(10),
  num number
);

insert into tq84_sqldev_gauge values('ABC',  66);
insert into tq84_sqldev_gauge values('DEF',  42);
insert into tq84_sqldev_gauge values('GHI',  17);
insert into tq84_sqldev_gauge values('JKL', 100);
insert into tq84_sqldev_gauge values('MNO',  24);

select
  vc,
  'SQLDEV:GAUGE:0:101:33:67:' || num
from
  tq84_sqldev_gauge
order by
  vc;
code }

}
{ User preference settings

  In Windows, the user preference settings are stored under → Windows/dirs/Users/username/AppData/Roaming/sqldeveloper/v_v_v.
  -
 *2020-10-02*: it seems that this location has changed to `→ Windows/dirs/Users/username/AppData/Roaming[%APPDATA%]\SQL Developer\systemV.W.X.Y.Z\o.sqldeveloper` and that preferences, such
  as the NLS date format are stored in the file → development/Software/Oracle-SQL-Developer/directories/user-information/systemV_W_X_Y_Z/o_sqldeveloper/product-preferences_xml[`product-preferences.xml`].

}
{ Exporting data

  { Excel #sql-developer-export-excel

    SQL Developer allows to export → development/Data to → Microsoft/Office/Excel:
      • Right click on any cell in an SQL's result set, then choose *export*
      • Export wizard opens
      • Choose “excel 2003+ (xlsx)” in “Format” (note, this is *above* the default of insert, and thus very confusing when trying to find it!)
      • Specify destination file in «File»
      • Click *Next*
      • Click *Finish*

  }
  { Various text based formats

    So-called *worksheet hints* allow to export the result of a `→ development/databases/Oracle/SQL/select` statement to be exported in various text based formats.
    -
    For example, using `/*insert*/` creates `→ development/databases/Oracle/SQL/DML/insert` statements:
code {
select /*insert*/ col_1, col_2, col_3 from xyz;
code }

    Statements using worksheet hints must be executed with `F5`.

    Worksheet hints can be specified anywhere in a statement:
code {
select col_1, col_2, col_3 /*insert*/ from xyz;
code }

    The list of worksheet hints is:
    table { ll
       `/*ansiconsole*/` ☰ → development/databases/Oracle/SQLcl only?
       `/*csv*/` ☰ → development/Data/exchange/formats/CSV[Comma-separated values] (same as `/*delimited*/`)
       `/*fixed*/` ☰ Fixed-width fields with trailing blanks (When testing it, SQL Developer chose an arbitrary width, thus the result was not fixed-width)
       `/*html*/` ☰ Export as HTML (`<table><tr><td>…</td>…</table>`)
       `/*insert*/` ☰ Insert statements
       `/*json*/` ☰ → development/languages/JavaScript/JSON
       `/*loader*/` ☰ Pipe (not column) separated. Apparently suitable for → development/databases/Oracle/tools/sql-loader
       `/*text*/` ☰
       `/*xml*/` ☰ → development/XML (similar to HTML)
    table }

  }

}
{ Playing sound when statement or script is done

  On windows, it is possible to use the → Windows/development/COM/Useful-object-libraries/Microsoft-Speech[Speech Object Library] to get notified when an
  SQL statement or SQL script is done executing.

code {
begin
   → development/databases/Oracle/installed/packages/dbms/lock/sleep[dbms_lock.sleep](10);
end;
/

host powershell -noProfile -c $sapi = → Windows/PowerShell/command-inventory/noun/object/new -com sapi.spVoice; → Windows/PowerShell/language/variable/automatic/null = $sapi.speak('The script has finished')
code }

}
{ Starting SQL Developer results in error: disable modules and continue

  If Starting SQL Developer results in the error message *disable modules and continue*, the `system_cache` directory needs to be removed.

  The directory can be removed with the `→ Windows/PowerShell/modules/personal/SQL-Developer/remove-SQLDeveloperSystemCache` Powershell cmdLet.

}
{ TODO

  { Showing table information

code {
info+ TABLE_NAME
code }

  }
  { Generate DB Documentation

    The «right-click» menu on a Connection has a «Generate DB Doc…» sub-menu which creates some documentation in HTML format.

    Although this feature seems very nifty, the documentation
    is generated with HTML-Frames which don't seem to be supported by → development/web/browser/Chrome anymore.

  }
  { Performance improvements

    Apparently, performance can be improved by unchecking unneeded features under → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Features[Tools -> Features].

  }
  { Executing JavaScript #sql-dev-exec-js

    JavaScript can be executed in the ~Arbori Editor~.

    In order to open this *Arbori Editor*, *Code Outline* must be opened first, which is possible by using the (right-click)
    → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet#sql-dev-worksheet-ctx-menu[context menu] in the
    → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet.
    -
    After opening *Code Outline*, the word *Arbori* must be typed into the text box at the top of Code Outline. This opens the Arbori Editor.

    The following demonstration JavaScript code can then be pasted into the Arbori Editor and executed:
code {
include "std.arbori"

prelude: runOnce -> {

    print("Hello");

    var ConnectionResolver = Java.type('oracle.dbtools.db.ConnectionResolver');
    var connectionList     = ConnectionResolver.getConnectionNames();

    for (var i in connectionList ) {
       print(connectionList[i]);
    }

//  Connection conn = (Connection) DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:ORA19", "rene", "rene");
    var conn = ConnectionResolver.getConnection('IdeConnections%23Ora19');

    if (conn == null) {
       print("conn == null");
    }
    else {

        var stmt = conn.createStatement();
        var rs = stmt.executeQuery("select object_name, created from user_objects");
        while( rs.next() ) {
            print(rs.getString(1) + ": " + rs.getString(2));
        }
    }
}
code }

    In order to see the output in Windows, the Console based executable of SQL Developer must be started, that is `<inst-dir>\sqldeveloper\bin\sqldeveloper64.exe`, not
    `…sqldeveloper64W.exe` or `…\sqldeveloper.exe`.

    Also note that it seems that the current(?) SQL Worksheet needs to contain at least one character.

  }

}

sa:
  → development/Software/Oracle-SQL-Developer/connect-to-SQL-Server[Connect to SQL Server] and
  → development/Software/Oracle-SQL-Developer/connect-to-MySQL[MySQL] with SQL Developer.

  → development/Software/Oracle-SQL-Developer/Password-decryptor

  → Windows/dirs/Users/username/AppData/Roaming/sqldeveloper/v_v_v

  → development/Software/Oracle-SQL-Developer/directories/installation/sqldeveloper/bin/sdcli[sdcli] is the *SQL Developer Command Line Interface*

  → development/databases/Oracle/SQLcl#sqlcl-sqldev-select-hints[SQL select hints] cause a result set to be returned in a specific format such as
  → development/languages/JavaScript/objects/JSON[JSON], → development/XML or → development/Data/exchange/formats/CSV[CSV].

  The → Windows/PowerShell module → Windows/PowerShell/modules/personal/SQL-Developer[SQL Developer]

