$ Oracle SQL Developer
@ Oracle SQL developer

{ Main functionality

  SQL developer has four core areas where it aims to help the user
    • Development (create, browse and edit → development/databases/Oracle/objects[objects], run → development/databases/Oracle/SQL[SQL statements], debug → development/databases/Oracle/PL-SQL[PL/SQL execution])
    • Database administration (Utilities such as DB Diff, DB Copy, graphical user interface for RMAN, Data Pump, Real Time SQL Monitoring, Explain Plan, Autotrace)
    • Modelling
    • Migration (SQL Developer supports migration of IBM DB2 UDB LUW, → development/databases/SQL-Server[SQL Server], Sybase Adaptive Server, → Companies-Products/Teradata)

  The → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet is the place where → development/databases/Oracle/SQL[SQL], → development/databases/Oracle/PL-SQL and → development/databases/Oracle/SQL-Plus statements can be entered and executed.

}

{ Installing

  An Oracle account is required to download and/or install SQL developer.

  The downloaded → development/archive-files/zip does not contain an installer. Thus, it can be extracted to the desired location.

  It is possible to install SQL Developer with → Windows/Chocolatey. The Oracle account name and password need to be passed with the `-params` argument. In order to remember name and password for future
  upgrades, `… feature enable -n=useRememberedArgumentsForUpgrade` might be executed first:
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] feature  enable -n=useRememberedArgumentsForUpgrades
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y oracle-sql-developer --params "/Username:whoAmI /Password:andWhatIsMyPassword"
code }

}
{ No Oracle Home required

  SQL Developer connects to a → development/databases[database] through the *JDBC thin driver*. Thus, no → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n[Oracle Home] is required.

  In fact, because SQL Developer uses JDBC thin driver, it is also possible to connect to
  → development/Software/Oracle-SQL-Developer/connect-to-MySQL[MySQL] and → development/Software/Oracle-SQL-Developer/connect-to-SQL-Server[SQL Server] from SQL Developer.

}
{ Command line

? The functionality of SQL Developer is also available on the command line through → development/databases/Oracle/SQLcl[SQLcl].

}
{ Code templates

  German: »Codevorlagen«
  
  A *code template* is textual abbrevation for a predefined text snippet (the template). This abreviation is epxanded with `ctrl+space`.

  Code templates can be entered under the menu
  → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/SQL-Editor-Code-Templates[Tools -> Preferences -> Database -> SQL Editor Code Templates].
  
  
  Apparently, these code templates are stored (in Windows) under `"%appdata%\SQL Developer\CodeTemplate.xml"`.

}
{ Some keyboard shortcuts #sql-developer-keyboard-shortcuts

  table { ll

    `ctrl+enter` ☰  executes the (one) → development/databases/SQL/statement[statement] under or «behind» the cursor.
    `F5` ☰ on the other hand runs all statements in the worksheet.
    `ctrl+space` ☰ expands column names
    `shift+alt+F8` ☰  enters → https://www.thatjeffsmith.com/archive/2019/06/hide-or-full-screen-query-results/[splitter moving mode]. When in this mode, `home` shows the entire SQL-panel and hides the query output, `end` does the opposite, and the `up/down` arrows move the splitter between these panes.
    `alt+pageDown` / `alt+pageUp` ☰ cycles through tabs
    `ctrl+up/down arrow` ☰ replaces the content of the → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet with SQL statements from the *SQL history*.
    `ctrl+shift+n` ☰ creates an *unshared* (that is: dedicated) → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet[worksheet].
    `ctrl+shift+enter` ☰ is supposed to show only the editor (but does not work on my installation)

  table }

   Keyboard shortcuts can be configured under → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Shortcut-Keys[Tools -> Preferences -> Shortcut Keys] and
   seem to be stored  under the → development/Software/Oracle-SQL-Developer/directories/user-information[user information directory] in the file
   → development/Software/Oracle-SQL-Developer/directories/user-information/systemV_W_X_Y_Z/ide-extension-prefs_xml[`SystemV.W.X.Y.Z/o.ide.x.x.x.x.x.x/settings.xml`].

}
{ Configuring SQL developer

{ Enabling dbms_output #sql-developer-turn-on-dbms_output

  Apparently, SQL developer does not print the output of → development/databases/Oracle/installed/packages/dbms/output/index[`dbms_output`] by default.
  It can be turned on as follows:
    • Menu → development/Software/Oracle-SQL-Developer/GUI/menu/View/Dbms-Output[View -> Dbms Output] (german: *Ansicht -> DBMS-Ausgabe*).
    • This opens »dbms_output panel«.
    • Click green plus sign (or ctrl+n).
    • Optionally change *buffer size* (to »unlimited«, german: »unbegrenzt«).


}
{ Turn auto commit off

  Turning off autocommit apparently is an advanced feature:
  -
  Preferences -> Database -> Advanced, check box *Autocommit*

}
{ Open unshared worksheet

  Use `ctrl` + `shift` + `n` to open an *unshared worksheet*.

  With an unshared worksheet, SQL statements run in the background (the SQL connection is »unshared«), so multiple SQL statements
  can be run in parallel.

  Alternatively, → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet[Tools > Preferences > Database > Worksheet] and then checking *New Worksheet to use unshared connction* allows to execute
  multiple queries at the same time by default.
  -
  German: Extras -> Voreinstellungen -> Datenbank -> Arbeitsblatt: *Neues Arbeitsblatt mit eigener Verbindung*

}
  { Specify default location to look for SQL scripts

    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet[Tools -> Preferences -> Database -> Worksheet],
    option *Select default path to look for scripts*.

  }
  { Date format for SQL results

    The date format (especially important for for → development/databases/Oracle/SQL/select[select statement] results) and other NLS settings can be changed under the
    menu → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/NLS[Tools -> Preferences -> Database -> NLS].

  }
  { Don't display (null) for null valus

    Suppress the explicit writing of `(null)` in the query result window for `null` values:
    -
    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Advanced[Tools -> Preferences -> Database -> Advanced] -> *Display Null Value As …*

   (Apparently, that is an «advanced» setting…)

  }
  { Run multiple queries in parallel

    In order to be able to run multiple queries at the same time, the option
    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet#sql-dev-new-worksheet-unshared-connection[New Worksheet to use unshared connection], found under
    → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Worksheet[Tools -> Preferences -> Database -> Worksheet], must be enabled.

  }
  { Encoding

    Tools -> Preferences -> Environment: encoding box
    -
    German: Extras -> Voreinstellungen -> Umgebung

    For exports: Tools -> Preferences -> Database -> Utilities -> Export

  }
  { Better support to cancel queries

    Menu → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Preferences/Database/Advanced[Tools -> Preferences -> Database (tree on the left) -> Advanced] -> check *Use OCI/Thick driver*.
   (Apparently, *Use Oracle-Client* needs to be checked, too).

  }
  { Appearance

     ? The appearance of SQL Developer can be configured under the *Environment* preferences (Look and Feel).

   }

}
{ F5 vs F9 #sql-developer-f5-vs-f9

  In order to use → development/databases/Oracle/SQL-Plus[SQL*Plus] features (such as → development/databases/Oracle/SQL-Plus/new_value), a script must
  be executed with `F5` rather than `F9`.

}
{ Column order

  Apparently, an executed select statement stores the column order. This stored order is not reset after re-creating a table. In order to take the order of the
  table, a right click on the result's colum headers and choosing *delete persisted settings* is needed.

  → https://www.thatjeffsmith.com/[That Jeff Smith] has more to say on that in → https://www.thatjeffsmith.com/archive/2013/10/sql-developer-quick-tip-reordering-columns[Reordering Columns].

}
{ Snippets

  Menu: → development/Software/Oracle-SQL-Developer/GUI/menu/View/Snippets[View -> Snippets]
  
  Then drag the snippets to the → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet[SQL worksheet] as needed.

}
{ Adminstering Oracle REST Data Services

  ? Apparently, it's possible to adminster → development/databases/Oracle/REST-Data-Services with SQL Developer by enabling it with someting like
code {
java -jar → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/ords/ords_war[ords.war] user adminlistener "Listener Administrator"
code }

}
{ SQLDEV:GAUGE

code {
with params as (
   select
           0 min_ ,
         100 max_ ,
          33 low_ ,
          67 high_
    from dual
),
val as (
  select  80 ue from dual union all
  select  11 ue from dual union all
  select  42 ud from dual union all
  select  98 ue from dual union all
  select  27 ue from dual
)
select
  'SQLDEV:GAUGE:'  ||
    p.min_  || ':' ||
    p.max_  || ':' ||
    p.low_  || ':' ||
    p.high_ || ':' ||
    val.ue                 "Column name for a wide output."
from
  params p cross join
  val    val;
code }

code {
create table tq84_sqldev_gauge (
  vc varchar2(10),
  num number
);

insert into tq84_sqldev_gauge values('ABC',  66);
insert into tq84_sqldev_gauge values('DEF',  42);
insert into tq84_sqldev_gauge values('GHI',  17);
insert into tq84_sqldev_gauge values('JKL', 100);
insert into tq84_sqldev_gauge values('MNO',  24);

select
  vc,
  'SQLDEV:GAUGE:0:101:33:67:' || num 
from
  tq84_sqldev_gauge
order by
  vc;
code }

}
{ User preference settings

  In Windows, the user preference settings are stored under → Windows/dirs/Users/username/AppData/Roaming/sqldeveloper/v_v_v.
  -
 *2020-10-02*: it seems that this location has changed to `→ Windows/dirs/Users/username/AppData/Roaming[%APPDATA%]\SQL Developer\systemV.W.X.Y.Z\o.sqldeveloper` and that preferences, such
  as the NLS date format are stored in the file → development/Software/Oracle-SQL-Developer/directories/user-information/systemV_W_X_Y_Z/o_sqldeveloper/product-preferences_xml[`product-preferences.xml`].

}
{ Exporting data

  { Excel #sql-developer-export-excel

    SQL developer allows to export → development/Data to → Microsoft/Office/Excel:
       •   Right click on any cell in an SQL's result set, then choose *export*
       •   Export wizard opens
       •   Choose “excel 2003+ (xlsx)” in “Format” (note, this is *above* the default of insert, and thus very confusing when trying to find it!)
       •   Specify destination file in «File»
       •   Click *Next*
       •   Click *Finish*

  }

}
{ TODO

  { Performance improvements

    Apparently, performance can be improved by unchecking unneeded features under → development/Software/Oracle-SQL-Developer/GUI/menu/Tools/Features[Tools -> Features].

  }
  { Executing JavaScript #sql-dev-exec-js

    JavaScript can be executed in the ~Arbori Editor~.

    In order to open this *Arbori Editor*, *Code Outline* must be opened first, which is possible by using the (right-click)
    → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet#sql-dev-worksheet-ctx-menu[context menu] in the
    → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet.
    -
    After opening *Code Outline*, the word *Arbori* must be typed into the text box at the top of Code Outline. This opens the Arbori Editor.

    The following demonstration JavaScript code can then be pasted into the Arbori Editor and executed:
code {
include "std.arbori"

prelude: runOnce -> {

    print("Hello");

    var ConnectionResolver = Java.type('oracle.dbtools.db.ConnectionResolver');
    var connectionList     = ConnectionResolver.getConnectionNames();

    for (var i in connectionList ) {
       print(connectionList[i]);
    }

//  Connection conn = (Connection) DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:ORA19", "rene", "rene");
    var conn = ConnectionResolver.getConnection('IdeConnections%23Ora19');

    if (conn == null) {
       print("conn == null");
    }
    else {

        var stmt = conn.createStatement();
        var rs = stmt.executeQuery("select object_name, created from user_objects");
        while( rs.next() ) {
            print(rs.getString(1) + ": " + rs.getString(2));
        }
    }
}
code }

    In order to see the output in Windows, the Console based executable of SQL Developer must be started, that is `<inst-dir>\sqldeveloper\bin\sqldeveloper64.exe`, not
    `…sqldeveloper64W.exe` or `…\sqldeveloper.exe`.
    
    Also note that it seems that the current(?) SQL Worksheet needs to containt at least one character.

  }

}

sa:
  → development/Software/Oracle-SQL-Developer/connect-to-SQL-Server[Connect to SQL Server] and
  → development/Software/Oracle-SQL-Developer/connect-to-MySQL[MySQL] with SQL Developer.

  → development/Software/Oracle-SQL-Developer/Password-decryptor

  → Windows/dirs/Users/username/AppData/Roaming/sqldeveloper/v_v_v

  → development/Software/Oracle-SQL-Developer/directories/installation/sqldeveloper/bin/sdcli[sdcli] is the *SQL Developer Command Line Interface*

  → development/databases/Oracle/SQLcl#sqlcl-sqldev-select-hints[SQL select hints] cause a result set to be returned in a specific format such as
  → development/languages/JavaScript/objects/JSON[JSON], → development/XML or → development/Data/exchange/formats/CSV[CSV].

  The → Windows/PowerShell module → Windows/PowerShell/modules/personal/SQL-Developer[SQL Developer]

