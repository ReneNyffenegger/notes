$ Software Development Life Cycle

Aka: Software Development Process

Software is *developed* rather than *manufactured*. And it does not wear-out. It rather becomes obsolete.

SDLC: The entire life of a software (project).

SDLC is based on the *waterfall* model.

{ Phases

  • Identify current problems in collaboration with → development/Software-design/Project/stakeholders[stakeholders].
  • Planning: create »Software Requirement Specification« documents. Planning is more than just setting milestones.
  • Definition
  • Design: turn requirements into »Design Specification« documents.
  • Build
  • Test: determine gap between requirements and what was built.
  • Deploy
  • Maintain

  The SDLC is a *cycle* because after deployment or while mainting the software, the iteration starts again with identifying current problems.

  A phase is group of *activities*.
  -
  An activity is a group of *tasks*.
  -
  A task is the smallest piece of work.

}
{ (Quality-)gates

  After each phase, a gate needs to be passed in order to proceed to the next phase. (Waterfall model)

  The outcome of a gate is one of
    • go
    • conditional go
    • hold
    • recycle
    • kill

  This decision is typically reached by a manager, the → development/SDLC/roles#steering-committee[steering comittee] or a board.


}
{ Policies

  • Quality gates
  • controls
  • metrics
  • standards

}
{ Models

  • Waterfall Model: end of phase starts new phase (The original SDLC model).
  • V-Shaped: an extension of the waterafll model
  • → development/Software-design/methods/Agile[Agile] Modell: cycles
  • Iterative: iteration (rather than cycles)
  • Spiral Mode: similar to iterative model, but repetition rather than iterations
  • Big Bang Model: start with almost no requirements
  • Rapid Application Development (RAD)

}
{ Artifacts

  An → development/SDLC/Artifacts[artifact] is a tangible by-product needed for and produced by the SDLC.

  Artifacts that help describe the function, architecture and design of software:
    • Use cases
    • class diagrams
    • → development/UML[UML] models
    • ERD

  Artifacts that are used for the the process itself:
    • Project request form
    • Project evaluation form
    • Project charter
    • Project plan
    • Functional requirement document (FRD)
    • System Design document (SSD)
    • Master plan for testing and evaluation
    • Training plan
    • Maintenance manual
    • User/operator manual
    • Traning manual
    • Test analysis report
    • Implementation plan
    • Implementation report
    • Maintenance agreement

  There might also be
    • Glossary

}
{ Stakeholders

  • Directors/Management
  • Project Manager
  • Customers
  • → development/SDLC/roles#sdlc-role-sponsor[Sponsors]
  • Salespeople
  • → development/Software-design/Project/Business-analysis/Business-analyst: works closely with the subject matter expert.
  • Domain experts
  • Subject matter expert: understands the current business processes and any new requirements that are to be satisfied by the project. Works closely with the BA.
  • Designers
  • Solution architect: translates *requirements* into architecture.
  • Technical Architect
  • Programmers
  • DBA
  • Tester
  • Trainer
  • Security
  • Infrastructre


}
{ Requirement management

  Managing the requirements of a project is one of the hardest challenges.
    • Users have no idea what they want.
    • Communication of ideas among stakeholders is difficult (they tend to not understand each other)
    • Proposed changes are a constant source of frustration

  Thus, the *requirement management* deserves a special focus in SDLC.
  
  First and foremost, requirement management must be thoroghly planned (as should be every other task in software development).

  
  
}
{ 7 key factors to get successful results in IT projects

  
  According to → https://ac.els-cdn.com/S2212017312004537/1-s2.0-S2212017312004537-main.pdf?_tid=f04460a4-81e7-49d7-ac01-c1f4e910cc96&acdnat=1521801468_1f05599473116095540108f2e50d14c7[Germán Arias, et al],
  7 factors are key for a successful project:
    • Senior management support
    • Qualified → development/SDLC/roles#sdlc-role-pm[project managers]
    • Adequate planning
    • Involvment of key users
    • Requirement's management
    • Monitoring and controlling the execution of the project
    • Development team management


} 
{ Methods #sdlc-methods

  • Object oriented programming (OOP)
  • Aspect oriented programming (AOP)
  • Component oriented programming (CBP)
  • → development/Software-design/SOA[Service Oriented Architecture] (SOA)
  • Feature driven development (FDD)
  • Test driven development (TDD)
  • Kanban
  • Lean software development

}
{ Environments

  • …
  • UAT User acceptance testing
  • …

}
{ Tools

  • Sharing information: Confluence
  • Bug and tasks tracking, such as → development/SDLC/tools/JIRA
  • → development/version-control-systems[Version control systems], such as → development/version-control-systems/git/index[git], subversion etc.
  • Continuous integration/release management, such as *Bamboo*.

  { Open Services for Lifecycle Collaboration (OSLC)

    With OSLC specifications, tools understand each others' data and artifacts, such as requirements, defects, test cases, change history)
    
    This helps making better decisions by analyzing, tracking and exploring data.

  }

}
{ Coding Standards

  Rational: easier to fix problems.

  • Naming conventions

}
{ Solution Design #solution-design

  Any solution design has two aspects:
    • Data
    • Technology (Components: Service container, broker and process coordinator)

}
{ Successful development

  • User involvation and participation.
  • Establishment of phases and activities. (Needs discipline)
  • Establishment of standards for development and documentation (Needs discipline)
  • Divide and conquer
  • Planning
  • Management
  • Have a problem solving mind.

}
{ Relationship DevOps #sdlc-devops

  SDLC is concerned with the creation and writing of software.

  DevOps focuses on using the software.

  Buzzwords for DevOps are:
    • Continuous integration
    • Continuous deployment
    • Release management

}
{ Application Lifecycle Management (ALM) #application-lifecycle-management

  ALM covers everything from birth to death of a product:
    • SLDC (Thus, ALM is broader than the SDLC)
    • DevOps
    • Portfolio management
    • Service desk

}
{ Project integration

  Project integration is a process to make sure that all elements of a project work well together: tools, stakeholders, organizational units etc.

}

sa:
  → Microsoft/Azure/products/Pipelines
