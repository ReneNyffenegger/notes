$ Software Development Life Cycle

Aka: Software Development Process

{ Phases

  • Identify current problems in collaboration with stakeholders.
  • Planning: create »Software Requirement Specification« documents.
  • Definition
  • Design: turn requirements into »Design Specification« documents.
  • Build
  • Test: determine gap between requirements and what was built.
  • Deploy
  • Maintain

  The SDLC is a *cycle* because after deployment or while mainting the software, the iteration starts again with identifying current problems.

}

{ Models

  • Waterfall Model: end of phase starts new phase (The original SDLC model).
  • V-Shaped: an extension of the waterafll model
  • Agile Modell: cycles
  • Iterative: iteration (rather than cycles)
  • Spiral Mode: similar to iterative model, but repetition rther than iterations
  • Big Bang Model: start with almost no requirements
  • Rapid Application Development (RAD)

}
{ Artifacts

  An artifact is a tangible by-product needed for and produced by the SDLC.

  Artifacts that help describe the function, architecture and design of software:
    • Use cases
    • class diagrams
    • UML models
    • ERD

  Artifacts that are used for the the process itself:
    • Project request form
    • Project evaluation form
    • Project charter
    • Project plan
    • Functional requirement document (FRD)
    • System Design document (SSD)
    • Master plan for testing and evaluation
    • Training plan
    • Maintenance manual
    • User/operator manual
    • Traning manual
    • Test analysis report
    • Implementation plan
    • Implementation report
    • Maintenance agreement

  There might also be
    • Glossary

}
{ Stakeholders

  • Directors/Management
  • Project Manager
  • Customers
  • Sponsors
  • Salespeople
  • Business Analyst: works closely with the subject matter expert.
  • Domain experts
  • Subject matter expert: understands the current business processes and any new requirements that are to be satisfied by the project. Works closely with the BA.
  • Designers
  • Solution architect: translates *requirements* into architecture.
  • Technical Architect
  • Programmers
  • DBA
  • Tester
  • Trainer
  • Security
  • Infrastructre



}
{ Environments

  • …
  • UAT User acceptance testing
  • …

}
{ Tools

  • Sharing information: Confluence
  • Bug and tasks tracking, such as JIRA
  • → development/version-control-systems[Version control systems], such as→ development/version-control-systems/git/index[git], subversion etc.
  • Continous integration/release management, such as *Bamboo*.

}
{ Coding Standards

  Rational: easier to fix problems.

  • Naming conventions

}
{ Solution Design #solution-design

  Any solution design has two aspects:
    • Data
    • Technology (Components: Service container, broker and process coordinator)

}


{ TODO

  → development/Software-design/SOA (vs micro services)

  → development/SDLC/roles

  System Integration

  Martin Fowler: Enterprise Architecture

  Web Services (WSDL) / Microsofts implementation is WCF / Apache Thrift / OPC_UA
  
  → development/web/service/SOAP, → development/web/service/REST

  Interview questions and answers

  → misc/ISO/12207[ISO/IEC 12207] is a standard for software life-cycle processes.

  SRS = Software Requirement Specification

  DDS = Design Document Specifcation

  → https://sdlc.uconn.edu/artifact-list/

  → https://sdlc.uconn.edu/artifact-matrix/

  Unified Process

  GoF: Design Patterns

  C. Alexander: A Pattern Language



}
