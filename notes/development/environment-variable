$ environment variables

{ Accessing/reading environment variables

  ~Java~
  -
  In → development/languages/Java[Java], environment variables can be read with → https://github.com/ReneNyffenegger/JavaClasses/blob/master/java/lang/System/getenv.java[System.getenv()].

  ~Python~
code {
import → development/languages/Python/standard-library/os
→ development/languages/Python/built-in-functions/print[print](os.environ['VAR'])
code }

  ~Perl~
code {
print $ENV{VAR};
code }

  ~PowerShell~: the so called → Windows/PowerShell[PowerShell] allows to access an environment variable with the special → Windows/PowerShell/language/provider/env[`$env:…` provider/drive]: The following prints a → Windows/PowerShell/language/provider/env[user's]
  → Windows/dirs/Users/username[home directory]:
code {
PS> echo $env:userprofile
code }
  Environment variables can also be queried and set from PowerShell with the → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Environment[`System.Environment`]. 
  
  ~R~
code {
→ development/languages/R/functions/Sys_getenv[Sys.getenv](varname)
code }
  The → Linux/fhs/etc/R/Renviron[Renviron] file.

  → development/web/php:
code {
→ development/web/php/snippets/getenv[getenv]('xyz');
code }

  → development/languages/VBA[VBA]
code {
msgBox → development/languages/VBA/functions#environ[environ]("TEMP")
code}

  → development/languages/JavaScript/Node_js[Node.js]:
code {
process.env.ENVVAR
code }

  See also → development/languages/VBA/Useful-object-libraries/Windows-Script-Host#vba-wsh-show-env-vars[Showing environment variables with Windows Script Host].

  In the → Windows/registry[Windows registry], environment variables are stored for a → Windows/user-account[user] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Environment[`HKEY_CURRENT_USER/Environment`] and globally under
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Session-Manager/Environment[`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment`].

}

{ APPDATA #appdata
}
{ CD #cd

  Windows: the current working directory.

}
{ EDITOR #editor
}
{ GIT_COMMON_DIR #git_common_dir

  → development/version-control-systems/git/GIT_COMMON_DIR

}
{ GMT_GRIDDIR
  sa: → tools/GMT
}
{ GMT_SHAREDIR
  sa: → tools/GMT
}
{ GMT_USERDIR

  Defaults to → Linux/fhs/home/username/_gmt.

  sa: → tools/GMT

}
{ HISTCONTROL #histcontrol

  See → Linux/shell/bash/history#histcontrol[bash history].

}
{ HISTIGNORE #histignore

  See → Linux/shell/bash/history#histignore[bash history].

}
{ HOME #home

  Points to the → Linux/home-directory of a → Linux/user[user].

  Typically, the value starts with `/home/` (Unix, that is).

  The Windows equivalent seems to be → #userprofile

  sa: →#logname

}
{ HTTP_PROXY #http_proxy

  See also → development/web/Proxy

}
{ LANG #lang

  The default → Linux/locale for categories where neither →#lc-all nor the specific variable for that
  category is set.

}
{ LC_ALL #lc-all

  Localization of programs. It makes their message follow the conventions of a specified country.

  The values `POSIX` and `C` are equivalent.

  sa: → #lang

}
{ LC_COLLATE #lc-collate

  → development/Unicode/collation[Collation] (which influences string sorting).

}
{ LC_CTYPE #lc-ctype

  → Linux/locale for → development/Unicode/character-set[character sets] and character classification.

}
{ LC_MESSAGES #lc-messages

  Determines the → Linux/locale to be used for internationalised messages.
}
{ LC_MONETARY #lc-monetary

  → Linux/locale for formatting monetary values

}
{ LC_MONETARY #lc-numeric

  → Linux/locale for formatting numbers

}
{ LC_TIME #lc-time

  → Linux/locale for formatting date/time values

}
{ LD_LIBRARY_PATH #ld-library-path

  Specify directories where → development/languages/C-C-plus-plus/GCC/libraries/shared/index[shared libraries] are installed.

  See also → development/languages/C-C-plus-plus/GCC/create-libraries[creating a shared and static library with gcc].

}
{ LOGNAME #logname

  The name with which a → Linux/user

  sa: → #home
}
{ NLSPATH #nlspath

  Determines the location where `catopen` looks for internationalisation message catalogues.

}
{ PATH #path

  A series of directories used to search executable files. The directories are separated with `:` in Unix and with `;` in
  Windows.

}
{ PATHEXT

  Gone → Windows/development/environment-variables/PATHEXT
}
{ PS1 #ps1

  Configure the prompt for a →Linux/shell.

}
{ POSIXLY_CORRECT #posixly_correct

  If set, blocks are units of 512 bytes, otherwise of 1024 bytes.

  See also → Linux/POSIX
  
}
{ PROMPT_DIRTRIM #prompt_dirtrim
}
{ R_HOME #r_home

  Points to the → development/languages/R/home-directory[home directory of R].

}
{ SECONDS

  A →Linux/shell/bash (only bash?) variable.

code {
t0=$SECONDS

do_stuff

echo $(($SECONDS - $t0)) seconds used for stuff
code }

}
{ SHELL #shell

  The default shell that → Linux/shell/commands/useradd assumes when not invoked with the `-s` flag.

}
{ SYSTEMPROFILE #systemprofile

  TODO: the `ProfileImagePath` value in → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/ProfileList/S-1-5-18[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\S-1-5-18`].

}
{ SYSTEMROOT #systemroot

  Windows. Typical value: → Windows/dirs/Windows[`c:\windows`].

}
{ TERM

  `VT100`, `VT220`, …

}
{ TZ #tz

  Time zone in →Linux/POSIX systems.

  In POSIX.1 systems the value of the TZ variable can be in one of three formats:
    • *std offset* (for example *EST+5*)
    • std offset dst [offset],start[/time],end[/time]
    • *:characters* (The → development/languages/C-C-plus-plus/C/libc[GNU C Library] interprets *:characters* as the name of a file which describes the time zone.

  See also
    → Linux/timezone, → https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html#TZ-Variable,
    the influence of `$TZ` on the → Linux/shell/commands/date#shell-date-tz[`date`] shell command.

}
{ USERPROFILE #userprofile

  Seems to be the Windows equivalent of → #home.
  
  See also → Windows/dirs/Users/username/index

}
{ XDG_CONFIG_DIRS #xdg_config_dirs

  → Linux/X/XDG
}
{ XDG_CONFIG_HOME #xdg_config_home

  → Linux/X/XDG
}
{ XDG_DATA_HOME #xdg_data_home

  → Linux/X/XDG
}
{ XDG_DATA_DIRS #xdg_data_dirs

  → Linux/X/XDG
}

sa:
  → Windows/development/environment-variables[Windows environment variables]

  → development/languages/R/environment-variables
