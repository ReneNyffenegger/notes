$ GDB (GNU debugger)

Some commands:
  • `start` - start the program
  • `p` - print values of variables (might use `frame` to change the context)
  • `x` - examine (print) low level data structers: memory, registers …
  • `s` - step an instruction
  • `n` - step over a function
  • `display/i $pc` - Show the current instruction.
  • `watch` - interrupt the program when the watched variable changes
  • `rwatch` (?) - interrupt the program when the value of a variable is read
  • `list` - show the program source code (if compiled with → development/languages/C-C-plus-plus/GCC/options/g[`-g`])
  • `break` - set a breakpoint
  • `bt` - backtrace
  • `set var varName = 42` - set the value of `varName` to 42.
  • `tui enable`: start TUI mode (Text User Interface).
  • `quit`

Setting the syntax of disassembled code:
code {
set disassembly-flavor intel
code }
Compare with
  • The → development/GNU/toolchain/binutils/objdump#objdump-M[`-M`] option of `→ development/GNU/toolchain/binutils/objdump` chooses the assembly dialect.
  • → development/languages/C-C-plus-plus/GCC/as#gnu-as-intel-syntax[`.intel_syntax noprefix`] in the GNU assembler (→ development/languages/C-C-plus-plus/GCC/as[`as`])

{ Python

  gdb is built with a → development/languages/Python[python] interpreter.

  For example, existing breakpoints can be displayed with
code {
(gdb) python print(gdb.breakpoints())
(gdb) python print(gdb.breakpoints()[0].location)
code }

}

sa:
  → Linux/fhs/usr/include/sys/user_h

  Apparently, on Linux, gdb used → Linux/kernel/syscalls/ptrace[`ptrace`] to debug a program.

  → development/languages/C-C-plus-plus/GCC/options/g[`gcc -ggdb`]
