$ Docker commands

code {
C:\> docker --help

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\Rene\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\Rene\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\Rene\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\Rene\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  container   Manage → development/tools/Docker/container[containers]
  context     Manage contexts
  → development/tools/Docker/commands/image[image]       Manage images
  → development/tools/Docker/commands/network[network]     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  → development/tools/Docker/commands/build[build]       Build an → development/tools/Docker/image[image] from a → development/tools/Docker/Dockerfile
  → development/tools/Docker/commands/commit[commit]      Create a new → development/tools/Docker/image from a → development/tools/Docker/container[container's] changes
  → development/tools/Docker/commands/cp[cp]          Copy files/folders between a container and the local filesystem
  → development/tools/Docker/commands/create[create]      Create a new → development/tools/Docker/container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  → development/tools/Docker/commands/exec[exec]        Run a command in a running container
  → development/tools/Docker/commands/export[export]      Export a → development/tools/Docker/container[container's] filesystem as a tar archive
  → development/tools/Docker/commands/history[history]     Show the history of an image
  → development/tools/Docker/commands/images[images]      List images
  → development/tools/Docker/commands/import[import]      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  → development/tools/Docker/commands/inspect[inspect]     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  → development/tools/Docker/commands/port[port]        List port mappings or a specific mapping for the container
  → development/tools/Docker/commands/ps[ps]          List → development/tools/Docker/container[containers]
  → development/tools/Docker/commands/pull[pull]        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  → development/tools/Docker/commands/rm[rm]          Remove one or more containers
  → development/tools/Docker/commands/rmi[rmi]         Remove one or more images
  → development/tools/Docker/commands/run[run]         Run a command in a new → development/tools/Docker/container[container]
  → development/tools/Docker/commands/save[save]        Save one or more images to a tar → development/archive-files[archive] (streamed to → development/stdin-stdout-stderr[STDOUT] by default)
  → development/tools/Docker/commands/search[search]      Search the Docker Hub for images
  → development/tools/Docker/commands/start[start]       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  → development/tools/Docker/commands/stop[stop]        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  → development/tools/Docker/commands/version[version]     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes
code }

sa:
  `→ development/tools/Docker/commands/compose`
