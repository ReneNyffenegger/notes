$ docker run

`docker run` creates a → development/tools/Docker/container[container] and runs a command in it.

code {
→ development/tools/Docker/commands[docker] run [OPTIONS] IMAGE [COMMAND] [ARG…]
code }

{ Options

  table { llll

     ☰  `--add-host` ☰ `list` ☰ Add a custom host-to-IP mapping (host:ip)
 `-a` ☰  `--attach` ☰ `list` ☰ Attach to STDIN, STDOUT or STDERR
     ☰  `--blkio-weight` ☰ `uint16` ☰ Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
     ☰  `--blkio-weight-device` ☰ `list` ☰ Block IO weight (relative device weight) (default [])
     ☰  `--cap-add` ☰ `list` ☰ Add → Linux/security/capabilities[Linux capabilities]
     ☰  `--cap-drop` ☰ `list` ☰ Drop → Linux/security/capabilities[Linux capabilities]
     ☰  `--cgroup-parent` ☰ `string` ☰ Optional parent → Linux/kernel/cgroup for the container
     ☰  `--cgroupns` ☰ `string` ☰ Cgroup namespace to use (host|private)  'host':    Run the container in the Docker host's cgroup namespace, 'private': Run the container in its own private cgroup namespace   Use the cgroup namespace as configured by the default-cgroupns-mode option on the daemon (default)
     ☰  `--cidfile` ☰ `string` ☰ Write the container ID to the file
     ☰  `--cpu-period` ☰ `int` ☰ Limit CPU CFS (Completely Fair Scheduler) period
     ☰  `--cpu-quota` ☰ `int` ☰ Limit CPU CFS (Completely Fair Scheduler) quota
     ☰  `--cpu-rt-period` ☰ `int` ☰ Limit CPU real-time period in microseconds
     ☰  `--cpu-rt-runtime` ☰ `int` ☰ Limit CPU real-time runtime in microseconds
 `-c` ☰  `--cpu-shares` ☰ `int` ☰ CPU shares (relative weight)
     ☰  `--cpus` ☰ `decimal` ☰ Number of CPUs
     ☰  `--cpuset-cpus` ☰ `string` ☰ CPUs in which to allow execution (0-3, 0,1)
     ☰  `--cpuset-mems` ☰ `string` ☰ MEMs in which to allow execution (0-3, 0,1)
 `-d` ☰  `--detach` ☰ ☰ Run container in background and print container ID
     ☰  `--detach-keys` ☰ `string` ☰ Override the key sequence for detaching a container
     ☰  `--device` ☰ `list` ☰ Add a host device to the container
     ☰  `--device-cgroup-rule` ☰ `list` ☰ Add a rule to the cgroup allowed devices list
     ☰  `--device-read-bps` ☰ `list` ☰ Limit read rate (bytes per second) from a device (default [])
     ☰  `--device-read-iops` ☰ `list` ☰ Limit read rate (IO per second) from a device (default [])
     ☰  `--device-write-bps` ☰ `list` ☰ Limit write rate (bytes per second) to a device (default [])
     ☰  `--device-write-iops` ☰ `list` ☰ Limit write rate (IO per second) to a device (default [])
     ☰  `--disable-content-trust` ☰ ☰ Skip image verification (default true)
     ☰  `--dns` ☰ `list` ☰ Set custom DNS servers
     ☰  `--dns-option` ☰ `list` ☰ Set DNS options
     ☰  `--dns-search` ☰ `list` ☰ Set custom DNS search domains
     ☰  `--domainname` ☰ `string` ☰ Container NIS domain name
     ☰  `--entrypoint` ☰ `string` ☰ Overwrite the default *entry point* of the image
 `-e` ☰  `--env` ☰ `list` ☰ Set environment variables (See the → development/tools/Docker/Dockerfile#dockerfile-ENV[`ENV`] instruction in → development/tools/Docker/Dockerfile[Dockerfiles]).
     ☰  `--env-file` ☰ `list` ☰ Read in a file of environment variables
     ☰  `--expose` ☰ `list` ☰ Expose a port or a range of ports
     ☰  `--gpus` ☰ `gpu-requst` ☰ → hardware/xPU/GPU devices to add to the container (`all` to pass all GPUs)
     ☰  `--group-add` ☰ `list` ☰ Add additional groups to join
     ☰  `--health-cmd` ☰ `string` ☰ Command to run to check health
     ☰  `--health-interval` ☰ `duration` ☰ Time between running the check (ms|s|m|h) (default 0s)
     ☰  `--health-retries` ☰ `int` ☰ Consecutive failures needed to report unhealthy
     ☰  `--health-start-period` ☰ `duration` ☰   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)
     ☰  `--health-timeout` ☰ `duration` ☰ Maximum time to allow one check to run (ms|s|m|h) (default 0s)
     ☰  `--help` ☰ ☰ Print usage
 `-h` ☰  `--hostname` ☰ `string` ☰ Container host name
     ☰  `--init` ☰ ☰ Run an init inside the container that forwards signals and reaps processes
 → #docker-run-it[`-i`] ☰  `--interactive` ☰ ☰ Keep → development/stdin-stdout-stderr[STDIN] open even if not attached. See also `-t`
     ☰  `--ip` ☰ `string` ☰ IPv4 address (e.g., 172.30.100.104)
     ☰  `--ip6` ☰ `string` ☰ IPv6 address (e.g., 2001:db8::33)
     ☰  `--ipc` ☰ `string` ☰ IPC mode to use
     ☰  `--isolation` ☰ `string` ☰ Container isolation technology
     ☰  `--kernel-memory` ☰ `bytes` ☰ Kernel memory limit
 `-l` ☰  `--label` ☰ `list` ☰ Set meta data on a container
     ☰ `--label-file` ☰ `list` ☰ Read in a line delimited file of labels
     ☰ `--link` ☰ `list` ☰ Add link to another container
     ☰ `--link-local-ip` ☰ `list` ☰ Container IPv4/IPv6 link-local addresses
     ☰ `--log-driver` ☰ `string` ☰ Logging driver for the container
     ☰ `--log-opt` ☰ `list` ☰ Log driver options
     ☰ `--mac-address` ☰ `string` ☰ Container MAC address (e.g., 92:d0:c6:0a:29:33)
`-m` ☰ `--memory` ☰ `bytes` ☰ Memory limit
     ☰ `--memory-reservation` ☰ `bytes` ☰ Memory soft limit
     ☰ `--memory-swap` ☰ `bytes` ☰ Swap limit equal to memory plus swap: `-1` to enable unlimited swap
     ☰ `--memory-swappiness` ☰ `int` ☰ Tune container memory swappiness (0 to 100) (default`-1`)
     ☰ `--mount` ☰ `mount` ☰ Attach a → Linux/filesystem/filesystems mount to the container
     ☰ → #docker-run-name[`--name`] ☰ `string` ☰ Assign a name to the container
     ☰ `--network` ☰ `network` ☰ Connect a container to a network
     ☰ `--network-alias` ☰ `list` ☰ Add network-scoped alias for the container
     ☰ `--no-healthcheck` ☰ ☰ Disable any container-specified HEALTHCHECK
     ☰ `--oom-kill-disable` ☰ ☰ Disable OOM Killer
     ☰ `--oom-score-adj` ☰ `int` ☰ Tune host's OOM preferences (-1000 to 1000)
     ☰ `--pid` ☰ `string` ☰ PID namespace to use
     ☰ `--pids-limit` ☰ `int` ☰ Tune container pids limit (set `-1` for unlimited)
     ☰ `--platform` ☰ `string` ☰ Set platform if server is multi-platform capable
     ☰ `--privileged` ☰ ☰ Give extended privileges to this container
`-p` ☰ `--publish` ☰ `list` ☰ Publish a container's port(s) to the host. See also `→ development/tools/Docker/commands/port`
`-P` ☰ `--publish-all` ☰ ☰ Publish all exposed ports to random ports
     ☰ `--pull` ☰ `string` ☰ Pull image before running ("always"|"missing"|"never") (default "missing")
     ☰ `--read-only` ☰ ☰ Mount the container's root filesystem as read only
     ☰ `--restart` ☰ `string` ☰ Restart policy to apply when a container exits (default "no")
     ☰ `--rm` ☰ ☰ Automatically remove the container when it exits
     ☰ `--runtime` ☰ `string` ☰ Runtime to use for this container
     ☰ `--security-opt` ☰ `list` ☰ Security Options
     ☰ `--shm-size` ☰ `bytes` ☰ Size of `→ Linux/fhs/dev/shm`
     ☰ `--sig-proxy` ☰ ☰ Proxy received signals to the process (default true)
     ☰ `--stop-signal` ☰ `string` ☰ Signal to stop a container (default is `SIGTERM`)
     ☰ `--stop-timeout` ☰ `int` ☰ Timeout (in seconds) to stop a container
     ☰ `--storage-opt` ☰ `list` ☰ Storage driver options for the container
     ☰ `--sysctl` ☰ `map` ☰ Sysctl options (default map[])
     ☰ `--tmpfs` ☰ `list` ☰ Mount a tmpfs directory
 → #docker-run-it[`-t`] ☰ `--tty` ☰ ☰ Allocate a pseudo-TTY. See also `-i`
     ☰ `--ulimit` ☰ `ulimit` ☰ Ulimit options (default [])
 `-u` ☰  `--user` ☰ `string` ☰ Username or UID (format: `<name|uid>[:<group|gid>]`)
     ☰  `--userns` ☰ `string` ☰ User namespace to use
     ☰  `--uts` ☰ `string` ☰ UTS namespace to use
 → development/tools/Docker/commands/run/volume[`-v`] ☰  → development/tools/Docker/commands/run/volume[`--volume`] ☰ `list` ☰ Bind mount a volume
     ☰  `--volume-driver` ☰ `string` ☰ Optional volume driver for the container
     ☰  `--volumes-from` ☰ `list` ☰ Mount volumes from the specified container(s)
 `-w` ☰  `--workdir` ☰ `string` ☰ Working directory inside the container

  table }

}

{ -p / -P

  TODO: see the → development/tools/Docker/Dockerfile#dockerfile-EXPOSE[Dockerfile `EXPOSE` command].

}
{ -i -t (-it) #docker-run-it

 `-i` stands for *interactive* and keeps → development/stdin-stdout-stderr[STDIN] open even if not attached.

 `-t` allocates a pseudo → Linux/TTY.

  I am not sure what this all means, but it turned out that I had to specify both flags to run the Windows image
code {
C:\> docker run -i -t mcr.microsoft.com/windows:1809 → Windows/dirs/Windows/System32/cmd_exe[cmd.exe]
code }

}
{ -v

  `-v hostPath:imagePath` allows to access a host directory or file from a container, see → development/tools/Docker/commands/run/volume[`--volume`].

}
{ --name #docker-run-name

 `--name xyz` assigns a name to the container (here: `xyz`).w

  Without using `--name`, Docker will randomly create a container name consisting of an → https://github.com/moby/moby/blob/master/pkg/namesgenerator/names-generator.go#L20-L128[adjective] and a name of an
  → https://github.com/moby/moby/blob/master/pkg/namesgenerator/names-generator.go#L133-L842[(allegedly) noteable scientist or hacker] (for example `epic_curie`).
  -
  The container name → https://github.com/moby/moby/blob/master/pkg/namesgenerator/names-generator.go#L852[`boring_wozniak` won't be chosen].

  { docker: Error response from daemon: Conflict. The container name … is already in use by container …

code {
$ docker run  --name xyz …
docker: Error response from daemon: Conflict. The container name "xyz" is already in use by container "…". You have to remove (or rename) that container to be able to reuse that name.
…
$ docker rm xyz
…
$ docker run  --name xyz …
…
code }

    Find container names that are alread assigned with either of
code {
$ docker container ls -a
$ docker ps -a
code }

  }
}
{ Got permission denied while trying to connect to the Docker daemon socket at …

code {
$ docker run hello-world
docker: Got permission denied while trying to connect to the Docker daemon socket at …

$ groups
rene

$ sudo → Linux/shell/commands/usermod -aG docker $USER
$ newgrp docker
$ groups
docker rene

$ docker run hello-world
…
code }

}
{ invalid reference format: repository name must be lowercase.

code {
$ docker run no_UPPERCASE_in_repo_name /bin/sh
docker: invalid reference format: repository name must be lowercase.
code }

}

sa:

  → development/tools/Docker/commands such as `→ development/tools/Docker/commands/start`
