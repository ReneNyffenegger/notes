
Distributing software should not be hard. Docker tries to achieve that goal.

A → development/tools/Docker/image[Docker image] defines what software is included and how it will be run.

A → development/tools/Docker/container[Docker container] is a running instance of an image.
-
A container is *not* installed.

A claim of Docker is that an application that runs on Docker runs on *every* Docker installation, everywhere.

{ Dockerfiles

  → development/tools/Docker/Dockerfile[Dockerfiles] usually are small files, perhaps 5 to 30 lines.

  A Dockerfile is used to create a →#docker_image.

}

{ Unable to login to docker, TLS-enabled daemon without TLS? 

  Problem was: user was not added to the `docker` group.

}

{ Docker image #docker_image

  Docker images are, by default, located under → Linux/fhs/var/lib/docker.
  
rem {
  The docker image can be used to run as many containers as one wants.
rem }

}

{ Remove 'old' containers

code {
docker ps -a
docker rm ......
code }

}
{ Check if installation is working

code {
$ → development/tools/Docker/commands/run hello-world
…
Hello from Docker!
This message shows that your installation appears to be working correctly.
…
code }

  { Error message: Got permission denied while trying to connect to the Docker daemon socket … #docker-err-perm-denied

    A possible reason for the error message *Got permission denied while trying to connect to the Docker daemon socket at unix:///→ Linux/fhs/var/run/docker_sock* is that the user trying to execute a
    → development/tools/Docker/commands[docker command] is not in the `docker` group.
    -
    In this case, adding the current user (`$USER`) to this group will solve the issue:
code {
→ Linux/shell/commands/sudo → Linux/shell/commands/usermod -aG docker $USER
code }

    When the user logs in again (or changes to the docker group with `newgrp - docker`), the docker commands should now be executable.

  }

}
{ quay.io

  →http://quay.io[quay.io] is like a github for Docker images.

}
{ Installing

Apparently, docker can be installed with
code {
curl -sSL https://get.docker.com | sh
code }
or
code {
→ tools/wget -qO- https://get.docker.com | sh
code }

On Ubuntu:
code {
sudo apt-get install docker.io
code }

}
{ TODO

  A user should be in the docker → Linux/group:
code {
sudo → Linux/shell/commands/usermod -aG docker
code }

  Apparently, there's a docker service that should/must/could be started:
code {
sudo service docker start
code }

  How does Docker relate to → Linux/package-managers/Snap?

  { scratch

code {
$ → development/tools/Docker/commands/pull scratch
Using default tag: latest
Error response from daemon: 'scratch' is a reserved name
code }

  }
  { Processes

    { Start a container with a couple of processes:

      Run a new docker container (with the first process `/bin/sh`):
code {
$ docker run --rm -it --name alpine-ps-test alpine /bin/sh
code }

      Start a second process (in the background so that …
code {
/ # sleep 101 &
code }

     … the third process can be started in parallel):
code {
/ # sleep 102
/ #
code }

   }
   { Find processes in the host

    In a shell on the host: find the processes that contain `sleep 10\d` in their arguments, and print their parent process id:
code {
$ ps a -o pid,ppid,tty,args | grep -P 'sleep 10\d'
  13804   13697 pts/0    sleep 101
  13805   13697 pts/0    sleep 102
code }

    The parent process is `/bin/sh` that started the `sleep` commands. Its parent process is 13678:
code {
$ ps p 13697 -o pid,ppid,tty,args
    PID    PPID TT       COMMAND
  13697   13678 pts/0    /bin/sh
code }

    Find the parent process again:
code {
$ ps p 13678 -o pid,ppid,tty,args
    PID    PPID TT       COMMAND
  13678       1 ?        /usr/bin/containerd-shim-runc-v2 -namespace moby -id f2789b4f06090dc6a4cbea3d3d9ca1c70a2700bf4ca23c02bbc64843a690a9b8 -address /run/containerd/containerd.sock
code }

    The mapping between of the «host» PID and the container PID is found in
code {
$ cat /proc/13804/status | grep NSpid
code }

    }
  } 
  { auth.docker.io

code {
IMG=debian

TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:library/$IMG:pull" | jq -r .token)
curl -s -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/library/$IMG/tags/list | jq .
code }

    The returned list has `debian:bullseye-slim` which looks interesting:
code {
$ docker pull debian:bullseye-slim
code }

  }
  { Experimenting with a debian image

code {
$ docker pull debian:bullseye-slim
code }

code {
$ docker run -it --name deb-test debian:bullseye-slim bash
root@315475baed4a:/# touch /tmp/touched
root@315475baed4a:/# exit
code }

  Container is not running anymore…
code {
$ docker ps
code }

  … but still present:
code {
$ docker ps -a
code }

  Restart the container:
code {
$ docker start -i deb-test
code }

  The touched file is still here:
code {
root@315475baed4a:/# ls -1 /tmp
touched
code }

  Adding a user:
code {
root@315475baed4a:/# useradd -s /bin/bash -m rene
root@315475baed4a:/# exit
code }

  Start the container in non-interactive mode:
code {
$ docker start  deb-test
deb-test
code }

   The container is now running:
code {
$ docker ps
CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                    NAMES
315475baed4a   debian:bullseye-slim   "bash"                   43 minutes ago   Up 48 seconds                            deb-test
code }

    Connect as rene (why do I not have to enter a password?)
code {
$ docker exec --user rene -it deb-test  /bin/bash
rene@315475baed4a:/$ pwd
/
code }

  }
}

sa:

  → development/tools/Docker/commands[Docker command line commands]

  → development/tools/Docker/networking[Networking]

  → development/tools/Docker/Windows

 `→ development/tools/Docker/dockerd`

 `→ Linux/fhs/etc/default/docker`
