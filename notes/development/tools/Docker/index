
Distributing software should not be hard. Docker tries to achieve that goal.

A ~Docker image~ defines what software is included and how it will be run.

A ~Docker container~ is a running instance of an image.
-
A container is *not* installed.

A claim of Docker is that an application that runs on Docker runs on *every* Docker installation, everywhere.

{ Dockerfiles

  Dockerfiles usually are small files, perhaps 5 to 30 lines.

  A Dockerfile is used to create a →#docker_image.

}

{ Unable to login to docker, TLS-enabled daemon without TLS? 

  Problem was: user was not added to the `docker` group.

}

{ Docker image #docker_image

  Docker images are, by default, located under → Linux/fhs/var/lib/docker.
  
rem {
  The docker image can be used to run as many containers as one wants.
rem }

}

{ Remove 'old' containers

code {
docker ps -a
docker rm ......
code }

}

{ quay.io

  →http://quay.io[quay.io] is like a github for Docker images.

}
{ Installing

Apparently, docker can be installed with
code {
curl -sSL https://get.docker.com | sh
code }
or
code {
→ tools/wget -qO- https://get.docker.com | sh
code }

On Ubuntu:
code {
sudo apt-get install docker.io
code }


}
{ TODO

A user should be in the docker → Linux/group:
code {
sudo → Linux/shell/commands/usermod -aG docker
code }

Apparently, there's a docker service that should/must/could be started:
code {
sudo service docker start
code }

}

sa:

  → development/tools/Docker/Windows

  → Linux/fhs/etc/default/docker
