$ Docker containers
@ container

{ Identifiying containers #docker-container-id

  A Container is identified by an *id* that looks like `ada3b521615d`. Additionally, a container is given a random(?) name like *adoring_babbage* or *nifty_cray*.

}
{ Status of containers

  The possible states of containers are
    • created
    • restarting
    • running
    • removing
    • paused
    • exited
    • dead

}
{ Exporting a container's file system

  The file system of a container can be exported to a tar archive with `→ development/tools/Docker/commands/export`.

}
{ Removing old Docker containers

code {
$ docker rm $(→ development/tools/Docker/commands/ps[docker ps] -q -f status=exited)
code }

code {
$ docker rm $(docker ps --no-trunc -aq)
code }

With Docker `1.13.x`:
code {
$ docker container prune
code }

}
{ Detaching and attaching again

code {
$ docker run -it --name foo debian bash
root@aa4a579e2648:/# var=hello
<ctrl-p> <ctrl-q>
code }

Container is detached.

Attach again:
code {
$docker attach foo
root@aa4a579e2648:/# echo $var
code }

}

sa:

  → development/tools/Docker/commands/run[`docker run`] creates a container and runs a command in it.

  → development/tools/Docker/commands/ps[`docker ps`] lists containers.
