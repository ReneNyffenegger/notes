

{ Dump all predefined macros

 `dumpdef(MACRO)` prints the text that `MACRO` expands to to → development/stdin-stdout-stderr[stdout].

  Without argument, it prints all currently defined macros, including the predefined macros:
code {
echo dumpdef | m4
code }

  I found the following predefined macros:
  table { lll
    `__file__` ☰ ☰ Quoted name of the current input file
    `__gnu__` ☰ ☰
    `__line__` ☰ ☰ Current line number
    `__program__` ☰ ☰ The name with which `m4` was invoked
    `__unix__` ☰ ☰ Defined because running in a Unix (Linux) environment. See also `__windows__`.
    `builtin` ☰ `(name, [args…])` ☰ Calls `name`
    `changecom` ☰ `([start], [end = ‘NL’])` ☰ Sets the text that delimits comments
    `changequote` ☰ `([start = ‘`’], [end = ‘'’])` ☰ Sets the delimiters with which text is quoted
    `debugfile` ☰ `([file])` ☰
    `debugmode` ☰ `([flags])` ☰ See also the `-d` option
    `decr` ☰ `(number)` ☰ See also `incr`
    `define` ☰ `(name, [expansion])` ☰ Defines the expansion to which a macro (`name`) expands
    `defn` ☰ `(name…)` ☰ Expands to the *quoted* definition of each `name`.
    `divert` ☰ `([number = ‘0’])` ☰ Divert output. If `number` is negative, the diversion is discarded.
    `divnum` ☰ ☰
    `dnl` ☰ ☰ Discard all characters up to and including the next newline.
    `dumpdef` ☰ `([names…])` ☰
    `errprint` ☰ `(message, …)` ☰
    `esyscmd` ☰ `(shell-command)` ☰ Read the output of a → Linux/shell/commands[shell command]. Compare with `syscmd`
    `eval` ☰ `(expression, [radix = ‘10’], [width])` ☰ Evaluate an integer expression
    `format` ☰ `(format-string, …)` ☰
    `ifdef` ☰ ☰ Tests if a macro is defined
    `ifelse` ☰ `(string-1, string-2, equal-1, string-3, string-4, equal-2, …, [not-equal])` ☰
    `include` ☰ `(file)` ☰ See also `sinclude`
    `incr` ☰ `(number)` ☰ See also `decr`
    `index` ☰ `(string, substring)` ☰ Search for `substring` in `string`
    `indir` ☰ `(name, [args…])` ☰ Call a macro indirectly
    `len` ☰ `(string)` ☰ Length of `string`
    `m4exit` ☰ `([code = ‘0’])` ☰
    `m4wrap` ☰ `(string, …)` ☰ Stores `string` in a safe place, to be reread when end of input is reached. Expands to void.
    `maketemp` ☰ `(template)` ☰
    `mkstemp` ☰ `(template)` ☰
    `patsubst` ☰ `(string, regexp, [replacement])` ☰ Searches `string` for matches of `regexp`, and substitutes replacement for each match. 
    `popdef` ☰ `(name…)` ☰ `popdef` and `pushdef` are analogous to `define` and `undefine`
    `pushdef` ☰ `(name, [expansion])` ☰
    `regexp` ☰ `(string, regexp, [replacement])` ☰
    `shift` ☰ `(arg1, …)` ☰
    `sinclude` ☰ `(file)` ☰
    `substr` ☰ `(string, from, [length])` ☰
    `syscmd` ☰ `(shell-command)` ☰ Compare with `esyscmd`
    `sysval` ☰ ☰
    `traceoff` ☰ `([names…])` ☰
    `traceon` ☰ `([names…])` ☰
    `translit` ☰ `(string, chars, [replacement])` ☰
    `undefine` ☰ `(name…)` ☰
    `undivert` ☰ `([diversions…])` ☰
  table }

  TODO: What about
    • `define_blind`
    • `downcase`, `upcase`, `capitalize`
    • `dquote`, `dquote_elt`
    • `exch`
    • `foreach`, `foreachq`, `forloop`
    • `join`, `joinall`
    • `nargs`
    • `quote`

}
{ Definitions

  { Definitions with arbitrary characters

    It possible to define macros with arbitrary characters such as as `,,,,` or `X(1)`. Note that commas and parantheses have a special meaning when the text is parsed:

    The definition of such macros can be queried with `defn()` although it cannot be simply expanded:
    gh|about-m4|/definitions-with-arbitrary-characters.m4||

    This script prodcues
code {
X(1) is defined 
X(2) is not defined
,,,, is defined
one

commas
code }

  }

}
{ Diversions

  By default, output is sent to stdout.
  -
  After calling `divert(n)`, output is accumulated in memory or a temporary file. The diverted text is identified by the stream number `n`.

  A diversion is ended by another call of `divert`.

 `undivert` appends the diverted output to the current diversion.

  Text recovered from a diversion is not scanned again for macros.

  { No diversion while arguments are collected

    A limitation of m4 is that text which is part of an argument collection is not diverted:
    gh|about-m4|/diversion-in-argument-collection.m4||

    When executed, this demonstration prints
code {
-------------------------
starting

started
-------------------------
arg-1 = DIVERSION ARG1 first argument
arg-2 = DIVERSION ARG2 second argument
-------------------------
ending

ended
-------------------------
DIVERS START
DIVERSION END
code }

     A consequence of this limitation is that → https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Diversion-support.html#Diversion-support[macros that change the current diversion cannot be used as an unquoted argument] to another macro, but must be expanded at top level.
     -
     The → development/tools/m4/sugar macro `m4_expand` diagnoses such attempts.

  }
}
{ Some snippets

  { Simple example

    gh|about-m4|/simple.m4||

    If run with `-P`, this snippet evaluates to
code {
#
#  m4 -P simple.m4
#



Harry met Sally
code }

    The `-P` option prefixes predefined macros with `m4_`.

  }
  { Dollar variables

    gh|about-m4|/define-arguments.m4||

    This file expands to
code {
First argument is:      one
Number of arguments is: 6
All arguments:          one,two,three,four,five,six
code }
  
  }
  { dumpdef

   `dumpdef` prints the definition of a macro to → development/stdin-stdout-stderr[stdout].

    gh|about-m4|/dumpdef.m4||

    Output:
code {
NUM:	42
TXT:	`Hello world'
SUM3:	eval($1 + $2 + $3)
code }

?   The output generated by `dumpdef` can be influenced with `traceon` and the `-d` command line option.

  }
  { $* vs $@

   `$*` and `$@` expand to the list of arguments, but `$@` also quotes the elements in the list.

    gh|about-m4|/dollar-at-vs-star.m4||

    The output is
code {
X1,X2,X3
aaa,bbb,ccc
code }

  }
  { $n in macros

    → https://www.gnu.org/software/m4/manual/html_node/Arguments.html[Replacement of arguments happens before rescanning], regardless of how many nesting levels of quoting appear in the expansion,
    i. e. `$1` etc. cannot be «easily» quoted in a macro.

    gh|about-m4|/dollar-n-in-parameters.m4||

code {
A = A
B = B
`C' = C
``D'' = D
E = E
$5 = F
code }


  }
  { Macro expansion in strings

    A macro is expanded in `"strings"` (because `"` has no special meaning in m4).

    gh|about-m4|/within-quotes.m4||

    This snippet expands to
code {
printf("Hello world\n");
code }

  }
  { Defining a macro with arguments

    gh|about-m4|/define-with-arguments.m4||

    This file expands to
code {
one two three
code }

  }
  { pushdef / popdef

    Note, the order of `popdef` does not have to be the reverse of `pushdef`.

    gh|about-m4|/pushdef.m4||

    The output is:
code {
one two three
ONE TWO three
ONE two three
one two three
code }

  }
  { shift

    gh|about-m4|/shift.m4||

    Output:
code {
first element      : one
remaining arguments: two,three,four,five
code }

  }
  { ifelse

    `ifelse((string-1, string-2, equal-1, string-3, string-4, equal-2, …, [not-equal])` is approximately the same as the following in another language:
code {
if ( string-1 == string-2 ) {
   equal-1
}
else if ( string-3 == string-4 ) {
   equal-2
}
…
else {
  not-equal
}
code }

  The `else…` part is optional

    { Example 1

      Note the quotes around `ifelse(…)`. Without them, the output would be different.

      gh|about-m4|/ifelse.m4||

code {
foo != bar
baz == baz
code }

    }
    { Example 2

      gh|about-m4|/ifelse-2.m4||

      The output of this example is:
code {
TXT is Hello world
code }

    }
  }
  { incr

    The following snippet defines `H1`, `H2` and `H3` which produces enumerated HTML chapters.

    When `H1` is invoked, it increments the value of `cur_h1_nr`, sets `cur_h2_nr` to 0 and evaluates to `<h1>cur_h1_nr. …</h1>`.
    -
    Similarly,wWhen `H2` is invoked, it increments the value of `cur_h2_nr`, sets `cur_h3_nr` to 0 and evaluates to `<h2>cur_h1_nr.cur_h2_nr. …</h2>`.
    -
    Finally, invoking `H3` increases `cur_h3_nr` and then evaluates to `<h3>cur_h1_nr.cur_h2_nr.cur_h3_nr. …</h3>`.

    gh|about-m4|/html-chapter-enumeration.m4||

code {
<h1>1. Introduction</h1>
 <h2>1.1. Purpose</h2>
  <h3>1.1.1. Background</h3>
  <h3>1.1.2. Objectives</h3>
  <h3>1.1.3. Considerations</h3>

 <h2>1.2. Scope</h2>
  <h3>1.2.1. Coverage</h3>
  <h3>1.2.2. Limitations</h3>

<h1>2. Main Body</h1>
 <h2>2.1. Analysis</h2>
  <h3>2.1.1. Key Findings</h3>
  <h3>2.1.2. Supporting Data</h3>
  <h3>2.1.3. Subsection Three</h3>
  <h3>2.1.4. Subsection Four</h3>

 <h2>2.2. Discussion</h2>
  <h3>2.2.1. Interpretation</h3>
  <h3>2.2.2. Challenges</h3>

<h1>3. Conclusion</h1>
 <h2>3.1. Summary</h2>
  <h3>3.1.1. Key Points</h3>
  <h3>3.1.2. Implications</h3>

 <h2>3.2. Future Work</h2>
  <h3>3.2.1. Recommendations</h3>
  <h3>3.2.2. Next Steps</h3>
code }

  }
  { ifdef

   `ifdef` checks if a token is a defined macro.

    gh|about-m4|/ifdef.m4||

code {
unobtainium is not defined
ifdef is defined
code }

  }
  { Create a sequence of numbers

    gh|about-m4|/sequence.m4||

code {
13 14 15 16 17 18 19 20 21
code }

  }
  { eval
  
   `eval` operates on 32-bit integers.

    table { ll
     `eval(4+5)` ☰ `9`
     `eval(255, 16)` ☰ `ff`
     `eval(0xff)` ☰ 255
     `eval(42 == 42)` ☰ `1`
     `eval(42 == 11)` ☰ `0`
     `eval(5>2)` ☰ `1`
     `eval(eval(2==2)+eval(4==1))` ☰ `1`
     `eval(2**30)` ☰ `1073741824`
     `eval(2**31)` ☰ `-2147483648`
     `eval(2**31-1)` ☰ `2147483647`
     `eval(2**32)` ☰ `0`
     `eval(7.3 + 9.2)` ☰ *bad expression in eval (bad input)*
    table }

  }
  { translit

    The macro `to_uppercase` evaluates a string in uppercase letters:
    gh|about-m4|/to-uppercase.m4||

  }
  { Whitespaces in parameters

    Unquoted leading whitespace is stripped off all arguments.

    gh|about-m4|/whitespace-in-parameters.m4||

code {
$1 = >A<'
$2 = >B<'
$3 = >C <'
$4 = >D
<'

code }


  }
  { regexp

    { Extract the first continous block of digits

      gh|about-m4|/regexp-digit.m4||

    }

  }
  { Recursion

    { Calculate the sum of a list

      The sum of a list can be calculated recursively:
      gh|about-m4|/recursion-sum.m4||

code {
15
20
27
30
code }

    }
    { Fibonacci

      Calculating the nth fibonacci number:
      gh|about-m4|/fibonacci.m4||

      Note, the outermost `eval()` in the macro is included to remove whitespace from the result.

    }
    { while

      The following macro `while` must be called with two arguments.
      -
      As long as the first evaluation of `eval($1)` is 1 (i. e. true), the second argument is evaluated followed by yet another evaluation of `while(…)`

      gh|about-m4|/while.m4||

code {
i = 4,
i = 5,
i = 6,
i = 7,
i = 8,
i = 9,



i = 4
i = 6
i = 8

code }


    }

  }
  { Nested quotes

    Expansion of a macro «de-quotes» quoted elements by one level.

    gh|about-m4|/nested-quotes.m4||

code {
DEFINITION  = nested zero NESTED_1 `NESTED_2' NESTED_1
EXPANSION_0 = nested zero NESTED_1 `NESTED_2' NESTED_1
EXPANSION_1 = nested zero nested one  NESTED_2 nested one  
EXPANSION_2 = nested zero nested one  nested two  nested one   
code }


  }
  { Diversion

    gh|about-m4|/divert.m4||

    This evaluates to
code {
one
two
three
four
code }

  }

}
{ Regular expressions

  The regular expression syntax and capabalities are those of Emacs which is similar to Basic Regular Expressions (BRE).

  Support for Extended Regular Expressions (ERE) is scheduled for GNU M4 2.0. Unfortunately, I found no hint *when* this release will be. The → https://git.savannah.gnu.org/cgit/m4.git/log/?h=branch-2.0[commit log of the 2.0] branch has stalled 2017 (checked June 2024).

}

{ Version 1.4 vs 1.6

  `m4sugar/foreach.m4` comments that M4 1.4 rescans every byte of `$@` which results in a quadratic nature when using `$@` for recursion
  
  In M$ 1.6, `$@` is only scanned once and then back-references are made to information stored about the scan.

}


sa:
  → development/tools/m4/sugar introduces additional generic macros.

  → development/GNU/toolchain/Build-System/Autoconf

links:
  → https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=0337303b4c4a989823886ee5f806bfe3db595e82[Exploiting the m4 Macro Language] by Kenneth J. Turner was very helpful when I investigated m4.
