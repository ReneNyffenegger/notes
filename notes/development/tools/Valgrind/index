
{ Building valgrind

 `valgrind` is built using the standard `./configure`, `make`, `make install` trilogoy.

}
{ Building and running target program

  Options with which the targetted program should (or might) be built include:
    • `-g`
    • `-fno-inline` (or alternatively using the valgrind option `--read-inline-info=yes`)
    • `-O0` or `-O` (except when using cachegrind (and callgrind?))

  Otherwise, the target program does not need to be linked to special valgrind libraries.

  The target program can then be analyzed with
code {
valgrind [valgrind-options] the-executable [options of the-executable]j
code }

  `the-executable` is then executed on a synthetic CPU (i. e. every instruction is simulated).

}

{ Tools

  When executing `valgrind`, the `--tool` option allows to select a tool (memcheck being the default).

  Tools include:
  table { ll
    memcheck ☰ Intercepts calls to `malloc`, `new`, `free` and `delete`, and generally checks all reads and writes of memory.
    cachegrind ☰ A cache and prediction profiler. It simulates the CPU's I1, D1 and L2 caches and is used to make programs faster. (It seems that the simulation of the cache hierarchy is turned off by default and apparantly, `perf` that accesses hardeware counters is the better tool for such things)
    callgrind ☰ An extension to cachegrind (call-graph generation). The collected data can be visualized with *KCachegrind*.
    massif ☰ A heap profiler helping to reduce memory usage.
    helgrind ☰ A thread debugger.
    drd ☰ Detect errors in POSIX-multithreaded C/C++ programs, similar to helgrind.
    dhat ☰ Examine how programs use heap allocations
    lackey and nulgrind ☰ Used for testing and demonstration purposes.
    bbv ☰ A bbv is a *basic block vector* and refers to a linear section of code with an entry point and an exit point. BBV is an experimental (SimPoint basic block vector generator) tool (also referred to as exp-bbv).
    SGCheck ☰ Find overruns of arrays.
  table }

}


{ Simple example

  { prog.c

    gh|about-Valgrind|/first/prog.c||

  }
  { Makefile

    gh|about-Valgrind|/first/Makefile||

  }

}
sa:

  → development/languages/C-C-plus-plus/C/libc/alloc[Memory alloction with libc]

  → development/memory/leak[Memory leaks]
