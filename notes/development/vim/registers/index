$ VIM registers
@ register

{ Available registers

  table { ll
    `a` - `z` / `A` - `Z` ☰ The named registers
    `0` - `9` ☰ The numberered registers
    `"` ☰  The unnamed register
    `-` ☰  The small delete register
    `%` ☰ Contains the file name (read only)
    `:` / `.` ☰ Other read only registers
    `#` ☰ The → development/vim/editing/buffers#vim-alternate-buffer[alternate buffer]
    `=` ☰ The expression register
    `*` / `+` /  `~` ☰ The selection and drop registers
    `/` ☰ The last search pattern register
    `_` ☰ The → development/vim/registers/black-hole[black hole] register
  table }

}
{ Types of registers #vim-register-type

  A register is one of these three types:
    • characterwise
    • linewise
    • blockwise-visual

  The type of the register can be set with the third argument of → development/vim/script/vimscript/functions/setreg[setreg()].

}
{ Reading and writing a register programmatically

  In a → development/vim/script/index[script] or an → development/vim/commands/[ex command], the value of the register can be accessed by prepending it with the at symbol:
code {
let l:value_of_register_f=@f
let @f='change value of register f'
code }

  The value of registers with a *dynamic name* can be set with → development/vim/script/vimscript/functions/setreg[setreg()]


}
{ Assigning to an uppercase register #vim-register-uppercase

  Assigning a value to a *uppercase register* actually appends the assigned value to the value of the respective lowercase register.

}
{ Clearing the content of a register #vim-clear-register

  A register (here: `r`) can be cleared like so
code {
:let @r=''
code }

  But some key strokes can be saved by recording nothing into a register: `qrq`

}
sa:
  → development/vim/commands/put[`:put r`] which inserts the content of register r after the current line.
  
