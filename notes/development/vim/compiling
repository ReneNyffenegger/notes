$ Vim: building/compiling

General notes about compling vim are found in → development/vim/sources/src/INSTALL

{ Clone vim sources

code {
cd p:\ath\to\xyz
git clone https://github.com/vim/vim
cd vim\src
code }

}
{ Edit feature.h

  Before compiling vim, one might want to edit the preferences in → development/vim/sources/src/feature_h[`src/feature.h`].

}
{ Linux

? Compiles, but produces `E25: GUI cannot be used: not enabled at compile time`.

code {
$ → development/GNU/toolchain/Build-System/configure[./configure] --enable-python3interp --enable-perlinterp --with-x --enable-gui=gtk3 --enable-fontset --disable-xim
code }

  Works, but font is ugly:
code {
$ → development/GNU/toolchain/Build-System/configure[./configure] --enable-python3interp --enable-perlinterp --with-x --enable-gui=auto --enable-fontset --disable-xim
code }

  Apparently, `→ development/make[make]` does not create a `gvim` executable. Instead, it's created as a symlink with `make install`.

  In order to execute `vim` as GUI, it can be started with the → development/vim/editing/start-up/command-line-options#vim-cmd-line-opt-g[`-g` command line option].

}
{ Windows

  It's recommended to build a 32 bit version of vim, even on 64 bit systems. The only advantage of a 64 bit vim is that it can edit files larger than 2GB.
 (2019-11-25: is this still true???)

 { MinGW-w64

   Apparently, vim → https://github.com/vim/vim/issues/5241[cannot be built with MinGW] anymore and → Windows/development/MinGW/w64[MinGW-w64] should be used instead.

   The makefile requires to have a `mkdir` in the path that understands the `-p` option. Unfortunately, the → Windows/dirs/Windows/System32/cmd_exe/commands/mkdir[`mkdir`] that comes with
   → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] does not.

code {
→ Windows/dirs/Windows/System32/cmd_exe/commands/cd[cd] → development/vim/sources/src[src]
mingw32-make -f → development/vim/sources/src/Make_ming_mak[Make_ming.mak]
code }

  { Missing sed

   Also, → development/languages/sed[sed] is required to determine the of → development/languages/C-C-plus-plus/GCC/options/m_lowercase/arch[`-march`] option value (see below). If sed is not installed, this value can be specied to the makefile like so:
code {
mingw32-make -f → development/vim/sources/src/Make_ming_mak[Make_ming.mak] ARCH=x86-64
code }

    The required value for `ARCH` can be found with `gcc → development/languages/C-C-plus-plus/GCC/options/dumpmachine[-dumpmachine]`. It prints something like `x86_64-w64-mingw32`. The relevant portion is the text before the first hyphen (`x86_64`).

  }

 }
 { Rtools / Windows 10

   → Windows/dirs/Rtools[RTools] comes with → Windows/development/MinGW which can be used if RTools is installed and there is no → Windows/development/Visual-Studio[Visual Studio].

   If RTools was installed without adjusting the → Windows/development/environment-variables[`PATH` environment variable], `PATH` needs to be modified
   so that → development/make[`make`] and the → development/languages/C-C-plus-plus/GCC[GCC compiler] are found:
code {
set rtools_root=C:\Rtools
set path=%rtools_root%\bin;%path%
set path=%rtools_root%\mingw_32\bin;%path%
code }

   As per instructions in `→ development/vim/src[src]/Make_cyg_ming.mak`, the executables should be built with
code {
make -f Make_ming.mak
code }

  However, `gui_dwrite.cpp` could not be compiled because it tried to include `dwrite_2.h` which did not exist in the RTools directory. The
  error message was something like `gui_dwrite.cpp:42:23: fatal error: dwrite_2.h: No such file or directory`.

  I had to turn of colored emoji (which I probably won't need anyway):
code {
make -f Make_ming.mak COLOR_EMOJI=no
code }

   Then, the compilation went on smoothly.
   -
   However, when trying to → development/languages/C-C-plus-plus/GCC/linker[link] `uninstall.exe`, I got this error:
  `undefined reference to '_imp__CoTaskMemFree@4'`.
   -
   In order to fix this, I had to manually add `-lole32` in the target `uninstal.exe` in `src\Make_cyg_ming.mak`:
code {
uninstal.exe: uninstal.c
            $(CC) $(CFLAGS) -o uninstal.exe uninstal.c $(LIB) -lole32
code }

   Update *2019-07-11*: The `-lole32` is now fixed with → https://github.com/vim/vim/releases/tag/v8.1.1662[my patch 8.1.1662].

 }
 { Strawberry Perl / Windows 10

   Strawberry → development/languages/Perl[Perl] comes with a → development/languages/C-C-plus-plus/GCC[gcc compiler].

   However, it seems to lack
   → development/languages/sed[`sed`] which results in the following error message:
code {
'sed' is not recognized as an internal or external command
…
gcc: error: missing argument to → development/languages/C-C-plus-plus/GCC/options/m_lowercase/arch['-march=']
code }

  `sed` is needed  to extract the CPU model from the → development/misc/target-triplet in → development/vim/sources/src/Make_cyg_ming_mak[`Make_cyg_ming.mak`]:
code {
ARCH := $(shell $(CC) → development/languages/C-C-plus-plus/GCC/options/dumpmachine[-dumpmachine] | sed -e 's/-.*//' -e 's/_/-/' -e 's/^mingw32$$/i686/')
code }


   Thus, `ARCH` needs to be specified manually when invoking `gmake`:
code {
gmake -f Make_ming.mak ARCH=x86-64
code }

   Note: running `gcc -dumpmachine` returned `x86_64-w64-mingw32` but I had to change the first part of the triple from `x86_64` to `x86-64`.

   The value of `ARCH` seems to be passed directly to the → development/languages/C-C-plus-plus/GCC/options/m_lowercase/arch[`-march` gcc option].

 }
 { Visual Studio 2017 Community Edition on Windows 7

code {
C:\>                         mkdir %userprofile%\build
C:\>                         cd    %userprofile%\build

C:\Users\Rene\build>        \tools\PortableGit\bin\git.exe clone https://github.com/vim/vim.git

C:\Users\Rene\build>         cd vim\src

C:\Users\Rene\build\vim\src> "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"

C:\Users\Rene\build\vim\src> nmake -f Make_mvc.mak GUI=yes

C:\Users\Rene\build\vim\src> copy gvim.exe   %userprofile%\bin
C:\Users\Rene\build\vim\src> copy vimrun.exe %userprofile%\bin

C:\Users\Rene\build\vim\src> cd ..

C:\Users\Rene\build\vim\>    reg add → Windows/registry/tree/HKEY_CURRENT_USER/Environment/[HKCU\Environment] /v VIMRUNTIME /d %cd%\runtime
code }

 }
  { Visual Studio Express 2010 on Windows 7

    With → Windows/development/Visual-Studio[Visual Studio] Express 2010 on Windows 7:
code {
cd VIMDIR\src
msvc2010.bat
set GUI=yes
set DIRECTX=no
nmake -f Make_mvc.mak
code }

   I needed to set `DIRECTX` to no because otherwise, the compiler didn't find `dwrite_2.h`.

 }

}
{ Make options

  The following lists some variables/options that can be set when the → development/make/index[make file].

  Specifying the *global vimrc file* (will be stored in the global variable → development/vim/sources/src/globals_h#vim-src-globals_h-pathdef_c[`default_vim_dir`]
code {
$ make … VIMRCLOC=/etc …
code }

  Location of the *global runtime files* (will be stored in the global variable `default_vimruntime_dir`):
code {
$ make … VIMRUNTIMEDIR=/usr/share/vim …
code }

}
{ Misc #vim-compilation-make

  The → development/languages/C-C-plus-plus/GCC/options[compiler options] with which vim sources were compiled are stored in the global variable
  → development/vim/sources/src/globals_h#vim-src-globals_h-pathdef_c[`all_cflags`], the options with which the executable was linked in the global variable
  `all_lflags`.

}
