$ Vim: building/compiling

Compiles, but produces `E25: GUI cannot be used: not enabled at compile time`.
code {
$ → development/GNU/toolchain/Build-System/configure[./configure] --enable-python3interp --enable-perlinterp --with-x --enable-gui=gtk3 --enable-fontset --disable-xim
code }

Works, but font is ugly:
code {
$ → development/GNU/toolchain/Build-System/configure[./configure] --enable-python3interp --enable-perlinterp --with-x --enable-gui=auto --enable-fontset --disable-xim
code }

Apparently, `→ development/make[make]` does not create a `gvim` executable. Instead, it's created as a symlink with `make install`.

{ Windows

  It's recommended to build a 32 bit version of vim, even on 64 bit systems. The only advantage of a 64 bit vim is that it can edit files larger than 2GB.

  { Visual Studio Express 2010 on Windows 7

    With → Windows/development/Visual-Studio[Visual Studio] Express 2010 on Windows 7:
code {
cd VIMDIR\src
msvc2010.bat
set GUI=yes
set DIRECTX=no
nmake -f Make_mvc.mak
code }

   I needed to set `DIRECTX` to no because otherwise, the compiler didn't find `dwrite_2.h`.

 }
 { Visual Studio 2017 Community Edition on Windows 7

code {
C:\>                         mkdir %userprofile%\build
C:\>                         cd    %userprofile%\build

C:\Users\Rene\build>        \tools\PortableGit\bin\git.exe clone https://github.com/vim/vim.git

C:\Users\Rene\build>         cd vim\src

C:\Users\Rene\build\vim\src> "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"

C:\Users\Rene\build\vim\src> nmake -f Make_mvc.mak GUI=yes

C:\Users\Rene\build\vim\src> copy gvim.exe   %userprofile%\bin
C:\Users\Rene\build\vim\src> copy vimrun.exe %userprofile%\bin

C:\Users\Rene\build\vim\src> cd ..

C:\Users\Rene\build\vim\>    reg add → Windows/registry/tree/HKEY_CURRENT_USER/Environment/[HKCU\Environment] /v VIMRUNTIME /d %cd%\runtime
code }

 }
 { Windows 10 / Rtools

   → Windows/dirs/Rtools[RTools] comes with → Windows/development/MinGW which can be used if RTools is installed and there is no Visual Studio.

   If RTools was installed without adjusting the → Windows/development/environment-variables[`PATH` environment variable], `PATH` needs to be modified
   so that → development/make[`make`] and the → development/languages/C-C-plus-plus/GCC[GCC compiler] are found:
code {
set rtools_root=C:\Rtools
set path=%rtools_root%\bin;%path%
set path=%rtools_root%\mingw_32\bin;%path%
code }

   As per instructions in `→ development/vim/src[src]/Make_cyg_ming.mak`, the executables should be built with
code {
make -f Make_ming.mak
code }

  However, `gui_dwrite.cpp` could not be compiled because it tried to include `dwrite_2.h` which did not exist in the RTools directory. The
  error message was something like `gui_dwrite.cpp:42:23: fatal error: dwrite_2.h: No such file or directory`.

  I had to turn of colored emoji (which I probably won't need anyway):
code {
make -f Make_ming.mak COLOR_EMOJI=no
code }

   Then, the compilation went on smoothly.
   -
   However, when trying to → development/languages/C-C-plus-plus/GCC/linker[link] `uninstall.exe`, I got this error:
  `undefined reference to '_imp__CoTaskMemFree@4'`.
   -
   In order to fix this, I had to manually add `-lole32` in the target `uninstal.exe` in `src\Make_cyg_ming.mak`:
code {
uninstal.exe: uninstal.c
            $(CC) $(CFLAGS) -o uninstal.exe uninstal.c $(LIB) -lole32
code }

 }

}
