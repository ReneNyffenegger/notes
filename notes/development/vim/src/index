$ vim sources

The source files apparently are → https://github.com/vim/vim/pull/5299#issue-347285903[C99 compatible].

Functions that handle *machine specific stuff* seem to have the prefix `mch_…`.

table { ll

  → development/vim/sources/src/ascii_h[ascii.h] ☰ 
  → development/vim/sources/src/autocmd_c[autocmd.c] ☰ autocommands
  buffer.c ☰ manipulating → development/vim/editing/buffers[buffers] (loaded files)
  → development/vim/sources/src/create_cmdidxs_vim[create_cmdidxs.vim] ☰ Creates → development/vim/sources/src/ex_cmdidxs_h[ex_cmdidxs.h]
  diff.c ☰  diff mode (vimdiff)
  → development/vim/sources/src/digraph_c[digraph.c] ☰ → development/vim/editing/digraphs[digraphs]
  → development/vim/sources/src/dosinst_c[dosinst.c] ☰
  → development/vim/sources/src/eval_c[eval.c] ☰ Expression evaluation
  → development/vim/sources/src/ex_docmd_c[ex_docmd.c] ☰ Functions for executing an → development/vim/commands[ex command line]. (Function `do_cmdline()`)
  → development/vim/sources/src/ex_cmds_h[ex_cmds.h] ☰ defines → development/vim/commands
  → development/vim/sources/src/ex_cmds2_c[ex_cmds2.c] ☰ Some more functions for *command line commands*.
  ex_cmdidxs.h ☰ Automatically generated code by create_cmdidxs.vim
  → development/vim/sources/src/ex_getln_c[ex_getln.c] ☰ functions for entering and editing an Ex command line.
  → development/vim/sources/src/feature_h[feature.h] ☰ Definitions of preferences when vim is → development/vim/compiling[compiled].
  → development/vim/sources/src/filepath_c[filepath.c] ☰ Dealing with filenames and paths.
  fileio.c ☰ reading and writing files
  findfile.c ☰ search for files in 'path'
  fold.c ☰  folding
  → development/vim/sources/src/getchar_c[getchar.c] ☰ Functions related with getting a character from the user/mapping/redo/…
  → development/vim/sources/src/globals_h[globals.h] ☰ Definition of global variables.
  → development/vim/sources/src/gui_w32_c[gui_w32.c] ☰ GUI support for Microsoft Windows, aka Win32.
  indent.c ☰ C and Lisp indentation
  mark.c ☰  marks
  mbyte.c ☰  multi-byte character handling
  → development/vim/sources/src/main_c[main.c] ☰ defines → development/languages/C-C-plus-plus/C/main[`main`]
  memfile.c ☰ storing lines for buffers in a swapfile
  memline.c ☰ storing lines for buffers in memory
  menu.c ☰  menus
  message.c ☰ Functions for displaying (error) messages on the *command line*.
  → development/vim/sources/src/misc1_c[misc1.c] ☰ Functions that didn't seem to fit elsewhere
  → development/vim/sources/src/misc2_c[misc2.c] ☰ Various functions
  → development/vim/sources/src/normal_c[normal.c] ☰ 
  → development/vim/sources/src/ops_c[ops.c] ☰ handling operators (`d`, `y`, `p`, …)
  → development/vim/sources/src/option_c[option.c] ☰ Code to handle user-settable → development/vim/options[options].
  → development/vim/sources/src/optiondefs_h[optiondefs.h] ☰ → development/vim/options[option] definitions
  → development/vim/sources/src/os_dos_h[os_dos.h] ☰
  → development/vim/sources/src/os_mswin_c[os_mswin.c] ☰ Routines for win32
  → development/vim/sources/src/os_w32exe_c[os_w32exe.c] ☰ defines `wWinMain` which calls → development/languages/C-C-plus-plus/C/main[`main`] which is defined in → development/vim/src/main_c[`main.c`].
  → development/vim/src/pathdef_c[pathdef.c] ☰ seems to be genarted during the build process
  → development/vim/sources/src/proto_h[proto.h] ☰ Include the (automatically generated) function prototypes.
  quickfix.c ☰ quickfix commands (":make", ":cn")
  → development/vim/sources/src/regexp_h[regexp.h] ☰
  → development/vim/sources/src/regexp_c[regexp.c] ☰ → development/regular-expressions
  screen.c ☰ updating the windows (`update_screen()` calls `win_update()` for every window which calls `win_line()` for every line.
  → development/vim/sources/src/scriptfile_c[scriptfile.c] ☰ Functions for dealing with the → development/vim/sources/runtime[runtime directories/files].
  search.c ☰ pattern searching
  → development/vim/sources/src/sign_c[sign.c] ☰ signs
  spell.c ☰  spell checking
  → development/vim/sources/src/structs_h[structs.h] ☰ Definitions of → development/languages/C-C-plus-plus/C/language/struct[structs] used in vim
  → development/vim/sources/src/syntax_c[syntax.c] ☰ → development/vim/syntax[Syntax] and other highlighting.
  tag.c ☰ tags
  term.c ☰ terminal handling, termcap codes
  → development/vim/sources/src/testing_c[testing.c] ☰ Support for tests
  undo.c ☰ undo and redo
  → development/vim/sources/src/ui_c[ui.c] ☰ functions for the *user interface*: → hardware/keyboard input, clipboard, input buffer
  → development/vim/sources/src/version_h[version.h] ☰ 
  version.c ☰ 
  → development/vim/sources/src/vim_h[vim.h] ☰ defines version number, name etc.
  vimrun.c ☰ to create `vimrun.exe`.
  → development/vim/sources/src/vim_ico[vim.ico] ☰ Icon
  → development/vim/sources/src/vim_rc[vim.rc] ☰ Icon and version information for the Win32 version of Vim
  → development/vim/sources/src/winclip_c[winclip.c] ☰ → Windows/clipboard[Clipboard] handling for Windows
  → development/vim/sources/src/window_c[window.c] ☰ handling split windows
  → development/vim/sources/src/xpm_w32_c[xpm_w32.c] ☰ `LoadXpmImage()` which tries to load an XPM image from a file. 

  → development/vim/sources/src/Make_cyg_ming_mak[`src/Make_cyg_ming.mak`] ☰

table }

{ Macros

  table { ll

    `BACKSLASH_IN_FILENAME` ☰ 
    `CASE_INSENSITIVE_FILENAME` ☰ ignore case when comparing file names
    `CLEAN_RUNTIMEPATH` ☰
    `DFLT_BDIR` ☰ Default backup directory (`backupdir`)
    `DFLT_DIR` ☰ Default directory (`directory`)
    `DFLT_ERRORFILE` ☰
    `DFLT_RUNTIMEPATH` ☰ Default → development/vim/options/runtimepath[runtimepath].
    `DFLT_VDIR` ☰ Default view directory (`viewdir`)
    `EVIM_FILE` ☰
    `EXRC_FILE` ☰
    `GVIMRC_FILE` ☰
    `DFLT_HELPFILE` ☰
    `FILETYPE_FILE` ☰
    `FTOFF_FILE` ☰
    `FTPLUGIN_FILE` ☰ 
    `FTPLUGOF_FILE` ☰
    `HAVE_DUP` ☰ If `dup()` is available
    `HAVE_TRY_EXCEPT` ☰ Used in Windows environment for `__try` and `__except`?
    `HAVE_ST_MODE` ☰ if `stat.st_mode` is available
    `INDENT_FILE` ☰
    `INDOFF_FILE` ☰
    `MSWIN` ☰
    `NO_CONSOLE_INPUT` ☰
    `PROTO` ☰
    `SPACE_IN_FILENAME` ☰ 
    `SPECIAL_WILDCARD` ☰
    `SYNTAX_FNAME` ☰
    `SYS_GVIMRC_FILE` ☰ See → development/vim/vimrc
    `SYS_MENU_FILE` ☰
    `SYS_OPTWIN_FILE` ☰
    `SYS_VIMRC_FILE` ☰ See → development/vim/vimrc
    `UNIX` ☰
    `USE_CRNL` ☰ If → development/line-break[lines end] in CR/NL rather than NL
    `USE_INPUT_BUF` ☰
    `USR_EXRC_FILE` ☰
    `USR_EXRC_FILE2` ☰
    `USR_GVIMRC_FILE` ☰
    `USR_GVIMRC_FILE2` ☰
    `USR_GVIMRC_FILE3` ☰
    `USR_VIMRC_FILE` ☰  See → development/vim/vimrc
    `USR_VIMRC_FILE2` ☰
    `USR_VIMRC_FILE3` ☰
    `VIM_BACKTICK` ☰
    `VIMINFO_FILE` ☰
    `VIMINFO_FILE2` ☰
    `VIM_DEFAULTS_FILE` ☰ 
    `VIMRC_FILE` ☰

  table }

  In a → Windows environment, these macros might be defined in → development/vim/sources/src/os_dos_h[`os_dos.h`].

  Compare with → development/vim/features[features] that are also defined as → development/languages/C-C-plus-plus/preprocessor/macros[macros].


}


→ development/vim/src/xxd/xxd_c[xxd/xxd.c]

→ development/vim/src/GvimExt/gvimext_cpp[GvimExt/gvimext.cpp]

sa:
  `src\README.txt`, `:help development`
