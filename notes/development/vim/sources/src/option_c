$ VIM: src/option.c

`option.c` contains code to handle user-settable → development/vim/options[options].

{ vimrc_found() #vim-src-option-vimrc_found

 `vimrc_found()` is called when a `.vimrc` or `"VIMINIT"` has been found (see → development/vim/sources/src/scriptfile_c#scriptfile_c-do_source[`do_source()`]).

? This function then stores then path and name of the file in the (environment?) variables `MYVIMRC` or ``MYGVIMRC`.

}
{ do_set()

 `do_set()` is called when an option is set (for example to handle `set nocompatible`).

}
{ set_init_1()

  First part of option initializing.

  Among others, `set_init_1` sets `p_cp` (development/vim/options/compatible[option compatible]) to `TRUE` in order to be VI compatible.

}
{ set_init_2()

  Second part of option initializing, called after getting rows and columns, and setting `term`.

}
{ set_option_default()

 `set_option_default` sets an option to its default value.

}
{ set_option_value()

  …

}
{ findoption() #vim-src-option-findoption

  Finds the index for a given (`char_u*`) option.

  Compare with → development/vim/sources/src/ex_docmd_c#vim-src-ex_docmd-find_command[`find_command()`]

}
{ compatible_set() #vim-src-option-compatible_set

 `compatible_set()` is called when → development/vim/options/compatible[`:set compatible`] or `:set nocompatible`] is executed.

  when vim is set to *compatible*, `compatible_set` sets all options that have the `P_VIM` flag to a vi compatible value.

  Otherwise, it sets all options that have a different default for vim (without the `P_VI_DEF` flag) to that default.
  

}

sa:
  → development/vim/sources/src/option_h[option.h]
