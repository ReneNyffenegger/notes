$ vim - src/ex_docmd.c

`ex_docmd.c` contains functions for executing an → development/vim/commands[ex command] or ex command line.

{ do_cmdline_cmd()

 `do_cmdline_cmd()` executes a simple command and is used for translated commands like `*`.

}
{ do_cmdline()

 `do_cmdline()` executes one Ex command line.

  This function can be called recursively.

}
{ do_one_cmd()

  …

}
{ find_command(exarg_T *eap … ) #vim-src-ex_docmd-find_command

 `find_command` tries to «locate» an Ex command (built-in or user defined) by its name.

 ? `eap->cmd` points to the start of the command.

  The function sets `eap->cmdidx`

 ~Returns~ a `char_u*` that points after the command name, or `NULL` if command was ambigous.
  -
  For example, if called with `set nocompatible`, it will return a pointer to `nocompatible`.

? Exceptions are if the command starts with
    • `k`
    • `s`
    • `d`

  The function also checks if the *command table* needs to be updated. If this is the case, it throws the error *E943*.
 (See → development/vim/sources/src/create_cmdidxs_vim[`create_cmdidxs.vim`] and
      → development/vim/sources/src/ex_cmdidxs_h[`ex_cmdidxs.h`])

  Compare with → development/vim/sources/src/option_c#vim-src-option-findoption[`findoption()`].

}
{ ex_ni()

 `ex_ni` is called for ex-commands that are not implemented.

  They're probably not implemented because they require a `FEAT_*` with which the sources were not → development/vim/compiling[compiled] (for example in something like to following code snippet):
code {
#ifndef FEAT_PRINTER
# define ex_hardcopy	ex_ni
#endif
code }

}

sa:
  → development/vim/sources/src/ex_cmds_h[`ex_cmds.h`] and
  → development/vim/sources/src/ex_cmds_c[`ex_cmds.c`]
