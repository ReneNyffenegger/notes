$ VIM: src/scriptfile.c
@ src/scriptfile.c

Functions for dealing with the → development/vim/sources/runtime[runtime directories/files].

{ do_source() #scriptfile_c-do_source

  Reads the given file (`fname`) and executes its lines as → development/vim/commands[EX commands].

  A speciality is that this function tries to read `_vimrc` if it was unable to read `.vimrc` (and vice versa), and similarly for the pair `.exrc`/`_exrc`)

? If `do_source()` read an → development/vim/vimrc[initialization (vimrc) file], it calls → development/vim/sources/src/option_c#vim-src-option-vimrc_found[`vimrc_found()`].

  The → development/vim/sources/src/vim_h#vim-src-vim_h-DOSO[`DOSO_*`] macros.

  See also → development/vim/sources/src/scriptfile_c/source_cookie[the `source_cookie` struct].

}
{ do_in_path() #vim-src-scriptfile-do_in_path

 Find the file `name` in all directories of `path` and invokes `callback` if found.

 `name` can contain wildcards.

 `flags`:
    • `DIP_ALL` - source all files, otherwise only the first one.
    • `DIP_DIR` - find directories instead of files.
    • `DIP_ERR` - give an error message if there is no match.
 
  Returns `FAIL` if no file could be sourced, `OK` otherwise.

}
{ do_in_path_and_pp() #vim-src-scriptfile-do_in_path_and_pp

 Finds a *file name* in a given `path` using → #vim-src-scriptfile-do_in_path[`do_in_path()`].

 When found, calls the given → development/languages/C-C-plus-plus/C/language/datatypes/pointer/function[callback function].

 If `flags` has `DIP_ALL` repeat for all matches, otherwise only the first one is used.

 Returns OK when at least one match found, FAIL otherwise.
 
 If `name` is `NULL` calls callback for each entry in `path`. Cookie is
 passed by reference in this case, setting it to NULL indicates that callback
 has done its job.

}
{ do_in_runtimepath()

  Calls → #vim-src-scriptfile-do_in_path_and_pp[`do_in_path_and_pp()`] with `p_rtp` for `path`.

}
{ fopen_noinh_readbin()

  Special function to open a file without handle inheritance.

  When possible the handle is closed on exec().

  Returns a `FILE*`.

}
