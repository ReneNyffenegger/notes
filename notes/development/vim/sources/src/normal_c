$ VIM: src/normal.c
@ src/normal.c

 `normal.c` contains the main routine for processing characters in command mode (aka → development/vim/editing/modes/normal?).
 -
 Communicates closely with the code in → development/vim/sources/src/ops_c[ops.c] to handle the operators.

 { nv_cmd / nv_cmds

code {
static const struct nv_cmd
{
    int         cmd_char;       // (first) command character
    nv_func_T   cmd_func;       // function for this command
    short_u     cmd_flags;      // NV_ flags
    short       cmd_arg;        // value for ca.arg (The type of ca is → development/vim/sources/src/structs_h/cmdarg_T[cmdarg_T])
} nv_cmds[] =
{
    {NUL,	nv_error,	0,			0},
    {Ctrl_A,	nv_addsub,	0,			0},
    {Ctrl_B,	nv_page,	NV_STS,			BACKWARD},
     …
};
code }

 `nv_cmd` is a `struct` that essentially stores a → development/languages/C-C-plus-plus/C/language/datatypes/pointer/function[function pointer]
  and some flags for *one* → development/vim/editing/modes/normal[normal] or → development/vim/editing/modes/visual[visual] mode command.
  -
  The function pointer points to a function that is able to process the normal/visual mode command.

 `nv_cmds` is an array of `nv_cmd` which stores *all* possible normal or visual mode commands.

  The function pointer is called within the function `normal_cmd()`.


}
{ nv_colon

 `nv_colon` calls `do_cmdline` to get a command line and execute it.

}
{ normal_cmd() #vim-src-normal-normal_cmd

 `normal_cmd()` is (repeatedly) called from → development/vim/sources/src/main_c#vim-src-main_loop[`main_loop()`] (if `exmode_active` is `FALSE`) in order to process → development/vim/editing/modes/normal[normal mode] commands.

 `normal_cmd()` gets the next character from → development/vim/sources/src/getchar_c#vim-src-getchar-safe_vgetc[`safe_vgetc()`].

}
