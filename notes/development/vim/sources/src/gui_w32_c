$ VIM: src/gui_w32

GUI support for Microsoft Windows, aka Win32.

Among others, this file handles Windows messages such as `WM_KEYDOWN`, `WM_SYSKEYDOWN`.

{ gui_mch_init()

 `gui_mch_init()` initializes the GUI for gvim running on Windows.

  Among others, it creates (`CreateWindowExW`) the main window and the text area window.

 `gui_mch_init` is called from → development/vim/sources/src/gui_c#vim-src-gui-gui_start[`gui_start()`].

}
{ gui_mch_wait_for_chars(int wtime) #vim-src-gui_w32-gui_mch_wait_for_chars

  This function is called by `gui_wait_for_chars()` and Waits for a character from the keyboard. If `wtime` is `-`, it waits until a character is pressed. If `wtime` is greater than `0`, it waits at most `wtime` milliseconds.

  Returns `OK` if a character was found to be available within the given time (`wtime`), `FAIL` otherwise.

  If `wtime > 0`, it uses the → Windows/development/WinAPI function `SetTimer()` to call → #vim-src-gui_w32-_OnTimer[`_OnTimer`] after `wtime` milliseconds.
  -
  When `_OnTimer` is triggered, it sets `s_wait_timer` to `TRUE`.

 `gui_wait_for_chars` than enters a loop that is exited either when `s_wait_timer` was set to `TRUE` or when a character was pressed.


  TODO: this is the function that calls `MsgWaitForMultipleObjects(0, NULL, FALSE, 100, QS_ALLINPUT)`.

}
{ _WndProc() #vim-src-gui_w32-WndProc

 `_WndProc()` is the Window procedure for gvim's main window.

 `WM_CHAR` messages are handled by → #vim-src-gui_w32-_OnChar[`_OnChar()`].

} 
{ process_message() #vim-src-gui_w32-process_message

  Handle a single windows message.

  If the message is `WM_KEYDOWN` or `WM_SYSKEYDOWN` and the virtual keycode is `VK_CANCEL` (= ESC?), then
    • `trash_input_buf()` is called,
    • `ctrl_break_was_pressed` is set to `TRUE` (TODO: however, it seems that this variable is only queried in `terminal.c` which doesn't seem to play a role in a gui-vim).
    • `Ctrl_C` is added to the input buffer (`add_to_input_buf`).

}
{ _TextAreaWndProc()

  The Window procecdure for the text area inside gvim's main window.

  Messages that are handled are:
code { 
HANDLE_MSG(hwnd, WM_LBUTTONDBLCLK,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_LBUTTONDOWN,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_LBUTTONUP,	_OnMouseMoveOrRelease);
HANDLE_MSG(hwnd, WM_MBUTTONDBLCLK,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_MBUTTONDOWN,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_MBUTTONUP,	_OnMouseMoveOrRelease);
HANDLE_MSG(hwnd, WM_MOUSEMOVE,	_OnMouseMoveOrRelease);
HANDLE_MSG(hwnd, WM_PAINT,	_OnPaint);
HANDLE_MSG(hwnd, WM_RBUTTONDBLCLK,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_RBUTTONDOWN,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_RBUTTONUP,	_OnMouseMoveOrRelease);
HANDLE_MSG(hwnd, WM_XBUTTONDBLCLK,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_XBUTTONDOWN,_OnMouseButtonDown);
HANDLE_MSG(hwnd, WM_XBUTTONUP,	_OnMouseMoveOrRelease);
HANDLE_MSG(hwnd, WM_SIZE,	_OnSizeTextArea);
code }

  If → development/vim/features[feature] `FEAT_BEVAL_GUI` is enabled, it also handles `WM_NOTIFY`.

}
{ _OnChar() #vim-src-gui_w32-_OnChar

  `_OnChar` handles `WM_CHAR` messages and is (one of the?) functions that calls → development/vim/sources/src/ui_c#vim-src-ui-add_to_input_buf[`add_to_input_buf()`].

}
{ _OnSetFocus #vim-src-gui_w32-_OnSetFocus

 `_OnSetFocus` is called when a `WM_SETFOCU` message is received.

 `_OnSetFocus` calls `gui_focus_change(TRUE)` which in turn uses → development/vim/sources/src/ui_c#vim-src-ui-add_to_input_buf[`add_to_input_buf()` to insert
  the triplet `CSI`, `KS_EXTRA`, `KE_FOCUSGAINED` to the *input buffer*.

}
{ _OnTimer #vim-src-gui_w32-_OnTimer

  This function basically sets the `static` variable `s_wait_timer` to `TRUE` to indicate to the loop in → #vim-src-gui_w32-gui_mch_wait_for_chars[`gui_mch_wait_for_chars()`] that the duration that that function is supposed to wait for a character
  has expired.
  
}
{ get_work_area()

  `get_work_area` determines the size of the screen, taking position on multiple monitors into account (if supported).
}
{ gui_mch_set_shellsize()

  Set the size of the window to the given width and height in pixels.

}
{ gui_mch_set_fg_color() / gui_mch_set_bg_color()

  Sets foreground and background color.

}
{ ex_simalt() #vim-src-gui_w32-ex_simalt

  Implementation of the → development/vim/commands/simalt[`:simalt`] command by delibarate use of `PostMessage(… WM_SYSCOMMAND …)`.

}


sa:
  → development/vim/sources/src/gui_c[gui.c]
