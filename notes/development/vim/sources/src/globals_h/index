$ vim - src/globals.h

`globals.h` contains the definition of global variables.

{ The EXTERN macro

  These global variables are prefixed with the macro `EXTERN`, for example
code {
EXTERN schar_T	*ScreenLines INIT(= NULL);
code }

  The → development/vim/sources/src/main_c[`main.c`] defines `EXTERN` before it includes → development/vim/sources/src/vim_h[`vim.h`] which in turn includes `globals.h`.

  Thus, when `main.c` is compiled, the global variables are defined.

  However, `globals.h` also contains
code {
#ifndef EXTERN
# define EXTERN extern
# define INIT(x)
#else
# ifndef INIT
#  define INIT(x) x
#  define DO_INIT
   …
# endif
#endif
code }

  This allows to externally declare all global variables for all other compilation units.

}
{ homedir

 `homedir` stores the value of → development/vim/script/vimscript/variables/HOME[`$HOME`],
  see → development/vim/sources/src/misc1_c#vim-src-misc1_init_homedir[`init_homedir()`].

}
{ Windows (win_T) strucures

  Vim stores the characteristics of → development/vim/editing/windows[windows] in `win_T` structures.

  Regular (that is non-hidden (?)) windows] are stored in a *linked list*. 

 `*firstwin` points to its first entry, `*curwin` to the current window, `*lastwin` to the last entry in the linked list.

}
{ Buffer related

  { Linked list of buffers #vim-src-globals_h-linked-list-of-buffer

    All → development/vim/editing/buffers[buffers] are stored in a linked list.

    The global variables `firstbuf` and `lastbuf`, whose type is `buf_T*` point to the first and last buffer, respectively, in the linked list.

  }
  { FOR_ALL_BUFFERS

   `FOR_ALL_BUFFERS` is a macro that iterates over all buffers in the linked list. It is defined as
code {
#define FOR_ALL_BUFFERS(buf) for (buf = firstbuf; buf != NULL; buf = buf->b_next)
code }

  }
  { curbuf #vim-src-globals_h-curbuf
  
    The global variable `curbuf`, whose type is also `buf_T*` points to the currently active buffer.

  }

}
{ cmdline window related


code {
#ifdef FEAT_CMDWIN
EXTERN int	cmdwin_type INIT(= 0);	// type of cmdline window or 0
EXTERN int	cmdwin_result INIT(= 0); // result of cmdline window or 0
#endif
code }

  `cmdwin_result` is used in → development/vim/sources/src/main_c#vim-src-main_loop[`main_loop()`] as a terminating condition to break out from the main loop if the main loop is used to input command line data.

}

{ TODO

  • `enc_utf8` (→ development/Unicode/UTF-8)
  • `default_vimruntime_dir` (declared in → development/vim/sources/src/globals_h[`src/globals.h`], defined in `pathdef.c`)

}
