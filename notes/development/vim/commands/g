$ Vim command: g
@ g

code {
:g/pattern/cmd
:range g/pattern/cmd
code }

The `g` command first scans all lines in range and marks those that match `pattern`.
-
It then iterates over the marked lines and executes `cmd`. (See → http://vimdoc.sourceforge.net/htmldoc/repeat.html#multi-repeat[multi-repeat] in → http://vimdoc.sourceforge.net/htmldoc/[vim's documentation]).
-
If `cmd` happens to delete a marked line, the mark disappears.

Because of this *two-pass operation*, the `g` command, combined with the → development/vim/commands/m[move command (`m`)] allow to reverse the order of lines in a → development/vim/editing/buffers[buffer]:
code {
:g/^/m0
code }

{ Delete lines that match a pattern

  Lines that match a pattern can be easily deleted with the global command combined with → development/vim/commands/d[`d`]:
code {
:g/pattern/d
code }

}
{ Extracting text from a buffer into a register

Here's a file:
code {
some text
# xyz: one
more text
foo bar baz
# xyz: second
final text
# xyz: final words
The end.
code }

I want to extract all text after `# xyz:`

I can do that with the global command:
code {
:let @a='' | g/^# xyz:/let @A=substitute(getline('.'), '^# xyz: \(.*\)', '\1' . nr2char(10), '')
code }

  After executing this command, the → development/vim/registers[register] `a` contains
code {
one
second
final words
code }

}
{ Deleting every 2nd line

code {
:g/^/+d
code }

  Note: this command throws error `E16: invalid range` if the number of lines in the buffer is odd.

}

sa:
  → development/vim/commands[Ex commands]
