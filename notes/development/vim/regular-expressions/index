$ VIM: Regular expressions
@ regular expressions

→ development/vim/script/regular_expressions/non_greedy[Non greedy matches]

→ development/vim/script/regular_expressions/negative_lookahead[negative lookahead]

→ development/vim/script/regular_expressions/negative_lookbehind[negative lookbehind]

→ development/vim/script/regular_expressions/to_upper_and_lower_case[to upper and lower case]

→ development/vim/script/regular_expressions/column_n[match at specific columns only]


{ Lookaround assertions #vim-re-lookaround-assertions

  The → development/regular-expressions#re-lookaround-assertions[lookaround assertions] in vim are as follows:

    table { lll

        ☰ ~Positive~ ☰ ~Negative~
      ~Look-ahead~  ☰  `ATOM\@=` ☰ `ATOM\@!`
      ~Look-behind~ ☰ `ATOM\@<=` , `ATOM\@42<=` ☰ `ATOM\@<!` , `ATOM\@42<!`
    table }

    The special forms `\@42<=` and `ATOM\@42<!` limit the range that is searched to 42 bytes.

    TODO: `\&` works the same as using `\@=`: `foo\&..` is the
    same as `\(foo\)\@=..`.  But using `\&` is easier, you don't need the braces.

}
{ Magic, very magic, no magic, very magic

  A pattern can be interpreted in one of four ways.

  The option → development/vim/options/magic[`magic`, `nomagic`] determines if it is interpreted magic nor non-magic. Within the pattern, this can also be forced using `\m` (magic) and `\M` (non-magic).

  In addition, `\v` forces *very magic*, `\V` forces *very non-magic*.

  With *very magic*, all → development/Unicode/ASCII characters except alpha-numeric ones (`0`…`9`, `a`…`z`, `A`…`Z` and `_`) have a special meaning.
  -
  With *very non-magic*, in order for a character to become a special meaning, it must be preceded by a backslash. In addition, the pattern terminating characters (`/` (or `?`)) have obviously a special meaning.

  As per → https://stackoverflow.com/a/3760486/180275[this Stackoverflow answer], there is way to permanently or globally enforcing *very magic*. As alternative, it is suggest to use the
  mapping `:cnoremap s/ s/\v`.

}

{ Search for unicode characters

  A → development/Unicode[unicode] character can be indicated with `\%u`:

  Search for hebrew letter → biblisches/Grundtext/Buchstaben/Aleph[א] (→ development/Unicode[unicode] character U+05D0):
code {
/\%u05d0
code }

  Searching for a unicode range. The following regular expression searches for hebrew characters between
  → biblisches/Grundtext/Buchstaben/Beth[ב] (U+05D1) and → biblisches/Grundtext/Buchstaben/Daleth[ד] (U+05D3):
code {
/[\u05d1-\u05d3]
code }


}
{ :help perl-patterns

 `:help perl-patterns` lists a few differences between → development/languages/Perl[Perl's] flavor of → development/languages/Perl/regular-expressions[regular expressions] and Vim's flavor.

 table { lll
     ☰ Perl ☰ Vim
    Force case sensitivity/in-sensitivity ☰ `(?i)`, `(?-i)` ☰ `c`, `C`
    Backref-less grouping ☰ `?:atom` ☰ `\%(atom\)`
    Conservative quantifiers (aka non-greedy matching?) ☰ `*?`, `+?`, `??`, `{}?` ☰ `\{-n,m}`
    → development/regular-expressions/index#re-lookaround-assertions[Zero-width] match, non-match ☰ `(?=atom)`, `(?!atom)` ☰ `atom\@=`, `atom\@!`
    Zero-width preceding match, non-match ☰ `(?<=atom)`, `(?<!atom)` ☰ `atom\@<=`, `atom\@<!`
    Match without retry ☰ `(?>atom)` ☰ `atom\@>`
 table }

}


sa:
  → development/vim/script/vimscript/regular_expressions

  → development/regular-expressions

  The → development/vim/sources/runtime/plugin/logiPat_vim[logiPat] plugin offers boolean-logic based on regular expression pattern matching.
