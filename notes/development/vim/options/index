$ vim options

{ Characteristics of options #vim-option-characteristics

  The value of an option is one (or more?) of
    • boolean (→ development/vim/sources/src/option_h#vim-src-option_h-flags[`P_BOOL`])
    • numeric (`P_NUM`)
    • string (`P_STRING`, `P_NFNAME`)
    • comma separated list (`P_COMMA`, `P_ONECOMMA`)
    • single-char flags (`P_FLAGLIST`)
    • (?) a list of flags
    • (?) buffer string 
    • ?

  The *scope* of an option can be
    • global
    • local to a → development/vim/editing/windows[window]
    • local to a → development/vim/editing/buffers[buffer]

  An option has a *full name* and an *abbreviation* (or *short name*).

  Each option with their characteristics is stored in a → development/vim/sources/src/optiondefs_h#vim-src-optiondefs-vimoption[`vimoption` struct].
}
{ Commands related to options

  table { ll
   `:set all`     ☰ shows all options and their values.
   `:set opt&`    ☰ reverts `opt` to its default value
   `:set opt&vim` ☰ reverts `opt` to default *VIM* value
   `:set opt&vi`  ☰ to default vi value.
   `:set all&`    ☰ sets all options to their default value.
   `:set opt!`    ☰ toggle (invert) boolean options (such as → development/vim/options/autoindent[`autoindent`]).
   `:set invOPT`  ☰ toggles (boolean) `OPT`. Same effect as `:set OPT!`.
   `:set opt?`    ☰ displays the current value for the option.
   `:set opt<`    ☰ Remove local value of an option so that global value will be used.
   `:setl opt<`   ☰ Copy global value of an option to its local value.
   `:set opt=…`, `:set opt:…`   ☰ Assigns a value to a number or text option. (Whitespace on left side of `=` or `:` is ignored, on right side, whitespace is not allowed, because it separates it from the next assignment)
   `:set opt+=…`  ☰ Add flag to flag option; increment number option by given value; append given value to text value
   `:set opt-=…`  ☰ 
   `:set op^+=…`  ☰ Multiply number value; prepend value to text value
   `:→ development/vim/commands/options[options]` ☰ opens a window (or menu?) to choose options.
 table }

  It is possible to set multiple values in one command:
code {
:set ignorecase shiftwidth=4 autoindent
code }

}
{ Setting options from modelines

  It's possible to set some options from so called *modelines*.

  For security reasons, not all options can be modified in modelines. Such options are marked with the `P_SECURE` and/or `P_NO_ML` → development/vim/sources/src/option_h#vim-src-option_h-flags[option flag].

}
{ Hidden options #vim-hidden-option

  Apparently, some options are hidden. Trying to → development/vim/commands/set[`:set`] them is ignored, and they're not printed.

  … not sure what to make of this!

}
{ Some options

  table { ll
    → development/vim/options/autoread ☰ Automatically reload files whose content was changed outside of VIM.
    → development/vim/options/autoindent ☰
    → development/vim/options/binary ☰
    → development/vim/options/bufhidden ☰
    → development/vim/options/buflisted ☰
    → development/vim/options/buftype ☰
    → development/vim/options/cindent[cindent] ☰
    → development/vim/options/cinkeys[cinkeys] ☰ A list of keywords that start an extra indent when `smartindent` or `cindent` is set
    → development/vim/options/cinwords ☰
    → development/vim/options/compatible[compatible] ☰
    → development/vim/options/endofline ☰
    → development/vim/options/eventignore ☰ a list of → development/vim/events[events] that are ignored (not triggerd)
    → development/vim/options/expandtab ☰
    → development/vim/options/fixendofline ☰
    → development/vim/options/helpfile ☰
    → development/vim/options/indentexpr[indentexpr] ☰
    → development/vim/options/indentkeys[indentkeys] ☰
    → development/vim/options/lisp[lisp] ☰
    → development/vim/options/magic[magic] ☰
    → development/vim/options/paste[paste] ☰ disables or resets some options so as to be able to paste text into a → development/vim/editing/buffers[buffer]
    → development/vim/options/pastetoggle[pastetoggle] ☰ key sequence that toggles the → development/vim/options/paste option.
    → development/vim/options/revins[revins] ☰
    → development/vim/options/ruler[ruler] ☰
    → development/vim/options/smartindent[smartindent] ☰
    → development/vim/options/showmatch ☰
    → development/vim/options/smarttab ☰
    → development/vim/options/softtabstop ☰
    → development/vim/options/swapfile ☰
    → development/vim/options/textwidth ☰
    → development/vim/options/updatetime ☰
    → development/vim/options/wrapmargin ☰
      `foldtext` (see → development/vim/editing/fold) ☰
  table }

}

sa:
  → development/vim/sources/src/option_c[`src/option.c`],
  → development/vim/sources/src/optiondefs_h[`src/optiondefs.h`]

  Options that are local to a → development/vim/editing/windows[window] are stored in → development/vim/sources/src/structs_h/winopt_T[`winopt_T`].
