$ git init


`git init` creates an empty git → development/version-control-systems/git/repository[repository] or reinitializes an existing one.

Without the `--bare` option, the created repository is called a → development/version-control-systems/git/working-directory.

The main purpose of executing `git init` in an existing → development/version-control-systems/git/repository is to
  • update added templates, or to
  • move the repository to another place (option `--separate-git-dir`).

{ Turn a directory into a git repository

  Create a new (and empty) directory and `cd` into it:
  gh|about-git|/commands/init/in-repo/create-dir.ps1||

  Create some files in this directory:
  gh|about-git|/commands/init/in-repo/create-files.ps1||

  Turn the directory a repository:
  gh|about-git|/commands/init/in-repo/init.ps1||

  The repository is stored in a sub-directory named → development/version-control-systems/git/_git[`.git`].

 `git init` did not add the files in the directory, let alone commit, to the repository.
  -
  So, add the files to the → development/version-control-systems/git/index_ …
  gh|about-git|/commands/init/in-repo/add.ps1||
  … and then commit them to the repository:
  gh|about-git|/commands/init/in-repo/commit.ps1||

  
  Destroy the repository:
code {
cd ..
rmdir -recurse --force repo
code }

}
{ git init <directory>

  When executing `git init`, a directory name can be specified:
code {
git init funProject
code }

  This will create the directory `funProject` and the repository (the → development/version-control-systems/git/_git[`.git`] directory) in that directory.

}
{ Initializing an ordinary repository vs. a bare repository

  The only difference between a freshly created «ordinary» and → development/version-control-systems/git/repository#bare[bare repository] is the content of the
  repository's → development/version-control-systems/git/_git/config[`config`] file, which is demonstrated here.
  -
  First, the two repositories are created:
  gh|about-git|/commands/init/vs-bare/init-repos.ps1||

  Then, their tree structure is compared with → Linux/shell/commands/diff[`diff -r`]:
  gh|about-git|/commands/init/vs-bare/diff-r.ps1||

  It turns out that only → development/version-control-systems/git/_git/config[`.git/config`] is diffent.

  gh|about-git|/commands/init/vs-bare/diff-config.ps1||

  The two differences in `.git/config` are:
    • The value `bare` (or more accurately `core.bare`) is set to to `true` in the «ordinary» repository and to `false` in the bare repository. Setting `core.bare` to `true` disables some git commands such as → development/version-control-systems/git/commands/add[`git add`] or → development/version-control-systems/git/commands/merge[`git merge`])
    • The «ordinary» repository has the additonal setting `logallrefupdates`, set to `true`, which enables the *reflog*.

}

sa:

 `git init-db` is a synonym for `git init`.

  Executing `git init` installs some sample hook-scripts under → development/version-control-systems/git/_git/hooks[`.git/hooks`]. These scripts come with the suffix `.sample` which needs to be removed
  to make them operational.

rem {
  → http://renenyffenegger.ch/development/git-internals/init/index.html[Git internals: init]
rem }

  → development/version-control-systems/git/commands

 `→ Linux/fhs/usr/share/git-core/templates`
