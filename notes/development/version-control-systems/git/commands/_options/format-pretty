$ Git: --format | --pretty

`--pretty` is a synonym for the `--format` option

code {
git log  --format=…
git show --pretty=…
code }

{ Built-in formats

  table { lll
    ☰ ~Equivalent to~ ☰
    `oneline` ☰ `%H %s` ☰ Full (40 character) hash and subject (aka title) - Intended to be as compact as possible
    `short` ☰ ☰
    `medium` ☰ ☰
    `full` ☰ ☰
    `fuller` ☰ ☰
    `reference` ☰ `format:%C(auto)%h (%s, %as)` ☰ For example `4b2ee6d2b33d (Merge tag 'usb-6.7-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb, 2023-12-23)`
    `email` ☰ ☰
    `mboxrd` ☰ ☰ Like `email`, but `From:` lines are quoted with one `>`, regardless of the amounts of `>`
    `raw` ☰ ☰ Compare with `git log --raw`
  table }

code {
git log --pretty=oneline
code }

}
{ Placeholders

  Placeholders start with a percent sign `%` (in the same sprit as also used in the → development/languages/printf[`printf`] family). The following simple format prints the log's *subjects* (`%s`).
code {
git log --pretty=%s
code }

  If placeholders are separated by spaces, the format must be put into (single or double) quotes:
code {
git log --pretty='%s %H'
code }

In the following tables, the percent sign is not shown for readability.

  { Hash related placeholders

    table { lll

      ~long~ ☰ ~abbreviated~ ☰
       `H` ☰ `h` ☰ → development/version-control-systems/git/objects/commit[commit] hash
       `T` ☰ `t` ☰ → development/version-control-systems/git/objects/tree[tree] hash
       `P` ☰ `p` ☰ parent hash
    table }

    The *long* hash is represented with 40 characters, the abbreviated hash with 7 characters.

  }
  { Related to author (%a…, %c…)

    Placeholders that are related to a commit's author start with `%a`, those related to a committer with `%c`.
    -
    So, `%an` is the name of the author, `%cn` the name of the committer.

    table { lll
      ☰ ~Respecting → Linux/kernel/source/_mailmap[`.mailmap`]~ ☰
      `n` ☰ `N` ☰ Name
      `e` ☰ `E` ☰ eMail
      `l` ☰ `L` ☰ The email's portion left of the at (`@`) sign (local part)
    table }

    The following formats relate to the commit dates. Again, they're prefixed with `%a` or `%c`.
    table { lll

      ☰ ☰ ~Example~
      `d` ☰ Date, respects `--date=` option ☰
      `D` ☰ Date in RFC → development/misc/Datumsformate#datumsformat-rfc-2822[2822 format] ☰ `Mon, 25 Apr 2022 23:53:09 +0200`
      `r` ☰ Relative format ☰ `15 hours ago`, `9 days ago` or `3 weeks ago` etc.
      `t` ☰ In → development/date-time/Unix-time  ☰ `1653998153` (seconds since 1970-01-01)
      `i` ☰ In → misc/ISO/8601 format   ☰ `2022-05-02 15:49:11 +0200`
      `I` ☰ In *strict* ISO 8601 format ☰ `2022-05-02T15:49:11+02:00`
      `s` ☰ Short format ☰ `2022-05-12`
      `h` ☰ Human format ☰
    table }

code {
git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty='%ad   %<(20)%ar %s'
code }

  }
  { Ref names

    Compare with the `--decorate` option of `git log`
 
    table { ll
      `d` ☰
      `D` ☰ without the `",` wrapping 
    table }


  }
  { ... 

    table { ll
      `s` ☰ subject (aka title). → #git-pretty-s-vs-f[Compare with `%f`\
      `b` ☰ body
      `B` ☰ raw body  (unwrapped subject and body)
      `N` ☰ commit notes
      `f` ☰ sanitized subject line, → #git-pretty-s-vs-f[compare with `%s`]
      `e` ☰ encoding
    table }

  }
  { Related to reflog

    table { ll
      `gD` ☰ reflog selector
      `gd` ☰ shortened reflog selector (`refs/heads/master` becomes `master`)
      `gs` ☰ reflog subject
      `gn` ☰ reflog identity name
      `gN` ☰ reflog identity name (respecting `.mailmap`)
      `ge` ☰ reflog identity email
      `gE` ☰ reflog identity email (respecting `.mailmap`)


    table }

  }
  { Related to signed commits

    table { ll
      `GG` ☰ raw verification message from GPG for a signed commit
      `G?` ☰ Reports «quality» of signed message: `G` = good; `B` = bad; `U` = good with unknown validity; `X` = good, but expired; `Y` = good signature made by expired key; `R` = good signature made be revoked key; `E` = signature cannot be checked (because of missing key?); `N` = no signature
      `GS` ☰ Name of signer
      `GK` ☰ Key used for signing
      `GF` ☰ Fingerprint of key 
      `GP` ☰ Fingreprint of primary key whose subkey was used sign a signed commit
      `GT` ☰ Trust level of key
    table }

  }
  { Insert a character

    table { ll
      `n` ☰ → development/line-break[New line]
      `%` ☰ A percent sign
      `xnn` ☰ The byte represented by the hexadecimal value `nn`
    table }

  }
  { Aligning/padding output

    table { ll
       `<(w)` ☰ Pad next token to at least `w` characters
       `<(w,trunc)` ☰ Pad next token to `w` characters, trunctate exceeding characters (There is also `ltrunc` and `mtrunc`).
       `<|(w)` ☰
       `>(w)` etc. ☰ Similar to `<(w)` etc, but padding on left side
       `><(w)` ☰ centering text
       `>>(w)` ☰
    table }

code {
git log --pretty='%<(50,trunc) %s %H'
code }

  }
  { Colors

    `%C…` affects the colors of the placeholders following the instruction.

    Three color names are recognized: `red`, `green` and `blue`.

    An RGB value can be specified with `%C(#rrggbb)`. The following command prints the subject (`%s) in orange and the commit hash (`%H`) in a blue-ish color:
code {
git log --pretty='%C(#ff7f00) %s %C(#6090e0) %h %Creset'
code }


  }
  { Others

    table { ll
      `m` ☰ A left (`<`), right (`>`) or boundary (`-`) mark.
    table }

  }

}
{ TODO

   Line wrapping mode (compare `git shortlog -w…`)
code {
git log --pretty='%w(40,6,7) %s %H bla'
code }

  Human readable format (like `git describe`)
code {
git log --pretty='%(describe)'
code }

  ref name given on the command line by which the commit was reached (like `git log --source`)
code {
git log --pretty='%S'
code }

code {
git log --pretty='%(trailers[:options])'
code }


  { %s vs %f #git-pretty-s-vs-f

   `%f` sees to replace adjacent spaces, colons, apostrophes, slashes etc. with one hyphen:
code {
$ ~/linux git log -1 --format=%s ; git log -1 --format=%f
Merge tag 'gpio-fixes-for-v6.7-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux
Merge-tag-gpio-fixes-for-v6.7-rc8-of-git-git.kernel.org-pub-scm-linux-kernel-git-brgl-linux
code }

  }

}
