$ git log

`git log` shows  → development/version-control-systems/git/objects/commit[commit] logs.
-
By default, they're ordered in reverse chronological order. The ordering can be overridden with `--reverse`, `--date-order`, `--author-date-order`, `--top-order` (and more?).

→ https://stackoverflow.com/a/64435876/180275[This Stackoverflow answer] suggests that
`git log` is the same as `→ development/version-control-systems/git/commands/rev-list`, but with a special format.

In order to inspect a particular commit, → development/version-control-systems/git/commands/show[`git show`] might be used.

{ Show all commits where a given file was involved #git-log-commit-with-involved-file

  The following command shows all → development/version-control-systems/git/objects/commit[commits] where a given file was involved, even if the file was deleted:
code {
git log --full-history -- /path/to/file
code }

}
{ Find commit that added or removed a given text to a file

  The following command reports the → development/version-control-systems/git/objects/commit[commits] in file `./src/hello.c` which added (or removed) the string `dst_V.value`:
code {
git log  -S"dst_V.value"  ./src/hello.c
code }

  With `--pickax-regex`, the given text is interpreted as a → development/regular-expressions[regular expression].
code {
git log  --pickax-regex  -S"dst_[U-Z].value"  ./src/hello.c
code }

  `-G` seems to combined `--pickax-regex -S`:
code {
git log  -G"dst_[U-Z].value"  ./src/hello.c
code }
  

  Compare with `→ development/version-control-systems/git/commands/diff -S` and `→ development/version-control-systems/git/commands/diff -G`.

}

sa:

 `→ development/version-control-systems/git/commands/shortlog`.

  → development/version-control-systems/git/commands
