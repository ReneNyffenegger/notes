$ git log

`git log` shows  → development/version-control-systems/git/objects/commit[commit] logs.
-
By default, they're ordered in reverse chronological order. The ordering can be overridden with `--reverse`, `--date-order`, `--author-date-order`, `--top-order` (and more?).

→ https://stackoverflow.com/a/64435876/180275[This Stackoverflow answer] suggests that
`git log` is the same as `→ development/version-control-systems/git/commands/rev-list`, but with a special format.

In order to inspect a particular commit, → development/version-control-systems/git/commands/show[`git show`] might be used.
-
For example, the following command shows a list of changed files in a commit:
code {
git show --pretty=%gd --stat --name-only 37c97d9
code }

{ Show all commits where a given file was involved #git-log-commit-with-involved-file

  The following command shows all → development/version-control-systems/git/objects/commit[commits] where a given file was involved, even if the file was deleted:
code {
git log --full-history -- /path/to/file
code }

}
{ Find commit that added or removed a given text to a file

  The following command reports the → development/version-control-systems/git/objects/commit[commits] in file `./src/hello.c` which added (or removed) the string `dst_V.value`:
code {
git log  -S"dst_V.value"  ./src/hello.c
code }

  With `--pickax-regex`, the given text is interpreted as a → development/regular-expressions[regular expression].
code {
git log  --pickax-regex  -S"dst_[U-Z].value"  ./src/hello.c
code }

  `-G` seems to combined `--pickax-regex -S`:
code {
git log  -G"dst_[U-Z].value"  ./src/hello.c
code }
  

  Compare with `→ development/version-control-systems/git/commands/diff -S` and `→ development/version-control-systems/git/commands/diff -G`.

}
{ Formatting the output of log

  Show each commit on one line:
code {
git log --format=oneline
code }

}
{ fatal: your current branch 'master' does not have any commits yet #git-log-fatal-no-commits

  Create a → development/version-control-systems/git/repository#bare[bare repository]:
  gh|about-git|/commands/log/fatal_your-current-branch_does-not-have-any-commits-yet/create-repo.ps1||

  Of course, this new repository does not have any → development/version-control-systems/git/objects/commit[commits], so the `git init…` command answers with the corresponding
 *Initialized empty Git repository in ...*.

  → development/version-control-systems/git/commands/clone[Cloning] an empty repository responds with
  → development/version-control-systems/git/commands/clone#git-clone-warning-empty-repo[warning: You appear to have cloned an empty repository]:
  gh|about-git|/commands/log/fatal_your-current-branch_does-not-have-any-commits-yet/clone-repo.ps1||

  Because the cloned repository does still not have a commit object, trying to show the repository's history results in the
  message *fatal: your current branch 'master' does not have any commits yet*
  gh|about-git|/commands/log/fatal_your-current-branch_does-not-have-any-commits-yet/log.ps1||

}

sa:

 `→ development/version-control-systems/git/commands/shortlog`.

  → development/version-control-systems/git/commands
