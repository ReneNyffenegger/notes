$ git config

Get or set → development/version-control-systems/git/options[options].

code {
git config --global user.email "…"
git config --global user.name  "René Nyffenegger"

git config --global --get   user.email

git config --global --unset user.email
code }

When modifing option values, the default config file where the new values are written to is the one in the local repository. This can be changed with `--global` or `--system`.

{ --list: show all options that are set in config files and their values

code {
git config --list
code }

  In order to also show in *which* config file a setting was set, combine `--list` with `--show-origin`:
code {
git config --list --show-origin
code }

}
{ Show origin and used value for a given option

  Apparently, the following command does not show all origins where an option value is set but only the origin which set the value:
code {
git config --show-origin core.autocrl
code }


}
{ --global, --user, --local, --worktree, --file

code {
git config --global …
git config --user   …
git config --local  …
code }

 `--user` for any «global» setting that is specific to a user. These options are stored in
  → Linux/fhs/home/username/_gitconfig[`$HOME/.gitconfig`]

 `--local` for settings specific to a checked out → development/version-control-systems/git/repository[repository]. These options are
  stored in the → development/version-control-systems/git/_git/config[`config` file below the repository's `.git` directory].

 `--worktree` read from `→ development/version-control-systems/git/_git[.git]/config.worktree` if the option `extensions.worktreeConfig` is present (and `true`?). If this value is not present, `--worktree` behaves like `--local`.

 `--file` (or `-f`) specifies the config file being written to.

}
{ dot in config names

  Some config names contain a dot, for example `credential.useHttpPath`. The value before the dot indicates a section in the config file so that `credential.useHttpPath = true` is stored in a config file
  like so:
code {
[credential]
        httpusepath = true
code }

}
{ Show values of options that match a regular expression

  The `--get-regexp` option can be used to show options whose name match a → development/regular-expressions[regular expression].
  
  The following example works in → Windows/PowerShell, I am not sure for other shells because of their escaping rules:
code {
git config  --get-regexp ^core\.
code }

}
{ Removing values from a config file

code {
git config --unset <option-name>
code }

}


sa:

  Commands have the → development/version-control-systems/git/commands#git-common-option[common option] `-c option=value` which allows to override an option value when executing a
  → development/version-control-systems/git/commands[git command].

  → development/version-control-systems/git/commands
