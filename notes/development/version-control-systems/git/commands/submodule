$ git submodule
@ submodule

Initialize, update or inspect submodules.

{ After cloning

  Get all submodules after freshly → development/version-control-systems/git/commands/clone[cloning] a repsitory
code {
git submodule update --init --force --remote
code }

}
{ updating submodules

 `git submodule update` (executed in the superproject's directory) updates the submodule(s) to the commit that is specified in the index of the superproject.

  A submodule can be updated to its remote's latest commit by *going into the submodule* and executing and pulling it from there:
code {
cd submod

# HEAD might be detached, or pointing to another branch:
git checkout master

git pull

cd ..
git commit -am "Updated submodule to most recent version"
code }

  When dealing with multiple submodules or to make things easier, there is also:
code {
git submodule foreach git pull origin master
code }

}
{ foreach

`git submodule foreach …` executes a → Linux/shell/commands[shell command] in each checked out submodule.

  When executed in (typical?) git installation on Windows, it executes the command in `bash` (which is installed with git).

  Git provides a few shell variables that can be used in the `foreach` command:
  table { ll
    `$name` ☰ The name of the relevant submodule section in `→ development/version-control-systems/git/_gitmodules`
    `$toplevel` ☰ The absolute path to the top-level of the immediate superproject.
    `$sm_path` ☰ The path of the submodule as recorded in the immediate superproject
    `$displaypath` ☰ The relative path from the current working directory to the submodules root directory
    `$sha` ☰ The → development/version-control-systems/git/objects/commit as recorded in the immediate superproject,
  table }

  `foreach` has the two options
    • `--recursive`
    • `--quiet`

code {
git submodule foreach --quiet 'echo $SHELL - $toplevel - $name - $sm_path - $displaypath - $sha1'
code }


}
{ Just update the submodules

code {
→ development/version-control-systems/git/commands/pull[git pull]
code }

code {
git submodule update --recursive
code }

}

sa:

  → development/version-control-systems/git/commands/clone#git-clone-inc-submodules[`git clone --recurse-submodules …`]

  → development/version-control-systems/git/commands
