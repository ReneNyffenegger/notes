$ git show

Show various types of → development/version-control-systems/git/objects[objects].

code {
git show → development/version-control-systems/git/objects#name[object-hash]
code }

code {
git show HEAD:path/to/file.txt
git show HEAD^:path/to/file.txt
git show branch:path/to/file.txt
code }

rem {
In → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`], remember that `^` is an escape character, thus in order to get the equivalent of `git show HEAD^:…`, use
code {
git show HEAD^^:path/to/file.txt
code }
rem }

{ Quickly show content of a file at a given commit

  The following command prints the content of the file `hello.c` as stored in the → development/version-control-systems/git/repository with the commit id `d6c60eb48`.
 *Note the colon between the commit id and the filename!*:
code {
git show d6c60eb48:hello.c
code }

  Compare with `→ development/version-control-systems/git/commands/cat-file`.

  { Redirecting output in PowerShell 5.1

    By default, the → Windows/PowerShell/language/operator/redirection[redirection operators] (`>`, `>>` etc.) of → Windows/PowerShell use *UTF16-LE* as default
    → development/Unicode/character-encoding[encoding].

    Thus, in such an environment, the output should probably be sent to a file by explicitely stating the desired encoding with the → Windows/PowerShell/command-inventory/parameter/encoding[`-encoding` parameter]:
code {
git show d6c60eb48:hello.c | out-file -encoding utf8 hello.old-version.c
code }

  }

}
{ Show file of a given branch in GVIM

  The content of `path/to/file.c`, as being stored in the → development/version-control-systems/git/branch `V1.1-fixes`, can be shown in → development/vim[gvim] by using the `-` argument of `gvim`:
code {
git show V1.1-fixes:path/to/file.c | gvim -
code }

}
{ Show changed files of a given commit #git-show-changed-file-of-commit

  In order to see a summary (statistics) of changed files of a given → development/version-control-systems/git/objects/commit[commits], one of the following command can be used:
code {
git show --stat              <commit-sha>
git show --stat --pretty=%gd <commit-sha>
code }

}
{ Error message - fatal: path '…' exists on disk, but not in '…'

The error message *fatal: path '…' exists on disk, but not in '…'* might be caused when using backslashes rather than forward slashes to separate directories:
code {
PS: > git show master:path\to\file.txt
fatal: path 'path\to\file.txt' exists on disk, but not in 'master'

# better:
PS: > git show master:path/to/file.txt
code }


}

sa:

  `→ development/version-control-systems/git/commands/cat-file`,
  `→ development/version-control-systems/git/commands/restore`

  → development/version-control-systems/git/commands
