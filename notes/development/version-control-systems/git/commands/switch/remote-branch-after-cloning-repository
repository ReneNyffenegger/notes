$ GIT: Switch to remote branch after cloning a repository

This example tries to demonstrate how a freshly → development/version-control-systems/git/commands/clone[cloned] local → development/version-control-systems/git/repository can be switched to a
remote → development/version-control-systems/git/branch.

First, we need to create a repository that acts as the remote one:
gh|about-git|/commands/switch/remote-branch-after-cloning/init-repo||

A file is → development/version-control-systems/git/commands/add[added] and → development/version-control-systems/git/commands/commit[commited] to the repository's master branch:
gh|about-git|/commands/switch/remote-branch-after-cloning/create-master-branch||

A new branch, named `dev` is created (→ development/version-control-systems/git/commands/switch[`git switch -c`]), another file added and commited to it:
gh|about-git|/commands/switch/remote-branch-after-cloning/create-dev-branch||

The repository is switched back to the *master* branch so that the repository, when cloned will check out this branch:
gh|about-git|/commands/switch/remote-branch-after-cloning/switch-to-master||

We're now ready to clone the «remote» repository:
gh|about-git|/commands/switch/remote-branch-after-cloning/clone-repo||

A simple `git switch dev` figures out that the repository should switch to the branch with the same name in the remote repository:
gh|about-git|/commands/switch/remote-branch-after-cloning/switch-to-dev||

`→ Linux/shell/commands/ls -1` shows both files that are also present in the `dev` branch of the remote repository.
gh|about-git|/commands/switch/remote-branch-after-cloning/ls-1||

The output of `→ development/version-control-systems/git/commands/branch` confirms we're in the «right» branch:
gh|about-git|/commands/switch/remote-branch-after-cloning/git-branch||
