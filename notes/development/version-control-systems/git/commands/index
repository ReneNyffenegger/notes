$ git commands

A git command is either a high level («porcelain») or a low level («plumbing») command. Everything that can be done with the
porcelain can also be done with the plumbing commands.
-
The porcelain makes it easier(?) to interact with → development/version-control-systems/git/TODO#core-git.


{ Commands

  → development/version-control-systems/git/commands/add[add],
  → development/version-control-systems/git/commands/am[am],
  → development/version-control-systems/git/commands/annotate[annotate],
  → development/version-control-systems/git/commands/apply[apply],
  → development/version-control-systems/git/commands/archive[archive],
  → development/version-control-systems/git/commands/bisect[bisect],
  → development/version-control-systems/git/commands/blame[blame],
  → development/version-control-systems/git/commands/branch[branch],
  → development/version-control-systems/git/commands/bundle[bundle],
  → development/version-control-systems/git/commands/cat-file[cat-file],
  → development/version-control-systems/git/commands/checkout[checkout],
  → development/version-control-systems/git/commands/checkout-index[checkout-index],
  → development/version-control-systems/git/commands/cherry[cherry],
  → development/version-control-systems/git/commands/cherry-pick[cherry-pick],
  → development/version-control-systems/git/commands/citool[citool],
  → development/version-control-systems/git/commands/clean[clean],
  → development/version-control-systems/git/commands/clone[clone],
  → development/version-control-systems/git/commands/commit[commit],
  → development/version-control-systems/git/commands/commit-tree[commit-tree],
  → development/version-control-systems/git/commands/config[config],
  → development/version-control-systems/git/commands/count-objects[count-objects],
  → development/version-control-systems/git/commands/daemon[daemon],
  → development/version-control-systems/git/commands/describe[describe],
  → development/version-control-systems/git/commands/diff[diff],
  → development/version-control-systems/git/commands/diff-files[diff-files],
  → development/version-control-systems/git/commands/diff-index[diff-index],
  → development/version-control-systems/git/commands/difftool[difftool],
  → development/version-control-systems/git/commands/diff-tree[diff-tree],
  → development/version-control-systems/git/commands/fast-export[fast-export],
  → development/version-control-systems/git/commands/fast-import[fast-import],
  → development/version-control-systems/git/commands/fetch[fetch],
  → development/version-control-systems/git/commands/fetch-pack[fetch-pack],
  → development/version-control-systems/git/commands/filter-branch[filter-branch],
  → development/version-control-systems/git/commands/for-each-ref[for-each-ref],
  → development/version-control-systems/git/commands/format-patch[format-patch],
  → development/version-control-systems/git/commands/fsck[fsck],
  → development/version-control-systems/git/commands/gc[gc],
  → development/version-control-systems/git/commands/get-tar-commit-id[get-tar-commit-id],
  → development/version-control-systems/git/commands/gitk[gitk],
  → development/version-control-systems/git/commands/gitweb[gitweb],
  → development/version-control-systems/git/commands/grep[grep],
  → development/version-control-systems/git/commands/gui[gui],
  → development/version-control-systems/git/commands/hash-object[hash-object],
  → development/version-control-systems/git/commands/help[help],
  → development/version-control-systems/git/commands/http-backend[http-backend],
  → development/version-control-systems/git/commands/index-pack[index-pack],
  → development/version-control-systems/git/commands/init[init],
  → development/version-control-systems/git/commands/instaweb[instaweb],
  → development/version-control-systems/git/commands/log[log],
  → development/version-control-systems/git/commands/ls-files[ls-files],
  → development/version-control-systems/git/commands/ls-remote[ls-remote],
  → development/version-control-systems/git/commands/ls-tree[ls-tree],
  → development/version-control-systems/git/commands/merge[merge],
  → development/version-control-systems/git/commands/merge-base[merge-base],
  → development/version-control-systems/git/commands/merge-file[merge-file],
  → development/version-control-systems/git/commands/merge-index[merge-index],
  → development/version-control-systems/git/commands/mergetool[mergetool],
  → development/version-control-systems/git/commands/merge-tree[merge-tree],
  → development/version-control-systems/git/commands/mktag[mktag],
  → development/version-control-systems/git/commands/mktree[mktree],
  → development/version-control-systems/git/commands/mv[mv],
  → development/version-control-systems/git/commands/name-rev[name-rev],
  → development/version-control-systems/git/commands/notes[notes],
  → development/version-control-systems/git/commands/pack-objects[pack-objects],
  → development/version-control-systems/git/commands/pack-redundant[pack-redundant],
  → development/version-control-systems/git/commands/pack-refs[pack-refs],
  → development/version-control-systems/git/commands/prune[prune],
  → development/version-control-systems/git/commands/prune-packed[prune-packed],
  → development/version-control-systems/git/commands/pull[pull],
  → development/version-control-systems/git/commands/push[push],
  → development/version-control-systems/git/commands/read-tree[read-tree],
  → development/version-control-systems/git/commands/rebase[rebase],
  → development/version-control-systems/git/commands/reflog[reflog],
  → development/version-control-systems/git/commands/relink[relink],
  → development/version-control-systems/git/commands/remote[remote],
  → development/version-control-systems/git/commands/repack[repack],
  → development/version-control-systems/git/commands/replace[replace],
  → development/version-control-systems/git/commands/rerere[rerere],
  → development/version-control-systems/git/commands/reset[reset],
  → development/version-control-systems/git/commands/restore[restore],
  → development/version-control-systems/git/commands/revert[revert],
  → development/version-control-systems/git/commands/rev-list[rev-list],
  → development/version-control-systems/git/commands/rev-parse[rev-parse],
  → development/version-control-systems/git/commands/rm[rm],
  → development/version-control-systems/git/commands/send-pack[send-pack],
  → development/version-control-systems/git/commands/shortlog[shortlog],
  → development/version-control-systems/git/commands/show[show],
  → development/version-control-systems/git/commands/show-branch[show-branch],
  → development/version-control-systems/git/commands/show-index[show-index],
  → development/version-control-systems/git/commands/show-ref[show-ref],
  → development/version-control-systems/git/commands/stash[stash],
  → development/version-control-systems/git/commands/status[status],
  → development/version-control-systems/git/commands/submodule[submodule],
  → development/version-control-systems/git/commands/symbolic-ref[symbolic-ref],
  → development/version-control-systems/git/commands/switch[switch],
  → development/version-control-systems/git/commands/tag[tag],
  → development/version-control-systems/git/commands/unpack-file[unpack-file],
  → development/version-control-systems/git/commands/unpack-objects[unpack-objects],
  → development/version-control-systems/git/commands/update-index[update-index],
  → development/version-control-systems/git/commands/update-ref[update-ref],
  → development/version-control-systems/git/commands/update-server-info[update-server-info],
  → development/version-control-systems/git/commands/var[var],
  → development/version-control-systems/git/commands/verify-commit[verify-commit],
  → development/version-control-systems/git/commands/verify-pack[verify-pack],
  → development/version-control-systems/git/commands/verify-tag[verify-tag],
  → development/version-control-systems/git/commands/whatchanged[whatchanged],
  → development/version-control-systems/git/commands/worktree[worktree],
  → development/version-control-systems/git/commands/write-tree[write-tree]

}

{ Common options #git-common-option

  table { ll
    `--version` ☰ Print the Git suite version number
    `--help`, `--help --all` ☰ Prints synopsis. With `--all` or `-a`, all available commands are printed. `git --help cmd` is is the same as → development/version-control-systems/git/commands/help[`git help cmd`]
    `-C /p/ath` ☰ Run as if git was started in `/p/ath` instead of the current working directory. Multiple relative paths can be combined using mutliple `-C` arguments. Compare with `--git-dir`
    `-c → development/version-control-systems/git/options[option-name]=value` ☰ Override config-option values for the command.
    `--config-env=<name>=<envvar>` ☰ Like `-c <name>=<value>`: give configuration variable `<name>` a value, where `<envvar>` is the name of an → development/environment-variable[environment variable] from which to retrieve the value.
    `--exec-path[=<path>]` ☰ Path to wherever your core Git programs are installed. This can also be controlled by setting the `GIT_EXEC_PATH` environment variable. If no path is given, git will print the current setting and then exit.
    `--html-path` ☰ Print the path of Git’s → development/web/HTML documentation is installed and exit.
    `--man-path` ☰ Print the manpath for the → Linux/man-page[man pages] for this version of Git.
    `--info-path` ☰ Print the path where the *info files* documenting this version of Git are installed.
    `-p`, `--paginate` ☰ Pipe all output into `less` or `$PAGER`, if defined *if* → development/stdin-stdout-stderr[std out] is a terminal. This overrides the `pager.<cmd>` configuration options.
    `-P`, `--no-pager` ☰ Do not pipe Git output into a pager.
    `--git-dir=<path>` ☰ Set the absolute or relative path to the repository (→ development/version-control-systems/git/_git[`.git` directory]). This can also be controlled by setting the `GIT_DIR` environment variable. Compare with `-C`.
    `--work-tree=<path>` ☰ Set the absolute or repository path to the → development/version-control-systems/git/working-tree[working tree]. When using this option, pathspecs are treated as relative to the specified directory.
    `--namespace=<path>` ☰ Set the Git namespace, equivalent to setting the `GIT_NAMESPACE` environment variable.
    `--super-prefix=<path>` ☰ Sets a prefix which gives a path from above a repository down to its root. One use is to give submodules context about the superproject that invoked it. Currently for *internal use only*.
    `--bare` ☰ Treat the repository as a → development/version-control-systems/git/repository#bare[bare repository]. If `GIT_DIR` environment variable is not set, it is set to the current working directory.
    `--no-replace-objects` ☰ Do not use replacement refs to replace → development/version-control-systems/git/objects[Git objects].
    `--literal-pathspecs` ☰ Treat pathspecs literally, that is without globbing or pathspec magic. This is equivalent to setting the `GIT_LITERAL_PATHSPECS` environment variable to 1.
    `--glob-pathspecs` ☰ Add *glob* magic to all pathspec. This is equivalent to setting the `GIT_GLOB_PATHSPECS` environment variable to 1. Disabling globbing on individual pathspecs can be done using pathspec magic `:(literal)`.
    `--noglob-pathspecs` ☰ Add *literal* magic to all pathspec. This is equivalent to setting the `GIT_NOGLOB_PATHSPECS` environment variable to 1. Enabling globbing on individual pathspecs can be done using pathspec magic `:(glob)`.
    `--icase-pathspecs` ☰ Add *icase* magic to all pathspec. This is equivalent to setting the `GIT_ICASE_PATHSPECS` environment variable to 1.
    `--no-optional-locks` ☰ Do not perform optional operations that require locks. This is equivalent to setting the `GIT_OPTIONAL_LOCKS` to 0.
    `--list-cmds=group[,group…]` ☰ List commands by group.Supported groups are: builtins, parseopt (builtin commands that use parse-options), main (all commands in libexec directory), others (all other commands in $PATH that have git- prefix), list-<category> (see categories in command-list.txt), nohelpers (exclude helper commands), alias and config (retrieve command list from config variable completion.commands) This is an *internal/experimental option* and may change or be removed in the future. 

  table }
}
