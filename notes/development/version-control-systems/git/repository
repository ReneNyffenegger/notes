$ git repository
@ repository

A git repository is a tree whose nodes are → development/version-control-systems/git/objects/commit[commits].
-
A reposoitory is a collection of → development/version-control-systems/git/ref[refs] together with an → development/version-control-systems/git/objects/database[object database],
possibly accompanied by metadata from one or more porcelains.

A repository can share an object database with other repositories via alternates mechanism.

{ Creating a repository

  A repository is created with → development/version-control-systems/git/commands/init[`git init`].
  -
  Accordingly, git's answer to `git init repo-name` is
  -
  `Initialized empty Git ~repository~ in → development/version-control-systems/git/_git[/path/to/repo-name.git/]`.

}

{ Bare repositories #bare

  A bare repository is a directory with the suffix `.git`. The files of the repository are not locally checked out. That is: the files normally found
  in the → development/version-control-systems/git/_git subdirectory are found in `repository-name.git`.

  Bare repositories usually don't have a → development/version-control-systems/git/_git/index_.

}

{ origin

  The default upstream repository.

}

{ Remote repository #remote

  A repository which is used to track the same project (another *clone*) and resides somewhere else.

  To communicate with remotes, see → development/version-control-systems/git/branch#fetch[fetch] and → development/version-control-systems/git/commands/push[push].

  Remote repositories are registered in the → development/version-control-systems/git/_git#_git-dir-structure[`.git` directory] under
  → development/version-control-systems/git/_git/refs/remotes[`.git/refs/remotes`].

  See also: → development/version-control-systems/git/commands/ls-remote[`git ls-remote`]

}
{ Shallow repository

  A shallow repository has an incomplete history some of whose commits have parents cauterized away (in other words, Git is told to pretend that these
  commits do not have the parents, even thoght they are recorded in the commit object). This is sometimes useful when you are interested only in the recent history
  of a project even though the real history recorded in the upstream is much larger. A shallow repository is created by giving the `--depth` option to `git clone`.
  Its history can later be deepened with `git fetch`.

  Some times, a shallow repository is referred to as «shallow clone» (although this phrase makes it more explicit that it was created by `git clone --depth`.

}

sa:
  `→ development/version-control-systems/git/commands/cherry-pick`,
  `→ development/version-control-systems/git/commands/clone`,
  `→ development/version-control-systems/git/commands/show-ref`,
  `→ development/version-control-systems/git/commands/daemon`,
  `→ development/version-control-systems/git/commands/fetch`,
  `→ development/version-control-systems/git/commands/gc`,
  `→ development/version-control-systems/git/commands/init`,
  `→ development/version-control-systems/git/commands/pull`,
  `→ development/version-control-systems/git/commands/send-pack`
