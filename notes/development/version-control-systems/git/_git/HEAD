$ .git/HEAD

`.git/HEAD` contains (or points to) a → development/version-control-systems/git/objects/commit[commit]. This commit can be pointed at using a (40 character long) → development/security/SHA-1 number or using a sym ref
that points to a file stored under → development/version-control-systems/git/_git/refs/heads[`.git/refs/heads`]. In the latter case, this file represents the currently active → development/version-control-systems/git/branch[branch].

Git only changes the content of this file when the → development/version-control-systems/git/branch[branches] is changed, for example with
code {
$ → development/version-control-systems/git/commands/checkout[git checkout] v1.1
code }

{ Content of HEAD

  Rather than containing a hash of an → development/version-control-systems/git/objects[object],
  the content of HEAD might (textually) point to a → development/version-control-systems/git/branch[branch].
code {
ref: → development/version-control-systems/git/_git/refs/heads/branch_name[refs/heads/branch_name].
code }

  Because `.git/HEAD` points to a branch, the content of `.git/HEAD` is changed with → development/version-control-systems/git/commands/checkout[`git checkout …`]:
code {
$ git checkout v.1.1
$ cat .git/HEAD
ref: refs/heads/v1.1
code }

}

{ Detatched HEAD

  If HEAD references a → development/version-control-systems/git/objects/commit[commit] directly, it is called a *detached HEAD*. (`man git-checkout`)

  Normally, the HEAD stores the name of a local → development/version-control-systems/git/branch[branch] and commands that operate on the history HEAD represents operate on
  the history leading to the thip of the branch the HEAD points at. In such a case, the HEAD is said to be attaced to this branch.

  However, Git also allows to check out an arbitrary commit that isn't necessarily the → development/version-control-systems/git/branch#tip-of-the-branch[tip of any particular branch].
  In such a state, the HEAD is called «detached».
}
{ Show content of HEAD

code {
$ cat .git/HEAD
ref: refs/heads/master

$ → development/version-control-systems/git/commands/symbolic-ref HEAD
refs/heads/master
code }

}
{ TODO

  Merge with → development/version-control-systems/git/HEAD

}

sa:
  → development/version-control-systems/git/HEAD, → development/version-control-systems/git/_git/logs/HEAD

  → development/version-control-systems/git/_git/ORIG_HEAD[`.git/ORIG_HEAD`]

  → development/version-control-systems/git/_git#_git-dir-structure[`.git` directory structure]
