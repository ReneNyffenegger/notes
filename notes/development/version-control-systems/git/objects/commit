$ commit object [git]
@ commit

A *commit object* is a single point in the → development/version-control-systems/git/repository[repository's] history. It contains these information
  • parents
  • commiter
  • author
  • date
  • → development/version-control-systems/git/objects/tree[tree object] which corresponds to the top directory of the stored revision

A commit is a snapshot of the *entire* → development/version-control-systems/git/repository[repository]. Unlike other → development/version-control-systems/[SCMs], it
doesn't store diffs.

A commit object is sometimes abbreviated as «commit» or referred to as «revision».

If two different commit objects point back to one other commit object, it is called a → development/version-control-systems/git/branch[branch].

A commit object might be created with → development/version-control-systems/git/commands/commit-tree[`git commit-tree`].

{ Parents #git-commit-object-parent

  A commit object can have any number of parents.

  An *ordinary commit*, however, has exactly one parent.

  An *initial commit* (root commit) has no parents.

  A commit that was created as part of a → development/version-control-systems/git/commands/merge[merge] has multiple parents: one for each line of history.

}
{ Looking at the content of a commit object

code {
git cat-file commit 5f39acdb8
git cat-file commit HEAD
code }

}

{ To commit

 «to commit» (the verb rather than the noun) describes the action of storing a new snapshot of files into the Git history: it creates a new commit object representing
  the current state of the index and advances the HEAD to point at the new commit.

}
{ Copying commit objects between repositories

  Commit objects are transferred between → development/version-control-systems/git/repository[repositories] with the → development/version-control-systems/git/commands[git commands]
    • → development/version-control-systems/git/commands/fetch[`git fetch`]
    • → development/version-control-systems/git/commands/push[`git push`]
    • → development/version-control-systems/git/commands/pull[`git pull`] (which first executes `git fetch` and then runs a second command)

}
{ Removing commit objects

  Commit objects can be removed from a repository with one of the following commands:
    • → development/version-control-systems/git/commands/checkout[`git checkout`]
    • → development/version-control-systems/git/commands/reset[`git reset`]
    • → development/version-control-systems/git/commands/restore[`git restore`]
    • → development/version-control-systems/git/commands/revert[`git revert`]
    • → development/version-control-systems/git/commands/switch[`git switch`]

}
{ Directed acyclic graph

  The commit obects form a directed acyclic graph, because they have parents (which makes them *directed*) and there is no chain which begins and ends with the same object (which
  makes them acyclic.

}
{ Reachable commits #reachable

  All ancestors of a given commit are said to be «reachable» from that commit.

}
{ Cleaning up unreachable commits

  Commits that cannot be reached via a branch or a tag will be garbage collected after 30 days.

}

sa:
  → development/version-control-systems/git/objects

  `→ development/version-control-systems/git/commands/rev-list` lists commit objects in reverse chronological order.

  `→ development/version-control-systems/git/commands/log#git-log-commit-with-involved-file[git log] --full-history -- /path/to/file` shows all commits where a given file was involved.

  `→ development/version-control-systems/git/commands/show#git-show-changed-file-of-commit[git show] --stat <commit-SHA>` returns a list of the files that were changed in a given commit.

  `→ development/version-control-systems/git/commands/diff` (to show differences between to commit objects).
     -
  `→ development/version-control-systems/git/commands/difftool` (to show such differences with a tool that is suitable to show differences, such as `gvim -d`).

  `→ development/version-control-systems/git/commands/commit`,
  `→ development/version-control-systems/git/commands/log`,
  `→ development/version-control-systems/git/commands/revert`,
  `→ development/version-control-systems/git/commands/whatchanged`,
  `→ development/version-control-systems/git/commands/verify-commit`,
  `→ development/version-control-systems/git/commands/show-branch`
