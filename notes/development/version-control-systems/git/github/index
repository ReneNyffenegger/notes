$ GitHub

{ Using github's Rest API

  Github's Rest API is accessed on → https;//api.github.com/

  The answers are returned in → development/languages/JavaScript/JSON.

Some requests:
code {
→ Windows/dirs/Windows/System32/curl_exe https://api.github.com/
→ Windows/dirs/Windows/System32/curl_exe https://api.github.com/users/ReneNyffenegger
→ Windows/dirs/Windows/System32/curl_exe https://api.github.com/users/ReneNyffenegger/repos
→ Windows/dirs/Windows/System32/curl_exe https://api.github.com/repos/ReneNyffenegger/about-PowerShell

→ Windows/dirs/Windows/System32/curl_exe → tools/cURL#curl-u[-u] ReneNyffenegger:MySecret https://api.github.com/xxxx
code }

  See also → development/version-control-systems/git/github/web-API[here].

  { X-RateLimit-Limit / X-RateLimit-Remaining

    The two response → development/web/HTTP/header[headers] `X-RateLimit-Limit` and `X-RateLimit-Remainig` inform how many requests an unauthenticated client can make in a time frame (of one hour?)
    and how many requests can still be made in this time frame.

  }
  { Using Personal Access Tokens #github-access-token

    A *personal access token* authenticates a client when doing an API request.

    The two important features of access tokens are:
      • Revokable access
      • Controlling scope of access

    Thus, with an access token, it's possible, for example, to inquire about
   *private* repositores (if the token is granted accessing private repositories.)

    Such a personal access token must be generated, for example, when logged in github, in → https://github.com/settings/tokens/

    When authenticated with an access token, the request limit raises to 5000/hour.

    With curl the request is made like so:
code {
$accessToken=01234567890abcdef01234567890abcdef012345
curl -u x:$accessToken https://api.github.com/repos/ReneNyffenegger/about-PowerShell
code }

  With → Windows/PowerShell, its possible to use an access token like so
code {
$secString=→ Windows/PowerShell/command-inventory/noun/secureString/convertTo[convertTo-secureString] $accessToken -asPlainText -force
invoke-webrequest https://api.github.com/repos/ReneNyffenegger/private-repo -authentication bearer -token $secString
code }

  2020-03-10: Apparently, the `-authentication` option of `invoke-webRequest` is only avaible with PowerShell 6 and later. In earlier versions, the
 `-header` option can be used;
code {
$accessToken=01234567890abcdef01234567890abcdef012345
→ Windows/PowerShell/command-inventory/noun/webRequest/invoke[invoke-webrequest] https://api.github.com/repos/ReneNyffenegger/private-repo -headers @{Authorization = "Bearer $accessToken"}
code }

    While access tokens can be configured to allow or deny certain actions, these actions are allowed on all repository, it's not possible to limit them
    to specific repositories.

    See also
      • → Windows/dirs/Windows/System32/cmdkey_exe#cmdkey-add-github-token[Adding a github access token] to Windows Credential store with `→ Windows/dirs/Windows/System32/cmdkey_exe`.
      • → Linux/fhs/home/username/_git-credentials#git-credential-github-pat[Storing a PAT for GitHub in Linux]

  }

}
{ Searching

  { Searching for a string in my projects on github

    With → Companies-Products/Google[Google's] `site:` and `inurl:` search options, it's possible to find specific source code in someone's repositories
    on github:
    → https://www.google.ch/search?client=ubuntu&channel=fs&q=onresize+site%3Agithub.com+inurl%3AReneNyffenegger[onresize site:github.com inurl:ReneNyffenegger]

  }
  { Advanced search

    → https://github.com/search/advanced  

  }

  { Code search

    → https://cs.github.com[cs.github.com] promises to search for code with → development/regular-expressions[regular expressions].

  }

}
{ Browsing a github repository like in VS Code #gh-vscode

  A github repository can be browsed as though it was in → development/editors/Visual-Studio-Code by replacing the `github.com` part of the URL with `github1s.com`, for
  example → https://github1s.com/ReneNyffenegger/cpp-base64/.

  It's also possible to reach this editor with the shortcut key `.` (the period key).

}
{ Discussions

  → https://docs.github.com/discussions[Github discussions] allows to add a *forum* to a repository.

  The purpose of such a forum is to have a means to discuss things that don't necessarily need to go into *Github Issues*.

  Discussions must be enabled in Settings (the gear symbol) under *Features*.

}
{ Github web pages

  Having a Github account allows to create a website for the account
    • Create a new repository with the name `<username>.github.io`
    • Add files (especially `index.html`) to the repo and commit them and push the changes to the repository
    • View page at `https://<username>.github.io`

  More information at → https://pages.github.com[pages.github.com].

}
{ TODO

  → https://github.com/topics[Topics] help to classify repositories with tags (such as → https://github.com/topics/dataquality[dataquality]) in order to help find these repos.
  -
  These topics can be changed by clicking on the *gear symbol* to the right of «About».

  → https://github.com/settings/tokens: Tokens generated to access the → https://developer.github.com[GitHub API]

  → https://github.com/settings/security: An account's security events

  → https://github.com/contact: getting help

}

sa:
  → development/version-control-systems/git/github/markdown[github markdown]

  → development/version-control-systems/git/github/gist[Github gists]

  → development/version-control-systems/git/github/tq84

  *Microsoft GitHub Actions*

links:

  → https://github.com/PointCloudLibrary/pcl/wiki/A-step-by-step-guide-on-preparing-and-submitting-a-pull-request[Preparing and submitting a pull request].

  → http://git-awards.com/users/renenyffenegger[My git awards]

  → https://github.com/trending/[github.com/trending]: Trending github repositories. Can also be queried with a tag:
  → https://github.com/trending/vim[github.com/trending/vim].

  → https://github.com/explore[github.com/explore] 
