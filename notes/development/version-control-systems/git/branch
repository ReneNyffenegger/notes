$ branch [git]
@ branch

A *branch* is merely a label that points to a → development/version-control-systems/git/objects/commit[commit object]. The branch consists of this commit and
all of its parent commits.
-
The commit object that the branch points to is referred to as the branche's *tip commit*.

A *branch* is an → development/version-control-systems/git/objects[object] with two children.

A *branch* is an active line of development: Git commands operate on the «current branch».

A → development/version-control-systems/git/repository[repository] can track an arbitrary number
of branches.

A → development/version-control-systems/git/working-tree[working tree] is associated with exactly one of these branches: the *current branch*.

A new branch is created with `→ development/version-control-systems/git/commands/switch -c`. Without `-c` (or `-C`), `git switch` changes the branch to an existing one.

{ Current branch #current

  See also: → development/version-control-systems/git/HEAD.

}

{ master / main #master

  `main` (an the deprecated older name `master`) refer to the  default development branch, created along with a new → development/version-control-systems/git/repository[repository].

}

{ Four types of branches

  There are four types of branches
    • local branches,
    • local tracking branches,
    • remote branches and
    • remote tracking branches.

  `→ development/version-control-systems/git/commands/branch[git branch -r]` shows remote branches,
  `git branch -a` shows all branches.

   → https://longair.net/blog/2009/04/16/git-fetch-and-merge/[Mark Longair] on the other hand argues that there are only two types branches:
     • local branches (which are displayed with → development/version-control-systems/git/commands/branch[`git branch`]) and
     • remote tracking branches (which are displayed with → development/version-control-systems/git/commands/branch[`git branch -r`])

}

{ Fetching a branch #fetch

  *Fetching a branch* means to get the branch's head ref from a remote → development/version-control-systems/git/repository[repository] to find
  out which objects are missing from the local → development/version-control-systems/git/objects/database[object database], and to get them, too.

 `man git-fetch`.

}

{ Tip of the branch #tip-of-the-branch

  The most recent → development/version-control-systems/git/objects/commit[commit] on a branch is referred to as the *tip of that branch*.

  The tip of the branch is referenced by a *branch head*. This branch head moves forward as further commits are made in that branch.

  TODO: When → development/version-control-systems/git/merge[merging], the tips of two branches are
  unified in a new → development/version-control-systems/git/objects/commit[commit object].

}
{ Integrate changes from one branch into another #git-branch-integrate

  There are two main commands to intergrate changes from one branch into another:
    • → development/version-control-systems/git/commands/merge[`git merge`] and
    • → development/version-control-systems/git/commands/rebase[`git rebase`]

}
{ View content of another branch

  With → development/version-control-systems/git/commands/gui[`git gui browser`], a GUI-browser is opened that shows a given branch's tree and content withouth
  switching to that other branch:
code {
→ development/version-control-systems/git/commands/gui#git-gui-browser[git gui browser] the-name-of-the-other-branch
code }

code {
→ development/version-control-systems/git/commands/show the-name-of-the-other-branch:path/to/file.txt
code }

}
{ head

  A named reference to the commit at the tip of a branch, stored in the → development/version-control-systems/git/_git/refs/heads directory (except when using packed refs).

  A synonym for head is *head ref*.

}
{ index

  A collection of files with stat information, whose contents are stored as objects. The index is a stored version of your working tree. Truth be told, it can
  also contain a second, a even a third version of a working tree, which are used when merging.

}
{ index entry

  The information regarding a particular file, stored in the index. An index entry can be unmerged, if a merge was started but not finished (i.e. if the index contains multiple
  versions of that file).

}
{ topic branch

  A branch that is used by a developer to identifiy a conceptual line of development. Since branches are very easy and inexpensive, it is often desirable to have
  several small branches that each contain very well defined concepts or smallincremental yet related changes.

  To find the tip of a topic branch, run `git log --first-parent master..pu` and look for the merge commit. The second parent of this commit is the
  tip of the topic branch.

}
{ local branches

  Apparently, local branches are defined in → development/version-control-systems/git/_git/refs/heads

}
{ Detached branches

  Any checkout of a commit that is not the name of one of your branches will get you a detached HEAD (i.e. by → development/version-control-systems/git/commands/checkout[checking out] a
  remote branch without first tracking it.

}
{ Upstream branch

  Apparently, a branch can be associated with an *upstream branch*:
code {
$ → development/version-control-systems/git/branch[git branch]
* fixSomething
  master
$ → development/version-control-systems/git/commands/push[git push] origin
fatal: The current branch fixUsage has no upstream branch.
To push the current branch and set the remote as upstream, use

    → development/version-control-systems/git/commands/push[git push] --set-upstream origin fixSomething
code }

}
{ Unborn branch

  The → https://git-scm.com/docs/git-diff[documentation] for → development/version-control-systems/git/commands/diff[`git diff`] makes reference to an «unborn branch», whatever *that* is.

}

sa:
  `→ development/version-control-systems/git/commands/checkout`, 
  `→ development/version-control-systems/git/commands/branch`,
  `→ development/version-control-systems/git/commands/pull`,
  `→ development/version-control-systems/git/commands/show-branch`,
  `→ development/version-control-systems/git/commands/filter-branch`
