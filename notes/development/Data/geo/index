$ geodata

{ TODO

  ? KOGIS (= Koordination, Geo-Information und Services) is, along with → development/Data/exchange/formats/eCH, the custodian of INTERLIS language/specification.
  KOGIS coordinates some activities in the *Swiss Bundesverwaltung* related to Geoinformation (GI) and GIS 

  GML is an → development/XML grammar that allows to express *geographical features*. It is defined by the *Open Geospatial Consortium* (OGC).

  → https://thomas.skowron.eu/spaten/[Spaten] is a geo data format that purports to resolve issues that arise from using legacy serialization methods and simplify workflows.

  The → development/data-formats/Shape-file[ESRI shape file format] is the de facto standard for vector geodata.

  { WGS84

    WGS84 is the latest revision of the WGS (World Geodetic System) standard.

    WGS includes
      • Definitions of fundamental and derived constants of coordinate systems.
      • The Earth Gravity Model (EGM)
      • A description of the associated World Magnetic Model (WMM)
      • A current list of local datum transformations

    Definition 
      • The origin of the coordinate system is the Earth's center of mass (whose uncertainity is believed to be less than 2cm !)
      • The WGS84 meridian of zero longitude is the → https://en.wikipedia.org/wiki/IERS_Reference_Meridian[IERS Reference Meridian], 102 meters or 5.3 arc seconds east of the Greenwich meridian.
      • The WGS 84 datum surface is an *oblate spheroid* with equatorial radius a = 6'378'137 m at the equator and flattening f = 1/298.257'223'563. 

    Apparently, it is planned to move to IGS20 on 27 November 2022 (not sure if this move has taken place).

  }
  
  { INTERLIS

    ? INTERLIS is a software independent description language used for modelling and → development/Data/exchange/formats[exchanging geodata].

    ? FMT

  }
  { Equal-area projections

    The most common global equal-area projections available in GIS include:
      • Sinusoidial
      • Eckert
      • Homolosine
      • Mollweide
      • Hammer

  }
  { Discrete Global Grid Systems (DGGS)

    A *Discrete Global Grid System* (DGGS) is a type of spatial reference system that tessellates the globe into many individual, evenly spaced,
    and well-aligned cells.

    Such cells are used to encode location and, thus, can serve as a basis for data cube construction

    Open source DGGS implementations include:
     • Google S2
     • → development/Data/geo/H3[Uber H3]: a *Hexagonal hierarchical geospatial indexing system*.
     • RiskAware OpenEAGGR
     • rHEALPix by Landcare Research New Zealand (the original intention was to achieve equal-area cells throughout all resolutions)
     • DGGRID by Southern Oregon University

  }

  { HEALPix projection

    HEALPix is a projection that is based on subdivisions of a *distorted → https://en.wikipedia.org/wiki/Rhombic_dodecahedron[rhombic dodecahedron]* (a convex polyhedron with 12 congruent rhombic faces).

    When subdividing a level, each tile is divided into four tiles so that at any level of subdivisions, all tiles have the same size.

    HEALPix as an acronym or *Hierarchical Equal Area isoLatitude Pixelisation* (of a 2-sphere).
    -
    Sometimes, it is also written as *Healpix*.

    Because of its properties (espciallhy for calculating *spherical harmonic transforms*), HEALPix is widely used to map the cosmic microwave background.

    Alternatives for HEALPix include
      • → https://en.wikipedia.org/wiki/Hierarchical_triangular_mesh[Hierarchical Triangular Mesh] (HTM) - but the tiles are not all of equal size
      • → https://en.wikipedia.org/wiki/Quadrilateralized_Spherical_Cube[Quadrilaterilzed Spherical Cube]
    
    See also:
      • → https://healpix.jpl.nasa.gov/html/intronode4.htm[Geometric and Algebraic Properties of HEALPix]
      • The python package → https://pypi.org/project/astropy-healpix/[astropy-healpix] (especially the function → https://astropy-healpix.readthedocs.io/en/latest/api/astropy_healpix.HEALPix.html#astropy_healpix.HEALPix.cone_search_lonlat[`cone_search_lonlat`] which finds all HEALPix pixels within a given radius of a given coordinate).
      • → https://github.com/ntessore/healpix[This] github repository
      • → https://healpix.sourceforge.io/
 
  }

}

sa:
  → development/Data

  → development/GIS

  → development/OpenStreetMap

  → tools/Google-Earth/kml[KML]

  The Python library → development/languages/Python/libraries/Cartopy[Cartopy]
