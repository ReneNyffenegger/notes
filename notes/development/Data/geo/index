$ geodata

{ TODO

  ? KOGIS (= Koordination, Geo-Information und Services) is, along with → development/Data/exchange/formats/eCH, the custodian of INTERLIS language/specification.
  KOGIS coordinates some activities in the *Swiss Bundesverwaltung* related to Geoinformation (GI) and GIS 

  GML is an → development/XML grammar that allows to express *geographical features*. It is defined by the *Open Geospatial Consortium* (OGC).

  → https://thomas.skowron.eu/spaten/[Spaten] is a geo data format that purports to resolve issues that arise from using legacy serialization methods and simplify workflows.

  The → development/data-formats/Shape-file[ESRI shape file format] is the de facto standard for vector geodata.

  { WGS84

    WGS84 is the latest revision of the WGS (World Geodetic System) standard.

    WGS includes
      • Definitions of fundamental and derived constants of coordinate systems.
      • The Earth Gravity Model (EGM)
      • A description of the associated World Magnetic Model (WMM)
      • A current list of local datum transformations

    Definition 
      • The origin of the coordinate system is the Earth's center of mass (whose uncertainity is believed to be less than 2cm !)
      • The WGS84 meridian of zero longitude is the → https://en.wikipedia.org/wiki/IERS_Reference_Meridian[IERS Reference Meridian], 102 meters or 5.3 arc seconds east of the Greenwich meridian.
      • The WGS 84 datum surface is an *oblate spheroid* with equatorial radius a = 6'378'137 m at the equator and flattening f = 1/298.257'223'563. 

    Apparently, it is planned to move to IGS20 on 27 November 2022 (not sure if this move has taken place).

  }
  
  { INTERLIS

    ? INTERLIS is a software independent description language used for modelling and → development/Data/exchange/formats[exchanging geodata].

    ? FMT

  }
  { Equal-area projections

    The most common global equal-area projections available in GIS include:
      • Sinusoidial
      • Eckert
      • Homolosine
      • Mollweide
      • Hammer

  }
  { Discrete Global Grid Systems (DGGS)

    A *Discrete Global Grid System* (DGGS) is a type of spatial reference system that tessellates the globe into many individual, evenly spaced,
    and well-aligned cells.

    Such cells are used to encode location and, thus, can serve as a basis for data cube construction

    Open source DGGS implementations include:
     • Google S2
     • → development/Data/geo/H3[Uber H3]: a *Hexagonal hierarchical geospatial indexing system*.
     • RiskAware OpenEAGGR
     • rHEALPix by Landcare Research New Zealand (the original intention was to achieve equal-area cells throughout all resolutions)
     • DGGRID by Southern Oregon University

     { S2

       In → http://s2geometry.io/[S2], a cell is a four sided polygon (quadrilateral) bounded by four geodesics.

       The S2 hierarchy starts with 6 root cells.

       The root cells are obtained by projecting a cube onto a sphere.

       The number of bits required to store the id of a tile corresponds to *3 + 2 x level*, which is why the maximum level is 30.
       -
       The first three bits encode the face (0 … 5)
       -
       The face is followed by *level* pairs of bits that encode the subdivision.
       -
       The first bit after the required bist is always `1` followed by `0`.
       -
       For example
code {
010 1 0000.......0    Face cell 2.
001 10 100.......0    Subcell 2 of face cell 1.
100 11 01 1000...0    Subcell 1 of subcell 3 of face 4.
code }


       In S2 the thing contained by a polygon is «on the left» of the polygon's edges.
       -
       This is the same as the counter-clockwise rule for small loops, but differs for very large loops that enclose more than half of the sphere.

     }

  }

  { HEALPix projection #todo-healpix-pro

    HEALPix is a projection that is based on subdivisions of a *distorted → https://en.wikipedia.org/wiki/Rhombic_dodecahedron[rhombic dodecahedron]* (a convex polyhedron with 12 congruent rhombic faces).

    When subdividing a level, each tile is divided into four tiles so that at any level of subdivisions, all tiles have the same size (equal-area pixelisation).

    Cell boundaries are not geodesics.

    HEALPix as an acronym or *Hierarchical Equal Area isoLatitude Pixelisation* (of a 2-sphere).
    -
    Sometimes, it is also written as *Healpix*.

    Using the *RING ordering scheme*, HEALpix can be used to efficiently compute the Fourier decomposition in spherical harmonics of a discretized signal on the sphere (*spherical harmonic transforms*). Because of this property, HEALPix is widely used to map the cosmic microwave background.

    Using the *NESTED ordering scheme* allows to efficiently find neighbouring pixels.

    Alternatives for HEALPix include
      • → https://en.wikipedia.org/wiki/Hierarchical_triangular_mesh[Hierarchical Triangular Mesh] (HTM) - but the tiles are not all of equal size
      • → https://en.wikipedia.org/wiki/Quadrilateralized_Spherical_Cube[Quadrilaterilzed Spherical Cube]

    { Source code stuff

      Some interesting stuff I found in the source code…

      The `enum Healpix_Ordering_Scheme` (`src/cxx/Healpix_cxx/healpix_tables.h`) corresponds to the two orderings schemes of a HEALPix map: `RING` and `NEST`.

     `class pointing` (`src/cxx/cxxsuport/pointing.h`) represents a direction in 3d space or a location on the unit sphere.
      -
      Two possibly important `public` members of this class are
        • `theta` (The radian (colatitude) running from «north pole» to «south pole», 0 … π)
        • `phi` (the longitude, 0 … 2*π)

    `template<typename I> class T_Healpix_Base` derives from `Healpix_Tables`, but it's unclear what these classes are needed for.
     -
    `T_Healpix_Base<I>::order_max` specifies the maximum order.
     -
     The value of `T_Healpix_Base<int>::order_max` is 13 and 29 for `T_Healpix_Base<int64>`.

    `src/cxx/cxxsuport/datatypes.h` defines various platform-independent data types, among which are:
      • `tsize`, an unsigned integer type which should be used for array sizes (`typedef std::size_t tsize`)
      • `tdiff`, used for relative array indices

     Interesting functions seem to be:
     table { ll
      → https://healpix.sourceforge.io/html/sub_query_disc.htm[`query_disc`] ☰ Finds the indices of all pixels within an angular distance radius from a defined center
      → https://healpix.sourceforge.io/html/sub_query_polygon.htm[`query_polygon`] ☰ Finds the indices of all pixels within a polygon with at most one koncave vertex.
     table }

     `src/cxx/Healpix_cxx/hpxtest.cc` can be used to get a first impression on how HEAPix functions can be used.
      -
      Among others, the following identities are tested:
        • `ring2nest(nest2ring(m))==m`
        • `peano2nest(nest2peano(m))==m`
        • `zphi2pix(pix2zphi(m))==m`
        • `ang2pix(pix2ang(m))==m`
        • `pix2zphi(zphi2pix(ptg)) approx zphi`


    }
    { See also

      See also
      • → https://healpix.jpl.nasa.gov/html/intronode4.htm[Geometric and Algebraic Properties of HEALPix]
      • The python package → https://pypi.org/project/astropy-healpix/[astropy-healpix] (especially the function → https://astropy-healpix.readthedocs.io/en/latest/api/astropy_healpix.HEALPix.html#astropy_healpix.HEALPix.cone_search_lonlat[`cone_search_lonlat`] which finds all HEALPix pixels within a given radius of a given coordinate). (See also → https://github.com/astropy/astropy-healpix/blob/6cdea5e6680b902960e5e9bea6ee63c4e204d932/astropy_healpix/_core.c#L310[the Python binding] and this → https://github.com/astropy/astropy-healpix/blob/main/docs/cone_search.rst[rst file])
      • → https://github.com/ntessore/healpix[This] github repository
      • → https://healpix.sourceforge.io/
      • The → development/languages/Python/libraries/healpy[healpy] Python library
      • The → https://healpix.sourceforge.io/data/examples/healpix_fits_specs.pdf[FITS] (Flexible Image Transport System) is often seen in the context of HEALpix because of 1) the self-documentation of FITS files, thanks to their human readable headers, 2) their portability across all types and architectures of computers, and 3) the availability of FITS reading and writing routines and libraries in virtually all computer languages. (See the → https://heasarc.gsfc.nasa.gov/fitsio/fitsio.html[CFITSIO]) library)

    }
 
  }

}

sa:
  → development/Data

  → development/GIS

  → development/OpenStreetMap

  → tools/Google-Earth/kml[KML]

  The Python library → development/languages/Python/libraries/Cartopy[Cartopy]
