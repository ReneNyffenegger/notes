
OData is a protocol, based on → development/web/service/REST[REST], for creating and consuming → development/Data[data]. OData Services are requested with
→ development/web/HTTP[HTTP] `GET` requests.

→ https://services.odata.org/V4/TripPinServiceRW is an OData V4 sample Service.

{ Requesting Data

  A collection of entities:
code {
GET https://Service/path/to/root/ENTITY
code }

  An entity that is identified by its id:
code {
GET https://Service/path/to/root/ENTITY('entity-id')
code }

  Get a specific property
code {
GET https://Service/path/to/root/ENTITY('entity-id')/PROPERTY
code }

  The former request returns a → development/languages/JavaScript/JSON[JSON] object. In order to get the *raw value*, `$value` can be appended
code {
GET https://Service/path/to/root/ENTITY('entity-id')/PROPERTY/$value
code }

  Since properties are *hierachical*, it's possible to access specific parts of an entity using a path through the properties:
code {
GET https://Service/path/to/root/ENTITY('entity-id')/TOP-PROPERTY/SUB-PROPERTY/SUB-SUB-PROPERTY
code }

  Selecting by a criteria (filtering the result set) with the `$filter` keyword:
code {
GET https://Service/path/to/root/ENTITY?$filter=PROPERTY eq 'Value'
code }

  Gettting metadata with `$metadata`. This does not return a JSON object but rather an → development/XML document:
code {
GET https://Service/path/to/root/$metadata
code }


}
{ TODO

  { EDM - Entity Data Model

    Central concepts:
      • Entity types: named structure types with a key. May derive from other entity types. Entity types are templates for an *Entity*.
      • Comples types: named structures types *without* a key.
      • Entities: instances of *enity types* (such as Customer, Employee etc.) (Think rows in a database)
      • Relationships: have cardinality, are represented as *navigation properties*
      • Entity sets: named collection of entities (think table in a database?)
      • Actions
      • Functions

      { Association type (aka association)

        An *association type* describes relationships.

        An association has two *association ends* which both are *entity types*.

        The *association end multiplicity* specifies the number of *entities* on the other end of the relation:
          • 1
          • 0 or 1
          • n (many)

        *Entities* on one end of an association can be accessed through *navigation properties*.
        -
        Apparently, sometimes, there are also foreign keys on an *entity type* for such a lookup.

      }
      { Entity container

        An *entity container* groups *entity sets* and *association sets*.

      }
      { Entity Set

        An *entity set* is a collection of entities of a specific *entity type*.

      }
      { Entity Type

        *Entity types* are built from *properties*.

        An *entity type* corresponds to a *class*, an *entity* to an instance of that class, thus it can be thought of as a template for the entities.

        Entity types can be inherited from other entity types.

        Entity types can be related to other entity types with *associations*.

      }
      { Entity

        An *entity* corresponds to an instance of an *entity type* (for example a specific customer).

        An entity has a unique *entity key* within its *entity set*.

      }
      { Navigation property

        A *navigation property* allows to access *entities* on an *association's* end.

      }
      { Property

        A property stores part of the data in an *entity*.

        There are primitive data types for properties (strings, integers etc.) and *complex types*.

      }

  }

  { OData query results

    { Lookup values

      All lookups are named as `_LOGICALNAME_value`.

    }

  }
} 
sa:
  ORDS: → development/databases/Oracle REST Data Services
  -
  GData: Google Data Protocol

  → development/Data/OData/Web-API
