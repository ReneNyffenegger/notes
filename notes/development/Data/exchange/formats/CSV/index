CSV is probably the most common → development/Data/exchange/formats[import and export format] for → development/Data[data] of spreadsheets and → development/databases[databases].

{ Problems with CSV files #problems-with-csv-files)

  Although I like the flexibility, ubiquitousness and ease-of use of CSV files, I find they have the following problems
    • They are not self describing, especially the data types. If CSV files are exchanged between multiple parties, the data types of each field in a CSV file needs to be communicated separately.
    • Even if the data types are known, the data-format can still vary (dot vs. comma in decimal numbers, differing formats *dd/mm/yyyy*, *mm/dd/yyyy*, *yyyy-mm-dd* etc. This is almost always a problem if CSV files are generated from → Microsoft/Office/Excel with different → Windows/development/Internationalization/locale[locales])
    • CSV files cannot be annotated with comments (although I believe there are some standards that address this issue)

  These limitations gave raise to the → development/databases/OLE-DB/provider/Microsoft-Access-database-engine/engines/Text/schema_ini[schema.ini] specification of Microsoft. Such a schema.ini
  file can be used when reading a CSV file with → development/databases/OLE-DB/provider[OLE DB provider] for → development/databases/OLE-DB/provider/Microsoft-Access-database-engine[Microsoft Access database engine] in
  order to specify the characteristics of the CSV files.

}
{ Reasons to use semicolons rather than commas

  Although the C in CSV stands for comma, there are good reasons to use semicolons to delimit fields one from another.

  One reason is that there are many countries where a comma is already used as a decimal separator (See → #problems-with-csv-files[problems with CSV files]).

  Also, semicolons make more sense to be used as separators because they are less likely to occur in ordinary text than commas.

}
{ Programming languages

  Some function examples in various → development/languages[programming languages] that allow to read/write CSV data:
    • ~R~: → development/languages/R/functions/write_csv[`write.csv`], → development/languages/R/functions/read_csv[`read.csv()`]
    • ~Perl~: → development/languages/Perl/modules/Text/CSV[`Text::CSV`], → development/languages/Perl/modules/DBD/CSV[`DBD::CSV`], → development/languages/Perl/modules/Parse/CSV[`Parse::CSV`]
    • ~Python~: The → development/languages/Python/standard-library/csv[`csv` module], → development/languages/Python/libraries/pandas/read_csv[`pandas.read_csv`] and → development/languages/Python/code-snippets/read-csv[Poor man's CSV reader]
    • The → development/databases/SQL-Server[SQL Server] statement → development/databases/SQL-Server/T-SQL/statements/bulk-insert[`bulk insert`] to insert CSV data into a table and → development/databases/SQL-Server/T-SQL/functions/rowset/openrowset#mssql-openrowset-csv[`openrowset()`] to `select` from a table.
    • The → Windows/PowerShell/command-inventory/noun/CSV[PowerShell command noun `CSV`]
    • → Microsoft/Power-Query/M-formula/language[Power Query M formula]: `→ Microsoft/Power-Query/M-formula/standard-library/Csv/Document`; `Table.FromList` is able to create table from CSVs.

}

sa:

  → development/Data/structures/tabular[Tabular data]

  Oracle → development/databases/Oracle/tools/sql-loader examples:
    • → development/databases/Oracle/tools/sql-loader/example-02[Insert comma separated data]
    • → development/databases/Oracle/tools/sql-loader/example-08[load CSV file with a header]

  Using the → development/databases/SQL function `regexp_substr` (Oracle) to
  → development/databases/Oracle/SQL/select/misc/csv_to_columns[transform CSV text to individual columns] in a → development/databases/SQL/select[`select` statement].

  Oracle's `→ development/databases/Oracle/SQL/functions/json/table` function allows to → development/databases/Oracle/SQL/functions/json/table/comma-separated-to-table[turn comma separated values into a list of records].

  → Microsoft/Office/Excel:
    • → Microsoft/Office/Excel/data-exchange_import-export/CSV
    • → Microsoft/Office/Excel/data-exchange_import-export/CSV/ps-convert-files-in-dir[Convert CSV files in a directory] to → Microsoft/Office/Excel/Object-Model/Workbook[workbooks] with → Windows/PowerShell.
    • The worksheet function → Microsoft/Office/Excel/functions/text-related/textjoin[`textjoin()`]

  → https://github.com/okbob/pspg[pspg] is a command line utility to view CSV data (or generally → development/Data/structures/tabular). (TODO: Compare with → https://github.com/xo/usql[usql]).

  In → Microsoft/dot-net, a CSV file might be parsed with the → Microsoft/dot-net/namespaces-classes/Microsoft/VisualBasic/FileIO/TextFieldParser[`Microsoft.VisualBasic.FileIO.TextFieldParser`] class.

  
  SQLcl allows to create a resultset in CSV
    • With the → development/databases/Oracle/SQLcl#sqlcl-sqldev-select-hints[SQLcl and SQL Developer select hint] `/*csv*/`
    • `set → development/databases/Oracle/SQLcl/commands/set/sqlformat csv`

  A CSV file can be exported from → development/databases/Access under the menu → Microsoft/Office/Access/GUI/Ribbon/tabs/External-Data/Export[External Data -> Export]

  → development/Data/exchange/formats[Data exchange formats] for → development/Data/structures/tabular. An alternative to CSV files are *→ development/Data/exchange/formats/Apache-Parquet[Parquet] files*.
  These are files with a columnar format as well but can be accessed with better performance and additionally support typed and nested schemas.


  CSV (as well as also for example → development/languages/JavaScript/JSON[JSON]) are → development/Data/exchange/formats#data-exchange-challenges[prone to data corruption].

  → https://github.com/BurntSushi/xsv[xsv] is command line program for indexing, slicing, analyzing, splitting and joining CSV files. Commands should be simple, fast and composable:

  The `→ development/languages/JavaScript/JSON/tools/jq/at/csv` instruction of `→ development/languages/JavaScript/JSON/tools/jq`.

? → https://www.papaparse.com/[Papa Parse] converts CSV to → development/languages/JavaScript/JSON, and vice versa.
