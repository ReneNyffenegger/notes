
Wikidata does not primarily aim to store facts about the world, rather it tries to collect links to refences to knowledge.
-
Therefore, it's possible to have conflicting information in Wikidata which gives raise to the *statement ranks* (preferred, normal and deprecated).

→ https://www.wikidata.org/wiki/Special:Search[Search] for Q numbers. Use the `p:` prefix to search for identifiers for an item.

{ Data model

  The «Q Nr» of the *wikidata data model* is → https://opendata.renenyffenegger.ch/Wikimedia/Wikidata/entity/Q16354757[Q16354757].

  With SPARQL, its possible to query some features of that data model.

  { Wikidata data model parts

    The following query selects the (three) wikidata data model parts (using the P527 relation):
      • Wikidata claim (→ http://www.wikidata.org/entity/Q16354754[Q16354754])
      • Wikidata property (→ http://www.wikidata.org/entity/Q18616576[Q18616576])
      • Wikidata statement rank (→ http://www.wikidata.org/entity/Q21044622[Q21044622])

code {
select

     ?wikidataPart_
#  ( substr(str(?part_), 32) as ?qNr )
     ?wikidataPart
{  #
   # Q16354757: Wikidata Data Model
   # P527:      has parts
   #

     wd:Q16354757      wdt:P527      ?wikidataPart_ .
    ?wikidataPart_    rdfs:label     ?wikidataPart  . filter(lang(?wikidataPart) = 'en')

}
order by
   lcase(?wikidataPart)
code }

  }
  { Parts of the wikidata data model:

    Similarly, the P361 relation shows the parts of the wikidata data model:
      • concept of unknown value in Wikibase (→ http://www.wikidata.org/entity/Q19798648[Q19798648])
      • Wikidata value (→ http://www.wikidata.org/entity/Q107658963[Q107658963])
      • Wikidata label (→ http://www.wikidata.org/entity/Q107659597[Q107659597])
      • Wikidata alias (→ http://www.wikidata.org/entity/Q107659723[Q107659723])
      • Wikidata description (→ http://www.wikidata.org/entity/Q107659784[Q107659784])
      • Wikidata term (→ http://www.wikidata.org/entity/Q108060110[Q108060110])
      • interwiki link (→ http://www.wikidata.org/entity/Q677652[Q677652])
      • Wikidata item (→ http://www.wikidata.org/entity/Q16222597[Q16222597])
      • Wikidata claim (→ http://www.wikidata.org/entity/Q16354754[Q16354754])
      • Wikidata property (→ http://www.wikidata.org/entity/Q18616576[Q18616576])
      • Wikibase data model element (→ http://www.wikidata.org/entity/Q19798644[Q19798644])
      • concept of no-value in Wikibase (→ http://www.wikidata.org/entity/Q19798647[Q19798647])

code {
select

     ?part_
#  ( substr(str(?part_), 32) as ?qNr )
     ?part
{  #
   # Q16354757: Wikidata Data Model
   # P361:      part of
   #

    ?part_     wdt:P361   wd:Q16354757 .
#   wd:Q16354757     wdt:P361   ?part  .
    ?part_    rdfs:label ?part         . filter(lang(?part) = 'en')

}
order by
   lcase(?wikidataPart)
code }

    I am not sure why some parts are modelled with the P527 and others with the P361 relation.

  }
  { Entities

    Wikidata has *subjects* on which → development/Data/structured is stored. These subjects are called ~entities~.

    There are two types of entities:
      • item (whose identifier starts with `Q`)
      • property (whose identifiers start with `P`)

    The entities and properties form a *directed graph* in which the entities are the nodes and the properties are the edges.

    The model is different from → development/web/RDF[RDF] in that the graphs's edges (i.e. the properties) can be annotated. Such annotations
    record the the source of the information, the temporal validity etc.

    The Q Number for *Wikidata entity* is → https://www.wikidata.org/wiki/Q32753077[Q32753077].

    An S. N. A. K. (→ https://www.wikidata.org/wiki/Q86719099[Q86719099]) is the *basic information structure used to describe entities in Wikidata*.

  }
  { Item

    An item has typically a Wikipage in at least one Wikipedia language.

    An *item page* consists of (at least?) these main parts
      • *label*
      • *description*
      • list of *aliases*
      • list of *statements*
      • list of *site links*

    An item is identified by
      • its Q-number, or
      • the combination of label and description.

    Label, description and aliases are also known by *terms*. These are used to find and display items.

  }
  { Property

    Properties have *terms* but no statements or site links.

    A property has a *data type* that constrains the accepted range of values.

    Interesting properties include
    table { ll
      → https://www.wikidata.org/wiki/Property:P17[P17] ☰ The sovereign state in which subject is located, not to be used for human beings. Compare with P131.
      → https://www.wikidata.org/wiki/Property:P18[P18] ☰ image
      → https://www.wikidata.org/wiki/Property:P31[P31] ☰ *instance of*, corresponds to `rdf:type`. Compare with → https://www.wikidata.org/wiki/Property:P279[P279 (subclass of)] and → https://www.wikidata.org/wiki/Property:P463[P463] (member of).
      → https://www.wikidata.org/wiki/Property:P131[P131] ☰ located in the administrative territorial entity (Compare with P17, → https://www.wikidata.org/wiki/Property:P276[P276], P1382)
      → https://www.wikidata.org/wiki/Property:P276[P276] ☰ Location. (Compare with → https://www.wikidata.org/wiki/Property:P131[P131], P625, P8138, P706, P7153)
      → https://www.wikidata.org/wiki/Property:P279[P279] ☰ *instance of*. Corresponds to `rdfs:subClassOf`. Compare with P31.
      → https://www.wikidata.org/wiki/Property:P402[P402] ☰ → development/OpenStreetMap[OpenStreetMap] relation ID. Compare P3896
      → https://www.wikidata.org/wiki/Property:P571[P571] ☰ start date, compare 576
      → https://www.wikidata.org/wiki/Property:P576[P576] ☰ dissolved, abolished or demolished date, Compare P582, P571
      → https://www.wikidata.org/wiki/Property:P585[P585] ☰ Point in time
      → https://www.wikidata.org/wiki/Property:P625[P625] ☰ WGS84-Coordinates of subject. Distances between two such coordinates can be calculated with `geof:distance(?c1, ?c2)`. Compare with `P2044` (elevation).
      → https://www.wikidata.org/wiki/Property:P771[P771] ☰ Swiss municipality code (BFS Number)
      → https://www.wikidata.org/wiki/Property:P856[P856] ☰ Official website, compare with P6269
      → https://www.wikidata.org/wiki/Property:P1566[P1566] ☰ Geonames ID (formatter is → https://www.geonames.org/8740955[`https://www.geonames.org/$1`])
      → https://www.wikidata.org/wiki/Property:P3896[P3896] ☰ Geoshape (Wikicommons). Compare P402
      → https://www.wikidata.org/wiki/Property:P5305[P5305] ☰ → development/databases/query-languages/SPARQL Endpoint
      → https://www.wikidata.org/wiki/Property:P6269[P6269] ☰ Base → development/web/URI-URL-URN-IRI-URC[URL] of a → development/web/service. Compare with P856
      → https://www.wikidata.org/wiki/Property:P8402[P8402] ☰ → development/Data/open[Open Data] portal
    table }

    { TODO


      → https://www.wikidata.org/wiki/Q107649491[Q107649491] is a wikidata metaclass for *property-types*.

      → https://www.wikidata.org/wiki/Property:P1629[P1629] links a property to a wikidata item that corresponds to the concept that is represented by that property.

    }

  }
  { Q...

    table { ll
      → https://www.wikidata.org/wiki/Q5[Q5] ☰ human. Compare with → https://www.wikidata.org/wiki/Q15978631[Q15978631].
      → https://www.wikidata.org/wiki/Q83[Q83] ☰ MediaWiki
      → https://www.wikidata.org/wiki/Q341[Q341] ☰ Free software
      → https://www.wikidata.org/wiki/Q7397[Q7397] ☰ Computer Software
      → https://www.wikidata.org/wiki/Q42848[Q42848] ☰ → development/Data.
      → https://www.wikidata.org/wiki/Q70208[Q70208] ☰ Swiss municipality
      → https://www.wikidata.org/wiki/Q7907943[Q7907943] ☰ Vaccine Adverse Event Reporting System (VAERS)
      → https://www.wikidata.org/wiki/Q16354757[Q16354757] ☰ Wikidata Data Model (see this → https://commons.wikimedia.org/wiki/File:Datamodel_in_Wikidata.svg[SVG graphic])
      → https://www.wikidata.org/wiki/Q16354758[Q16354758] ☰ Wikibase (collection of software for structured data)
      → https://www.wikidata.org/wiki/Q19798645[Q19798645] ☰ Wikibase datatype
      → https://www.wikidata.org/wiki/Q107649491[Q107649491] ☰ Type of wikidata properties
    table }

  }
  { L…

    Lexemes start with an L, for example → https://www.wikidata.org/wiki/Lexeme:L10000[L10000].

  }
  { E… (Schema)

    There is also a concept of → https://www.wikidata.org/wiki/Wikidata:WikiProject_Schemas[schemas]. Their identifier starts with E, for
    example → https://www.wikidata.org/wiki/EntitySchema:E13[E13: natural numbers],
    → https://www.wikidata.org/wiki/EntitySchema:E16[E16: software titles] or
    → https://www.wikidata.org/wiki/EntitySchema:E100[E100: cities]

    A Schema is used to define a set of rules to which the subset of wikidata that belongs to this schema should conform.

  }
  { Statements

    A statement can be enriched with a *qualifier* which provides additional context information for the claim.
    -
    Qualifiers are expressed as properties.
    -
    Examples for qualifiers are *start date* (P580) or *end date* (P582).

    A statement can include one or more *references* which support the claim.
    -
    A reference is property-value pair (or a list of property-value pairs?)

    { Rank

      A statement has an associated → https://www.wikidata.org/wiki/Help:Ranking[rank] which is one of
      table { lll
        preferred ☰ `wikibase:PreferredRank` ☰ Typically used for the most up-to-date value or the value with the broadest consensus, and is ideally applied to a → https://www.wikidata.org/wiki/Help:Sources[sourced statement] (See P248 «stated in» and P854 «reference URL»)
        normal ☰ `wikibase:NormalRank` ☰
        deprecated ☰ `wikibase:DeprecatedRank` ☰ Typically used for wrong or out-of-date values. Wrong values may be connected with a «reason for deprecated rank» (P2241) relation, out-of-date values with a «start time» (P580) and «end time» (P582) relation.
      table }

      A statement is connected to a rank with the `http://wikiba.se/ontology#rank` (or `wikibase:rank`) relation.
      -
      The following query selects the the three ranks:
code {
select
  distinct ?rank
{
#  []    <http://wikiba.se/ontology#rank>   ?rank .
   []     wikibase:rank                     ?rank .
}
code }
     → https://w.wiki/5obi[Run it]

    }
    { Claim

      The claim is the objective of a statement.

      Ranks and references do not belong the statement's claim.

    }
  }
  { Namespaces

    → https://www.wikidata.org/wiki/Help:Namespaces

  }
  { None and some

    A property can have the value *none* or *some*.

    *none* indicates that it is known that the given property was not available for the entity.

    *some* indicates what it is known that the given property was available, but we don't know its value.

  }

}
{ Misc

  URIs
    • Entities: → http://www.wikidata.org/entity/Q42
    • Properties: → http://www.wikidata.org/entity/P184
    • RDF in NTriples format: → http://www.wikidata.org/wiki/Special:EntityData/Q42.nt
    • RDF in → development/languages/JavaScript/objects/JSON[JSON] → http://www.wikidata.org/wiki/Special:EntityData/Q42.json

  { SERVICE wikibase:label

    By default, `SERVICE wikibase:label` only supplies labels for entities in the `wd:` namepace.

    This can be changed by adding `?prop wikibase:directClaim ?p` to the query.

  }
  { Wikidata Query Service (WDQS)

    WDQS is the server that executes wikidata queries formulated in → development/databases/query-languages/SPARQL.

  }

  { connecting wd:P… to their counterpart …:P… nodes

   `wikibase:directClaim` connects `wd:P…` to its counterpart `wdt:P…`.

    The following query returns `wdt:P10`:
code {
select * {
   wd:P10 wikibase:directClaim ?y  .
}
code }
    → https://w.wiki/5pVM[Run it]

    There are quite a few …:P… nodes which all can be reached from `wd:P…`. The following query returns `true`:
code {
ask {
   wd:P31   wikibase:claim                   p:P31 .
   wd:P31   wikibase:directClaim           wdt:P31 .
   wd:P31   wikibase:novalue              wdno:P31 .
   wd:P31   wikibase:qualifier              pq:P31 .
   wd:P31   wikibase:qualifierValue        pqv:P31 .
   wd:P31   wikibase:reference              pr:P31 .
   wd:P31   wikibase:referenceValue        prv:P31 .
   wd:P31   wikibase:statementProperty      ps:P31 .
   wd:P31   wikibase:statementValue        psv:P31 .
}
code }
   → https://w.wiki/5pgE[Run it]

  }
  { wikibase:propertyType

    The data type of a property item (`wd:P…`) can be queried with `wikibase:propertyType`.

    As of October 2022, there are 17 property (or data) types:
    table { ll
      `http://wikiba.se/ontology#CommonsMedia` ☰
      `http://wikiba.se/ontology#ExternalId` ☰
      `http://wikiba.se/ontology#GeoShape` ☰
      `http://wikiba.se/ontology#GlobeCoordinate` ☰
      `http://wikiba.se/ontology#Math` ☰
      `http://wikiba.se/ontology#Monolingualtext` ☰
      `http://wikiba.se/ontology#MusicalNotation` ☰
      `http://wikiba.se/ontology#Quantity` ☰
      `http://wikiba.se/ontology#String` ☰
      `http://wikiba.se/ontology#TabularData` ☰
      `http://wikiba.se/ontology#Time` ☰
      `http://wikiba.se/ontology#Url` ☰
      `http://wikiba.se/ontology#WikibaseForm` ☰
      `http://wikiba.se/ontology#WikibaseItem` ☰
      `http://wikiba.se/ontology#WikibaseLexeme` ☰
      `http://wikiba.se/ontology#WikibaseProperty` ☰
      `http://wikiba.se/ontology#WikibaseSense` ☰
   table }

   The list of these property types were obtained with the following query:
code {
select distinct
   ?propertyType
{
  [] wikibase:propertyType ?propertyType .
}
order by
  ?propertyType
code }
    → https://w.wiki/5pXs[Run it]

  }
  { schema:about

   `schema:about` links a Wikipedia URL to a «wd:…» number.

    The following query translates the Hebrew Wikipedia page of Zurich to → https://www.wikidata.org/wiki/Q72[Q72]:
code {
select
   ?wdNr
{
   <→ https://he.wikipedia.org/wiki/%D7%A6%D7%99%D7%A8%D7%99%D7%9A[https://he.wikipedia.org/wiki/%D7%A6%D7%99%D7%A8%D7%99%D7%9A]> schema:about ?wdNr .
}
code }
    → https://w.wiki/5nbd[Run it]

   `schema:about` can be combined with `schema:isPartOf` to query the Wikipedia URL of a given topic (Q-Nr) in a given Wikipedia language:
code {
select
   ?wikipediaURL
{
   ?wikipediaURL schema:about     wd:Q72                        .
   ?wikipediaURL schema:isPartOf <https://he.wikipedia.org/>    .
}
code }
    → https://w.wiki/5nbq[Run it]

  }
  { schema:name

   `schema:name` relates a *Wikimedia URL* to a label.

    The following query finds the URLs that are associated with *August Piccard in French* and *Oracle Database in English*.
code {
select
   ?name
   ?wikimediaURL
{

   values (?name) {
     ("Auguste Piccard"     @fr)
     ("Oracle Database"     @en)
   }

   ?wikimediaURL schema:name ?name
}
code }
    → https://w.wiki/5pif[Run it]

   The following query finds the label that is associated with a given Wikimedia URL
code {
select
  ?label
 (lang(?label) as ?lang)
{
   <→ https://de.wikipedia.org/wiki/London[https://de.wikipedia.org/wiki/London]>  schema:name ?label .
}
code }
   → https://w.wiki/5pmV[Run it]


  }
  { schema:isPartOf

?   The `schema:isPartOf` relation connects a Wikimedia URL to a wikimedia projectl

    The following query returns `<https://de.wikisource.org/>`
code {
select ?partOf
{
   <→ https://de.wikisource.org/wiki/Das_Newe_Testament_Deutzsch[https://de.wikisource.org/wiki/Das_Newe_Testament_Deutzsch]> schema:isPartOf ?partOf
}
code }

    The following query uses SPARQL's `distinct` operator to select *all* wikimedia(?) related websites.
code {
select distinct ?partOf
{
   $item schema:isPartOf ?partOf
}
order by
   ?partOf
code }
   → https://w.wiki/5o4C[Run it.]

  }
  { schema:description

code {
select
   ?descr
  (lang(?descr) as ?lang)
{
   wd:Q39 schema:description ?descr .
}
code }

  }
  { Combining some schema:* relations

code {
select
   ?term
  (lang(?term) as ?termLang)
   ?lang
   ?wikimediaURL
   ?wikidataID
   ?project
{

   values (?term) {
     ("Gift"@en)
     ("Gift"@de)
   }

   ?wikimediaURL schema:name       ?term       .
   ?wikimediaURL schema:about      ?wikidataID .
   ?wikimediaURL schema:isPartOf   ?project    .
   ?wikimediaURL schema:inLanguage ?lang       .
  
}
code }

  }
  { rdfs:label

    The `rdfs:label` predicates assigns a text and a language to a node. The language ID of the added text can be quried with the `lang(…)` function.

    The following query selects translations of «Swizterland» and ther language ID and order them by the language ID:
code {
select
  (lang(?label) as ?langId)
   ?label
{
   wd:Q39   rdfs:label  ?label .
}
order by
   ?langId
code }
    → https://w.wiki/5pFa[Run it]


    `lang(…)` can be used in a `filter` clause to limit the result to a given language (in the following example to *Bengali*, whose ID is *bn*):
code {
select
   ?label
{
   wd:Q39   rdfs:label  ?label .
   filter( lang(?label) = 'bn' )
}
code }
    → https://w.wiki/5pFe[Run it]


    See also the `skos:altLabel` predicate.

  }
  { skos:altLabel


   `skos:altLabel` assigns a *list of aliases* to a node.

    In a wikidata entry page, these aliases appear under the column *Also known as*.

code {
select
   ?alias
{
   wd:Q39   skos:altLabel  ?alias .
   filter( lang(?alias) = 'en' )
}
code }
    → https://w.wiki/5pH9[Run it]

    See also the `rdfs:label` predicate.


  }
  { Lexemes

    Query the grammatical gender (P5185) of the german word *Aprikose* (→ https://w.wiki/5nc3[Wikidata Query Service]):
code {
select
   ?lexem
   ?gender
{
   ?lexem      rdf:type       ontolex:LexicalEntry .
   ?lexem      dct:language   wd:Q188              . # Q188:  German
   ?lexem      wikibase:lemma ?text                . filter(str(?text) = "Aprikose")
   ?lexem      wdt:P5185      ?gender_             . # P5185: grammatical gender
   ?gender_    rdfs:label     ?gender              . filter(lang(?gender) = 'de')
}
code }

  }

  { wdt:P…

    wdt:P… connects a node to its so-called «truthy value».

  }
  { p: connect wd:Q… to wds:…

   A «p:…» relation connects a «wd:Q» number to a «wds:…» node (→ https://w.wiki/5nf3[Wikidata Query Service]):
code {
select
   ?wds
   ?rel
   ?obj
{
   wd:Q544  p:P2670  ?wds .  # Q544 = Solar System
   ?wds     ?rel     ?obj .
}
code }

  }
  { ps: connect wds: to simple value

    A «ps:…» relation connects a «wds:…» node to a *simple value*. Apparently, simple values are «Q numbers»
    -
    The following query sort of reverses the above query (→ https://w.wiki/5nf9[Wikidata Query Service]):
code {
select
   ?wd
{
   wds:Q544-1edcc7b8-4eb3-28d9-35b5-b6ff5bbc8e38 ps:P2670 ?wd .
}
code }

    Note that a «wdt:» relation connects a «wd:» node to a *simple value*.

  }
  { p: , ps: and pq:

    The following query prints a line chart of the population growth in Swizerland since 1970 and tries to demonstrate the combined usage of `p:`, `ps:` and `pq:` relations.

    First, `wd:Q39 p:P1082 ?populationStmt` extracts all statements that are relate Swizterland (Q39) to its population (`p:1082`).
    -
    Then, the `pq:P585` relation extracts each statement's year, and `ps:P1082` the statement's population value. It is unclear to me why I have to use `pq:` for one relation an `ps:` for the other one.
    -
    Finally, the `filter` condition only selects values where the year is greater or equal to 1970 (→ https://w.wiki/5nfq[Run it]):
code {
#defaultView:LineChart
select
   ?year
   ?population
{
  wd:Q39          p:P1082  ?populationStmt .
  ?populationStmt pq:P585  ?year           ;
                  ps:P1082 ?population     .
  filter(year(?year) >= 1970)
}
order by
   ?year
code }

    I belive that `pq:` stands for «property qualifier» and `ps:` for «property statement».

    Note: this example also demonstrates a weakness of wikidata: no population values are shown for the years 2015, 2016 and after 2017,
    probably, because these values were imported before 2018 and are not maintained anymore.

  }
  { psn:

    TODO: does `psn:` stand for «normalized property statement»?

  }
  { pqv:

    TODO: does `pqv:` stand for «property qualifier value»?

  }
  { wikibase:quantityAmount and wikibase:quantityUnit

     → https://w.wiki/5ngi[Run it]
code {
select
   ?itemLabel
   ?elevation
   ?unitLabel
{

   values (?item)
   {
      ( wd:Q46588    )  # Cordillera Kimsa Cruz : a mountain range in Bolivia
      ( wd:Q499164   )  # Ascraeus Mons         : a martian shield volcano
      ( wd:Q55615607 )  # Kalindi Pass          : highest and most adventurous trekking trail in India (almost 6000 M)
   }

   ?item        p:P2044                 ?eleStmts    .
   ?eleStmts    psv:P2044               ?eleValues   .

   ?eleValues   wikibase:quantityAmount ?elevation   .
   ?eleValues   wikibase:quantityUnit   ?unit        .

   ?item        rdfs:label              ?itemLabel   .
   ?unit        rdfs:label              ?unitLabel   .

   filter(lang(?itemLabel) = 'en')
   filter(lang(?unitLabel) = 'en')
}
code }

   }
   { DESCRIBE

     `descibe <entity>` returns all triplets where `<entity>` is subject or object:
code {
describe <http://www.wikidata.org/entity/Q72>
code }
     → https://w.wiki/5nmB[Run it]

   }
  { Wikidata categories

    A Wikidata category is an instance of `Q4167836`.

    As of October 2022, there are over 5 Million categories:
code {
select
   (count(*) as ?cntWikidataCategories)
{
   ?category  wdt:P31  wd:Q4167836 .
}
code }
    → https://w.wiki/5ocA[Run it]

  }
  { Disambiguation pages

    A so-called disambiguation page should be an instance of `wd:Q4167410`.

    The following query verifies if `wd:Q399841` (→ https://www.wikidata.org/wiki/Q399841[Oracle]) is a disambiguation page:
code {
ask {
   wd:Q399841  wdt:P31  wd:Q4167410 .
}
code }

    See also «Wikipedia article covering multiple topics» (Q21484471), «main subject» (P921) and «has parts» (P527)

  }
}
{ Wikidata Query Service

  { Default View

    The → https://query.wikidata.org/[Wikidata Query Serivce] allows to emit the selected data in various formats. The format needs to be specified as comment:
    table { ll
      `#defaultView:AreaChart` ☰
      `#defaultView:BarChart` ☰
      `#defaultView:BubbleChart` ☰
      `#defaultView:Dimensions` ☰
      `#defaultView:Graph` ☰
      `#defaultView:ImageGrid` ☰
      `#defaultView:LineChart` ☰
      `#defaultView:Map` ☰
      `#defaultView:ScatterChart` ☰
      `#defaultView:Timeline` ☰
      `#defaultView:Tree` ☰
      `#defaultView:TreeMap` ☰
    table }

    { LineChart

      The following example creates a line chart. For simplicity, the rendered values are hardcoded. (→ https://w.wiki/5nfM[Run it]).
code {
#defaultView:LineChart
select ?x ?y {
   values (?x ?y) {
      ( 1  20)
      ( 6  23)
      ( 9  21)
      (11  19)
      (14  20)
      (15  22)
      (17  24)
   }
}
code }

    }
    { Map

      If a query result returns coordinates, `#defaultView:Map` will create a map:

      The following query produces a map with *castles* (Q23413) or *castle ruins* (Q17715832) located in the Kanton Zurich (Q11943):
code {
#defaultView:Map
select
 #
 # Use distinct to make all points on the map equally sized.
 # Some nodes are linked with both, Q23413 and Q17715832, and thus
 # would be drawn with a bigger point.
 #
   distinct
  ?name
  ?coord
{
   values (?castleType) {
      ( wd:Q23413    )
      ( wd:Q17715832 )
   }

   ?castle  wdt:P31    ?castleType ;
            p:P131     ?locStmt    ;
            wdt:P625   ?coord      ;
           rdfs:label  ?name       .

   ?locStmt ps:P131     wd:Q11943  .

   filter(lang(?name) = 'de')
}
code }
     → https://w.wiki/5oVs[Run it]

     `"Point(lon lat)"^^geo:wktLiteral"` is a coordinate literal (note: the order longitude before latitude is different from → misc/ISO/6709).
     -
     Such literals allow to draw a «hardcoded» point on a map:
code {
#defaultView:Map
select
  *
{
   values (?coord ?text) {
       ( "Point(-6.4456011 49.872861 )"^^geo:wktLiteral  "Bishop Rock"   @en )
       ( "Point(-6.4172637 49.878124 )"^^geo:wktLiteral  "Isles of Scily"@en )
   }
}
code }
     → https://w.wiki/5oUb[Run it]

     With `#defaultView:Map{"layer": "?var"}`, it's possible to create a layered map. The value of `?var` determines in which layer an item is put. Additionally, each layer draws
     its items in a different color.
     -
     The following query draw a map of Switzerland where the municipalities are colored depending on ther suffix. (With the chosen suffixes here, the map is only really
     interesting for the German part of Switzerland):
code {
#defaultView:Map{"layer": "?suffix"}
select
   ?munic
   ?name
   ?coord
  (if(regex(?name, 'wil$'  ), '-wil',
   if(regex(?name, 'wilen$'), '-wilen',
   if(regex(?name, 'ikon$' ), '-ikon',
   if(regex(?name, 'iken$' ), '-iken',
   if(regex(?name, 'rach$' ), '-rach',
   if(regex(?name, 'ingen$'), '-ingen',
   if(regex(?name, 'au$'   ), '-au',
   if(regex(?name, 'bach$' ), '-bach',
   if(regex(?name, 'berg$' ), '-berg',
    "*")))))))))  as ?suffix)
with { # Use named subquery (which is guaranteed to be run only once) to improve performance
      select
         ?munic
        (replace(?name, '(.*) \\w\\w$', '$1') as ?name)  # Remove occasional Canton abbreviation (for example 'Oberdorf BL')
      {
         ?munic  wdt:P31     wd:Q70208 ;
                 wdt:P625   ?coord     ;
                 rdfs:label ?name .
        filter(lang(?name) = 'de')
      }
} as %municipalities
where {
   include %municipalities
   ?munic       wdt:P625   ?coord     .
}
code }
     → https://w.wiki/5pWb[Run it]

    }

  }

}
{ Some queries

  { Mountains higher than 4000 meters in Switzerland

   → https://w.wiki/5ngJ[Run it]
code {
select
   ?elevation
   ?name
   ?mountain
{

  ?mountain wdt:P31      wd:Q8502   ; # ?mountain is an "instance of" (P31) a "mountain" (Q8502)
            wdt:P17      wd:Q39     ; # ?mountain has "country" (P17) "Switzerland" (Q39)
            wdt:P2044    ?elevation ; # P2044: "elevation above sea level"
            rdfs:label   ?name      . # Use rdfs:label to find the mountain's name

            filter(?elevation >= 4000)
            filter(lang(?name) = 'de')
}
order by
  ?elevation
code }

  }
  { Most common relations

    The following query tries to determine the most common relations.

    In order to prevent a query timeout error, we have to use a *nested query* to select a sample of 10 Million relations before we group and count them:
code {
select
   ?rel
   (count(?rel) as ?cnt)
{
   select ?rel
   {
      ?x  ?rel ?y .
   }
   limit 10000000
}
group by
   ?rel
order by
   desc(count(?rel))
limit
   100
code }
→ https://w.wiki/5nhR[Run it]

    On 2022-10-08, the query returned
    table { lr
      `rdf:type` ☰ 2150595
      `wikibase:rank` ☰ 1307831
      `schema:inLanguage` ☰ 900424
      `schema:name` ☰ 900424
      `schema:isPartOf` ☰ 900424
      `schema:about` ☰ 888219
      `prov:wasDerivedFrom` ☰ 793082
      `pq:P585` ☰ 76617
      `pqv:P585` ☰ 76615
      `ps:P31` ☰ 42471
      `pq:P580` ☰ 34544
      `pqv:P580` ☰ 34498
      `ps:P1082` ☰ 33245
      `psv:P1082` ☰ 33244
      `pq:P459` ☰ 32322
      `ps:P106` ☰ 30558
      `ps:P646` ☰ 29962
      `psn:P646` ☰ 29962
      `ps:P18` ☰ 22791
      `ps:P373` ☰ 21941
      `pq:P582` ☰ 21832
      `pqv:P582` ☰ 21598
      `ps:P47` ☰ 18965
      `pq:P1810` ☰ 18165
      `psn:P214` ☰ 15899
    table }


  }
  { All objects of a given node

    The following query returns all relations of a given node (here: Switzerland = Q39).
    -
    In order to be more readable, the query returns a relation's label.
    -
   `?relType` corresponds to the property type expected by the relation. 
    -
    Because some relations point to another node, other relations just to a value,
   `coalesce(…)` returns either the label of the referenced node or the value.

code {
select
   ?relText
   (coalesce(?xText, ?x) as ?obj)
   ?rel_
   ?relType
#  ?x
#  ?xText
{

#  wd:Q35120  ?rel                   ?x       .
   wd:Q39     ?rel                   ?x       .

   ?rel_      wikibase:directClaim   ?rel     .
   ?rel_      rdfs:label             ?relText . filter(lang(?relText) = 'en')
   ?rel_      wikibase:propertyType  ?relType .
  
  
   optional {
   ?x         rdfs:label             ?xText   . filter(lang(?xText  ) = 'en')
   }
}
order by
   lcase(?relText)
code }
     → https://w.wiki/5pay[Run it]

  }

}
{ TODO

  { wd:Q23958852

    wd:Q23958852 («Variable-order class») is interesting because it is an instance (wdt:P31) of itself. The following query returns `true`:
code {
ask {
   wd:Q23958852  wdt:P31  wd:Q23958852 .
}
code }
    → https://w.wiki/5pVK[Run it]

  }
  { wikibase:Dump

code {
select
   ?a ?b
{
  wikibase:Dump ?a ?b .
}
code }

code {
select
   ?rel ?x
{
   values (?rel) {
     (<http://creativecommons.org/ns#license>)
     (schema:softwareVersion                 )
     (rdf:type                               )
     (rdf:type                               )
     (owl:imports                            )
   }

   wikibase:Dump ?rel ?x .
}
code }

  }

}

sa:

  Querying the Wikidata SPARQL endpoint with
    • → Windows/PowerShell/command-inventory/noun/restMethod/invoke#invoke-restMethod-wikidata[PowerShell's `invoke-restMethod` cmdlet]
    • → development/web/php/snippets/cURL/wikidata-SPARQL[PHP's cURL library]
