$ IEEE-754 (Floating Point Arithmetic - float/double etc) 

table { lll
    ☰ `float` ☰ `double`
  Size ☰ 4 bytes ☰ 8 bytes
  Mantissa bits ☰ 23 (24) ☰ 52 (53)
  Decimal digitits of precision ☰ 7 ☰ 15
  Max number ☰ 3e38 ☰ 1.7e308,

table }

See → https://stackoverflow.com/a/18409644/180275[this Stackoverflow answer] for the 52 vs 53 and 23 vs 24 «discrepancy».

IEEE-754 floating point numbers include the values for `+Infinity`, `-Infinity` and `NaN` (Not a Number).

{ Kahan summation algorithm

  The *Kahan summation algorithm* (aka compensated summation) reduces the numerical error when adding a series of finite precision floating point numbers.

  The error reduction can be achieved by keeping a separate variable that stores a running compensation to accumulate small errors.

}
{ C / C++

  The → development/languages/C-C-plus-plus/C/standards#c99[C99] and C++ 2003 standard only mandate that the `double` is at least as precise as the `float`. The rest is
  implementation defined.

  See also → https://stackoverflow.com/a/2386808/180275[this Stackoverflow answer]

}
{ represent-ieee-754.c #represent-ieee-754-c

  `represent-ieee-754.c` contains some simple C functions that allow to create a string with the binary representation of a `double`.

A `0` bit is generally represented with a dot.
-
An exponent-`1` bit is represented with an `E`. A mantissa-`1` bit is represented with a `M`. The negative sign bit is represented with a `S`.

gh|about-IEEE-754|/represent-ieee-754.c||

The corresponding header file is
gh|about-IEEE-754|/represent-ieee-754.h||


}

{ print-some-doubles.c

`print-some-doubles.c` uses `represent-ieee-754.c` to print the binary representation of some doubes.

gh|about-IEEE-754|/print-some-doubles.c||

The program prints
code {
       +0.0000000000: ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.0000000000: ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +1.0000000000: ..EE  EEEE | EEEE  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.5000000000: ..EE  EEEE | EEE.  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +1.5000000000: ..EE  EEEE | EEEE  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +1.7500000000: ..EE  EEEE | EEEE  MM.. | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +1.8750000000: ..EE  EEEE | EEEE  MMM. | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +1.9375000000: ..EE  EEEE | EEEE  MMMM | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +3.8750000000: .E..  .... | ....  MMMM | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +7.7500000000: .E..  .... | ...E  MMMM | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.0000000000: ....  .... | ....  MMMM | M...  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +2.0000000000: .E..  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +3.0000000000: .E..  .... | ....  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +4.0000000000: .E..  .... | ...E  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +8.0000000000: .E..  .... | ..E.  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
      +16.0000000000: .E..  .... | ..EE  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       -1.0000000000: S.EE  EEEE | EEEE  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
      +10.0000000000: .E..  .... | ..E.  .M.. | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.7500000000: ..EE  EEEE | EEE.  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.3750000000: ..EE  EEEE | EE.E  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.1875000000: ..EE  EEEE | EE..  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
     +250.2500000000: .E..  .... | .EE.  MMMM | .M..  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.0000000000: ....  .... | ...E  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
       +0.0000000000: ....  .... | ..E.  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
                +nan: .EEE  EEEE | EEEE  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
                -nan: SEEE  EEEE | EEEE  M... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
                +inf: .EEE  EEEE | EEEE  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
                -inf: SEEE  EEEE | EEEE  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | ....  .... | 
      ....
code } 

}
{ IEEE-854

  Another standard for floating-point calculation is IEEE-854 (which allows for base 2 or 10 and does not specify how a floating-point
  number is encoded into bits.

}

sa:
  → development/IEEE/

  → development/IEEE/754/nextafter

  → development/languages/Perl/modules/Data/IEEE754/Tools

  → Companies-Products/SAS/programming/formats-informats/rb[SAS format rb.]
