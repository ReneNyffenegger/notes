
{ Installing #vs-code-install

  VS Code can be installed with → Windows/Chocolatey:
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y vscode --params "/NoDesktopIcon /NoQuicklaunchIcon /NoContextMenuFiles /NoContextMenuFolders" # /DontAddToPath
code }

}
{ Starting on the command line #vs-code-cmd-line

  table { ll
   → Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[`code`] ☰
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] .` ☰ Open code with current directory
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] -r .` ☰ Open code with current directory
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] --locale=de` ☰ Use specific language
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] -d left.txt right.txt` ☰ Compare two files in → development/editors/Visual-Studio-Code/GUI/compare-files[diff mode].
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] -d -n left.txt right.txt` ☰ Compare two files in *diff mode* in a *new* instance of code
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] --goto main.cpp:20:5` ☰ Jump to given line and column in file
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] --disable-extensions .` ☰ Disable all → development/editors/Visual-Studio-Code/extensions[extensions]
  → Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code#vscode-help[`code -help`] ☰ Summary of → Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code#vscode-help[options]
  `→ Windows/dirs/Program-Files/Microsoft-VS-Code/bin/code[code] --profile "Data Migration Prj"` ☰ Launches VS Code with the specified → #vs-code-profiles[profile]
  table }

  See also → Windows/dirs/Users/username/_vscode#vs-code-argv-json[`argv.json`] (for example located under `→ Windows/dirs/Users/username/_vscode`).

}
{ Interesting keyboard shortcuts #vscode-shortcuts


  Keyboard shurtcuts can be modified in `keybindings.json`. Some interesting shortcuts include:
  table { ll
    ctrl+pageUp/pagedown ☰ Switch to next/previous window (aka pane?)
    shift+alt + mouse click ☰ Column (box) selection
    ctrl+, ☰ → development/editors/Visual-Studio-Code/GUI/menu/File/Preferences/Settings[File -> Preferences -> Settings]
    ctrl+shift+p *or* F1 ☰ → development/editors/Visual-Studio-Code/GUI/Command-Palette
    ctrl+p ☰ Go to (already opened?) files by typing parts of their names
    ctrl+r ☰ Open a recently opened folder or file (Same as File -> Open Recent ?)
    ctrl+b ☰ Show/hide (toggle) sidebar
    ctrl+0 // ctrl+1 resp. ☰ Set focus to → development/editors/Visual-Studio-Code/GUI/Side-Bar, to Editor, respectively.
    ctrl+k z ☰ Enter → development/editors/Visual-Studio-Code/GUI#vs-code-zen[Zen mode]
    ctrl+k m ☰ Set → development/editors/Visual-Studio-Code/language[language] mode for current file.
    ctrl+space ☰ IntelliSense
    ctrl+shift+i ☰ → development/editors/Visual-Studio-Code/GUI/menu/Help/Toggle-Developer-Tools[Toggle developer tools] (which displays, among others, messages written from an extension with `console.log()`).
  table }

  See als the menus
    • → development/editors/Visual-Studio-Code/GUI/menu/File/Preferences/Keyboard-Shortcuts[File -> Preferences -> Keyboard Shortcuts] and
    • → development/editors/Visual-Studio-Code/GUI/menu/File/Preferences/Keymaps[File -> Preferences -> Keymaps]


  Some of these keyboard shortcuts don't seem to work together with the VIM plugin.

}
{ Profiles #vs-code-profiles

  A *profile* stores
    • → development/editors/Visual-Studio-Code/extensions[extensions]
    • settings
    • keyboard shortcuts
    • UI state
    • tasks
    • user snippets

  The menu related to profiles is found under → development/editors/Visual-Studio-Code/GUI/menu/File/Preferences/Profiles[File -> Preferences -> Profiles].

  When VS Code is launched, a profile can be specified → #vs-code-cmd-line[on the command line]:
code {
code --profile "Daga Migration Prj"
code }
  
  Profiles are stored in the → development/editors/Visual-Studio-Code/directories/user-data under `User/profiles/profile-num`. `profile-num` is a number that does not seem to be related
  to the profile name.

}
{ Encoding

  The default → development/Unicode/character-encoding of VS Code is → development/Unicode/UTF-8 without → development/Unicode/UTF-8#utf-8-bom[BOM].

  The encoding can be changed in VS Code settings (`ctrl+,`) by assigning a value to `"files.encoding"`. Some accepted values include
    • `utf`
    • `utf8bom`
    • `utf16le`
    • `utf16be`
    • `windows1252`

  It is possible to have VS Code auto detect encoding by setting `"files.autoGuessEncoding": true` in → development/editors/Visual-Studio-Code/settings_json[`settings.json`].

}
{ Misc

 ?  VS Code is built using web technologies on top of *Electron* (which apparently uses Chromium to render the user interface).

  { VS Code in the browser

    → https://vscode.dev[vscode.dev] is a lightweight version of VS Code running in a → development/web/browser. It uses the
    → https://wicg.github.io/file-system-access/[File System Access API], so with browsers supporting this API, local files can be edited in a browser.

    Another example is → https://github.dev/github/dev[github.dev] which is → development/version-control-systems/git/github#gh-vscode[GitHub's] way
    to display files of repositories hosted in GitHub.

    See also the → development/editors/Visual-Studio-Code/extensions/anatomy/package_json[extension manifiest file's (`package.json`)] directive `browser`.

  }

}
{ TODO

  { VS Code API

    The *VS Code API* is a JavaScript interface that can be called from an extension.

    The namespaces and functions of this API are found in → https://github.com/microsoft/vscode/blob/main/src/vscode-dts/vscode.d.ts[`vscode.d.ts`].

    { Commands #vs-code-command

      A *command* is a (JavaScript?) function (sometimes referred to as *command handler*) that is identified by a unique identifier.
      
      Commands are added to VS Code with either
        • `….commands.registerCommand()`, or
        • `….commands.registerTextEditorCommand(…)` 

      Then, commands are executed
        • explicitely with `….commands.executeCommand(…)`, or
        • triggered by so called *gestures* (entering commands in the → development/editors/Visual-Studio-Code/GUI/Command-Palette or by a bound key)



    }

  }
  { keybindings.json

code {
[
{"key": "ctrl+shift+i", "command": "workbench.action.toggleDevTools" /* Help -> Toggle Developer Tools. Override when clause (isDeveloper) */ }
]
code }

  }
  { Extension dependencies on tsc (TypeSript compiler)

    Some extensions seem to be dependent on a → development/languages/JavaScript/transpilers/TypeScript compiler (`tsc`).

  }
  { PATH environment variable, installation directory, bin

    At least on Windows, there is an executable named `Code.exe` in the installation directory and one in its `\bin` directory.
    -
    The `PATH` environment variable should be set to the executable in the `\bin` directory in order be able to start VS code from the command line. If PATH points to the other
    executable, Code *can* be started, but some strange things are happening then.

  }

}

sa:

  → development/editors/Visual-Studio-Code/workspace

  → development/editors/Visual-Studio-Code/settings_json[`settings.json`]

  → development/editors[Text editors]
