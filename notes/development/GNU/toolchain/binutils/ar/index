$ ar

`ar` is the archiver. It is used to create → development/languages/C-C-plus-plus/GCC/libraries/static[static libraries].

Note: `ar` doesn't store paths, only filenames. 

{ Commands and Options


  { Commands

    table { ll

       `d` ☰ delete file(s) from the archive
       `m[ab]` ☰ move file(s) in the archive
       `p` ☰ print file(s) found in the archive
       `q[f]` ☰ quick append file(s) to the archive
       `r[ab][f][u]` ☰ replace existing or insert new file(s) into the archive
       `s` ☰ act as `ranlib`
       `t[O][v]` ☰ display contents of the archive
       `x[o]` ☰ extract file(s) from the archive

    table }

  }
  { Command specific modifiers

    table { ll

      `a` ☰ put file(s) after [member-name]
      `b` ☰ put file(s) before [member-name] (same as [i])
      `D` ☰ use zero for timestamps and uids/gids (default)
      `U` ☰ use actual timestamps and uids/gids
      `N` ☰ use instance [count] of name
      `f` ☰ truncate inserted file names
      `P` ☰ use full path names when matching
      `o` ☰ preserve original dates
      `O` ☰ display offsets of files in the archive
      `u` ☰ only replace files that are newer than current archive contents

    table }

  }
  { Generic modifiers:

    table { ll
     `c` ☰ do not warn if the library had to be created
     `s` ☰ create an archive index (cf. ranlib)
     `S` ☰ do not build a symbol table
     `T` ☰ make a thin archive
     `v` ☰ be verbose
     `V` ☰ display the version number
     `@<file>`      ☰ read options from <file>
     `--target=BFDNAME` ☰ specify the target object format as BFDNAME
     `--output=DIRNAME` ☰ specify the output directory for extraction operations

    table }

  }
  { Optional

    table { ll
     `--plugin <p>` ☰ load the specified plugin
    table }

  }
}


sa:

  → development/GNU/toolchain/binutils, `ranlib`, `nm`

  → development/GNU/toolchain/binutils/ar/fileformat
