$ Encoding and decoding base 64 with c++

This is a simple library to → development/Base64 encode and decode → development/Data with → development/languages/C-C-plus-plus[C++].

{ Interface version 2.0

  This is the proposed interface for the version 2.0 of this library (as of 2020-04-29).

  { base64_encode

   `base64_encode()` comes in two overloaded versions:
code {
std::string base64_encode(std::string const& s, bool url = false);
std::string base64_encode(unsigned char const*, unsigned int len, bool url = false);
code }
  
    Both of these functions encode data as Base 64 and return the encoded string as a `std::string`.
      
    The parameter `url` determines if the encoded string can be used in → development/web/URI-URL-URN-IRI-URC#url[URLs]: if `url` is set to `true`, the encoded string will contain `-`, `_` and `+` instead of
   `+`, `/` and `=`. (See → https://en.wikipedia.org/wiki/Base64#Implementations_and_history[Wikipedia] for more information).

    The parameter `len` is needed for the second version because the length of an `unsigned char const*` is not determined if the data contains null values.

  }
  { base64_encode_pem / base64_encode_mime

code {
std::string base64_encode_pem (std::string const& s);
std::string base64_encode_mime(std::string const& s);
code }

    These two functions also encode data as Base 64. Additionally, they insert a line break after each 64th (pem) and 76th (mime) encoded characters.

  }
  { base64_decode

   `base64_decode()` decodes an encoded string.

code {
std::string base64_decode(std::string const& s, bool remove_linebreaks = false);
code }

    The parameter `remove_linebreaks` needs to be set to `true` if the encoded string is expected to contain → development/line-break[line breaks], for example because they were encoded with
   `base64_encode_pem()` or `base64_encode_mime()`.

  }

}
{ Source files

  The source code is hosted on → https://github.com/ReneNyffenegger/cpp-base64[github]. The repository consists of the following files
  table { ll
  
    → #cpp-base64-cpp[`base64.cpp`] and → #cpp-base64-h[`base64.h`] ☰ The two files that are required to encode end decode data with and from Base64.
    → development/Base64/Encoding-and-decoding-base-64-with-cpp/test[`test.cpp`] ☰ A program that uses `base64.cpp` and verifies that the implemented functionality is correct.
    → development/Base64/Encoding-and-decoding-base-64-with-cpp/Makefile[`Makefile`] ☰ The → development/make[Makefile] that compiles `base64.cpp` and `test.cpp` and executes the tests.
    → https://github.com/ReneNyffenegger/cpp-base64/blob/master/test-google.cpp[`test-google.cpp`] ☰ A test file that can be used with a Google test suite (`#include <gtest/gtest.h>`).
    → https://github.com/ReneNyffenegger/cpp-base64/blob/master/measure-time.cpp[`measure-time.cpp`] ☰ Also uses `base64.cpp` to encode and decode a *lorem ipsum* text and to measure the time it takes to do so.
    → https://github.com/ReneNyffenegger/cpp-base64/blob/master/wsjcpp.yml[`wsjcpp.yml`] ☰  This file is apparently used for or as a *source file manager*.
    → https://github.com/ReneNyffenegger/cpp-base64/blob/master/compile-and-run-test[`compile-and-run-test`] ☰ A shell script that uses the → development/languages/C-C-plus-plus/GCC[GNU C++ compiler] to compile `test.cpp` and run it.

  table }

 `base64.cpp` contains two simple C++ functions to encode and decode string from/to → development/Base64: `base64_encode` and `base64_decode`.

  → development/Base64/Encoding-and-decoding-base-64-with-cpp/test[`test.cpp`] can be used to test the functionality.


}
{ Contributions

  I am thankful for the following contributions to this libary.

  → https://github.com/minastaros[minastaros] for improving the code and adding test cases. (Version `1.01.00`)

  → https://github.com/sea-kg[Evgenii Sopov] provided → development/Base64/wsjcpp_yml[`wsjcpp.yml`].

  → https://github.com/khiemdoan[Khiem Doan] added the correct → development/languages/C-C-plus-plus/C/header-files[headerfile]: `<cctype>` rather than `<iostream>`, which is sufficient for `isalnum()`.
  -
  2020-04-29: it turns out, this header file is not needed anymore.

  → https://github.com/ipodipad[ipodipad] changed the code so that it eliminates the annoying → https://stackoverflow.com/questions/23604699[CppCheck static analysis warning cppcheck:variableScope].

  → https://github.com/wbflooksky[wbfloofsky] provided a pull request that encouraged me to write directly into pre-allocated `std::string` buffers rather than first write into a separate buffer and then copy this buffer (`push_back()`)
  to the string. This change led to Version 1.03.
  -
  *wbfloofsky* also added the functionality to measure the time it takes to encode and decode a string in `test.cpp`.
  This inspired me to add → https://github.com/ReneNyffenegger/cpp-base64/blob/master/measure-time.cpp[`measure-time.cpp`] which does that, and only that.

  Francisco Ruiz added → https://github.com/ReneNyffenegger/cpp-base64/blob/master/test-google.cpp[`test-google.cpp`], which is more or less the same as `test.cpp`, but apparently can be used in a
  Google testing framework.

  Francisco Ruiz and → https://github.com/huangxinV587[huangxinV587] both suggested that I use a lookup function to find the position of an encodeded character in `base64_chars` in order to
  improve performance. I have merged their code into one version and given the lookup function the name `pos_of_char()`.

  → https://github.com/JomaCorpFX[JomaCorpFX] provided the main functionality for `base64_encode_pem()`, `base64_encode_mime()` and the `url` parameter in `base64_encode()`.

  → https://github.com/kosniaz[kosniaz] spotted a bug with url-encoded data. This bug is now fixed (2020-05-09) and resulted in release candidate *2.rc.01*.

  → https://www.yannic.xyz/[Yannic Bonenberger] provided an interface (function overloads) for → development/languages/C-C-plus-plus/CPP-Standard-Library/string_view[`std::string_view`] (rather than `const std::string&`). This interface
  requires at least C++17. This interface is available as of release candidate *2.rc.02* (2020-05-13).

  Yannic Bonenberger also notified me of a concurrency issue if the library was used in a multi-threaded environment. This issue is fixed with *2.rc.03* (2020-05-13).

  → https://github.com/Celemon[Celemony] (via → https://github.com/mynameisjohn[mynameisjohn]) provided the changes to fix *implicit cast warnings* (`size_t` etc.), resulting in *2.rc.04* (2020-05-31).

  → https://github.com/Bouska[Pablo Martin-Gomez] changed the `throw "…"` (which must be caught by `catch (const char* …)` to `throw std::runtime_error("Input is not valid base64-encoded data.")` (which can be caught by `catch (std::exception …)`),
  resulting in *2.rc.05* (2020-10-23).

  Pablo Martin-Gomez also exchanged the cumbersome `while` loop
code {
size_t pos=0;
while ((pos = copy.find("\n", pos)) != std::string::npos) {
    copy.erase(pos, 1);
}
code }
  with the much more elegant *erase-remove idiom* which allows to move the elements to be kept only once instead of at each `erase()` call.
code {
#include <algorithm>
…
copy.erase(std::remove(copy.begin(), copy.end(), '\n'), copy.end());
code }

  Pablo Martin-Gomez also improved the code by returning early from the function `decode()` if `encoded_string` is empty, resulting in *2.rc.07* (2020-10-23).

  → https://github.com/peter-jansson[Peter Jansson] removed an unnecessary check for an empty string.

  → https://github.com/Bouska[Pablo Martin-Gomez], → https://github.com/xanather[xanather] and → https://github.com/Satancito[Joma] notified me of a *buffer overrun* problem that occurs
  when trying to decode unpadded data (which RFC 2045 apparently explicitely allows).

  → https://github.com/cyb70289[Yibo Cai] noticed a → https://github.com/ReneNyffenegger/cpp-base64/issues/33[possible out of range input buffer accees] which I hope is fixed with
  → https://github.com/ReneNyffenegger/cpp-base64/commit/38c63155e6995bf17cce30d29203002b0c3ae91a[2.rc.09 / 38c6315].

}
{ base64.cpp #cpp-base64-cpp

  gh|cpp-base64|/base64.cpp||

}
{ base64.h #cpp-base64-h

  gh|cpp-base64|/base64.h||

}
{ Usages

  This base 64 class is used for the
    • → web/webserver/cpp/simple[Simple C++ WebServer for Windows].
    • → https://github.com/nobinov/image_resizer_server[Image Resizer Server]: a C++ web server that resize image to desired dimension
    • Andreas Mausch's → https://andreas-mausch.de/whatsapp-viewer/[WhatsApp Viewer]
    • …?

}

