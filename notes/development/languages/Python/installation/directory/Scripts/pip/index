$ Python: pip
@ pip

`pip` (or `pip.exe`) stands for *Python installs packages*, however it is also used to upgrade und remove packages.

When installing packages, these are found by default on the → https://pypi.org[Python Package Index `pypi.org`].

{ Commands

  A list of commands is displayed when executing `pip help`:
table { ll
  install     ☰ Install packages.
  download    ☰ Download packages.
  uninstall   ☰ Uninstall packages.
  freeze      ☰ Output installed packages in requirements format to stdout. The output can be redirected to a file (for example `requirements.txt`) and later be used with `pip install -r requirements.txt`).
  list        ☰ List installed packages.
  show        ☰ Show information about installed packages.
  check       ☰ Verify installed packages have compatible dependencies.
  config      ☰ Manage local and global configuration.
  search      ☰ Search → development/languages/Python#py-pypi[PyPI] for packages. *This option is permenatly disabled* because of → https://status.python.org/incidents/grk0k7sz6zkp[excessive traffic]. Use → https://pypi.org/search[pypi.org/search] (in a browser) instead.
  cache       ☰ Inspect and manage pip's → development/languages/Python#py-wheel[wheel] cache. (See also `→ Linux/fhs/home/username/_cache/pip`)
  wheel       ☰ Build → development/languages/Python#py-wheel[wheels] from your requirements.
  hash        ☰ Compute hashes of package archives.
  completion  ☰ A helper command used for command completion.
  debug       ☰ Show information useful for debugging.
  help        ☰ Show help for commands.
table }

  { install

   `pip install …` installs packes from
     • → development/languages/Python#py-pypi[PyPI] (and other indexes) using requirement specifiers
     • VCS project urls
     • Local project directories
     • Local or remote source archives

  `pip` also supports installing from *requirements files* (where necessary packages are listed each on its own line), which provide an easy way to specify a whole environment to be installed.

code {
pip install [options] <requirement specifier> [package-index-options] ...
pip install [options] -r <requirements file> [package-index-options] ...
pip install [options] [-e] <vcs project url> ...
pip install [options] [-e] <local project path> ...
pip install [options] <archive url/path> ...
code }

    { Install Options:

      table { ll

       `-r, --requirement <file>`                    ☰ Install from the given requirements file. This option can be used multiple times.
       `-c, --constraint <file>`                     ☰ Constrain versions using the given constraints file. This option can be used multiple times.
       `--no-deps`                                   ☰ Don't install package dependencies.
       `--pre`                                       ☰ Include pre-release and development versions. By default, pip only finds stable versions.
       `-e, --editable <path/url>`                   ☰ Install a project in editable mode (i.e. setuptools *develop mode*). The package is not installed in the traditional sense, but rather a symbolic link is created between the package source directory and the site-packages directory where packages are normally installed which allows to make changes to the package source code and have those changes immediately reflected in any scripts or programs that use the package. (Very useful when package is in a → development/version-control-systems/git/repository[git repo] etc.)
       `--dry-run`                                   ☰ Don't actually install anything, just print what would be. Can be used in combination with `--ignore-installed` to «resolve» the requirements.
       `-t, --target <dir>`                          ☰ Install packages into `<dir>`. By default this will not replace existing files/folders in `<dir>` but in combination wtih `--upgrade`, it will replace existing packages in `<dir>`.
       `--platform <platform>`                       ☰ Only use → development/languages/Python#py-wheel[wheels] compatible with `<platform>`. Defaults to the platform of the running system. Use this option multiple times to specify multiple platforms supported by the target interpreter.
       `--python-version <python_version>`           ☰ The Python interpreter version to use for wheel and "Requires-Python" compatibility checks.  Defaults to a version derived from the running interpreter. The version can be specified using up to three dot-separated integers (e.g. `3` for 3.0.0, `3.7` for 3.7.0, or `3.7.3`). A major-minor version can also be given as a string without dots (e.g. `37` for 3.7.0).
       `--implementation <implementation>`           ☰ Only use wheels compatible with Python implementation `<implementation>` (`pp`, `jy`, `cp`  or `ip`). If not specified, then the current interpreter implementation is used. Use `py` to force implementation-agnostic wheels.
       `--abi <abi>`                                 ☰ Only use wheels compatible with Python abi `<abi>` (for example: `pypy_41`). If not specified, then the current interpreter abi tag is used. Use this option multiple times to specify multiple abis supported by the target interpreter. Generally you will need to specify `--implementation`, `--platform` and `--python-version` when using this option.
       `--user`                                      ☰ Install to the Python user install directory for your platform. Typically `→ Linux/fhs/home/username/_local`, or `→ Windows/dirs/Users/username/AppData/Roaming/Python` on Windows. (See the Python documentation for site.USER_BASE for full details.)
       `--root <dir>`                                ☰ Install everything relative to this alternate root directory.
       `--prefix <dir>`                              ☰ Installation prefix where lib, bin and other top-level folders are placed
       `--src <dir>`                                 ☰ Directory to check out editable projects into.  The default in a virtualenv is `<venv path>/src`, for global installs it is `<current dir>/src`.
       `-U, --upgrade`                               ☰ Upgrade all specified packages to the newest available version. The handling of dependencies depends on the upgrade-strategy used. See also `--dry-run`.
       `--upgrade-strategy <upgrade_strategy>`       ☰ Determines how dependency upgrading should be handled [default: only-if-needed]. "eager" -dependencies are upgraded regardless of whether the currently installed version satisfies the requirements of the upgraded package(s). "only-if-needed" -  are upgraded only when they do not satisfy the requirements of the upgraded package(s).
       `--force-reinstall`                           ☰ Reinstall all packages even if they are already up-to-date.
       `-I, --ignore-installed`                      ☰ Ignore the installed packages, overwriting them.  This can break your system if the existing package is of a different version or was installed with a different package manager!
       `--ignore-requires-python`                    ☰ Ignore the Requires-Python information.
       `--no-build-isolation`                        ☰ Disable isolation when building a modern source distribution. Build dependencies specified by PEP 518 must be already installed if this option is used.
       `--use-pep517`                                ☰ Use → development/languages/Python/PEP[PEP] 517 for building source distributions (use `--no-use-pep517` to force legacy behaviour). → https://github.com/pypa/pip/issues/8559[Apparently], this option installs `→ development/languages/Python/libraries/setuptools` and `wheel` into an isolated environment where a wheel is attempted to be built and installed.
       `--check-build-dependencies`                  ☰ Check the build dependencies when → development/languages/Python/PEP[PEP] 517 is used.
       `--config-settings <settings>`                ☰ Configuration settings to be passed to the PEP 517 build backend. Settings take the form `key=value`. Use multiple `--config-settings` options to pass multiple keys to the backend.
       `--install-option <options>`                  ☰ Extra arguments to be supplied to the `setup.py` install command (use like `--install-option="--install-scripts=→ Linux/fhs/usr/local/bin[/usr/local/bin]"`). Use multiple `--install-option` options to pass multiple options to `setup.py` install. If you are using an option with a directory path, be sure to use absolute path.
       `--global-option <options>`                   ☰ Extra global options to be supplied to the `setup.py` call before the install or bdist_wheel command.
       `--compile`                                   ☰ Compile Python source files to bytecode
       `--no-compile`                                ☰ Do not compile Python source files to bytecode
       `--no-warn-script-location`                   ☰ Do not warn when installing scripts outside PATH
       `--no-warn-conflicts`                         ☰ Do not warn about broken dependencies
       `--no-binary <format_control>`                ☰ Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either ":all:" to disable all binary packages, ":none:" to empty the set (notice the colons), or one or more package names with commas between them (no colons). Note that some packages are tricky to compile and may fail to install when this option is used on them.
       `--only-binary <format_control>`              ☰ Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either ":all:" to disable all source packages, ":none:" to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.
       `--prefer-binary`                             ☰ Prefer older binary packages over newer source packages.
       `--require-hashes`                            ☰ Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a `--hash` option.
       `--progress-bar <progress_bar>`               ☰ Specify whether the progress bar should be used [on, off] (default: on)
       `--root-user-action <root_user_action>`       ☰ Action if pip is run as a root user. By default, a warning message is shown.
       `--report <file>`                             ☰ Generate a → development/languages/JavaScript/JSON file describing what pip did to install the provided requirements. Can be used in combination with `--dry-run` and `--ignore-installed` to 'resolve' the requirements. When `-` is used as file name it writes to → development/stdin-stdout-stderr[stdout]. When writing to stdout, please combine with the `--quiet` option to avoid mixing pip logging output with JSON output.
       `--no-clean`                                  ☰ Don't clean up build directories.

   table }


  }

  { Package Index Options:

    table { ll

      `-i, --index-url <url>`                       ☰ Base URL of the Python Package Index (default → https://pypi.org/simple[https://pypi.org/simple]). This should point to a repository compliant with → development/languages/Python/PEP[PEP] 503 or a local directory laid out in the same format.
      `--extra-index-url <url>`                     ☰ Extra URLs of package indexes to use in addition to `--index-url`. Should follow the same rules as `--index-url`.
      `--no-index`                                  ☰ Ignore package index (only looking at `--find-links` URLs instead).
      `-f, --find-links <url>`                      ☰ If a URL or path to an HTML file, then parse for links to archives such as sdist (`.tar.gz`) or wheel (`.whl`) files. If a local path or `file://` URL that's a directory, then look for archives in the directory listing. Links to VCS project URLs are not supported.

    table }

   }

   { General Options

     table { ll

    `-h, --help`                                  ☰ Show help.
    `--debug`                                     ☰ Let unhandled exceptions propagate outside the main subroutine, instead of logging them to stderr.
    `--isolated`                                  ☰ Run `pip` in an isolated mode, ignoring environment variables and user configuration.
    `--require-virtualenv`                        ☰ Allow pip to only run in a virtual environment; exit with an error otherwise.
    `--python <python>`                           ☰ Run pip with the specified Python interpreter.
    `-v, --verbose`                               ☰ Give more output. Option is additive, and can be used up to 3 times.
    `-V, --version`                               ☰ Show version and exit.
    `-q, --quiet`                                 ☰ Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING, ERROR, and CRITICAL logging levels).
    `--log <path>`                                ☰ Path to a verbose appending log.
    `--no-input`                                  ☰ Disable prompting for input.
    `--proxy <proxy>`                             ☰ Specify a proxy in the form `scheme://[user:passwd@]proxy.server:port`.
    `--retries <retries>`                         ☰ Maximum number of retries each connection should attempt (default 5 times).
    `--timeout <sec>`                             ☰ Set the socket timeout (default 15 seconds).
    `--exists-action <action>`                    ☰ Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.
    `--trusted-host <hostname>`                   ☰ Mark this host or host:port pair as trusted, even though it does not have valid or any HTTPS.
    `--cert <path>`                               ☰ Path to → development/security/Privacy-Enhanced-Mail/[PEM]-encoded CA certificate bundle. If provided, overrides the default. See *SSL Certificate Verification* in pip documentation for more information.
    `--client-cert <path>`                        ☰ Path to → development/security/cryptography/SSL-TLS[SSL] client certificate, a single file containing the private key and the certificate in PEM format.
    `--cache-dir <dir>`                           ☰ Store the cache data in `<dir>`.
    `--no-cache-dir`                              ☰ Disable the cache.
    `--disable-pip-version-check`                 ☰ Don't periodically check PyPI to determine whether a new version of pip is available for download. Implied with `--no-index`.
    `--no-color`                                  ☰ Suppress colored output.
    `--no-python-version-warning`                 ☰ Silence deprecation warnings for upcoming unsupported Pythons.
    `--use-feature <feature>`                     ☰ Enable new functionality, that may be backward incompatible.
    `--use-deprecated <feature>`                  ☰ Enable deprecated functionality, that will be removed in the future.

     table }

   }

  }

}
{ Error message «no module named pip»

code {
python -m → development/languages/Python/installation/directory/Lib/ensurepip
code }

}
{ Searching for a package

  It's possible to search for packages on the command line…
code {
pip search bible
code }

  … or using a → development/web/browser the on → https://pypi.org[`pypi.org`].


}
{ Installing a package

code {
pip install package-name
code }

  The name of the package can be followed by two equal signs and a version number to install a specific version:
code {
pip install package-name==1.2.3
code }

  By default, packages are installed into the directory → development/languages/Python/installation/directory/Lib/site-packages[`Lib/site-packages`] under
  the → development/languages/Python/installation/directory[Python root installation directory].

}
{ Upgrading a package to the newest version

code {
pip install --upgrade package-name
code }

  Apparently, `pip` itself can be upgraded like so:
code {
python → development/languages/Python/import-system/minus-m[-m] pip install --upgrade pip
code }

}
{ Show installed packages

code {
pip list
code }

}
{ Upgrading pip itself

  pip itself (not a package) can be upgraded like so
code {
python → development/languages/Python/import-system/minus-m[-m] pip install --upgrade pip
code }

}
sa:

  It seems that `pip install <library>` installs a packge below → development/languages/Python/installation/directory/Lib/site-packages[`<PY-INSTALL-DIR>/Lib/site-packages`].

  Python's → development/languages/Python/PEP[PEP] 668 (Marking Python base environments as *externally managed*) deals with the conflict between → Linux/package-managers[OS package managers] and Python-specific package management tools like → development/languages/Python/installation/directory/Scripts/pip.

 `pip` is Python's most popular package manager. Other managers include the old *deprecated* Easy command (`easy_install`) or `setup.py`.

 → development/languages/Python/installation/directory/Scripts/pip/download-and-install-wheel[Download and install a wheel].

 `→ development/languages/Python/libraries/setuptools`
