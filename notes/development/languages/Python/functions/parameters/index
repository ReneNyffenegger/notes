$ Python: function parameters

code {
def F(foo, bar, baz)
    …
def F(foo, bar=42, baz='Hello world'):
    …
def F(foo, bar=42, **kwargs):
    …
def F(foo, bar, /)
code }

{ Parameters vs arguments

  The Python FAQ outlines a → https://docs.python.org/3/faq/programming.html#what-is-the-difference-between-arguments-and-parameters[distinction between parameters and arguments]:
  -
  The *parameters* are the names while the *arguments* are the actual values that are passed to the → development/languages/Python/functions[function].

  The names and values of the parameters/arguments are stored in a → development/languages/Python/functions#py-func-symbol-tables[function's symbol table].

}
{ Passing (mutable) objects

  The following example tries to demonstrate that objects are passed *by reference*.

  Although an object is passed by reference, it is not possible to return a different object by the parameter. However, if the passed argument is a *mutable → development/languages/Python/objects*, the contents
  of the object can be modifed so that the caller sees the modifications.

  gh|about-Python|/functions/parameters/passing-objects.py||

}
{ Default argument values

  Function parameters can be given default argument values. The values are used if the parameters are not explicitely given a value when the function is called:
  gh|about-Python|/functions/parameters/default-argument-values.py||

  The values that are bound to an argument are determined when the function is defined, not when it is called.
  gh|about-Python|/functions/parameters/default-argument-valuesb-bind.py||

}
{ Slashes as parameter name

  If a parameter is a slash (`/`), it signifies that the parameters on its left side are *position-only* and hence cannot be called by name.

  An example of such function is `divmod`:
code {
help(divmod)
…
divmod(x, y, /)
…
code }

}
