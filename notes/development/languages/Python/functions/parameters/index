$ Python: function parameters

code {
def F(foo, bar, baz)
    …
def F(foo, bar=42, baz='Hello world'):
    …
def F(foo, bar=42, **kwargs):
    …
def F(foo, bar, /)
def F(foo, bar, /, …, *)
def F(foo, bar, /, …, *, …)
code }

{ Parameters vs arguments

  The Python FAQ outlines a → https://docs.python.org/3/faq/programming.html#what-is-the-difference-between-arguments-and-parameters[distinction between parameters and arguments]:
  -
  The *parameters* are the names while the *arguments* are the actual values that are passed to the → development/languages/Python/functions[function].

  The names and values of the parameters/arguments are stored in a → development/languages/Python/functions#py-func-symbol-tables[function's symbol table].

}
{ Categories of parameters

  A parameter falls in one of the following five categories
  table { ll
    Positional or keyword ☰ The default category
    Positional only ☰ Parameters that are defined on the left side of the slash parameter (`/`)
    Keyword only ☰ Parameters that are defined on the right side of the star parameter (`*`)
    Var positional ☰ At most one that is defined with a star (`*paramName`)
    Var keyword ☰ At most one that is defined with two stars (`**paramName`)
  table }

  Keyword arguments are named.
  -
  when calling a function, the names of the keyword arguments are separated from the argument values by an equal sign (`=`):
code {
F(param_one = 42, param_two = 'hello World')
code }

  Positional arguments are not named.
  -
  When calling a function, the values of positional arguments are just stated by themselves, separated by a comma. (Hence, they're positional):
code {
F(42, 'hello World')
code }

  Positional arguments must precede keyword arguments.

  Postional arguments can also be passed from an → development/languages/Python/iterable by prepending it with a `*` which expands the elements of the iterable to the passed parameters:
code {
F(*iterable)
code }

  Keyword arguements can also be passed from a → development/languages/Python/types/dict[`dict`] whose key-names correspond to the parameter-names. The dictionary is prepended by two stars (`**`):
code {
F(**vals)
code }


}
{ Passing (mutable) objects

  The following example tries to demonstrate that objects are passed *by reference*.

  Although an object is passed by reference, it is not possible to return a different object by the parameter. However, if the passed argument is a *mutable → development/languages/Python/objects*, the contents
  of the object can be modifed so that the caller sees the modifications.

  gh|about-Python|/functions/parameters/passing-objects.py||

}
{ Default argument values

  Function parameters can be given default argument values. The values are used if the parameters are not explicitely given a value when the function is called:
  gh|about-Python|/functions/parameters/default-argument-values.py||

  The values that are bound to an argument are determined when the function is defined, not when it is called.
  gh|about-Python|/functions/parameters/default-argument-values-bind.py||

}
{ Variable number of positional and named arguments

  A variable number of positional arguments («variadic arguments») is indicated by `*posArgs`. In this case, `posArgs` is a → development/languages/Python/types/tuple that contains the respective values.

  A variable number of named argumenes is indicated by `**namedArgs`. In this case, `namedArgs is a → development/languages/Python/types/dict that contains the respective parameter/argument pairs.

  gh|about-Python|/functions/parameters/varnum.py||

}
{ Unpacking arguments #py-arg-unpack

  A → development/languages/Python/types/tuple (or also → development/languages/Python/types/list) can be unpacked («exploded») by prefixing it with a single start `*` when a function is called.
  
  Similarly, a → development/languages/Python/types/dict can be unpacked by prexfixing it with two stars (`**`):
  gh|about-Python|/functions/parameters/unpack.py||

}
{ Slashes and stars as parameter name

  If a parameter is a slash (`/`), it signifies that the parameters on its left side are *position-only* and hence cannot be called by name.

  If a parameter is a star (`*`), it signifies that the parameters between the `/` and the `*` may be positional or keyword parameters.
  -
  The parameters following the `*` are keyword-only parameters.

  An example of a function with a `/` is `divmod`:
code {
help(divmod)
…
divmod(x, y, /)
…
code }

}
{ Parameter annotations

  A parameter can be annotated with an expression:
code {
def F(par : 'some annotation'):
    …
code }

   See more on that → development/languages/Python/dunders/__annotations__#py-__annotation__-param[here].

}
{ Assigning arguments with values from a list comprehension #py-arg-list-comprehension

  It is possible to assign values to arguments that are created by a → development/languages/Python/types/list/comprehension.

  In the following example, the list that is created by the list comprehension is → #py-arg-unpack[unpacked] so that each argument is assigned
  the corresponding value.

  gh|about-Python|/functions/parameters/list-comprehension.py||

}
