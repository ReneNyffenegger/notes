$ Python: decorators

A *decorator* is a → development/languages/Python/functions with one → development/languages/Python/functions/parameters[parameter] that takes a function and returns a function.

Such a decorater can be used to decorate a function with the following special syntax (called *pie syntax*):
code {
@decoratorFunc
→ development/languages/Python/statements/def F(…):
    …


F(…)
code }

This is equivalent to
code {
def decoratorFunc(func):
    …
    return → development/languages/Python/objects/callable[callable]

def F(…):
    …

F = decoratorFunc(F)

F(…)
code }

{ Simple demonstration

  The following simple script tries to demonstrate how a basic decorator is used:
  gh|about-Python|/functions/decorators/demo.py||

  When executed, it prints:
code {
defining funcOne
TQ84_decorator was called for func funcOne
defining funcTwo
TQ84_decorator was called for func funcTwo
calling  funcOne:
newFunc is calling funcOne
Within FuncOne
calling  funcTwo:
newFunc is calling funcTwo
Within FuncTwo, p = 99
code }

}

{ Parametrized decorator

  It is possible to call a function that returns a decorator with the `@function(…)` syntax. Thus, it allows to create parametrized decorators.

  In the following example, The function `callMutliple(n)` returns a decorator that calls a function `n` times. By using `@callMutliple(5)` on the fujnction `F`, `F` is executed 5 times when called:
  gh|about-Python|/functions/decorators/parametrized-decorator.py||

}

sa:
  Built-in decorators are:
    • `staticmethod`
    • `classmethod`
    • `property`
