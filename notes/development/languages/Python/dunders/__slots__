$ Python: __slots__
@ __slots__

An → development/languages/Python/objects stores its → development/languages/Python/class/member[members] in either a special member with the name
→ development/languages/Python/dunders/__dict__[`__dict__`] (which happens to be a → development/languages/Python/types/dict[`dict`]) or in so-called *slots*.

Objects that are created from → development/languages/Python/statements/class[`class` definitions] that assign a → development/languages/Python/types/tuple (or → development/languages/Python/types/list?) to `__slots__` become object with such slots.
-
Other classes will have a `__dict__`.

An object with slots has a predefined number and names of members while «ordinary» objects with a `__dict__` can be assigned an aribtrary number of objects to any member name.

{ Demonstration

  The following simple demonstration creates two classes, one with slots and one with `__dict__`.

  After creating one → development/languages/Python/object for each → development/languages/Python/class, the members of each class are stored in a → development/languages/Python/types/set[set] (`members_s` and `members_d`) and the
  → development/languages/Python/types/set#py-set-operators[`set` operator `-`] is used to find which members exist in one class but not in the other.
  -
  It turns out that the slot-object has `__slots__` (as expected), is missing → development/languages/Python/dunders/__dict__[`__dict__`] (also expected) but is also missing → development/languages/Python/dunders/__weakref__[`__weakref__`]
 (possibly not expeced).

  gh|about-Python|/dunders/__slots__/demo.py||

}

sa:

  → development/languages/Python/dunders[Other dunders]
