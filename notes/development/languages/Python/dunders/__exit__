$ Python: __exit__
@ __exit__

{ Parameterse

  Besides the ubiquitous `self` → development/languages/Python/functions/parameters[parameter], `__exit__` also takes three additional parameters

  The additional parameters are only releveant and distinct from `None` when `__exit__` is called because an → development/languages/Python/exception-handling[exception] was raised after 
  → development/languages/Python/dunders/__enter__[`__enter__`] was called. In such a case, the three parameters have the following meaning:
    • The → development/languages/Python/types[type] of the exception that was raised,
    • The exception itself
    • A → development/languages/Python/types/traceback[`traceback`] → development/languages/Python/objects.

  The following example tries to demonstrate these parameters:
  gh|about-Python|/dunders/__exit__/parameters.py||

  When executed, the script prints
code {
__enter__
  A
__exit__, exType: None, exValue: None, traceBack: None

__enter__
  B
__exit__, exType: <class '__main__.Ex'>, exValue: Something bad, traceBack: <traceback object at 0x000002C0AFC400C0>

Caught exception Something bad
code }

}


sa:
  The → development/languages/Python/statements/with[`with` statement]

  → development/languages/Python/objects/context-manager[Context managers] and the → development/languages/Python/dunders/__enter__[`__enter__`] method.

  → development/languages/Python/dunders[Other dunders]

