$ Python operators
@ operators

→ development/languages/Python/operators/comparison[Comparison operators]: `==`, `!=`, `<>`, `>`, `<`, `>=`, `<=`

→ development/languages/Python/operators/assignment[Assignment operators]: `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `**=`, `//=`

Bitwise operators: `&`, `|`, `^`, `~\`

Logical operators: `and`, `or` and `not`

Membership operators: → development/languages/Python/operators/in[`in`] and `not in`.

Identity operators → development/languages/Python/operators/is[`is`] and `is not`.

`//` is the *floor division* operator: `42 // 10` as well as `49 // 10` evaluate to `4`.


{ is #is

  `is` compares the identity of two → development/languages/Python/objects[objects].

}
{ Ternary operator #py-ternary-operator

  The equivalent of the *ternary operator* `expr ? expr_if_true : expr_if_false`, as found in → development/languages/C-C-plus-plus[C related] languages in Python is:
code {
expr_if_true → development/languages/Python/statements/if[if] expr else expr_if_false
code }


}
{ comma

  The comma (`,`) is not operator in → development/languages/Python, but a separator between → development/languages/Python/expressions[expressions].

}
