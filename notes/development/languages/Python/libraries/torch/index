$ Python library: torch (PyTorch)

{ data.item(), backward(), grad

  Import torch and create a few simple tensors:
code {
import torch

x = torch.Tensor([3.0]).double() ; x.requires_grad = True
a = torch.Tensor([4.0]).double() ; a.requires_grad = True
b = torch.Tensor([2.0]).double() ; b.requires_grad = True
c = torch.Tensor([5.0]).double() ; c.requires_grad = True
code }

  Let `y` be dependent on `a`, `b`, `c` and `x`:
code {
y = a * x**2  +  b * x  +  c
code }

  The following prints `47.0` (= 4*3² + 2*3 + 5)
code {
print(y.data.item())
code }

  With `y.backward()`, it's possible to calculate the gradients of the variables that have an influence on the value of `y`.
code {
y.backward()
code }

  The following prints 26 (= 2ax + b)
code {
print(x.grad.item())
code }

}
{ device

code {
dev   = torch.device("cpu")
# dev = torch.device("cuda:0") # Uncomment  to run on GPU
…
rnd = torch.randn((), device=dev, dtype=torch.float)
code }

}
