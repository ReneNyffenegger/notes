$ Constructing a torch.Tensor with uppercase Tensor() vs lowercase tensor()

code {
import → development/languages/Python/libraries/torch

uc = torch.Tensor([ 1, 2, 3 ])
lc = torch.tensor([ 1, 2, 3 ])

#
#  Both, torch.Tensor(…) and torch.tensor() create
#  a → development/languages/Python/libraries/torch/types/Tensor.
#
# → development/languages/Python/built-in-functions/print(→ development/languages/Python/built-in-functions/type(lc))
# → development/languages/Python/built-in-functions/print(→ development/languages/Python/built-in-functions/type(uc))

#
#  However, torch.tensor() takes into account the data types of the arguments
#  and creates a tensor with the corresponding → development/languages/Python/libraries/torch#torch-dtype[data type (dtype)].
#
→ development/languages/Python/built-in-functions/print[print](lc.dtype) # torch.int64
→ development/languages/Python/built-in-functions/print[print](uc.dtype) # torch.float32

print(lc)
#
# tensor([1, 2, 3])

print(uc)
#
# tensor([1., 2., 3.])
code }
