$ Python library: requests
@ requests

*requests* promises to be the → development/web/HTTP library for human beings.

{ Methods etc.

code {
for x in → development/languages/Python/built-in-functions/sorted(→ development/languages/Python/built-in-functions/dir(requests), key = → development/languages/Python/expressions/lambda w: w.upper()): → development/languages/Python/built-in-functions/print(x)
code }
  table { ll

    `adapters` ☰
    `api` ☰
    `auth` ☰
    `certs` ☰
    `chardet_version` ☰
    `charset_normalizer_version` ☰
    `check_compatibility` ☰
    `codes` ☰
    `compat` ☰
    `ConnectionError` ☰
    `ConnectTimeout` ☰
    `cookies` ☰
    `delete` ☰
    `DependencyWarning` ☰
    `exceptions` ☰
    `FileModeWarning` ☰
    → #py-requests-get[`get`] ☰
    `head` ☰
    `hooks` ☰
    `HTTPError` ☰
    `JSONDecodeError` ☰
    `logging` ☰
    `models` ☰
    `NullHandler` ☰
    `options` ☰
    `packages` ☰
    `patch` ☰
    `post` ☰
    `PreparedRequest` ☰
    `put` ☰
    `ReadTimeout` ☰
    `Request` ☰
    `request` ☰
    `RequestException` ☰
    `RequestsDependencyWarning` ☰
    `Response` ☰
    `Session` ☰
    `session` ☰
    `sessions` ☰
    `ssl` ☰
    `status_codes` ☰
    `structures` ☰
    `Timeout` ☰
    `TooManyRedirects` ☰
    `urllib3` ☰
    `URLRequired` ☰
    `utils` ☰
    `warnings` ☰
    `_check_cryptography` ☰
    `_internal_utils` ☰
    `__author_email__` ☰
    `__author__` ☰
    `__build__` ☰
    `__builtins__` ☰
    `__cached__` ☰
    `__cake__` ☰
    `__copyright__` ☰
    `__description__` ☰
    `__doc__` ☰
    `__file__` ☰
    `__license__` ☰
    `__loader__` ☰
    `__name__` ☰
    `__package__` ☰
    `__path__` ☰
    `__spec__` ☰
    `__title__` ☰
    `__url__` ☰
    `__version__` ☰
  table }

}

{ Simple examples

  { get #py-requests-get

    gh|about-python|/libraries/requests/get.py||

  }
  { Specify a request header #py-requests-wikidata

    The following example specifies the → development/web/HTTP/header[HTTP request header] `Accept` to instruct the → development/Data/open/Wikidata endpoint to return its result
    as → development/languages/JavaScript/JSON:
code {
→ development/languages/Python/statements/import requests

query = """
select
  (lang(?label) as ?lang)
   ?label
{
   wd:→ https://opendata.renenyffenegger.ch/Wikimedia/Wikidata/entity/Q22661317[Q22661317]  rdfs:label ?label .
}
"""

response = requests.get(
  "https://query.wikidata.org/sparql"                     ,
   params  = {"query" :  query                           },
   headers = {"Accept": "application/sparql-results+json"}
)

→ development/languages/Python/built-in-functions/print[print](response.json())
code }

    See also → development/languages/Python/libraries/tabulate#pylib-tabulate-wikidata

  }
  { Download and save file

    gh|about-python|/libraries/requests/download-and-save-file.py||

    This script was inspired/copied from → https://stackoverflow.com/questions/16694907/how-to-download-large-file-in-python-with-requests-py[this stackoverflow question].

  }

}

{ Installation on Windows

  requests must apperantly (at least on my machine) be installed as admin.

  As *non-admin*:
code {
>  pip install requests
…
… Rödel rödel rödel
…
ERROR: Could not install packages due to an OSError: [WinError 2] The system cannot find the file specified: 'C:\\Python311\\Scripts\\normalizer.exe' -> 'C:\\Python311\\Scripts\\normalizer.exe.deleteme'
code }


  When I tried to install this library on Windows under username `René` (note the accent), I received a `UnicodeDecodeError: 'ascii' codec can't decode byte 0xe9 in position 57: ordinal not in range(128)`.
  -
  I was able to fix this by changing the → Windows/development/environment-variables/USERNAME[environment variable `USERNAME`] to a value without accent.

}

sa:
  The standard library urllib.
