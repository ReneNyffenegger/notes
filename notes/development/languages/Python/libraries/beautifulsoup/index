$ Python library: beautifulsoup4

{ Installation

code {
> pip install → development/languages/Python/libraries/requests[requests]
> pip install beautifulsoup4
code }

}
{ Module members

  table { ll

   `BeautifulSoup` ☰  The `BeautifulSoup` object represents the document to be parsed as a nested data structure.
   `BeautifulStoneSoup` ☰
   `builder` ☰  A module
   `builder_registry` ☰  A `bs4.builder.TreeBuilderRegistry` class
   `CData` ☰
   `Comment` ☰
   `Counter` ☰
   `dammit` ☰ A module
   `Declaration` ☰
   `DEFAULT_OUTPUT_ENCODING` ☰ A string
   `Doctype` ☰
   `element` ☰  A module
   `FeatureNotFound` ☰
   `formatter` ☰ A module
   `GuessedAtParserWarning` ☰
   `MarkupResemblesLocatorWarning` ☰
   `NavigableString` ☰
   `os` ☰ A module
   `PageElement` ☰
   `ParserRejectedMarkup` ☰
   `ProcessingInstruction` ☰
   `PYTHON_SPECIFIC_ENCODINGS` ☰  A `set`
   `re` ☰ A module (possibly *the* `re` module?)
   `ResultSet` ☰
   `_s` ☰
   `Script` ☰
   `_soup` ☰
   `SoupStrainer` ☰
   `StopParsing` ☰
   `Stylesheet` ☰
   `sys` ☰  A module (possibly *the* `sys` module?)
   `Tag` ☰
   `TemplateString` ☰
   `traceback` ☰ A module
   `UnicodeDammit` ☰
   `warnings` ☰ A module
   `XMLParsedAsHTMLWarning` ☰

  table }

  {  Members of the BeautifulSoup class

     A `BeautifulSoup` object represents the document to be parsed as a nested data structure.

     `BeautifulSoup` inherits from `Tag` which inherits from `PageElement` which inherits from `object`.
     -
     Most of the methods exposed in `BeautifulSoup` are inherited from those two classes.
     -
     A `PageElement` contains the navigational information for some part of the page (i. e. its current location in the parse tree)
     -
     A `Tag` represents an → development/web/HTML or XML → development/web/HTML/tags[tag] that is part of a parse tree, along with its attributes and contents.

     Because `Tag` implements `__getattr__()` (which calls `find()` under the hood), it's possible to get a reference to a tag like so:
code {
doc = BeautifulSoup(htmlTxt, 'html.parser')
print(doc.title)
code }

     The members of `BeautifulSoup` are
     table { ll

      `_all_strings()` ☰ 
      `append()` ☰ 
      `ASCII_SPACES` ☰
      `childGenerator()` ☰ 
      `children` ☰
      `clear()` ☰ 
      `decode()` ☰ 
      `decode_contents()` ☰ 
      `_decode_markup` ☰  Class method?
      `decompose()` ☰ 
      `decomposed` ☰
      `default` ☰
      `DEFAULT_BUILDER_FEATURES` ☰
      `DEFAULT_INTERESTING_STRING_TYPES` ☰ 
      `descendants` ☰ 
      `encode()` ☰ 
      `encode_contents()` ☰ 
      `endData()` ☰ 
      `extend()` ☰ 
      `extract()` ☰ 
      `_feed()` ☰ 
      `fetchNextSiblings()` ☰ 
      `fetchParents()` ☰ 
      `fetchPrevious()` ☰ 
      `fetchPreviousSiblings()` ☰ 
      `find()` ☰ 
      `_find_all()` ☰ 
      `findAll()` ☰ 
      `find_all()` ☰ 
      `findAllNext()` ☰ 
      `find_all_next()` ☰ 
      `findAllPrevious()` ☰ 
      `find_all_previous()` ☰ 
      `findChild()` ☰ 
      `findChildren()` ☰ 
      `findNext()` ☰ 
      `find_next()` ☰ 
      `findNextSibling()` ☰ 
      `find_next_sibling()` ☰ 
      `findNextSiblings()` ☰ 
      `find_next_siblings()` ☰ 
      `_find_one()` ☰ 
      `findParent()` ☰ 
      `find_parent()` ☰ 
      `findParents()` ☰ 
      `find_parents()` ☰ 
      `findPrevious()` ☰ 
      `find_previous()` ☰ 
      `findPreviousSibling()` ☰ 
      `find_previous_sibling()` ☰ 
      `findPreviousSiblings()` ☰ 
      `find_previous_siblings()` ☰ 
      `format_string()` ☰ 
      `formatter_for_name()` ☰ 
      `get()` ☰ 
      `get_attribute_list()` ☰ 
      `getText()` ☰ 
      `get_text()` ☰ 
      `handle_data()` ☰ 
      `handle_endtag()` ☰ 
      `handle_starttag()` ☰ 
      `has_attr()` ☰ 
      `has_key()` ☰ 
      `index()` ☰ 
      `insert()` ☰ 
      `insert_after()` ☰ 
      `insert_before()` ☰ 
      `is_empty_element` ☰
      `isSelfClosing` ☰ 
      `_is_xml` ☰ 
      `_last_descendant()` ☰ 
      `_lastRecursiveChild()` ☰ 
      `_linkage_fixer()` ☰ 
      `_markup_is_url` ☰  Class method?
      `_markup_resembles_filename` ☰  Class method?
      `new_string()` ☰ 
      `new_tag()` ☰ 
      `next` ☰ 
      `next_elements` ☰
      `nextGenerator()` ☰ 
      `nextSibling` ☰ 
      `nextSiblingGenerator()` ☰ 
      `next_siblings` ☰ 
      `NO_PARSER_SPECIFIED_WARNING` ☰ 
      `object_was_parsed()` ☰ 
      `parentGenerator()` ☰ 
      `parents` ☰ 
      `parserClass` ☰ 
      `popTag()` ☰ 
      `_popToTag()` ☰ 
      `prettify()` ☰ 
      `previous` ☰ 
      `previous_elements` ☰ 
      `previousGenerator()` ☰ 
      `previousSibling` ☰ 
      `previousSiblingGenerator()` ☰ 
      `previous_siblings` ☰ 
      `pushTag()` ☰ 
      `recursiveChildGenerator()` ☰ 
      `renderContents()` ☰ 
      `replaceWith()` ☰ 
      `replace_with()` ☰ 
      `replaceWithChildren()` ☰ 
      `replace_with_children()` ☰ 
      `reset()` ☰ 
      `ROOT_TAG_NAME` ☰ 
      `select()` ☰ 
      `select_one()` ☰ 
      `setup()` ☰ 
      `_should_pretty_print()` ☰ 
      `smooth()` ☰ 
      `string` ☰ 
      `string_container()` ☰ 
      `strings` ☰ 
      `stripped_strings` ☰ 
      `text` ☰ 
      `unwrap()` ☰ 
      `wrap()` ☰ 


     table }

  }

}
{ Simple examples

  gh|about-python|/libraries/BeautifulSoup/script.py||

  gh|about-python|/libraries/BeautifulSoup/recursively.py||

}
{ ModuleNotFoundError: No module named 'beautifulsoup4'

  Wrong:
code {
>>> → development/languages/Python/statements/import beautifulsoup4
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'beautifulsoup4'
code }

  Better:
code {
>>> import bs4
code }

}

sa:
  → development/languages/Python/libraries/MechanicalSoup[BeautifulSoup] and
  → development/languages/Python/libraries/requests[requests]
