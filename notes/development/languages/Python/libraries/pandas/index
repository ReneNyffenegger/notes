$ Python library: pandas
@ pandas



{ Module members

  { Read functions

    Panda's `read_…()` functions read → development/Data of various formats and create a → development/languages/Python/libraries/pandas/DataFrame.

    table { ll

    `read_clipboard()` ☰ 
    → development/languages/Python/libraries/pandas/read_csv[`read_csv()`] ☰ 
    → development/languages/Python/libraries/pandas/read/excel[`read_excel()`] ☰ Reads an → Microsoft/Office/Excel/Object-Model/Worksheet[Excel worksheet] from an → Microsoft/Office/Excel/Object-Model/Workbook[Excel workbook]. See also pandas' `ExcelFile` and `ExcelWriter` objects
    `read_feather()` ☰  See also the `feather-library` package.
    `read_fwf()` ☰ fixed-width formatted lines
    `read_gbq()` ☰ Google Big Query. Rquires the `pandas_gbq` package.
    `read_hdf()` ☰ Hierarchical Data Format (HDF). See also the `HDFStore` object.
    `read_html()` ☰ 
    `read_json()` ☰ 
    `read_orc()` ☰ *Optimized Row Columnar* (ORC) files. See also `pyarrow.orc`.
    `read_parquet()` ☰ → development/Data/exchange/formats/Apache-Parquet.
    `read_pickle()` ☰  Reads «pickled» data (see the `→ development/languages/Python/standard-library/pickle` module)
    `read_sas()` ☰ → Companies-Products/SAS formats *XPORT* and `*SAS7BDAT*.
    `read_spss()` ☰ *Statistical Package for Social Sciences*
    `read_sql()` ☰  A convenience wrapper around `read_sql_table()` and `read_sql_query()`.
    `read_sql_query()` ☰ 
    `read_sql_table()` ☰  Returns the content of a table from an `SQLAlchemy` connectable as a data frame - does not support DBAPI connections.
    `read_stata()` ☰ 
    `read_table()` ☰ 
    `read_xml()` ☰ 

  table }

     Some of these methods have a corresponding `to_…()` method in DataFrame such as `to_excel()` or `to_clipboard` etc.

  }
  { Other functions

  table { ll

    `annotations` ☰ 
    `api` ☰  a module
    `array()` ☰ 
    `arrays` ☰  a module
    `ArrowDtype` ☰ 
    `bdate_range()` ☰ 
    `BooleanDtype` ☰ 
    `Categorical` ☰ 
    `CategoricalDtype` ☰ 
    `CategoricalIndex` ☰ 
    `compat` ☰  a module
    `concat()` ☰ 
    `_config` ☰  a module
    `core` ☰  a module
    `crosstab()` ☰ 
    `cut()` ☰ 
    `DataFrame` ☰ 
    `DateOffset` ☰ 
    `date_range()` ☰ 
    `DatetimeIndex` ☰ 
    `DatetimeTZDtype` ☰ 
    `describe_option` ☰ 
    `errors` ☰  a module
    `eval()` ☰ 
    `ExcelFile` ☰ 
    `ExcelWriter` ☰ 
    `factorize()` ☰ 
    `Flags` ☰ 
    `Float32Dtype` ☰ 
    `Float64Dtype` ☰ 
    `Float64Index` ☰  *deprecated* in favor of `pandas.Index`
    `from_dummies()` ☰ 
    `get_dummies()` ☰ 
    `get_option` ☰ 
    `Grouper` ☰ 
    `HDFStore` ☰ 
    `Index` ☰ 
    `IndexSlice` ☰ 
    `infer_freq()` ☰ 
    `Int16Dtype` ☰ 
    `Int32Dtype` ☰ 
    `Int64Dtype` ☰ 
    `Int64Index` ☰ *deprecated* in favor of `pandas.Index`.
    `Int8Dtype` ☰ 
    `Interval` ☰ 
    `IntervalDtype` ☰ 
    `IntervalIndex` ☰ 
    `interval_range()` ☰ 
    `io` ☰  a a module
    `isna()` ☰ 
    `isnull()` ☰ 
    `_is_numpy_dev` ☰ 
    `json_normalize()` ☰ 
    `_libs` ☰  a module
    `lreshape()` ☰ 
    `melt()` ☰ 
    `merge()` ☰ 
    `merge_asof()` ☰ 
    `merge_ordered()` ☰ 
    `MultiIndex` ☰ 
    `NA` ☰ 
    `NamedAgg` ☰ 
    `NaT` ☰ 
    `notna()` ☰ 
    `notnull()` ☰ 
    `offsets` ☰  a module
    `option_context` ☰ 
    `options` ☰ 
    `pandas` ☰  a module
    `Period` ☰ 
    `PeriodDtype` ☰ 
    `PeriodIndex` ☰ 
    `period_range()` ☰ 
    `pivot()` ☰ 
    `pivot_table()` ☰ 
    `plotting` ☰  a module
    `qcut()` ☰ 
    `RangeIndex` ☰ 
    `reset_option` ☰ 
    `Series` ☰ 
    `set_eng_float_format()` ☰ 
    `set_option` ☰ 
    `show_versions()` ☰ 
    `SparseDtype` ☰ 
    `StringDtype` ☰ 
    `test()` ☰ 
    `_testing` ☰  a module
    `testing` ☰  a a module
    `Timedelta` ☰ 
    `TimedeltaIndex` ☰ 
    `timedelta_range()` ☰ 
    `Timestamp` ☰ 
    `to_datetime()` ☰ 
    `to_numeric()` ☰ 
    `to_pickle()` ☰ 
    `to_timedelta()` ☰ 
    `tseries` ☰  a module
    `_typing` ☰  a module
    `UInt16Dtype` ☰ 
    `UInt32Dtype` ☰ 
    `UInt64Dtype` ☰ 
    `UInt64Index` ☰ *deprecated* in favor of `pandas.Index`
    `UInt8Dtype` ☰ 
    `unique()` ☰ 
    `util` ☰  a module
    `value_counts()` ☰ 
    `_version` ☰  a module
    `wide_to_long()` ☰ 

   table }

  }

}

{ qcut

  gh|about-python|/libraries/pandas/qcut.py||

}
{ Series

  gh|about-python|/libraries/pandas/Series/Series.py||

}

sa:
  A → development/languages/Python/libraries/pandas/DataFrame[DataFrame] is a 2 dimensional data structure.
