$ Python library: matplotlib
@ matplotlib

{ Plotting a simple graph

  gh|about-python|/libraries/matplotlib/sin.py||

  gh|about-python|/libraries/matplotlib/img/sin.png||

}

{ Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.

  When I experienced this error on Debian, installing `→ development/languages/Python/standard-library/tkinter` solved the problem.

}
{ Module members

  table { ll

   `_add_data_doc()` ☰
   `_api` ☰ Module
   `atexit` ☰ Module
   `bezier` ☰ Module
   `cbook` ☰ Module
   `checkdep_usetex()` ☰
   `_check_versions()` ☰
   `_c_internal_utils` ☰ Module
   `_cm` ☰ Module
   `cm` ☰ Module
   `_cm_listed` ☰ Module
   `_color_data` ☰ Module
   `colormaps` ☰ ?
   `colors` ☰ Module
   `color_sequences` ☰ ?
   `contextlib` ☰ Module
   `cycler()` ☰
   `defaultParams` ☰ `dict` object
   `default_test_modules` ☰ `list` object
   `_deprecated_ignore_map` ☰ `dict` object
   `_deprecated_map` ☰ `dict` object
   `_deprecated_remain_as_none` ☰ `dict` object
   `_docstring` ☰ Module
   `_ensure_handler` ☰ ?
   `_enums` ☰ Module
   `_ExecInfo` ☰ `matplotlib._ExecInfo` class
   `ExecutableNotFoundError` ☰ `matplotlib.ExecutableNotFoundError` class
   `_fontconfig_pattern` ☰ Module
   `ft2font` ☰ Module
   `functools` ☰ Module
   `get_backend()` ☰
   `get_cachedir()` ☰
   `get_configdir()` ☰
   `_get_config_or_cache_dir()` ☰
   `get_data_path()` ☰
   `_get_executable_info` ☰ ?
   `_get_ssl_context` ☰ ?
   `_get_version()` ☰
   `_get_xdg_cache_dir()` ☰
   `_get_xdg_config_dir()` ☰
   `importlib` ☰ Module
   `_init_tests()` ☰
   `inspect` ☰ Module
   `interactive()` ☰
   `is_interactive()` ☰
   `is_url()` ☰
   `_label_from_arg()` ☰
   `locale` ☰ Module
   `_log` ☰ ?
   `_logged_cached()` ☰
   `logging` ☰ Module
   `MatplotlibDeprecationWarning` ☰ `matplotlib._api.deprecation.MatplotlibDeprecationWarning` class
   `matplotlib_fname()` ☰
   `MutableMapping` ☰ ?
   `namedtuple()` ☰
   `numpy` ☰ Module
   `_open_file_or_url()` ☰
   `os` ☰ Module
   `Parameter` ☰ `inspect.Parameter` class
   `_parse_to_version_info()` ☰
   `parse_version()` ☰
   `Path` ☰ `pathlib.Path` class
   `_path` ☰ Module
   `path` ☰ Module
   `pprint` ☰ Module
   `_preprocess_data()` ☰
   `rc()` ☰ A convenience function that allows to set multiple runtime configurations (=rc) at once. See also `rcParams`.
   `rc_context()` ☰ A → development/languages/Python/objects/context-manager to override values of `rcParams` temporaily  (`with mpl.rc_context({'lines.linewidth': 4}): …`). `rc_context` can also be used as a → development/languages/Python/functions/decorators to set rc defaults for a given function.
   `rcdefaults()` ☰
   `rc_file()` ☰
   `rc_file_defaults()` ☰
   `RcParams` ☰ ?
   `rcParams` ☰ An instance of `matplotlib.RcParams` which is a dictionary like object used for run-time (=rc) configuration (for example `mpl.rcParams['lines.lineWidth'] = 3`). See also `rc()` and `rc_context` and the → development/languages/Python/libraries/matplotlib/rcParams/list.
   `rc_params()` ☰
   `rcParamsDefault` ☰ ?
   `rc_params_from_file()` ☰
   `_rc_params_in_file()` ☰
   `rcParamsOrig` ☰ ?
   `rcsetup` ☰ Module
   `re` ☰ Module
   `_replacer()` ☰
   `sanitize_sequence()` ☰
   `scale` ☰ Module
   `set_loglevel()` ☰
   `shutil` ☰ Module
   `subprocess` ☰ Module
   `sys` ☰ Module
   `tempfile` ☰ Module
   `test()` ☰
   `ticker` ☰ Module
   `transforms` ☰ Module
   `use()` ☰
   `validate_backend()` ☰
   `_version` ☰ Module
   `_VersionInfo` ☰ `matplotlib._VersionInfo` class
   `warnings` ☰ Module

  table }

}

{ TODO

 `matplotlib.→ development/languages/Python/libraries/matplotlib/pyplot[pyplot]` is a collection of functions that make matplotlib work like MATLAB.

  Data to be plotted is expected to be provided as `numpy.array` or `numpy.ma.masked_array` objects, or objects that can be passed to `numpy.asarray()`.


  There are two *interfaces*:
    • Object oriented style (also refered to as explicit interface)
    • Implicit (modeled on MATLAB)

  When using the OO style (?):
   • A → development/languages/Python/libraries/matplotlib/figure/Figure[`matplotlib.figure.Figure`] object
   • A → development/languages/Python/libraries/matplotlib/axes[`matplotlib.axes.Axes`] object represents a plot
   • A → development/languages/Python/libraries/matplotlib/axis/Axis[`matplotlib.axis.Axis`] object represents one of the plot's axis (x, y or z)

  Matplotlib accepts TeX equation expressions in any text expression. 

  Matplotlib uses the → https://pillow.readthedocs.io/en/latest/[Pillow library] to load image data.

  { Axes class

    The → development/languages/Python/libraries/matplotlib/axes[`Axes`] class is central to matplotlib because it defines the plotting area for data to be drawn.

  }
  { Standard use

code {
import → development/languages/Python/libraries/matplotlib/pyplot[matplotlib.pyplot] as plt
import numpy             as np

#
#     Create a figure …
#
fig = plt.figure()

#
#     … use the figure to create one or more axes …
#
ax  = fig.add_subplot(2, 1, 1) # two rows, one column, first plot

#
#    … and use the axes to create the → development/languages/Python/libraries/matplotlib/artist/Artist[Artist] primitives.
#

ax.…()

fig.show()
plt.waitforbuttonpress() # Really necessary?
code }

  Variant: create figure and axes in one go:
code {
fig, ax = plt.subplots()
code }

  }
  { Coordinates #mpl-coordinates

    The default coordinate system for figures: 0,0 is bottom-left, 1,1 is top-right.

    The coordinate system can be changed by setting the `transform` property of an → development/languages/Python/libraries/matplotlib/artist/Artist[`Artist`] object.

    See also the `transFigure` property of the → development/languages/Python/libraries/matplotlib/figure/Figure[`Figure`] object.

  }
  { styles/rcParams

    Plots can be styled using → development/languages/Python/libraries/matplotlib/rcParams/list[rcParams]. rcParams can be set using the following methods, in order of decreasing precedence:
      • Setting `matplotlib.rcParams` at runtime
      • Using style sheets
      • Using a matplotlibrc file

   Available styles can be found with
code {
→ development/languages/Python/built-in-functions/print(→ development/languages/Python/libraries/matplotlib/style[plt.style].available)
code }

  }

}

sa:

  The → development/Notebook-interface/Jupyter magic function `%matplotlib`

  → https://seaborn.pydata.org/[Seaborn] is a (Python) → development/Data/visualization library based on matplotlib.
