$ numpy.random

`numpy.random` implements pseudo random number generators.

table { ll
  `__all__` ☰ `list` object
  `beta()` ☰
  `binomial()` ☰
  `BitGenerator` ☰ `numpy.random.bit_generator.BitGenerator` class
  `bit_generator` ☰ Module
  `_bounded_integers` ☰ Module
  `__builtins__` ☰ `dict` object
  `bytes()` ☰
  `__cached__` ☰ `str` object
  `chisquare()` ☰
  `choice()` ☰
  `_common` ☰ Module
  `default_rng()` ☰
  `dirichlet()` ☰
  `__doc__` ☰ `str` object
  `exponential()` ☰
  `f()` ☰
  `__file__` ☰ `str` object
  `gamma()` ☰
  `Generator` ☰ `numpy.random._generator.Generator` class
  `_generator` ☰ Module
  `geometric()` ☰
  `get_bit_generator()` ☰
  `get_state()` ☰
  `gumbel()` ☰
  `hypergeometric()` ☰
  `laplace()` ☰
  `__loader__` ☰ ?
  `logistic()` ☰
  `lognormal()` ☰
  `logseries()` ☰
  `MT19937` ☰ `numpy.random._mt19937.MT19937` class
  `_mt19937` ☰ Module
  `mtrand` ☰ Module
  `multinomial()` ☰
  `multivariate_normal()` ☰
  `__name__` ☰ `str` object
  `negative_binomial()` ☰
  `noncentral_chisquare()` ☰
  `noncentral_f()` ☰
  `normal()` ☰ Draws random samples from a normal (Gaussian) distribution. See also `randn()`
  `__package__` ☰ `str` object
  `pareto()` ☰
  `__path__` ☰ `list` object
  `PCG64` ☰ `numpy.random._pcg64.PCG64` class
  `_pcg64` ☰ Module
  `PCG64DXSM` ☰ `numpy.random._pcg64.PCG64DXSM` class
  `permutation()` ☰
  `Philox` ☰ `numpy.random._philox.Philox` class
  `_philox` ☰ Module
  `_pickle` ☰ Module
  `poisson()` ☰
  `power()` ☰
  `rand()` ☰
  `randint()` ☰
  `randn()` ☰ Returns a sample (or samples) from the *standard normal* distribution. See also `normal()`
  `random()` ☰ Return random floats in the half-open interval `[0.0, 1.0)`. `random` is an alias for `random_sample` to ease forward-porting to the new random API.
  `random_integers()` ☰
  `random_sample()` ☰ See `random()`
  `RandomState` ☰ `numpy.random.mtrand.RandomState` class
  `__RandomState_ctor()` ☰ Function
  `ranf()` ☰
  `rayleigh()` ☰
  `sample()` ☰
  `seed()` ☰
  `SeedSequence` ☰ `numpy.random.bit_generator.SeedSequence` class
  `set_bit_generator()` ☰
  `set_state()` ☰
  `SFC64` ☰ `numpy.random._sfc64.SFC64` class
  `_sfc64` ☰ Module
  `shuffle()` ☰
  `__spec__` ☰ ?
  `standard_cauchy()` ☰
  `standard_exponential()` ☰
  `standard_gamma()` ☰
  `standard_normal()` ☰
  `standard_t()` ☰
  `test` ☰ ?
  `triangular()` ☰
  `uniform()` ☰
  `vonmises()` ☰
  `wald()` ☰
  `weibull()` ☰
  `zipf()` ☰
table }

code {
>>> np.random.seed(42)
>>> np.random.random()
0.3745401188473625

>>> np.random.random(5)
array([0.95071431, 0.73199394, 0.59865848, 0.15601864, 0.15599452])

>>> np.random.random( (2, 3) )
array([[0.05808361, 0.86617615, 0.60111501],
       [0.70807258, 0.02058449, 0.96990985]])
code }

sa:

 `→ development/languages/Python/libraries/numpy`

  Python's standard library `→ development/languages/Python/standard-library/random`.

