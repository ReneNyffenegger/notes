$ Python: async def
@ async def

{ Key properties of coroutines

  → development/languages/Python/PEP[PEP] 492 lists some properties of *coroutines*:
    • `async def` functions are always coroutines, even if they do not contain `await` expressions.
    • It is a `SyntaxError` to have `yield` or `yield from` expressions in an `async` function.
    • Internally, two new code object flags were introduced: `CO_COROUTINE` is used to mark native coroutines (defined with new syntax); `O_ITERABLE_COROUTINE` is used to make generator-based coroutines compatible with native coroutines (set by `types.coroutine()` function).
    • Regular generators, when called, return a generator object; similarly, coroutines return a coroutine object.
    • `StopIteration` exceptions are not propagated out of coroutines, and are replaced with a `RuntimeError`. For regular generators such behavior requires a future import (see PEP 479).
    • When a native coroutine is garbage collected, a `RuntimeWarning` is raised if it was never awaited on.

}
