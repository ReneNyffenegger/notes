$ Python: statement def

`def` defines a *user defined function* object.

{ Function without arguments

  gh|about-python|/statements/def/no-arguments.py||

}
{ Function with arguments

  gh|about-python|/statements/def/arguments.py||

}
{ Keyword (named) arguments

  gh|about-python|/statements/def/keyword-arguments.py||

}
{ Argument with one star (or asterisk)

  An argument that is prefixed with a star (asterisk) (`*b`) allows to pass any number of positional arguments to the function.

  The type of the argument is a *tuple*, thus, it is possible to iterate over the optional values that are passed to the function.

  gh|about-python|/statements/def/one-star.py||

}
{ Argument with two stars

  Similarly, an argument can be declared with two prefixing stars. In that case, the function expects there to be passed any number
  of *named arguments*. The type of the argument within the function is a → development/languages/Python/types/dict.

  gh|about-python|/statements/def/two-stars.py||

}

{ TODO

  In order to create a → development/languages/Python/generators[generator] function, the function definition must have a → development/languages/Python/statements/yield[`yield`] statement - and this is also sufficient to
  create such a generator function.

}

sa:

  → development/languages/Python/statements/def/nested[Nesting functions]

  → development/languages/Python/statements
