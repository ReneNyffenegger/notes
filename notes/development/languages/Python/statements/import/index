$ Python: import statement

The `import` statement searches the directories in → development/languages/Python/standard-library/sys#python-sys-path[`sys.path`] for modules and packages.

{ The basic import statement

  The following text is the content of a (simple Python script) file named `TQ84_Module.py`. The script defines one function: `func()`.

  gh|about-python|/statements/import/import-module/TQ84_Module.py||

  This file can be imported with an `import` statement so that its functionality (here `func()`) is available to other modules and scripts.
  -
  In order to import a script file, its name, without → development/filename-extensions#py[`.py` extension], needs to be given after the `import` statement (here `import TQ84_Module`).
  -
  In order to use the function, the function's name needs to be prepended with the module name where it is located (here: `TQ84_Module.func()`):
  gh|about-python|/statements/import/import-module/go.py||

}
{ from MODULE import * #py-from-mod-import-star
  
  Here's another module (`FooModule.py`) to be imported. Again, it defines one function: `doFoo()`:
  gh|about-python|/statements/import/from-module-import-star/FooModule.py||

  The following script does a `from FooModule import *` (as opposed to the previous `import FooModule` construct).
  -
  With this special construct, the identifiers that are defined in `FooModule`
  will be placed into the *global namespace* so that they don't need to be prefixed with the module name in order to be accessed, so `doFoo()` can be called without prefixing it with a module name:
  gh|about-python|/statements/import/from-module-import-star/go.py||

}
{ import executes the imported module

  The following example demonstrates that the import statement not only puts a new name into the current namespace, but also executes the module that is imported.

  This is the module that is imported. Note, the call of the  → development/languages/Python/built-in-functions/print[`print` function] is not within a function that is defined in the module.

  gh|about-python|/statements/import/run-imported-module/tq84Module.py||

  When a script uses `import tq84Module`, the content of `tq84Module.py` is executed. So, running the following code will print `This is printed from within tq84Module`.
  gh|about-python|/statements/import/run-imported-module/importer.py||

}
{ Packages (modules stored in directories and subdirectories)

  gh|about-python|/statements/import/dirs-and-subdirs/tq84_dir/mod_one.py||
  gh|about-python|/statements/import/dirs-and-subdirs/tq84_dir/mod_two.py||

  gh|about-python|/statements/import/dirs-and-subdirs/go.py||



}
{ import executes an imported package's __init__.py

  Here's an `__init__.py` file, stored under `tq84Package`:
  gh|about-python|/statements/import/run-__init__/tq84Package/__init__.py||

  Here's a script that imports the package:
  gh|about-python|/statements/import/run-__init__/import-package.py||

  When this script is run, it prints
code {
This is printed from within tq84Package/__init__.py
code }

  Here's another script that imports a module within the package.
  gh|about-python|/statements/import/run-__init__/import-module.py||

When this script is run, it prints
code {
This is printed from within tq84Package/__init__.py
This is printed from within tq84Package/tq84Module.py
code }

}
{ __builtins__ of an empty module

  The following script imports a file (`Empty.py`) that is literally empty (its size is 0 bytes) and then uses
  → development/languages/Python/built-in-functions/dir[`dir(Empty)`] to show the module's attributes.

  It then goes on to also print the values of the interesting, imho, attributes `__name__`, `__package__`, `__file__` and `__doc__`:

  gh|about-Python|/statements/import/import-Empty.py||

}

sa:

  → development/languages/Python/standard-library/importlib[importlib]

  → development/languages/Python/statements

  `import this` prints the *Zen of Python*. Not sure if `this` *is* a module, though.
