$ Python: import statement

The `import` statement searches the directories in → development/languages/Python/standard-library/sys#python-sys-path[`sys.path`] for → development/languages/Python/module[modules] and packages.

{ The basic import statement

  The following text is the content of a (simple Python script) file named `TQ84_Module.py`. The script defines one function: `func()`.

  gh|about-python|/statements/import/import-module/TQ84_Module.py||

  This file can be imported with an `import` statement so that its functionality (here `func()`) is available to other modules and scripts.
  -
  In order to import a script file, its name, without → development/filename-extensions#py[`.py` extension], needs to be given after the `import` statement (here `import TQ84_Module`).
  -
  In order to use the function, the function's name needs to be prepended with the module name where it is located (here: `TQ84_Module.func()`):
  gh|about-python|/statements/import/import-module/go.py||

}
{ from MODULE import * #py-from-mod-import-star
  
  Here's another module (`FooModule.py`) to be imported. Again, it defines one function: `doFoo()`:
  gh|about-python|/statements/import/from-module-import-star/FooModule.py||

  The following script does a `from FooModule import *` (as opposed to the previous `import FooModule` construct).
  -
  With this special construct, the identifiers that are defined in `FooModule`
  will be placed into the *global namespace* so that they don't need to be prefixed with the module name in order to be accessed, so `doFoo()` can be called without prefixing it with a module name:
  gh|about-python|/statements/import/from-module-import-star/go.py||

}
{ import executes the imported module

  The following example demonstrates that the import statement not only puts a new name into the current namespace, but also executes the module that is imported.

  This is the module that is imported. Note, the call of the  → development/languages/Python/built-in-functions/print[`print` function] is not within a function that is defined in the module.

  gh|about-python|/statements/import/run-imported-module/tq84Module.py||

  When a script uses `import tq84Module`, the content of `tq84Module.py` is executed. So, running the following code will print `This is printed from within tq84Module`.
  gh|about-python|/statements/import/run-imported-module/importer.py||

}
{ Packages (modules stored in directories and subdirectories)

  Modules, that semantically belong together, can be stored in their own directory (or sub directories). This helps to recognize their relationship and reduces namespace cluttering when importing them.

  This is demonstrated with the following two files, `mod_one.py` and `mod_two.py`, where are both stored in a directory `tq84_dir`.

  { Imported files

   `tq84_dir/mod_one.py`:
    gh|about-python|/statements/import/dirs-and-subdirs/tq84_dir/mod_one.py||

   `tq84_dir/mod_two.py`:
    gh|about-python|/statements/import/dirs-and-subdirs/tq84_dir/mod_two.py||

  }
  { Importing these files

    Before doing anything, I store the names of the current local scope in the variable `global_names` so that I can compare it with the names in the current local scope after executing the `import` stateemnt:
code {
>>> global_names = dir()
>>> print(global_names)
['→ development/languages/Python/dunders/__annotations__[__annotations__]', '→ development/languages/Python/dunders/__builtins__[__builtins__]', '__cached__', '→ development/languages/Python/dunders/__doc__[__doc__]', → development/languages/Python/dunders/__file__['__file__'], '→ development/languages/Python/dunders/__loader__[__loader__]', '→ development/languages/Python/dunders/__name__[__name__]', '→ development/languages/Python/dunders/__package__[__package__]', '→ development/languages/Python/dunders/__spec__[__spec__]']
code }

    I now execute the an `import` statement. In contrast to the previous examples, this time, the name `tq84_dir` refers to a file system directory rather than a file name:
code {
import tq84_dir
code }

    I perform a diff between the names that are stored in `global_names` and those that are now present in the *current local scope* and store the result in `new_names`:
code {
>>> new_names = list(set(dir()) - set(global_names))
>>> print(new_names)
['tq84_dir', 'global_names']
code }

    It turns out that importing the `tq84_dir` module (package) has created a corresponding new name (`tq84_dir`) in the current local scope.
    -
   (`global_names` was created after the first call of → development/languages/Python/built-in-functions/dir[`dir()`] executed, hence it is also reported)
  
    The type of `tq84_dir` is *module*:
code {
>>> print(→ development/languages/Python/built-in-functions/type('tq84_dir'))
<class 'module'>
code }

   As before, I store the list of attributes that are present in the `tq84_dir` module in a variable to be able to diff it later.
code {
>>> tq84_names_init = dir(tq84_dir)
code }

   Although the directory contains two files (sub modules?), they are not yet loaded (imported):
code {
>>> print(tq84_names_init)
['__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__']
code }

   It's about time to import `mod_one.py` and check how it influences the namespace of `tq84_dir`:
code {
>>> import tq84_dir.mod_one
>>> tq84_names_1 = dir(tq84_dir)
>>> new_names = list(set(tq84_names_1) - set(tq84_names_init))
>>> print(new_names)(
['mod_one']
code }

   Same thing with `mod_two.py`:
code {
>>> import tq84_dir.mod_two
>>> tq84_names_2 = dir(tq84_dir)
>>> new_names = list(set(tq84_names_2) - set(tq84_names_1))
>>> print(new_names)
['mod_two']
code }

   Finally, I call the functions that were defined in these package-modules:
code {
>>> tq84_dir.mod_one.func()
I was defined in mod_one
>>> tq84_dir.mod_two.func()
I was defined in mod_two
code }

   These statements are also recorded → https://github.com/ReneNyffenegger/about-python/blob/master/statements/import/dirs-and-subdirs/go.py[here].

  }

}
{ import executes an imported package's __init__.py #py-import__init__

  The following example demonstrates the automatic execution of an `__init__.py` file (if it is present).

  Here's the `__init__.py` file: it is stored under `tq84Package`:
  gh|about-python|/statements/import/run-__init__/tq84Package/__init__.py||

  Here's a script that imports `tq84Package`:
  gh|about-python|/statements/import/run-__init__/import-package.py||

  While the `import` statement is executed, the following message is printed:
code {
This is printed from within tq84Package/__init__.py
code }

  The directory `tq84Package` also contains the file `tq84Module.py`:
  gh|about-python|/statements/import/run-__init__/tq84Package/tq84Module.py||

  This `tq84Module` is imported like so:
  gh|about-python|/statements/import/run-__init__/import-module.py||

  This will print:
code {
This is printed from within tq84Package/__init__.py
This is printed from within tq84Package/tq84Module.py
code }

  Compare with the `__main__.py` that might be executed as part of → development/languages/Python/import-system/minus-m[`-m` command line option].

}
{ Dunders of an empty module

  The following script imports a file (`Empty.py`) that is literally empty (its size is 0 bytes) and then uses
  → development/languages/Python/built-in-functions/dir[`dir(Empty)`] to show the module's attributes (all of which are so called → development/languages/Python/dunders[dunders]).

  It then goes on to also print the values of the interesting, imho, attributes `__name__`, `__package__`, `__file__` and `__doc__`:

  gh|about-Python|/statements/import/import-Empty.py||

}

sa:

  → development/languages/Python/standard-library/importlib[importlib]

  → development/languages/Python/statements

  `import this` prints the *Zen of Python*. Not sure if `this` *is* a module, though.

  The `-v` → development/languages/Python/command-line/options[command line option] traces `import` statements.
