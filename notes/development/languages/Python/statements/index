$ (some) Python statements
@ statements

{ class

  See  → development/languages/Python/statements/class[class]

}
{ def

  → development/languages/Python/statements/def[`def`] defines a *user defined function* object.

}
{ for

  The → development/languages/Python/statements/for[`for`] statement can be used, for example, to → development/languages/Python/statements/for#py-for-num-range[iterate over a numeric range] or to
  → development/languages/Python/statements/for#py-for-char-in-str[iterate over the individual characters of a string].

}
{ global


  See → development/languages/Python/statements/global[`global`] and `nonlocal`

}
{ if

  See  → development/languages/Python/statements/if[`if`]

}
{ import

  See  → development/languages/Python/statements/import[`import`]

}
{ pass

  Do explicitly nothing.

code {
def Foo():
    pass
code }

}
{ raise

  → development/languages/Python/statements/raise[`raise`] raises an exception.

  See also → development/languages/Python/exception-handling

}
{ while

  `→ development/languages/Python/statements/while cond: ` iterates over a block of code until a certain condition (`cond`) becomes false.

}
{ with

  See → development/languages/Python/statements/with[here].

}
{ yield

  → development/languages/Python/statements/yield[`yield`]

}

sa:

  → development/languages/Python/statements/break[`break`]

  → development/languages/Python/statements/pass[`pass`] is → development/languages/Python[Python's] no-op statement.

  → development/languages/Python/statements/return[`return`]

  → development/languages/Python/statements/del[`del`]
