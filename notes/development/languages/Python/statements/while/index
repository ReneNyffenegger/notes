$ Python: while statement
@ while

The `while` statement iterates over a block of code until a given condition becomes false.

{ Simple iteration

  The following simple example prints the numbers 0 through 4 (the loop is exited when `cond < 5` becomes false, thus 5 is not printed).

  gh|about-Python|/statements/while/simple.py||

  The output of this example is:
code {
cnt  = 0
cnt  = 1
cnt  = 2
cnt  = 3
cnt  = 4
code }

}
{ while … next

  The `while` statement can optionally be suffexed with a `else` handler which is executed when the loop terminates:

  gh|about-Python|/statements/while/else.py||

  The output of this example is:
code {
cnt  = 0
cnt  = 1
cnt  = 2
cnt  = 3
cnt  = 4
finished
code }

}
{ break, continue

  Within a loop (such a `while` loop), the → development/languages/Python/statements/break[`break`] statement unconditionally and immediatly jumps out of the loop.
  -
  The `continue` statement jumps to the begin of the loop again.

  gh|about-Python|/statements/while/break-continue.py||

  The output of this example is:
code {
end of loop, x = 1
x = 2 -> continue
end of loop, x = 3
end of loop, x = 4
x = 5 -> break
code }

}
{ Assignment in while statement

  → https://www.python.org/dev/peps/pep-0572/[PEP-572] defines the assignment expression (aka walrus operator) with which it is (finally) possible to have an assignment in the `while` condition. The assignment
  expression requires at least Python version 3.8.

  gh|about-Python|/statements/while/assignment-expression.py||

}


sa:
  The → development/languages/Python/statements/else-clause[`else` clause]

  Each → development/languages/Python/objects can be evaluated in a boolean context, such as an
  → development/languages/Python/statements/if[`if`] or `while` statement. The rules if an object is considered to
  be `True` or `False` are described → development/languages/Python/objects/evaluating-in-boolean-context[here].
