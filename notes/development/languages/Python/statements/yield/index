$ Python: yield statement

The `yield` statement is used to define a → development/languages/Python/generators[generator] function.

When the Python interpreter encounters the `yield` statement, the function's local → development/languages/Python/variables[variables] and execution state are saved and control is returned to the caller.
-
With → development/languages/Python/built-in-functions/next[`next()`], the execution is resumed from where the executions was suspended with the saved → development/Data.
-
Under the hood, `next()` calls an → development/languages/Python/objects[object's] → development/languages/Python/dunders/__next__[`__next__()`] method.

{ Jumping between function and caller

  The following example tries to demonstrate how it is possible to «jump» between a calling context and a function.

  gh|about-Python|/statements/yield/save-state-and-resume.py||

  When executed, the example prints
code {
yielding 17
__next()__ returned: 17
yielding 22
__next()__ returned: 22
yielding 44
__next()__ returned: 44
the end.
Caught StopIteration
--------------------------------------
yielding 5
next(itr) = 5
yielding 10
next(itr) = 10
yielding 20
next(itr) = 20
the end.
Caught StopIteration
code }

}

{ for … in …

  A function with `yield` statements can be used in → development/languages/Python/statements/for[`for … in …`] statements:
  gh|about-python|/statements/yield/for-in.py||

  This example prints:
code {
one
two
three
code }

}
{ Return type of a def with a yield statement

  A function that is defined with → development/languages/Python/statements/def[`def`] and that contains
  a `yield` statement returns a → development/languages/Python/generators.

  The following simple example defines two functions, one of which has a `yield` statement and the other doesn't.

  The → development/languages/Python/built-in-functions/type[`type`] of both functions is *function*. However,
  the type of returned → development/languages/Python/objects of the function without `yield` is *int* (the type of `42`) while the the type of
  the returned object of the function with a `yield` is *generator*.

  gh|about-python|/statements/yield/def-with-and-without-yield.py||

}

sa:

  Using the `yield` statement in → development/languages/Python/built-in-functions/reversed#py-reversed-reversed[`__reversed__()`].

  → development/languages/Python/statements
