$ Python: statement for
@ for

code {
for elem in → development/languages/Python/iterable/sequence[seq]:
    doSomethingWith(elem)
code }


{ Iterating over a comma separated list of items #py-for-chars-in-string

  Because a → development/languages/Python/types/string[string] is an → development/languages/Python/iterable, `for` allows to iterate over each character in a string:
  gh|about-python|/statements/for/in-comma-separated.py||

}
{ Iterating over a list #py-for-in-list

  Similarly, the `for in` statement allows to iterate over a → development/languages/Python/types/list[list].

  Unlike in Perl's → development/languages/Perl/functions/foreach#perl-foreach-alias[`foreach`] statement, the iteration-variable
  is not aliased to the elements in the list being iterated over.

  gh|about-python|/statements/for/in-list.py||

  The `for x in someList` construct is also used in → development/languages/Python/types/list/comprehension[list comprehensions].

}
{ Iterating over a numeric range #py-for-num-range

  The `for` statement also allows to iterate over a given numeric range.

  gh|about-python|/statements/for/iterate-over-numeric-range.py||
  
  The previous script prints
code {
  0
  1
  2
  3
  4
code }

  See also the built in function → development/languages/Python/built-in-functions/range[`range`].

}
{ Getting the indexes of a list when iterating over it #py-for-enumerate

  Sometimes, it is useful to have the index of an item in a list in addition to the item's value when iterating over the list.
  
  This is possible by using the built-in function → development/languages/Python/built-in-functions/enumerate[`enumerate()`]:
  gh|about-python|/statements/for/enumerate.py||

}
{ Iterating over multiple lists in parallel #py-for-zip

  With → development/languages/Python/built-in-functions/zip[`zip(list_1, list_2, … list_n)`], it is possible to iterate over multiple lists in parallel:
  gh|about-python|/statements/for/zip.py||

}
{ Iterating over the characters of a string #py-for-char-in-str

  Because a → development/languages/Python/types/string[`str` (string)] is also an → development/languages/Python/iterable(?), the `for` statement allows to iterate over the characters of a string:

  gh|about-python|/statements/for/iterate-over-characters.py||

}
{ The variable is not local to the loop

  A variable that is declared in a `for` statement is accessible after the loop has finished and retains its last value.

  This is demonstrated with this script: 
  gh|about-python|/statements/for/variable-not-local-to-loop.py||

  When run, it prints
code {
i = 0
i = 1
i = 2
Value of i after the loop: 2
code }

}
{ Exiting a for-loop prematurely #py-for-break

  A `for` loop can be exited at any time with the → development/languages/Python/statements/break[`break`] statement.
  gh|about-python|/statements/for/break.py||

  This script prints:
code {
one
two
three
code }

}
{ else clause

  A `for` loop can have an `else` clause which is executed if the `for` loop is not terminated with a → development/languages/Python/statements/break[`break`] or statement. Thus, the `else` clause can be
  interpreted as *do this if loop successfully completed*.

  gh|about-python|/statements/for/else.py||

}

sa:
  The → development/languages/Python/statements/else-clause[`else` clause]

  → development/languages/Python/iterable/unpacking[Iterable unpacking] in a → development/languages/Python/iterable/unpacking#py-iterable-unpacking-for[`for … in` loop].

  → development/languages/Python/statements
