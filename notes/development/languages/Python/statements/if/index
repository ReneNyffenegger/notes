$ Python: if statement
@ if

{ if

  gh|about-Python|/statements/if/simple.py||

}
{ if … else

  gh|about-Python|/statements/if/else.py||

}
{ else if

  → development/languages/Python uses the shortcut `elif` for `else if`:
  gh|about-Python|/statements/if/elif.py||

}
{ Ternary operator

  The → development/languages/Python/operators#py-ternary-operator[ternary operator] `… ? … : …`, as found in → development/languages/C-C-plus-plus[C related] languages, can be simulated in Python with `… if … else …`:
  gh|about-Python|/statements/if/ternary.py||

}
{ Assignment in if statement

  → https://www.python.org/dev/peps/pep-0572/[PEP-572] defines the assignment expression (aka → development/languages/Python/operators/walrus) with which it is (finally) possible to have an assignment in an `if` statement:
  gh|about-Python|/statements/if/assignment.py||

}
{ Using if in list comprehensions

 `if` can also be used in → development/languages/Python/types/list/comprehension[list comprehensions] to select the elements in a list that meet the given condition:
code {
result = [ expr(x) → development/languages/Python/statements/for#py-for-in-list[for x in someList] if criterion(x)]
code }

}

sa:

  Each → development/languages/Python/objects can be evaluated in a boolean context, such as an `if` or
  → development/languages/Python/statements/while[`while`] statement. The rules if an object is considered to
  be `True` or `False` are described → development/languages/Python/objects/evaluating-in-boolean-context[here].

  The → development/languages/Python/statements/else-clause[`else` clause]

  → development/languages/Python/statements
