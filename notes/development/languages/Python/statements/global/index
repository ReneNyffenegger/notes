$ Python: statement global
@ global

The following simple → development/languages/Python declares a → development/languages/Python/variables[variable] (`num`) and a → development/languages/Python/functions (`printNum`) that simply prints the value of num:
gh|about-Python|/statements/global/1-print-var.py||

Now, if a function contains an assignment to the variable, the variable is considered to be local to the function and hides the global variable with the same name.
-
Because (the local) `num` is not assigned a value at the time of the → development/languages/Python/built-in-functions/print[`print()`] function, an 
→ development/languages/Python/statements/global/UnboundLocalError-local-variable-referenced-before-assignment[`UnboundLocalError` exception] (with the
explanation *local variable 'num' referenced before assignment*) is thrown:
gh|about-Python|/statements/global/2-assign-to-var.py||

In order to print the value of `num`, use the `global` statement needs to be used:
gh|about-Python|/statements/global/3-use-global.py||

Its noteworthy to point out that → development/languages/Python/variables[variables] within a → development/languages/Python/functions that are only referenced, but not assigned to, are implicitly global.


sa:

  Using the `global` statement → development/languages/Python/statements/global/module[in a module].

  The `nonlocal` statement

  → development/languages/Python/statements
