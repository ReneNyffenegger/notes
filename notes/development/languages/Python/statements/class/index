$ Python: statement class

The `class` statement creates
  • a new *namespace* which becomes the local scope within the defintion of the → development/languages/Python/class
  • a *class object* (is this the metaclass?)

{ Constructor

  The name of a class's constructor is → development/languages/Python/dunders/__init__[`__init__`]

  gh|about-python|/statements/class/constructor.py||

}
{ Calling the constructor of a base class

  Unlike in → development/languages/C-C-plus-plus[C++], the constructor of a derived class does not call the constructor of the base class.
  If desired, it needs to be explicitely called.

  gh|about-python|/statements/class/calling-base-classes-constructor.py||

  See also the built-in function → development/languages/Python/built-in-functions/super[`super()`].

}
{ Metaclass

  A *class definition* consists of
    • a class name
    • a class dictionary
    • a list of base classes

  These items are managed by a class's metaclass.

  TODO: compare with  → development/languages/Python/dunders/__new__[`__new__`]

}

sa:

  The `class` statement is just → development/languages/Python/statements/class/statements[a «container» for a series of statements].

  → development/languages/Python/statements/class/nested[Nested classes]

  The `class` statement calls → development/languages/Python/built-in-functions/__build_class__[`__build_class__`] behind the scenes.

  → development/languages/Python/statements
