$ CPython: Include/object.h

*Object and type object interface*

{ PyObject #PyObject

 `PyObject` stores an → development/languages/Python#python-object[Python object's] *reference counter* (`ob_refcnt`) and a *type pointer* (`ob_type`).

code {
typedef struct _object {
    _PyObject_HEAD_EXTRA
    Py_ssize_t ob_refcnt;
    → development/languages/Python/CPython/sources/Include/cpython/object_h#PyTypeObject[PyTypeObject] *ob_type;
} PyObject;
code }

  If `Py_TRACE_REFS` is defined when compiing the sources, the macro `_PyObject_HEAD_EXTRA` is used to dfine a doubly-linked list of all live heap objects. If `Py_TRACE_REFS` is not defined, `_PyObject_HEAD_EXTRA` evaluates to nothing.

}
{ PyVarObject #PyVarObject

code {
typedef struct {
    PyObject ob_base;
    Py_ssize_t ob_size; /* Number of items in variable part */
} PyVarObject;
code }

}

links:
  → https://github.com/python/cpython/blob/master/Include/object.h[`Include/object.h` on github]
