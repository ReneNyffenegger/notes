$ Python: lambda

{ type of a lambda expression

  The type of a lambda expression is *function*:
code {
>>> → development/languages/Python/built-in-functions/type[type](lambda x: x*2)
<class 'function'>
code }

}
{ Global and local variables in lambda expressions

  As is the case with → development/languages/Python/functions[ordinary functions], → development/languages/Python/variables that are only referenced, but not assigned, in lambda expressions refer to a global variable. The following example
  creates two lambda expressions that only reference variables: the variable `var`:
  gh|about-Python|/expression/lambda/global-vars.py||

  When executed, the script prints
code {
12
16
code }

  On the other hand, the following script has an assignment in the lambda expression and hence, the variable `v` refers to a variable that is local to the lambda expression:
  gh|about-Python|/expression/lambda/assign-vars.py||

  When executed, this script prints
code {
6
4
code }

}

sa:
  The development/languages/Python/built-in-functions[built-in] functions → development/languages/Python/built-in-functions/filter[`filter()`] and
  → development/languages/Python/built-in-functions/map[`map()`].
