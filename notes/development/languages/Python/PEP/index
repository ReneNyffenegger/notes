$ Python PEPs

Some PEPs that I find interesting, useful or important include
table { rll
  → https://www.python.org/dev/peps/pep-0008/[8] ☰ Style Guide for Python Code ☰ Code for the → development/languages/Python/standard-library[standard libraries] *must* adhere to PEP 8.
  → https://peps.python.org/pep-0249/[249] ☰ Python Database API Specification v2.0 ☰ My notes about PEP 249 are → development/languages/Python/PEP/0249[here].
  → https://peps.python.org/pep-0263/[263] ☰ Defining Python Source Code Encodings ☰ See also PEP 3120 and → development/languages/Python/PEP/0263[this].
  → https://peps.python.org/pep-0343/[343] ☰ The `→ development/languages/Python/statements/with` statement ☰
  → https://www.python.org/dev/peps/pep-0376[376] ☰ Database of Installed Python Distributions ☰ A *historical* document, the up-to-date, canonical spec is the → https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata[Core metadata specification].
  → https://peps.python.org/pep-0397/[397] ☰ Python launcher for Windows ☰ See also `→ Windows/dirs/Windows/py_exe`
  → https://peps.python.org/pep-0427/[427] ☰ The Wheel Binary Package Format 1.0 ☰ Description of a built-package format for Python called *wheel*.
  → https://peps.python.org/pep-0503[503] ☰ Simple Repository API ☰ *Simple* refers to the fact that PyPI's base URL is → https://pypi.org/simple/.
  → https://peps.python.org/pep-0405/[405] ☰ Virtual Environments ☰ See also PEP 486 (Make the Python Launcher aware of virtual environments)
  → https://www.python.org/dev/peps/pep-0427[427] ☰ The → development/languages/Python#py-wheel[Wheel] Binary Package Format 1.0 ☰ A historical document, the up-to-date, canonical spec is maintained on the → https://packaging.python.org/en/latest/specifications/[PyPA specs page].
  → https://peps.python.org/pep-0465/[465] ☰ A dedicated infix operator for matrix multiplication ☰ This pep proposes the at symbol (`@`) as binary operater (to be typically used for matrix multiplications) and the corresponding methods `__matmul__`, `__rmatmul__` and `__imatmul__`. Compare with (the rejected) → https://peps.python.org/pep-0211/[PEP 211] (Adding A New Outer Product Operator) and (also rejected) → https://peps.python.org/pep-0225/[PEP 225] (Elementwise/Objectwise Operators)
  → https://peps.python.org/pep-0482[482] ☰ Literature Overview for Type Hints ☰ .
  → https://peps.python.org/pep-0484[484] ☰ Type hints ☰ Introduction of *type hints* (aka type annotations), see also PEP 3107 (Function Annotations)
  → https://peps.python.org/pep-0492[492] ☰ Coroutines with `async` and `await` syntax ☰ See also the `→ development/languages/Python/standard-library/asyncio` standard library.
  → https://peps.python.org/pep-0517[517] ☰ A build-system independent format for source trees ☰ See also the command line options `--use-pep517` and `--check-build-dependencies`  of `→ development/languages/Python/installation/directory/Scripts/pip install`.
  → https://peps.python.org/pep-0518/[518] ☰ Specifying Minimum Build System Requirements for Python Projects ☰ See also the command line option `--no-build-isolation`  of `→ development/languages/Python/installation/directory/Scripts/pip install`.
  → https://peps.python.org/pep-0584/[584] ☰ Add Union Operators To `→ development/languages/Python/types/dict` ☰ Add the merge (`|`) and update (`|=`) → development/languages/Python/operators to the built-in `dict` (and other) classes.
  → https://peps.python.org/pep-0572[572] ☰ Assignment Expressions ☰ Introduction of the → development/languages/Python/operators/walrus.
  → https://peps.python.org/pep-0602/[602] ☰ Annual Release Cycle for Python ☰ Each year, a major  Python version (3.x) is released in October (see also → https://peps.python.org/_images/pep-0602-example-release-calendar.png[this example release calendar]).
  → https://peps.python.org/pep-0622/[622], → https://peps.python.org/pep-0634/[634], → https://peps.python.org/pep-0635/[635], → https://peps.python.org/pep-0636/[636] ☰ Structural Pattern Matching: Specification, Motivation and Rationale, Tutorial ☰ See the → development/languages/Python/PEP/Structurual-Pattern-Matching[notes on Structurual Pattern Matching].
  → https://peps.python.org/pep-0668/[668] ☰ Marking Python base environments as “externally managed” ☰ See also → development/languages/Python/PEP/0668[these notes]
  → https://peps.python.org/pep-0686/[686] ☰ Make UTF-8 mode default ☰ Compare with → development/languages/Python/PEP/0263[PEP 263]
  → https://peps.python.org/pep-3107/[3107] ☰ Function annotations ☰ Support for arbitrary annotations to → development/languages/Python/functions definitions (without meaning to the interpreter) 
  → https://www.python.org/dev/peps/pep-3120[3120] ☰ Using → development/Unicode/UTF-8 as the default source → development/Unicode/character-encoding[encoding] ☰ See also PEP 263
  → https://peps.python.org/pep-3333[3333] ☰ Python Web Server Gateway Interface v1.0.1 (WSGI) ☰ Noteably, → https://www.tornadoweb.org/[Tornado] is not based on WSGI. PEP 3333 supersedes 333. See also → development/languages/Python#py-web-app-frameworks[web app frameworks]. My notes about PEP 3333 are → development/languages/Python/PEP/3333[here].
table }

sa:
  
  → development/languages/Java (or OpenJDK?) has JEPs (JDK Enhancement Proposals).

  → Linux/distributions/Gentoo#gentoo-glep[Gentoo GLEPs] are very similar in nature to PEPs.

links:
  → https://github.com/python/peps[This github repository] hosts (all?) PEPs that are automatically published at → https://peps.python.org/.
