$ Python: literals

A numerical value can be represented in hexadecimal representation by prefixing it with `0x`
code {
>>> 0xdeadbeef
3735928559
code }

Similarly, a numerical value can also be represented as in ocal representation by prefixing it with `0o` (the first character is a zero, the second one an upper or lowercase `o`).
code {
>>> 0o777
511
code }

Strings in double quotes. Note how two strings are automatically concatenated:
code {
>>> print("foo\nbar\\baz" " x\"y")
foo
bar\baz x"y
code }

Strings in single quotes:
code {
>>> print('foo\nbar\\baz' ' x\'y')
foo
bar\baz x'y
code }

In R-strings, a backslash has no special meaning and represents itself. The R of the R-String stands for raw.
code {
>>> print(r"foo\bar")
foo\bar
code }

An R-string cannot have a trailing slash!
code {
>>> print(r"foo\bar\")
…
SyntaxError: EOL while scanning string literal
code }

A traling slash can be added by the automatic string concatenation:
code {
>>> print(r"foo\bar" "\\")
foo\bar\
code }

Strings with «triple quotes»:
code {
>>> txt = """foo
... bar\n
... baz"""
>>>
>>> print(txt)
foo
bar

baz
code }

`b'…'` creates a → development/languages/Python/types/bytes[`bytes`] object:
code {
>>> name = b'Ren\xc3\xa9'
>>> type(name)
<class 'bytes'>
>>> print(name.decode('→ development/Unicode/UTF-8[utf-8]'))
René
code }

Even literals have an identity:
code {
>>> → development/languages/Python/built-in-functions/id[id](42)
140707326270400
code }
