$ Python: Literals

{ Numerical literals

  A numerical value can be expressed in its ~hexadecimal representation~ by prefixing it with `0x`
code {
>>> 0xdeadbeef
3735928559
code }

  Similarly, a numerical value can also be expressed as in ~octal representation~ by prefixing it with `0o` (the first character is a zero, the second one an upper or lowercase `o`).
code {
>>> 0o777
511
code }

  In numerical literals, *underscores* can be used to make them more readable by a human eye. Such underscores are simply skipped by the parser.
code {
>>> print(21_000_000_000 / 7_000_000)
3000.0
code }

  A number that is suffixed with a `j` becomes a ~complex~ number:
code {
>>> type(4.2j)
<class 'complex'>
code }

}
{ String literals #py-string-literals

  Strings in ~double quotes~. Note how two strings are automatically concatenated:
code {
>>> print("foo\nbar\\baz" " x\"y")
foo
bar\baz x"y
code }

  Strings in ~single quotes~:
code {
>>> print('foo\nbar\\baz' ' x\'y')
foo
bar\baz x'y
code }

  With ~R-strings~, a backslash has no special meaning and represents itself. The R of the R-String stands for raw.
code {
>>> print(r"foo\bar")
foo\bar
code }

  An R-string cannot have a trailing slash!
code {
>>> print(r"foo\bar\")
…
SyntaxError: EOL while scanning string literal
code }

  A trailing slash can be added by the automatic string concatenation:
code {
>>> print(r"foo\bar" "\\")
foo\bar\
code }

  An ~f-string~ replaces expressions within curly braces with they values the evaluate to. The f in f-strings stands for formatted string:
code {
>>> a=7
>>> b=6
>>> print(f'{a} * {b} = {a*b}')
7 * 6 = 42
code }

  In f-strings, a number can be printed with a comma as thousand separator like so:
code {
>>> cost_per_item = 19_999
>>> items = 61
>>> print(f'Total cost: {cost_per_item * items:,}')
Total cost: 1,219,939
code }

  Strings with «triple quotes»:
code {
>>> txt = """foo
... bar\n
... baz"""
>>>
>>> print(txt)
foo
bar

baz
code }

}
{ bytes object

  `b'…'` creates a → development/languages/Python/types/bytes[`bytes`] object:
code {
>>> name = b'Ren\xc3\xa9'
>>> type(name)
<class 'bytes'>
>>> print(name.decode('→ development/Unicode/UTF-8[utf-8]'))
René
code }

}
{ Identity of literals

  Even literals have an identity:
code {
>>> → development/languages/Python/built-in-functions/id[id](42)
140707326270400
code }

}
