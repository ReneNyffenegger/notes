

{ Install Python #py-install

  { Windows #py-install-win

    On → Windows, Python can be installed with → Windows/Chocolatey:
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y python
code }

    A pre-release version can be installed with the `--pre` option:
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y python --pre 
code }

  }

}
{ Packages and modules #python-packages-modules

  Analogy:
   • Packages correspond to directories. Separator is `.` (rather than `/`).
   • → development/languages/Python/module[Modules] correspond to files within those directories.
  However, there is no need for packages and modules to actually exist as files or directories.

  All packages are also modules, but only modules with a `__path__` attribute are also a package.

  There are two types of packages:
    • regular packages (with `__init__.py`)
    • namespace packages (without `__init__.py`)

  Code within one module can access code in another module by → development/languages/Python/statements/import[importing] it.

  See also → development/languages/Python/standard-library/sys#python-sys-modules[sys.modules].

}
{ Objects

  → development/languages/Python/objects[Objects]

}
{ __builtins__

→ development/languages/Python/dunders/__builtins__[`__builtins__`] is a *module* that is loaded when a Python interpreter is started up:
code {
>>> → development/languages/Python/built-in-functions/type(__builtins__)
<class 'module'>
code }

  This module contains Python's «built-in» stuff, such as → development/languages/Python/built-in-functions[built-in functions] or → development/languages/Python/exception-handling[exceptions].
  
  The module's content can be browsed with → development/languages/Python/built-in-functions/dir[`dir()`] (which itself is located in the `__builtins__` module):
code {
>>> → development/languages/Python/built-in-functions/dir[__builtins__.dir](__builtins__)
['ArithmeticError', 'AssertionError', 'AttributeError', '→ development/languages/Python/exception-handling#py-ex-BaseException[BaseException]', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError',
'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError',
'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError',
'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning',
'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning',
'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning',
'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any',
'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',
'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', ' len', 'license', 'list', 'locals', 'map', 'max',
'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple',
'type', 'vars', 'zip']
code }

}
{ Scopes and namespaces

  A *namespace* maps names to objects and are typically implemented using Python-dictionaries.

  Some namespaces include
    • Names of → development/languages/Python/built-in-functions[built-in functions]
    • Names of exceptions
    • A module's global name
    • The local names in a function's invocation

  A Python statement executes in a (nested) *scope* which determines how identifiers are resolved so that it is not always necessary to write `ns.ident` to refer to `ident` in namespace `ns`.
  -
  The order of searching is:
  table { ll
    Innermost (local) scope ☰ This scope contains the *local* names
    Scopes of call-chain ☰ If an identifier is not found in the innermost scope, the interpreter tries to resolve them by going up the call-chain (call-stack, if you will)
    Current module's global names ☰ If still not found, the current module's global names are tried. This is also the scope where *globally* declared names live.
   `__builtins__` ☰ As a last resort, the `__builtins__` (and others?) namespace is searched.
  table }

  With the exception of using the → development/languages/Python/statements/global[`global`] or → development/languages/Python/statements/nonlocal[`nonlocal`] statement, all identifiers are created in the namespace that
  is associated with the local scope, noteably by
  → development/languages/Python/operators/assignment[assigning] a value to non existing name or when using the → development/languages/Python/statements/import[`import`] statement.
  -
  Another exception to that «rule» is → development/languages/Python/statements/import#py-from-mod-import-star[`from MODULE import *`]: it places the identifiers of MODULE in the global namespace.

  The name of the scope in which *top-level code* executes is `'__main__'`.


}
{ Attributes

  An *attribute* is anything after a dot.

  Attributes may be read-only or writeable.
  -
  The value of writeable attributes can be changed with the assignment operator, and writeable attributes can be removed with → development/languages/Python/statements/del[`del()` statement]. (TODO: can they also be removed
  with the → development/languages/Python/built-in-functions/delattr[`delattr()` built-in function]?)


}
{ Python scripts

  { Arguments #py-scripts-arguments

    Arguments that were passed to a Python script can be accessed with → development/languages/Python/standard-library/sys#py-sys-argv[`sys.argv`]:
code {
import sys

if len(sys.argv) < 4:
   print('Script expected at least three arguments')
   sys.exit(-1)

#
# Script name is in sys.argv[0].
# Save value and remove from list:
#
scriptName = sys.argv[0]
del sys.argv[0]

print('Arguments that were passed to ' + scriptName + ':')
for arg in sys.argv:
    print('  - ' + arg)
code }

  }

}
{ UTF-8 Source code

  By default, the Python interpreter assumes source code to be → development/Unicode/character-encoding[encoded] in → development/Unicode/UTF-8. (Is this true for all versions).

  The encoding of a file can be epxlicitely set to a specific encoding (`ENCODING-NAME`, for example `cp1252`) with the following *first* line (after the optional shebang) in a source file
code {
# -*- coding: ENCODING-NAME -*-
code }


}
{ .pyd files

 → development/filename-extensions#pyd[`.pyd`] files are Python → Windows/development/Portable-Executable/DLL[DLLs]. Such files can be imported with `import xyz` (without stating the `.pyd` suffix). This DLL must be located
  in a directory that is pointed at with the `PYTHONPATH` → development/environment-variable[environment variable](?) in order to be found.

  Such a `.pyd` file must export a `PyInit_xyz()` function (`xyz` corresponds to the filename).

}
{ Misc

  Python assumes an `unsigned char` to be 8-bit (as per comment in `Python.h`)

  During initialization, → development/languages/Python/installation/directory/Lib/site_py[`Lib/site.py`] is automatically imported. This module appends site-specific paths to the module search path.

  With the May 2019 Update of → Windows/versions/10, Python comes with the Windows installation.

  { Wheel #py-wheel

    A *wheel* is a *package* in → development/archive-files/zip format and the
    → development/filename-extensions[file name exentsion] `.whl`.

    The advantage of the wheel format is that a package does not need to be recompiled when it is installed on a particular machine.

    The wheel format is defined in → development/languages/Python/PEP 427. 

  }

}

sa:
  → development/languages/Python/code-snippets

  → development/languages/Python/statements and
  → development/languages/Python/operators

  → development/languages/Python/standard-library

  → development/languages/Python/qualified-name

  → development/languages/Python/exception-handling

  The → development/languages/Python/types/string[string] and
  → development/languages/Python/types/dict[dict] types.

  → Linux/fhs/home/username/_pythonrc_py

  On → Windows, → Windows/dirs/Windows/py_exe[`py.exe`] can be used to execute a Python script under a specific version.

  Other → development/languages[programming languages] etc.

  The reference implementation for Python is → development/languages/Python/CPython.

  On → Windows: → Windows/dirs/Users/username/AppData/Local/Programs/Python[`%LOCALAPPDATA%\Programs\Python`]
