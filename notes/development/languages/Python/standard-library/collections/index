$ Python standard library: collections

The `collections` implements specialized container datatypes providing alternatives to Python's general purpose built-in containers:
`→ development/languages/Python/types/dict`, `→ development/languages/Python/types/list`, `→ development/languages/Python/types/set` and `→ development/languages/Python/types/tuple`.

table { ll

   `_chain`      ☰ `itertools.chain` class
   `ChainMap`    ☰ dict-like class for creating a single view of multiple mappings
   `_collections_abc` ☰ Module
   `_count_elements()` ☰
   `Counter`     ☰ Dict subclass for counting hashable objects
   `defaultdict` ☰ Dict subclass that calls a factory function to supply missing values
   → development/languages/Python/standard-library/collections/deque[`deque`] ☰ list-like container with fast appends and pops on either end
   `_eq()` ☰
   `_heapq` ☰ Module
   `_iskeyword()` ☰ Built-in function
   `_itemgetter` ☰ `operator.itemgetter` class
   `_Link` ☰ `collections._Link` class
   → development/languages/Python/standard-library/collections/namedtuple[`namedtuple()`]  ☰ factory function for creating tuple subclasses with named fields
   → development/languages/Python/standard-library/collections/OrderedDict[`OrderedDict`] ☰ dict subclass that remembers the order entries were added
   `_OrderedDictItemsView` ☰
   `_OrderedDictKeysView` ☰
   `_OrderedDictValuesView` ☰
   `_proxy()` ☰ Built-in function
   `_recursive_repr()` ☰
   `_repeat` ☰ `itertools.repeat` class
   `_starmap` ☰ `itertools.starmap` class
   `_sys` ☰ Module
   `_tuplegetter` ☰ `_collections._tuplegetter` class

   `UserDict`    ☰ wrapper around dictionary objects for easier dict subclassing
   `UserList`    ☰ wrapper around list objects for easier list subclassing
   `UserString`  ☰ wrapper around string objects for easier string subclassing

table }

sa:
 `→ development/languages/Python/standard-library/collections/abc`
