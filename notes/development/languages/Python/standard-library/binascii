$ Python standard library: binascii
@ binascii


table { ll
  `a2b_base64()` ☰ Built-in function
  `a2b_hex()` ☰ Built-in function
  `a2b_qp()` ☰ Built-in function
  `a2b_uu()` ☰ Built-in function
  `b2a_base64()` ☰ Built-in function
  `b2a_hex()` ☰ Built-in function
  `b2a_qp()` ☰ Built-in function
  `b2a_uu()` ☰ Built-in function
  `crc32()` ☰ Built-in function
  `crc_hqx()` ☰ Built-in function
  `__doc__` ☰ `str` object
  `Error` ☰ `binascii.Error` class
  `hexlify()` ☰ Built-in function
  `Incomplete` ☰ `binascii.Incomplete` class
  `__loader__` ☰ `_frozen_importlib.BuiltinImporter` class
  `__name__` ☰ `str` object
  `__package__` ☰ `str` object
  `__spec__` ☰ ?
  `unhexlify()` ☰ Built-in function
table }

{ Base 64 encoding/decoding #py-binascii-base64

 `b2a_base64` converts a bytes object to a → development/Base64 representation.
  -
 `a2b_base64` does the opposite.

code {
>>> → development/languages/Python/statements/import binascii
>>> print(binascii.b2a_base64(b'hello world', newline=False).decode('ascii'))
aGVsbG8gd29ybGQ=
>>> print(binascii.a2b_base64(b'aGVsbG8gd29ybGQ=').decode('ascii'))
hello world
code }

}

{ Convert bytes to hexadecimal representation and vice versa #py-binascii-hex

code {
>>> binascii.hexlify(b'Rene\x17')
b'52656e6517'
>>> binascii.unhexlify(b'52656e6517')
b'Rene\x17'
code }

  Note that `hexlify()` returns a `→ development/languages/Python/types/bytes` object.
  -
  A string object can be obtained by directly calling `.hex()` on the bytes object:
code {
>>> b'ABC'.hex()
'414243'
code }

}
