$ Python standard library: re
@ re

Python's → development/languages/Python/standard-library[standard library] `re` manages → development/regular-expressions.


table { ll
  `Match` ☰
  `Pattern` ☰
  `RegexFlag` ☰
  `Scanner` ☰
  `T` ☰
  `TEMPLATE` ☰
  `U` ☰
  `UNICODE` ☰

  `compile()` ☰
  `copyreg` ☰
  `enum` ☰
  `error` ☰
  `escape()` ☰
  → #py-re-findall[`findall()`] ☰ Matches *all* occurences of a pattern (unlike → #py-re-search[`search()`] which only matches the first one) and returns them as a → development/languages/Python/types/list of strings or → development/languages/Python/types/tuple[tuples].
  `finditer()` ☰
  `fullmatch()` ☰
  `functools` ☰
  `match()` ☰ Checks for a match *at the beginning* of a string. → #py-re-search-vs-match[Compare with `search()`]
  `purge()` ☰
  → #py-re-search[`search()`] ☰ Matches *one* regular expression anywhere in a string. → #py-re-search-vs-match[Compare with `match()`] and → #py-re-findall[`findall()`].
  `split()` ☰ Creates a → development/languages/Python/types/list from a string. The regular expression is used to determine where the string is divided.
  `sre_compile` ☰
  `sre_parse` ☰
  → #py-re-sub[`sub()`] ☰ Replace matched text with a constant value or the value a function returns.
  `subn()` ☰
  `template()` ☰

  `_MAXCACHE` ☰
  `_cache` ☰
  `_compile()` ☰
  `_compile_repl` ☰
  `_expand()` ☰
  `_locale()` ☰
  `_pickle()` ☰
  `_special_chars_map` ☰
  `_subx()` ☰

table }

{ flags

  Some functions in the `re` module (such as `re.compile()`) have a `flags` parameter which specifies further characteristics of the regular expression. The value of this parameter
  is added from one or more the following values:
  table { lllrl
    `re.A` ☰ `re.ASCII`      ☰ `(?a)` ☰ 256 ☰ `\w` etc match → development/Unicode/ASCII characters only (default is that `\w` etc. match → development/Unicode characrters)
           ☰ `re.DEBUG`      ☰        ☰ 128 ☰ print debug information about compiled regexp
    `re.I` ☰ `re.IGNORECASE` ☰ `(?i)` ☰   2 ☰ match case insensitively
    `re.L` ☰ `re.LOCALE`     ☰ `(?L)` ☰   4 ☰ `\w` etc. mtach case insensitively depending on the current → development/locale
    `re.M` ☰ `re.MULTILINE`  ☰ `(?m)` ☰   8 ☰ `^` matches start of string *or* character after → development/line-break[new line]
    `re.S` ☰ `re.DOTALL`     ☰ `(?s)` ☰  16 ☰ `.` matches all chracters inclusively → development/line-break[new line]
    `re.X` ☰ `re.VERBOSE`    ☰ `(?x)` ☰  64 ☰ allow to write more readable regexpes.
  table }

}

{ Simple script

  gh|about-python|/standard-library/re/script.py||

}
{ search #py-re-search

 `re.search()` returns a → development/languages/Python/standard-library/re/Match[`re.Match`] object.

  gh|about-python|/standard-library/re/search-1.py||

  gh|about-python|/standard-library/re/search-2.py||

  Using `if match := re.search…` to put the `if` statement the return value of `re.search` in one line:
  gh|about-python|/standard-library/re/search-3.py||

}
{ findall #py-re-findall

  gh|about-python|/standard-library/re/findall.py||

  { Return a list of tuples

    In the following example, the pattern contains parantheses. Each match is returned as a → development/languages/Python/types/tuple where the values of the text matched in the parantheses is captured in the
    elements of the tuple.
code {
import re
for pair in re.findall('(\w+): (\d+)', 'foo: 42; bar: 99; baz: 0'):
    print(pair[0] + ' = ' + pair[1]) 
code }

  }

}
{ search() vs match() #py-re-search-vs-match

 → #py-re-search[`re.search()`] searches within the entire text while `match()` only searches from the text's start.

  Both, `re.search()` and `re.match()` return a → development/languages/Python/standard-library/re/Match[`re.Match`] object.

}
{ sub #py-re-sub

  { Replace a range

    Replace every character between `g` and `p` with an asterik.

    Note the *unintuitive* order of parameters: First the pattern, then the replacement and *only then* the text on which the replacement is to take place.

    gh|about-python|/standard-library/re/replace-range.py||

  }
  { Replace with the result of a function

code {
import re
def double(m):
    print(type(m.group(0)))
    return str(2 * int(m.group(0)))

print(re.sub(r'\d+', double, 'foo 42 bar 99 baz'))
code }

  }

}
{ Iterate over words in a text

  The following example iterates over the words in a piece of text and skips punctuation:
  gh|about-python|/standard-library/re/split-text-into-words.py||

}
{ Extract first line from a text

  gh|about-python|/standard-library/re/extract-first-line-from-text.py||

}
{ Using the returned search() object in an if statement 

  With the → development/languages/Python/operators/walrus, it is possible to assign the the object that is returned by `search()` in an
  → development/languages/Python/statements/if[`if` statement]:

  gh|about-python|/standard-library/re/search-if.py||

}

sa:

  Some → development/languages/Python/standard-library/re/examples[simple examples]

  There is also a non-standard library named → https://pypi.org/project/regex[`regex`] that is compatible with `re` but offers additional functionality and a more
  thorough → development/Unicode support.
  -
  Among the additional functionality is the ability to match → development/Unicode properties (`\p{…}`)

  → development/languages/Python/standard-library

  → development/languages/Python/literals#py-string-literals[R-strings] (like `r'foo\bar\baz'`) are helpful to deal with the many backslashes used for regular expressions.
