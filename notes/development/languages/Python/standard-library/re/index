$ Python - regular expressions

Python's → development/languages/Python/standard-library[standard library] `re` manages → development/regular-expressions.

gh|about-python|/standard-library/re/script.py||

{ search

  gh|about-python|/standard-library/re/search-1.py||

  gh|about-python|/standard-library/re/search-2.py||

  gh|about-python|/standard-library/re/search-3.py||

}
{ findall

  gh|about-python|/standard-library/re/findall.py||

}
{ search() vs match()

  `search()` searches within the entire text while `match()` apparently only searches from the text's start.

}
{ Replace a range

  Replace every character between `g` and `p` with an asterik.

  Note the *unintuitive* order of parameters: First the pattern, then the replacement and *only then* the text on which the replacement is to take place.

  gh|about-python|/standard-library/re/replace-range.py||

}
{ Iterate over words in a text

  The following example iterates over the words in a piece of text and skips punctuation:
  gh|about-python|/standard-library/re/split-text-into-words.py||

}
{ Extract first line from a text

  gh|about-python|/standard-library/re/extract-first-line-from-text.py||

}
{ flags

  Some functions in the `re` module (such as `re.compile()`) have a `flags` parameter which specifies further characteristics of the regular expression. The value of this parameter
  is added from one or more the following values:
  table { lllrl
    `re.A` ☰ `re.ASCII`      ☰ `(?a)` ☰ 256 ☰ `\w` etc match → development/Unicode/ASCII characters only (default is that `\w` etc. match → development/Unicode characrters)
           ☰ `re.DEBUG`      ☰        ☰ 128 ☰ print debug information about compiled regexp
    `re.I` ☰ `re.IGNORECASE` ☰ `(?i)` ☰   2 ☰ match case insenstively
    `re.L` ☰ `re.LOCALE`     ☰ `(?L)` ☰   4 ☰ `\w` etc. mtach case insenstively depending on the current → development/locale
    `re.M` ☰ `re.MULTILINE`  ☰ `(?m)` ☰   8 ☰ `^` matches start of string *or* character after → development/line-break[new line]
    `re.S` ☰ `re.DOTALL`     ☰ `(?s)` ☰  16 ☰ `.` matches all chracters inclusively → development/line-break[new line]
    `re.X` ☰ `re.VERBOSE`    ☰ `(?x)` ☰  64 ☰ allow to write more readable regexpes.
  table }

}
{ Using the returned search() object in an if statement 

  With the walrus operator (`:=`, see → https://www.python.org/dev/peps/pep-0572[PEP 572]), it is possible to assign the the object that is returned by `search()` in an
  → development/languages/Python/statements/if[`if` statement]:

  gh|about-python|/standard-library/re/search-if.py||


}

sa:

  There is also a non-standard library named → https://pypi.org/project/regex[regex] that is compatible with `re` but offers additional functionality.

  → development/languages/Python/standard-library
