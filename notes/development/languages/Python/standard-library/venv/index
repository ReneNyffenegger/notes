$ Python standard library: venv
@ venv

The `venv` module can be used to create *virtual Python environments*. In each environment, a set of packages can be installed independently from another environment, thus reducing the
change of breaking functioniality when upgrading packages etc.
-
Such a virtual environment exists in a directory.

With Python 3.3, `venv` has become the preferred way to create and manage virtual environments.

{ Creating a virtual environment

  A virtual environment (in the directory `/path/to/the/env/dir`) is created like so:
code {
$ python → development/languages/Python/import-system/minus-m[-m] venv /path/to/the/env/dir
code }

}
{ Activating a virtual environment

  Within the created directory tree is a script that can be called from the command line to activate a virtual environment. This script is located in the subdirectory
  `/path/to/the/env/dir/Scripts` (Windows) or `/path/to/the/env/dir/bin` (Linux) and comes in multiple
  versions (→ Windows/PowerShell script, → Windows/dirs/Windows/System32/cmd_exe/batch-files[`cmd.exe` batch file],  c-shell etc.)

  This script is named `activate` and has the → development/filename-extensions[filename suffix] corresponding to the version.

  After activating a virtual environment, the most important effect seems to be that `/path/to/the/env/dir` and `/path/to/the/env/dir/lib/site-packages` are added to
  → development/languages/Python/standard-library/sys#python-sys-path[`sys.path`].

code {
$ /path/to/the/env/dir/bin/activate
(env) $ → Linux/shell/commands/which python
/path/to/the/env/dir/bin/python
…
(env) $ echo $VIRTUAL_ENV
/path/to/the/env/dir/bin
…
(env) $ python
>>> → development/languages/Python/statements/import → development/languages/Python/standard-library/sys
>>> → development/languages/Python/built-in-functions/print (sys.prefix)
/path/to/the/env/dir
code }

}
{ Deactivating a virtual environment

  When a virtual envioronment is activated, a global function named `deactivate` is made available to the shell.
  -
  Calling this function deactivates the environment:
code {
(env) $ deactivate
$ …
code }

}
{ Verifying if a virtual environment is active

  When a virtual environment is activated, the enviornment variable `VIRTUAL_ENV` is set.

  The value of this environment variable points to the directory with the virtual environment.

}
{ ModuleNotFoundError: No module named '…' 

  A Python script with a → Linux/shell/script/shebang[shebang] (`/usr/bin/python3`) that imports a
  module which was installed into a virtual directory is likely to throw the
 *ModuleNotFoundError: No module named '…'* error because `/usr/bin/python3` looks for the modules in
  the system's module directories rather than in the virtual environment's module directory. 

code {
$ ./the-script.py
ModuleNotFoundError: No module named '…'

$ python3 ./the-script.py
…
code }

}
{ Removing an environment

  If a virtual environment is not used anymore, it can be removed by deleting the directory:
code {
rm -rf /path/to/the/env/dir
code }

}
{ Debian/Ubuntu

code {
$ python3 -m venv ~/py-venv

The virtual environment was not created successfully because ensurepip is not
available.  On → Linux/distributions/Debian/[Debian]/→ Linux/distributions/Ubuntu[Ubuntu] systems, you need to install the python3-venv
package using the following command.

    apt-get install python3-venv

You may need to use sudo with that command.  After installing the python3-venv
package, recreate your virtual environment.
code }

}


links:

  Compare with → https://pypi.org/project/virtualenv/[virtualenv].

  → https://pypi.org/project/pipenv[Pipenv] is a Python virtual enviornment management tool.
