$ Python standard library: os
@ os

{ Iterating over files and directory (os.listdir, os.scandir) #py-os-listdir-scandir

  The functions `os.listdir` and `os.scandir` both allow to iterate (non-recursively) over files and directories in a given directory.

  The functionality `os.listdir()` was improved by `os.scandir().`
  -
  As per → development/languages/Python/PEP[PEP] https://www.python.org/dev/peps/pep-0471/[0471], using `os.scandir()` can improve the performance.

 `os.listdir()` returns bare filename strings.
 -
 `os.scandir()` returns `DirEntry` objects which also allow to query additional data for the individual files/directories, such as
   • `name`
   • `path`
   • `inode()`
   • `is_dir(…)`
   • `is_file(…)`
   • `is_symlink(…)`
   • `stat(…)`

  Both, `os.listdir()` and `os.scandir()` skip the special directory entries `.` and `..`.


  → development/languages/Python/standard-library/os/walk[`os.walk()`] might be used to iterate recursively.

}
{ Remove files and directories #py-os-remove-files-dirs

  Although Python has a → development/languages/Python/built-in-functions[built-in function] to create files (→ development/languages/Python/built-in-functions/open[`open()`]), it does not have
  a built-in function to remove them. The functionality to remove files (and directories) is found in `os`:
   • `os.remove()`
   • `os.removedirs()`
   • `os.rmdir()`

  In order to remove an entire directory tree, → development/languages/Python/standard-library/shutil#py-shutil-rmtree[`shutil.rmtree()`] can be used.

  Note that the functions to → development/languages/Python/standard-library/os/path#py-os-path-check-existence[check the existence of files and directories] are located in the standard library
  → development/languages/Python/standard-library/os/path[`os.path`].

}
{ Create directories #py-os-create-dirs

  The functions to create directories are
    • `os.mkdir()`
    • `os.makedirs()`

}
{ Print environment variables

  The following script uses `os.environ` to print the → development/environment-variable[environment variables] that are defined in the current session.

  Because the `PATH` environment variable is somewhat special because it consists of multiple paths, the script uses → development/languages/Python/standard-library/sys#python-sys-path[`sys.path`] to print the list of directories
  that are searched for when trying to → development/languages/Python/statements/import[import] a module.

  gh|about-python|/standard-library/os/environ.py||

}
{ system #py-os-system

 `os.system(cmd)` executes `cmd` in a subshell, using the → development/languages/C-C-plus-plus/C/libc[standard C] function `system()`.

  Consider replacing using `os.system` with functions found in the → development/languages/Python/standard-library/subprocess[standard library module `subprocess`].

}

sa:

  → development/languages/Python/standard-library/os/walk[`os.walk()`] allows to iterate over subdirectories and files in them.

  The → development/languages/Python/standard-library/os/path[`os.path`] module has some functions related to files and filename manipulation.

  The built-in function → development/languages/Python/built-in-functions/open[`open()`] reads or writes files.

  → development/languages/Python/standard-library
