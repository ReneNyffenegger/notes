$ Python standard library: io
@ io


{ dir(io)

code {
import io
for e in sorted(dir(io), key=lambda s: s.lower()): print(e)
code }

  table { ll
     `__all__` ☰
     `__author__` ☰
     `__builtins__` ☰
     `__cached__` ☰
     `__doc__` ☰
     `__file__` ☰
     `__getattr__` ☰
     `__loader__` ☰
     `__name__` ☰
     `__package__` ☰
     `__spec__` ☰
     `_io` ☰
     `_WindowsConsoleIO` ☰
     `abc` ☰
     `BlockingIOError` ☰
     `BufferedIOBase` ☰
     `BufferedRandom` ☰
     `BufferedReader` ☰
     `BufferedRWPair` ☰
     `BufferedWriter` ☰
     `BytesIO` ☰
     `DEFAULT_BUFFER_SIZE` ☰
     `FileIO` ☰
     `IncrementalNewlineDecoder` ☰
     `IOBase` ☰
     `open` ☰
     `open_code` ☰
     `RawIOBase` ☰
     `SEEK_CUR` ☰
     `SEEK_END` ☰
     `SEEK_SET` ☰
     `StringIO` ☰ The `StringIO` class creates a «file-like» object from a string, which allows to read from it as if it were a file. Compare with `→ development/languages/Python/standard-library/csv[csv].StringIO`.
     `text_encoding` ☰
     `TextIOBase` ☰
     `TextIOWrapper` ☰
     `UnsupportedOperation` ☰
  table }

}
{ File objects #python-io-file-object

  Python deals with three kinds of file objects.
    • binary files
    • buffered binary files
    • text files
 
  The interfaces for these interfaces are defined in the `io` module.

  See also the → development/languages/Python/built-in-functions/open[`open`] function.

}
{ StringIO #py-io-StringIO

  In → development/languages/Python, → development/languages/Python/types/string[strings] are immutable. So they cannot be modified in-place.

  However, with the `io` module, such an in-place modification can be simulated with `StringIO()`:
  gh|about-Python|/standard-library/io/StringIO.py||

  This example is from the → https://docs.python.org/3/faq/programming.html#how-do-i-modify-a-string-in-place[Python FAQ].

}
{ open #py-io-open

 `io.open()` is the same function as the built-in function → development/languages/Python/built-in-functions/open#py-open-is-io-open[`open()`].

}
{ Slurp content of file into a variable

  The content of an entire file can easily be read into a variable with the following construct. `__file__` needs to be replaced with the filename to be read:
code {
with open (__file__, 'r') as f:
     text = f.read()

print(text)
code }

}

sa:

  → development/languages/Python/standard-library
