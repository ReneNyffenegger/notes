$ Python: Using ctypes to get an object's reference counter

This example tries to demonstrate how the → development/languages/Python/standard-library/ctypes[`ctypes`] module can be used to access an object's
→ development/languages/Python/objects/reference-counter.

In → development/languages/Python/CPython (→ development/languages/Python[Python's] reference implementation), the built-in function → development/languages/Python/built-in-functions/id[`id(obj)`] returns the memory
address of the → development/languages/Python/objects[object] that the variable `obj` references. In the sources of CPython, this address is the memory location of the object's
reference counter (see definition of → development/languages/Python/CPython/sources/Include/object_h#PyVarObject[`Include/object.h`].
→ development/languages/Python/CPython/sources/Include/object_h[`Include/object.h`])

So, in the following Python script, we create two references to an object and use this object's `id()` to directly access the memory where the reference counter is stored and then print it twice, once with one reference pointing tot
the object and once with two references pointing to the object.

gh|about-Python|/standard-library/ctypes/ob_refcnt.py||

sa:

  An alternative way to get an object's reference cuont is to use → development/languages/Python/standard-library/sys/getrefcount[`sys.getrefcount(obj)`].
