$ Python standard library: json
@ json

{ Parsing JSON text

  A file-like object that contains → development/languages/JavaScript/JSON[JSON] data can be parsed into a `json` object using `load()`.
  -
 `loads()` is identical to `load()` except that the data is contained in a `str`, `bytes` or `bytearray` instance.

  This script demonstrates both `load()` and `loads()`:
  gh|about-python|/standard-library/json/script.py||

  This is the file that the script reads (`file.json`):
  gh|about-python|/standard-library/json/file.json||

}
{ Turning Python objects into JSON text

 `json.dumps(obj)` returns a JSON-string representation of the → development/languages/Python/objects[object] `obj`.

 `json.dump(obj, fs)` writes such a representation into a file that was opened with → development/languages/Python/built-in-functions/open[`open()`].
  gh|about-python|/standard-library/json/dump.py||

}

sa:
  The → development/languages/Python/standard-library/pickle[`pickle` module] allows to → development/languages/Python/objects#py-object-serialization[serialize] an arbitrarily complex
  → development/languages/Python/objects[object].

  Other → development/languages/Python/standard-library modules, such as
    • `dbm`
    • `→ development/languages/Python/standard-library/shelve`

  → development/languages/Python/standard-library/decimal#py-parse-json-floats[Parsing `float` values] in JSON objects.
