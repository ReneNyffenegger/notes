$ Python standard library: sys

gh|about-python|/standard-library/sys/script.py||

{ dir(sys)

  table { ll
    `__breakpointhook__` ☰
    `__displayhook__` ☰
    `__doc__` ☰
    `__excepthook__` ☰
    `__interactivehook__` ☰
    `__loader__` ☰
    `__name__` ☰
    `__package__` ☰
    `__spec__` ☰
    `__stderr__` ☰
    `__stdin__` ☰
    `__stdout__` ☰
    `__unraisablehook__` ☰
    `_base_executable` ☰
    `_clear_type_cache` ☰
    `_current_exceptions` ☰
    `_current_frames` ☰
    `_debugmallocstats` ☰
    `_enablelegacywindowsfsencoding` ☰
    `_framework` ☰
    `_getframe` ☰
    `_getquickenedcount` ☰
    `_git` ☰
    `_home` ☰
    `_stdlib_dir` ☰
    `_xoptions` ☰
    `addaudithook` ☰
    `api_version` ☰
    `argv` ☰
    `audit` ☰
    `base_exec_prefix` ☰
    `base_prefix` ☰
    `breakpointhook` ☰
    `builtin_module_names` ☰
    `byteorder` ☰
    `call_tracing` ☰
    `copyright` ☰
    `displayhook` ☰
    `dllhandle` ☰
    `dont_write_bytecode` ☰
    `exc_info` ☰
    `excepthook` ☰
    `exec_prefix` ☰ Root directory of *platform dependent* files, compare with `prefix`.
    `executable` ☰
    `exit` ☰
    `flags` ☰
    `float_info` ☰
    `float_repr_style` ☰
    `get_asyncgen_hooks` ☰
    `get_coroutine_origin_tracking_depth` ☰
    `getallocatedblocks` ☰
    `getdefaultencoding` ☰
    `getfilesystemencodeerrors` ☰
    `getfilesystemencoding` ☰
    `getprofile` ☰
    `getrecursionlimit` ☰
    `getrefcount` ☰
    `getsizeof` ☰
    `getswitchinterval` ☰
    `gettrace` ☰
    `getwindowsversion` ☰
    `hash_info` ☰
    `hexversion` ☰
    `implementation` ☰
    `int_info` ☰
    `intern` ☰
    `is_finalizing` ☰
    `maxsize` ☰
    `maxunicode` ☰
    `meta_path` ☰
    `modules` ☰
    `orig_argv` ☰
    `path` ☰
    `path_hooks` ☰
    `path_importer_cache` ☰
    `platform` ☰
    `platlibdir` ☰
    `prefix` ☰ The base directory of the installation, used to find the → development/languages/Python/standard-library[standard library] (for example `→ Linux/fhs/usr/lib` !). Compare with `exec_prefix`
    `ps1` ☰
    `ps2` ☰
    `pycache_prefix` ☰
    `set_asyncgen_hooks` ☰
    `set_coroutine_origin_tracking_depth` ☰
    `setprofile` ☰
    `setrecursionlimit` ☰
    `setswitchinterval` ☰
    `settrace` ☰
    `stderr` ☰
    `stdin` ☰
    `stdlib_module_names` ☰
    `stdout` ☰
    `thread_info` ☰
    `unraisablehook` ☰
    `version` ☰
    `version_info` ☰
    `warnoptions` ☰
    `winver` ☰
  table }

  This table was produced with
code {
import sys
for e in dir(sys): print(e)
code }

}

{ version_info

  gh|about-python|/standard-library/sys/version_info.py||

}
{ path #python-sys-path

 `sys.path` contains a list of directories that are searched for modules/packages when they are tried to be → development/languages/Python/statements/import[imported].

  The directories in this list include:
    • The directory of the script that is running. 
    • The directories that are listed in the `PYTHONPATH` → development/environment-variable[environment variable].
    • Defaults that are dependent on the installation (compilation?)

  The entries in `sys.path` may be modified after Python has initialized itself.

  If → development/languages/Python is started with the `-s` → development/languages/Python/command-line/options[command line option], the *user site directory* is not added to `sys.path`.

  Python allows to create *virtual environments* which is added to `sys.path` when activated, see the → development/languages/Python module → development/languages/Python/standard-library/venv[`venv`].

}
{ modules #python-sys-modules

 `modules` is a cache for all → development/languages/Python#python-packages-modules[modules] that were → development/languages/Python/statements/import[imported].

  gh|about-python|/standard-library/sys/modules.py||

}
{ executable #python-sys-executable

 `sys.executable` prints the *absolute path* of the Python interpreter (executable).

}
{ argv #py-sys-argv

 `sys.argv` is a → development/languages/Python/types/list of → development/languages/Python/types/string[strings] that stores the
  (relative) path of the currently running script in the first element and the command line arguments that are passed to the script in the remaining elements.

  gh|about-python|/standard-library/sys/argv.py||

  See also → development/languages/Python#py-scripts-arguments[arguments that were passed to a script] and
  → development/languages/Python/standard-library/argparse[`argparse` standard library] that allows to parse command line arguments.

}
sa:

  → development/languages/Python/standard-library/sys/stdin-stdout-stderr[`sys.stdin`, `sys.stdout` and `sys.stderr`]

  → development/languages/Python/standard-library/sys/getrefcount[`sys.getrefcount(obj)`] returns the → development/languages/Python/objects/reference-counter[reference counter] of `obj`.

  → development/languages/Python/standard-library
