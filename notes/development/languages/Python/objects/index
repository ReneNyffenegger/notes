$ Python: Objects
@ object

Every object has
  • an identity, the value of which is returned by → development/languages/Python/built-in-functions/id[`id(obj)`].
  • a → development/languages/Python/types[type] that determines what the object represents
  • a value according to the purpose of the object type
  • a → development/languages/Python/objects/reference-counter[reference counter]

An object's identity can be queried with → development/languages/Python/built-in-functions/id[`id(obj)`].

The Identities of two object can be compared with the → development/languages/Python/operators/is[`is` operator].

? Each object belongs to a → development/languages/Python/module.

The same object might be bound to any number of → development/languages/Python/variables[variables] (or more technically: entries in → development/languages/Python/internals/symbol-table[symbol tables])

{ Every object has a type #py-every-obj-has-type

  Every object has → development/languages/Python/types[type]. This type determines the abilities of an object and by extension what an object represents.

  Because in Python a type is also an object, the type of a type is the type → development/languages/Python/types/type[`type`].

  The → development/languages/Python/built-in-functions[built-in] function → development/languages/Python/built-in-functions/type[`type(obj)`] returns the type-object of `obj`.

  gh|about-Python|/objects/objects-have-a-type.py||


}
{ Serialization (persistation) #py-object-serialization

  Python objects might be serialized (persisted) with the → development/languages/Python/standard-library/pickle[`pickle`],
 `→ development/languages/Python/standard-library/shelve` or
  → development/languages/Python/standard-library/json[`json`] module.

}
{ Mutable vs immutable objects

  Python distinguishes between mutable and immutable objects.

}
{ Internal C structures and mechanisms

  CPython stores a Python object internally in a → development/languages/Python/CPython/sources/Include/object_h#PyObject[`PyObject`] or
  → development/languages/Python/CPython/sources/Include/object_h#PyVarObject[`PyVarObject`] (if variable size) struct (both defined
  in → development/languages/Python/CPython/sources/Include/object_h[`Include/object.h`])

  All objects except *type objects* are always allocated on the heap, never on the stack.

  The characteristics of a given type are stored in a → development/languages/Python/CPython/sources/Include/cpython/object_h#PyTypeObject[`PyTypeObject`] struct.

}
{ __dir__

  If `obj` is an object that has a method named `__dir__`, this method will be called by → development/languages/Python/built-in-functions/dir[`dir(obj)`].
  
  This is typically used in conjuction with `__getattr__()` and/or `__getattribute__()`.

}

sa:

  → development/languages/Python/objects/evaluating-in-boolean-context[Evaluating objects in boolean contexts], such as 
  → development/languages/Python/statements/if[`if`] or 
  → development/languages/Python/statements/while[`while`] statements.

  → development/languages/Python/objects/callable[callable objects] somewhat behave like → development/languages/Python/functions[functions].

  An object that stores references to other objects are → development/languages/Python/objects/containers[containers].

  → development/languages/Python/CPython: → development/languages/Python/CPython/sources/Include/cpython/object_h[`Include/cpython/object.h`] and
  → development/languages/Python/CPython/sources/Include/object_h[`Include/object.h`].

  A → development/languages/Python/objects/descriptor is an object that defines one of the → development/languages/Python/dunders[dunders] `__get__`, `__set__` and `__delete__`.

  A → development/languages/Python/types/string representation of the object `obj` is returned by the built-in function → development/languages/Python/built-in-functions/str[`str(obj)`].

  The → development/languages/Python/dunders/__repr__[`__repr__()`] method, if defined, returns a represenation of the object as a string.
