$ Python: context manager
@ context manager

A *context manager* is an → development/languages/Python/objects that is meant to *manage allocation and freeing of resources*. Such objects are able to be used in conjunction with the
→ development/languages/Python/statements/with[`with` statement].

A context manager needs to implement the → development/languages/Python/dunders/__enter__[`__enter__`] and → development/languages/Python/dunders/__exit__[`__exit__`] methods.

{ Typical example

  A *typical example* for a context manager is using → development/languages/Python/built-in-functions/open[`open()`] together with a → development/languages/Python/statements/with[`with` statement] like
so:
code {
with open('foo.txt') as f:
     text = f.read()
code }

  When the `with` block is exited, the context manager automatically calls the `f.close()`.

}

sa:
  → development/languages/Python/standard-library/contextlib/contextmanager[`contextmanager`] (in the → development/languages/Python/standard-library `contextlib`) is a → development/languages/Python/functions/decorators that turns a
  → development/languages/Python/functions into a context manager.
