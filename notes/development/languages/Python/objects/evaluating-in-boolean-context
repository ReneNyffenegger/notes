$ Python: evaluating objects in boolean context

Every → development/languages/Python/objects can be evaluated in a boolean context, such as → development/languages/Python/statements/if[`if`] or → development/languages/Python/statements/while[`while`] statements.

The following exmaples demonstrate the rules that determine if an object is considered to be `True` or `False`.

{ Objects without __bool__() and __len__() are True

  An object that has neither a → development/languages/Python/dunders/__bool__[`__bool__`] nor a
  → development/languages/Python/dunders/__len__[`__len__`] method is considered to be true.

  gh|about-Python|/objects/evaluating-in-boolean-context/no-bool-no-len.py||

}
{ __bool__() determines the truthness of an object

  If the object has a `__bool__()` method is `False` the returned value of `__bool__()` determines the truthness of the object.

  gh|about-Python|/objects/evaluating-in-boolean-context/with-bool.py||

  Note that Python expects `__bool__()` to return a *bool*, otherwise, it throws a `TypeError` exception (`TypeError: __bool__ should return bool, returned …`).

}
{ __len__() is tried if __bool__() is missing

  If an object does not have a `__bool__()` method, but does have a `__len__()` method, the returned value determines the Truthness of an object. If the returned value is `0`, the object is `False`, otherwise, it is `True`.

  gh|about-Python|/objects/evaluating-in-boolean-context/with-len.py||

  Note that Python does not expect `__len__()` to return an *int*.

}
{ __bool__() takes precedence over __len__()

  When evaluated in a boolean context, `__bool__()` takes precedence over `__len__()`, that is: `__len__()` is not even called.

  gh|about-Python|/objects/evaluating-in-boolean-context/with-bool-and-len.py||

}

sa:
  → development/languages/Python/built-in-functions/next#py-next-None[Beware of `None` in `while X := next(I)`] 
