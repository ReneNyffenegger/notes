$ Python: del
@ del

{ Removing a variable

  `del(var)` removes a variable. After deleting it, the name of the variable is not known anymore. If such a deleted variable is then evaluated, a `NameError` exception is thrown.

}
{ Deleting elements in a list #py-del-list

 `del()` can be used to remove elements from a → development/languages/Python/types/list, thereby effectively shrinking size of the list by one element:
  gh|about-Python|/builtin-functions/del/list.py||

}
{ Deleting keys from a dict #py-del-dict

 `del()` also removes elements from a → development/languages/Python/types/dict. If the requsted key does not exist, `del()` throws a `KeyError` exception:
  gh|about-Python|/builtin-functions/del/dict.py||

}
{ Calling __del__()

  Because `del(obj)` removes the reference to the → development/languages/Python/objects that `obj` points to, the object's
  → development/languages/Python/objects/reference-counter is decremented.

  When the reference counter reaches zero, the object's → development/languages/Python/dunders/__del__[`__del()__`] method is called.


}

sa:
  → development/languages/Python/built-in-functions
