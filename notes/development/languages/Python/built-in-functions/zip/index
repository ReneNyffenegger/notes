$ Python: zip
@ zip

The built-in function `zip` has nothing to do with → development/archive-files/zip[zip files]. Rather, it creates an → development/languages/Python/iterable/iterator[iterator] from a set of other iterators. The
created iterator emits → development/languages/Python/types/tuple[tuples] when it is iterated over. The elements of the n-nth tuple correspond to the n-th element in the input-iterators.

gh|about-python|/builtin-functions/zip/3-lists.py||

{ Unequal length of «input» iterators

  If the «input»-iterators provide an unequal number of elements, the `zip()` function just stops after finishing the shortest iterator:
  gh|about-python|/builtin-functions/zip/unequal.py||

}
{ Unzipping

  Note the → development/languages/Python/functions/parameters#py-arg-unpack[star (aka unpack) operator ].

  gh|about-python|/builtin-functions/zip/unzip.py||

}
{ Transposing a matrix #py-zip-transpose

  gh|about-python|/builtin-functions/zip/transpose.py||

  Compare with → development/languages/Python/types/list/comprehension#py-list-comprehension-transpose[transposing a matrix with list comprehension].

}

sa:

  Using the → development/languages/Python/statements/for[`for`] statemet to → development/languages/Python/statements/for#py-for-zip[iterate over multiple lists in parallel].

  → development/languages/Python/built-in-functions

  The shell command `→ Linux/shell/commands/paste`

  → development/databases/DuckDB#duckdb-positional-joins[Positional joins] in → development/databases/DuckDB.

 `mapcar` in Lisp.
