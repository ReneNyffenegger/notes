$ Python: reversed (built-in function)
@ reversed

In order to be able to call `reversed(obj)` on the → development/languages/Python/objects `obj`, `obj` is required to implement either
  • → development/languages/Python/dunders/__len__[`__len__()`] and → development/languages/Python/dunders/__getitem__[`__getitem__()`], or
  • → development/languages/Python/dunders/__reversed__[`__reversed__()`]

{ Using __len__() and __getitem__()

  The following example demonstrates how `reversed()` is used on an object that implements `__len__()` and `__getitem__()`:
  gh|about-Python|/builtin-functions/reversed/len-getitem.py||

}
{ Using __reversed__() #py-reversed-reversed

  This example uses `__reversed__()` together with the → development/languages/Python/statements/yield[`yield`] statement:
  gh|about-Python|/builtin-functions/reversed/reversed.py||

}
{ Iterating over strings, lists etc.

  Of course, because → development/languages/Python/types/string[strings], → development/languages/Python/types/list[lists] and other → development/languages/Python/iterable/sequence[sequence types] implement
 `__len__()` and `__getitem__()`, the can be iterated over in reversed order:


  gh|about-Python|/builtin-functions/reversed/other.py||

}
{ TypeError

  `reversed()` throws a `TypeError` exception if the → development/languages/Python/objects that is given to the function does not adhere to the required protocol (*TypeError: '…' object is not reversible*).

}

sa:
  → development/languages/Python/built-in-functions
