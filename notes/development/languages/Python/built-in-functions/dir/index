$ Python: dir
@ dir


After starting a python shell, `dir()` prints
code {
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__']
code }

→ development/languages/Python/statements/import[Importing] a module adds its name the local scope:
code {
>>> import xml
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'xml']
code }

The attributes in `xml` can now be queried with `doc(xml)`:
code {
>>> dir (xml)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__']
code }

Importing a «sub-module» (if this is the correct terminology) does not add anything to the current local scope:
code {
>>> import xml.dom.minidom
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'xml']
code }
 
However, it is listed in the attribute list of `xml`:
code {
>>> dir(xml)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'dom']
>>> dir (xml.dom)
['DOMException', 'DOMSTRING_SIZE_ERR', 'DomstringSizeErr', 'EMPTY_NAMESPACE', … etc. etc. … ]
code }

A name can be removed from a namespace with the → development/languages/Python/statements/del[`del` statement:
code {
>>> → development/languages/Python/statements/del xml
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__']
code }


sa:
  → development/languages/Python/built-in-functions
