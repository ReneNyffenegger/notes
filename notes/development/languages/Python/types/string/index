$ Python: str (string)
@ str

A *str* (string) is a → #py-strings-immutable[immutable] → development/languages/Python/iterable/sequence of → development/Unicode/Codepoints[Unicode code points].


{ Members of str

  A list of members of `str` can be produced with `dir`:
code {
for e in dir(str): print(e)
code }


  table { ll

   `__add__` ☰
   `__class__` ☰
   `__contains__` ☰
   `__delattr__` ☰
   `__dir__` ☰
   `__doc__` ☰
   `__eq__` ☰
   `__format__` ☰
   `__ge__` ☰
   `__getattribute__` ☰
   `__getitem__` ☰
   `__getnewargs__` ☰
   `__gt__` ☰
   `__hash__` ☰
   `__init__` ☰
   `__init_subclass__` ☰
   `__iter__` ☰
   `__le__` ☰
   `__len__` ☰
   `__lt__` ☰
   `__mod__` ☰
   `__mul__` ☰
   `__ne__` ☰
   `__new__` ☰
   `__reduce__` ☰
   `__reduce_ex__` ☰
   `__repr__` ☰
   `__rmod__` ☰
   `__rmul__` ☰
   `__setattr__` ☰
   `__sizeof__` ☰
   `__str__` ☰
   `__subclasshook__` ☰
   `capitalize`, `lower`, `upper`, `swapcase` ☰
   `casefold` ☰
   `center` ☰
   `count` ☰
   `encode` ☰
   `endswith` ☰
   `expandtabs` ☰
   `find`, `rfind` ☰
   `format` ☰
   → development/languages/Python/types/string/format[`format()`] ☰ probably what comes closest to the → development/languages/printf[printf] function of the → development/languages/C-C-plus-plus/C/libc[C standard library].
   `format_map` ☰
   `index`, `rindex` ☰
   `isalnum` ☰
   `isalpha` ☰
   `isascii` ☰
   `isdecimal` ☰
   `isdigit` ☰
   `isidentifier` ☰
   `islower` ☰
   `isnumeric` ☰
   `isprintable` ☰
   `isspace` ☰
   `istitle` ☰
   `isupper` ☰
   `join` ☰
   `ljust`, `rjust` ☰
   `lstrip` ☰
   `maketrans` ☰
   `partition`, `rpartition` ☰
   `removeprefix` ☰
   `removesuffix` ☰
   → development/languages/Python/types/string/replace[`replace(old, new)`] ☰ replaces the text sequence `old` with `new` in `str`.
   → development/languages/Python/types/string/rstrip[`str.rstrip()`] ☰ allows to remove aribtrary characters from the string's right side and thus can be used (almost) like → development/languages/Perl/functions/chomp[Perl's `chomp()` function].
   → development/languages/Python/types/string/split-rsplit[`split`, `rsplit`] ☰ Returns a list from the parts of the originanl string that are separated by the separator.
   `splitlines` ☰
   `startswith` ☰
   `strip` ☰
   `title` ☰
   → development/languages/Python/types/string/translate[`translate(…)`] ☰
   `zfill` ☰


  table }

}

{ Misc

  → development/languages/Python/types/string/substring[Taking substrings from a string], for example to
  → development/languages/Python/types/string/remove-last-n-characters[remove the last n characters from a string].

  The → development/languages/Python/built-in-functions[built-in] functions → development/languages/Python/built-in-functions/int[`int()`] and `float()` can be used to convert a string to an integer and float, respectively.
  -
  Similarly, a numerical value can be converted to a string with → development/languages/Python/built-in-functions/str[`str()`].

  { Strings are immutable #py-strings-immutable

    Strings are immutable. Thus, it is not possible to modify a string in place.

    But see → development/languages/Python/standard-library/io#py-io-StringIO[`io.StringIO()`] for a way to somewhat simulate such a requirement.

  }
  { Embedding expressions in a string #py-f-string

    *f-strings* allow to embed → development/languages/Python/expressions[expressions] in a string. The expreassion is evaluated when the string is created, not when the string is evaluated:
code {
>>> a = 2
>>> b = 3
>>> t = f"result = {a+b}"
>>> t
'result = 5'
>>> a=9
>>> t
'result = 5'
code }

  }
  { Repeating strings n times

    A string is repeated `n` times with the multiplication operator (`'text'  * 5`).

  }
  { Create a (simple!) regular expression to parse CSV files

code {
nofFields = 10
csvregex = ';'.join(['([^;]*)'] * nofFields)
code }

  }

}
sa:

  Another object that is immutable is the `bytearray` object.

 `txt.endswith(suffix)` returns true if `txt` ends with the string that is stored in the variable `suffix`.

  The → development/languages/Python/standard-library/string[standard library `string`]

  Other → development/languages/Python/types[Python types]
