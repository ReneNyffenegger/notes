$ Python: str (string)
@ str

A *str* (string) is a → development/languages/Python/iterable/sequence type.

A `str` object, as also a `bytearray` object, is immutable

→ development/languages/Python/types/string/substring[Taking substrings from a string]

→ development/languages/Python/types/string/rstrip[`str.rstrip()`] allows to remove aribtrary characters from the string's right side and thus can be used
(almost) like → development/languages/Perl/functions/chomp[Perl's `chomp()` function].

→ development/languages/Python/types/string/format[`str.format()`] is probably what comes closest to the → development/languages/printf[printf] function of the → development/languages/C-C-plus-plus/C/libc[C standard library].

→ development/languages/Python/types/string/replace[`str.replace(old, new)`] replaces the text sequence `old` with `new` in `str`.

→ development/languages/Python/types/string/translate[`str.translate(…)`]

The → development/languages/Python/built-in-functions[built-in] functions → development/languages/Python/built-in-functions/int[`int()`] and `float()` can be used to convert a string to an integer and float, respectively.
-
Similarly, a numerical value can be converted to a string with `str()`.

{ Remove last character from string

  The `[:-1]` construct removes the final character from a string:
  gh|about-python|/types/string/remove-final-character.py||

}
{ Split a string into a list 

  gh|about-python|/types/string/split.py||

}
{ Joining a list's elements into a string #py-str-join

 `join` is the »opposite« of `split`. It requires an → development/languages/Python/iterable as its only parameter.

  gh|about-python|/types/string/join.py||

}
{ Strings are immutable #py-strings-immutable

  Strings are immutable. Thus, it is not possible to modify a string in place.

  But see → development/languages/Python/standard-library/io#py-io-StringIO[`io.StringIO()`] for a way to somewhat simulate such a requirement.
}
{ Embedding expressions in a string #py-f-string

  *f-strings* allow to embed → development/languages/Python/expressions[expressions] in a string. The expreassion is evaluated when the string is created, not when the string is evaluted:
code {
>>> a = 2
>>> b = 3
>>> t = f"result = {a+b}"
>>> t
'result = 5'
>>> a=9
>>> t
'result = 5'
code }

}

sa:

  The → development/languages/Python/standard-library/string[standard library `string`]

  Other → development/languages/Python/types[Python types]
