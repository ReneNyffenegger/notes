$ Python: list of lists (matrices etc.)

{ Creating a list of list

  A → development/languages/Python/types/list/comprehension[list comprehension] creates a list. A list of lists can be with nesting two list comprehnensions:
code {
size = 10

grid = [ [ (row+1) * col for col in → development/languages/Python/built-in-functions/range(size)]
                         for row in → development/languages/Python/built-in-functions/range(size)  ]
code }

}
{ Pretty printing a list of list

  The list of list (`grid`) that was created above can be pretty-printed like so:
code {
→ development/languages/Python/statements/for row in grid:
    → development/languages/Python/built-in-functions/print( *→ development/languages/Python/built-in-functions/map(→ development/languages/Python/expressions/lambda x: '{:2d}'.→ development/languages/Python/types/string/format(x), row), sep = ' ')
code }

  The `*` in front of the `map` unpacks the list that `map` so that the `print()` function receives each element of the list rather than *the* list.

  This piece of code prints:
code {
 0  1  2  3  4  5  6  7  8  9
 0  2  4  6  8 10 12 14 16 18
 0  3  6  9 12 15 18 21 24 27
 0  4  8 12 16 20 24 28 32 36
 0  5 10 15 20 25 30 35 40 45
 0  6 12 18 24 30 36 42 48 54
 0  7 14 21 28 35 42 49 56 63
 0  8 16 24 32 40 48 56 64 72
 0  9 18 27 36 45 54 63 72 81
 0 10 20 30 40 50 60 70 80 90
code }

}
