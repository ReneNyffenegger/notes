$ Python: List
@ list

A *list* is a → development/languages/Python/iterable/sequence type. It can contain → development/languages/Python/objects[objects] of different
→ development/languages/Python/types[types] which also makes it a → development/languages/Python/objects/containers.

In order to create a list of elements that all have the same types, the → development/languages/Python/standard-library/array[`array` module] can be used.

A *list* is not a linked list, it provides access to its element in `O(1)`.

{ Creating a list from a string #py-list-create-from-string

  When a list is created from a → development/languages/Python/types/string[string], the characters of the string become the elements in the list:
  gh|about-Python|/types/list/create-from-string.py||

  The same is also the case for ⇒ → development/languages/Python/types/tuple#py-tuple-create-from-string[tuples].

}
{ Removing elements from a list

  An element whose value is known can be removed with `remove(val)`:
  gh|about-Python|/types/list/remove.py||

  An element whose index is known can be removed from a list with `→ development/languages/Python/built-in-functions/del#py-del-list[del](lst[ix])`.

  The last element of a list can be removed with → #py-list-pop[`pop()`]

 `lst.clear()` removes all elements from `lst`. It is equivalent to `→ development/languages/Python/built-in-functions/del lst[:]`.

}
{ Slicing a list #py-list-slice

  A list can be sliced to return a «region» of a list. Optionally, every nth element from this region can be extrected. The notation is:
code {
lst[start:]
lst[:stop]
lst[start:stop]
lst[start:stop:step]
lst[:]                 # Create a copy of the list
code }

  Note that the element that is indicated with `stop` is not returned.

  Negative numbers count from the end of the list.

  gh|about-Python|/types/list/slicing.py||

  See also the → development/languages/Python/built-in-functions[built-in] function → development/languages/Python/built-in-functions/slice[`slice()`]

}
{ pop(): remove elements from the end of the list #py-list-pop

 `last_elem = lst.pop()` removes the last element of a list and returns it.
  -
 `pop(n)` removes the n-th element and returns it.

  If `n` is negative, it removes the n-th last element from the list.

  gh|about-python|/types/list/pop.py||

  Note that performance is not ideal if elements are popped from the beginning because the entire list needs then to be shifted. In order to implement FIFO-queues, → development/languages/Python/standard-library/collections/deque[`collections.deque`] should be used.

}
{ Inserting elements

  gh|about-python|/types/list/insert.py||

}
{ Counting elements with a given value

 `lst.count(val)` counts how many times `val` occurs in `lst`:
  gh|about-python|/types/list/count.py||

}
{ Getting the position of a given value

 `lst.index(val)` gets the first position of `val` in `lst`.
  -
 `lst.index(val, pos)` gets the first position of `val` in `lst` starting as position `pos`.

  If `val` is not found, `index()` raises a `ValueError` → development/languages/Python/exception-handling[exception].

  gh|about-python|/types/list/index.py||

}
{ Adding and multiplying lists

  The `list` type defines the mathematical operations `+` and `*`. The plus operator creates a new list that contains the elements of the two lists being added. The multiplication operator creates a new list that contains the elements of a list repeated `n` times:
  gh|about-python|/types/list/add-mult.py||

  A *pairwise* addition or multiplication is possible with the → development/languages/Python/built-in-functions/zip[`zip()`] function together with a → development/languages/Python/types/list/comprehension:
  gh|about-python|/types/list/pairwise-add-mult.py||

}
{ Starred expressions

  An asterisk before a list expands («explodes») the list into its context (see also → development/languages/Python/iterable/unpacking):
code {
>>> a = [1,2,3]
>>> [0, a, 4]
[0, [1, 2, 3], 4]
>>> [0, *a, 4]
[0, 1, 2, 3, 4]
code }

code {
>>> b = [1,2,3]
>>> *b
…
SyntaxError: can't use starred expression here
code }

}
{ Beware of += string

  Note, because a → development/languages/Python/types/string[string] is an → development/languages/Python/iterable, `list += 'text'` adds each character of a string to a list which might be surprising when first seen:
  gh|about-python|/types/list/beware-of-plus-equal-string.py||

  Of course, a single string should be added to the list with `lst.append('four')`.


}

sa:

  → development/languages/Python/types/list/sort[`list.sort()`]

  → development/languages/Python/statements/for#py-for-in-list[`for … in …`]

  Selecting a random element from a list with → development/languages/Python/standard-library/random#py-random-choice[`random.choice(lst)`]

  The → development/languages/Python/built-in-functions/list[`list()`] built-in function

  → development/languages/Python/types/list/comprehension[list comprehension]

  → development/languages/Python/types/list-vs-tuple[Comparing lists] with → development/languages/Python/types/tuple[tuples].

  → development/languages/Python/standard-library/collections/deque[`collections.deque`] is a list-like → development/languages/Python/objects that is able to add and remove elements from both ends fast.

  Other → development/languages/Python/types[Python types]
