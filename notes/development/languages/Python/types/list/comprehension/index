$ Python: list comprehension
@ list comprehension

code {
result = [ expr(x) → development/languages/Python/statements/for#py-for-in-list[for x in someList] ]
result = [ expr(x) → development/languages/Python/statements/for#py-for-in-list[for x in someList] if criterion(x)]
code }

A list comprehension is a construct to evaluate an expression on each element list (or more generally in a → development/languages/Python/iterable/sequence). The list comprehension returns another list that
consists of the values of the expressions.
-
Additionally, it can be augmented with a criterion that determines if the expression is to be evaluated for an element.

{ Calculating squares of a list

  This is demonstrated with the following simple example. The expression that is caluclated is `i**2` which is evaluted for each `i` in the given list (which consists 2, 4, 5 and 7).

  gh|about-python|/types/list/comprehension/squares.py||

  Compare with `→ development/languages/Python/built-in-functions/map[map](→ development/languages/Python/expressions/lambda[lambda] i: i**2, [2,4,5,7])`

}
{ Using a criterion

  The following example calculates the square roots of numbers with `math.sqrt`. Since `math.sqrt` throws a *ValueError* for negative numbers, the optional `if` part of the list comprehension
  is used to only calculate square roots for `x >= 0`.

  gh|about-python|/types/list/comprehension/criterion.py||

}
{ Serially connecting list comprehensions

  List comprehensions can be used serially where the result (that is: the created list) of the left list comprehension is the expression that feeds into the right list comprehension.

  This technique is demonstrated in the following example:
  gh|about-python|/types/list/comprehension/for-in-for-in.py||

}
{ Creating multidimensional lists

  Serially connecting list comprehension allows to create multi-dimensional lists, as is shown in the following example: it creates a list that consists of three lists, which in turn consist of four numbers:
  gh|about-python|/types/list/comprehension/2D.py||

}
{ Creating lists with lists with increasing number of elements

  By connecting list comprehensions, it is also possible to create a list whose elements are lists with an increasing number of elements:
  gh|about-python|/types/list/comprehension/increasing-number-of-elements.py.py||

}

sa:

  The built-in functions → development/languages/Python/built-in-functions/map[`map()`] and
  The built-in functions → development/languages/Python/built-in-functions/filter[`filter()`].

  → development/languages/Python/functions/parameters#py-arg-list-comprehension[Passing function arguments whose values are created by a list comprehension]
