$ Python: float
@ float

{ Members

  table { ll

    `as_integer_ratio()` ☰  Returns a tuple with two elements: numerator and denominator
    `conjugate()` ☰ 
    `fromhex()` ☰  An instance method that creates a float from a hexadecimal representation as returned by `hex()`
    `hex()` ☰ 
    `imag` ☰  Always evaluates to `0.0` (See → development/languages/Python/CPython source code for floats, → https://github.com/python/cpython/blob/8de59c1bb9fdcea69ff6e6357972ef1b75b71721/Objects/floatobject.c#L1788[`float_getimag`]). This member seems to be present so that both, floats and complex objects can be passed to a function that evaluates `.imag`.
    `is_integer()` ☰ `True` if the instance is finite and has an integral value.
    `real` ☰  See `imag`

  table }
}
{ Misc


code {
>>> x = 3.141
>>> x.hex()
'0x1.920c49ba5e354p+1'

>>> y = float.fromhex('0x1.920c49ba5e354p+1')
>>> y
3.141
code }

code {
not_a_number = float('NaN')
infinite     = float('inf')
code }

}

sa:

 `→ development/languages/Python/standard-library/sys[sys].float_info` and
 `→ development/languages/Python/standard-library/sys[sys].float_repr_style`.

  Other → development/languages/Python/types#py-some-built-in-types[Built-in types], such as `→ development/languages/Python/types/int`

  The ptyhon module `→ development/languages/Python/libraries/mpmath` provides aribtrary precision real and compleas floating-point arithmetics.

  The `→ development/languages/Python/standard-library/fractions` module.

