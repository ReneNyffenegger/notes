$ Python: set
@ set

A set contains *unique* and unordered → development/languages/Python/objects[objects].

{ Creating sets #py-set-create

  A set can be created using curly braces or the explicit `set(→ development/languages/Python/iterable)`:

  Note: `{}` does not create an empty set, rather, it creates an empty → development/languages/Python/types/dict.

  gh|about-python|/types/set/create.py||

  Because a → development/languages/Python/types/string[string (`str`)] is also an iterable, a set can be created from a string. The elements in such a set consists of characters:
  gh|about-python|/types/set/create-from-string.py||

}
{ Set operators

  The `set` type has four operators that return sets:
  table { lll
     Mathematical operator ☰ Alias ☰ 
     `S1 - S2` ☰ `S1.difference(S2)`  ☰ All elements of `S1` that are not in `S2`
     `S1 & S1` ☰ `S1.intersection(S2)`  ☰ All elements of `S1` that are also in `S2`
     `S1 | S1` ☰ `S1.union(S2)`  ☰ All elements of `S1` and `S1`
     `S1 ^ S1` ☰ `S1.symmetric_difference(S2)`  ☰ All elements of `S1` that are not in `S2` plus all elements of `S2` that are not in `S1`.
  table }

  gh|about-python|/types/set/set-operators.py||

}
{ Testing membership in a set

  The → development/languages/Python/operators/in[`in` and `not in` operators] can be used to test for membership in a set:
  gh|about-python|/types/set/in.py||

  Additionally, `S1 <= S2` and `S1 >= S2` can be used to test whether a `S1` is a subset or superset, respectively, of `S2`. In this context, these operators can also be called with the explicit names
 `S1.issubset(S2)` and `S1.issuperset(S2)`.


}
{ Find unique values in a list

  A set can be used to find unique values in a → development/languages/Python/types/list:
  gh|about-python|/types/set/find-unique-values-in-list.py||

}

sa:
  Compare with → development/languages/Python/types/frozenset

  Other → development/languages/Python/types[Python types]
