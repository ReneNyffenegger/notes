$ Python: Hierarchy of built-in types

This is the output of a python script that tries to print the class-hierarchy of → development/languages/Python built-in → development/languages/Python/types[types]

Note that `OSError` has three aliases (`EnvironmentError`, `IOError` and `WindowsError`) and that `BuiltinImporter` has one alias (`__loader__`).

code {
BaseException
  Exception
    ArithmeticError
      FloatingPointError
      OverflowError
      ZeroDivisionError
    AssertionError
    AttributeError
    BufferError
    EOFError
    ImportError
      ModuleNotFoundError
    LookupError
      IndexError
      KeyError
    MemoryError
    NameError
      UnboundLocalError
    OSError (EnvironmentError, IOError, WindowsError)
      BlockingIOError
      ChildProcessError
      ConnectionError
        BrokenPipeError
        ConnectionAbortedError
        ConnectionRefusedError
        ConnectionResetError
      FileExistsError
      FileNotFoundError
      InterruptedError
      IsADirectoryError
      NotADirectoryError
      PermissionError
      ProcessLookupError
      TimeoutError
    ReferenceError
    RuntimeError
      NotImplementedError
      RecursionError
    StopAsyncIteration
    StopIteration
    SyntaxError
      IndentationError
        TabError
    SystemError
    TypeError
    ValueError
      UnicodeError
        UnicodeDecodeError
        UnicodeEncodeError
        UnicodeTranslateError
    Warning
      BytesWarning
      DeprecationWarning
      FutureWarning
      ImportWarning
      PendingDeprecationWarning
      ResourceWarning
      RuntimeWarning
      SyntaxWarning
      UnicodeWarning
      UserWarning
  GeneratorExit
  KeyboardInterrupt
  SystemExit
BuiltinImporter (__loader__)
builtin_function_or_method
bytearray
→ development/languages/Python/types/bytes
classmethod
complex
→ development/languages/Python/types/dict
enumerate
filter
float
→ development/languages/Python/types/frozenset
function
→ development/languages/Python/types/int
  bool
→ development/languages/Python/types/list
map
memoryview
module
property
range
reversed
→ development/languages/Python/types/set
→ development/languages/Python/types/slice
staticmethod
→ development/languages/Python/types/string
super
→ development/languages/Python/types/tuple
→ development/languages/Python/types/type
zip
code }


This hierarchy was created with the following → development/languages/Python script:
gh|about-Python|/built-in/types/hierarchy.py||

The script didn't report `→ development/languages/Python/types/Ellipsis`, `→ development/languages/Python/types/iterator`, `range_iterator`, `→ development/languages/Python/types/method`,
`→ development/languages/Python/types/NoneType`, `→ development/languages/Python/types/traceback`
and possibly others.

{ TODO

  { function vs classmethod vs builtin_function_or_method

   *builtin* in `builtin_function_or_method` does apparently not refer to built-in (default) Python, but that the function or method is → https://docs.python.org/3.8/library/types.html#types.BuiltinMethodType[written in C].

code {
>>> def x(): pass
... 
>>> type(x)
<class 'function'>
code }

code {
>>> class CLS:
...    def meth(): pass
...    @staticmethod
...    def stat(): pass
... 

>>> type(CLS.meth)
<class 'function'>

>>> type(CLS.stat)
<class 'function'>

>>> obj = CLS()

>>> type(obj.meth)
<class 'method'>

>>> type(obj.stat)
<class 'function'>
code }

code {
>>> type(print)
<class 'builtin_function_or_method'>
code }

  }

}
