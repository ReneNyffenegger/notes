$ Python: variables
@ variable

A variable is a *name* (or more technically: an entry in a → development/languages/Python/internals/symbol-table) that refers to an → development/languages/Python/objects.

{ Multiple variables referring to the same object #py-var-same-object

  The following example demonstrates that multiple variables can refer to the same object.

  This is demonstrated with this simple script:
  gh|about-Python|/variables/mutliple-variables-same-object.py||

  The assignment of `L1` to `L2` does not copy the object but creates another name for the same object. Thus, when `5` and `7` are appended to the underlying object via `L2`, the newly appended numbers can be seen
  by → development/languages/Python/statements/for[iterating] over `L1`, which prints the four numbers `2`, `3`, `5` and `7`.

  The built-in function → development/languages/Python/built-in-functions/id[`id()`] returns a number that corresponds to an object's identity. If `id(x)` and `id(y)` return the same number, both `x` and `y` refer
  to the same object.

  Python has the special → development/languages/Python/operators/is[operator `is`] that returns `True` if the object on its left side is the same object on its right side.

}
{ Global/local variables in a function

  A variable that is only referenced in a function, but not assigned to, is implicitely a global variable.

  In order to make explicitely mark a variable in a function as global, the → development/languages/Python/statements/global[`global` statement] must be used.

}
{ The underscore variable #py-var-underscore

  It's possible to use just an underscore (`_`) as a variable name:
  gh|about-Python|/variables/underscore.py||

  Usually, assigning a value to the underscore variable indicates that the programmer is not inending to use that variable later, for example when → development/languages/Python/iterable/unpacking[unpacking] an iterable:
  gh|about-Python|/variables/unpacking-into-underscore.py||

}
