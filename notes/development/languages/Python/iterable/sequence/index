$ Python: sequence
@ sequence
 
An → development/languages/Python/objects that implements the two methods
→ development/languages/Python/dunders/__getitem__[`__getitem__()`] and → development/languages/Python/dunders/__len__[`__len__()`] is a sequence.

The number of elements that a sequence stores is returned by the → development/languages/Python/built-in/functions/len[builtin function `len()`]

A sequence is a special kind of an → development/languages/Python/iterable.

Some built-in sequence types include
  • → development/languages/Python/types/list
  • → development/languages/Python/types/string
  • → development/languages/Python/types/tuple
  • → development/languages/Python/types/bytes

Although → development/languages/Python/types/dict also implements `__getitem__` and `__len__`, it is considered to be *mapping* rather than an sequence because the elements a dict contains are looked up with
immutable keys rather than just integers.

{ Evaluating an expression on each element in a sequence

  In order to evaluate an expression on each element of a sequence, a so-called → development/languages/Python/types/list/comprehension can be used.

}
{ Indexing elements of sequences

  gh|about-Python|/iterable/sequence/indexing.py||

}
{ Sequence unpacking #py-sequence-unpacking

 *Sequence unpacking* assigns the value of each element in a seqence to a → development/languages/Python/variables.

  gh|about-Python|/iterable/sequence/unpacking.py||

  The number of variables must correspond to the number of elements in the sequence, otherwise, the Python interpreter raises either a `ValueError` exception with the explanatory message
 *too many values to unpack* or *not enough values to unpack*.

  Note, the `var_1, var_2, var_3, …` syntax is also used for → development/languages/Python/types/tuple#py-tuple-create[creating tuples].

  TODO: Apparently, the more correct term for this feature is → development/languages/Python/iterable/unpacking[iterable unpacking].

}
