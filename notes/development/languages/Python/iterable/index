$ Python: iterable
@ iterable

An *iterable* is an → development/languages/Python/objects that implements either
  • the → development/languages/Python/dunders/__iter__[`__iter__`] method, or
  • → development/languages/Python/dunders/__getitem__[`__getitem__()`] and → development/languages/Python/dunders/__len__[`__len__()`]. Such objects are referred to as  → development/languages/Python/iterable/sequence[sequences]

Well known examples of iterables are the *sequence types* `list`, `tuple` and `str` as well as the non-sequence type `dict` or → development/languages/Python/standard-library/io#python-io-file-object[file objects].

The elements that an instances of an iterable provides can be iterated over in → development/languages/Python/statements or → development/languages/Python/built-in-functions[functions] and → development/languages/Python/statements such as
  • → development/languages/Python/statements/for[`for`]
  • → development/languages/Python/built-in-functions/map[`map`]
  • → development/languages/Python/built-in-functions/zip[`zip`]
  • → development/languages/Python/types/string#py-str-join[`string.join()`]

An iterable can be passed to → development/languages/Python/built-in-functions/iter[`iter`] which then returns an → development/languages/Python/types/iterator for the iterable.

→ development/languages/Python/iterable/iterator[Iterators] are a subset of iterables: they also have a `__next__` method.
