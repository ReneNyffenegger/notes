$ Python: Iterable unpacking
@ iterable unpacking

*Iterable unpacking* allows to assign the elements of an → development/languages/Python/iterable to multiple variables.

This technique is often used for «shift» like operations (as is for example known from the Perl function → development/languages/Perl/functions/shift[`shift`].

code {
>>> print(  [1,2,3] )
[1, 2, 3]

>>> print( *[1,2,3] )
1 2 3
code }

code {
>>> [ (x, 'added') for x in [(1,2), (3,4), (5,6)]]
[((1, 2), 'added'), ((3, 4), 'added'), ((5, 6), 'added')]

>>> [ (*x, 'added') for x in [(1,2), (3,4), (5,6)]]
[(1, 2, 'added'), (3, 4, 'added'), (5, 6, 'added')]
code }

{ Unpacking in a for … in loop #py-iterable-unpacking-for

  Iterable unpacking can also be applied in a → development/languages/Python/statements/for[`for … in` loop]:
  gh|about-Python|/iterable/unpacking/for-in.py||

  This example prints:
code {
one
['two', 'three', 'four']
five

1
[2, 3]
5
code }

}
{ Packing

  gh|about-Python|/iterable/unpacking/assignment.py||


}
{ Type of an unpacked iterarable

  The type of the portion of the iterable that was assigned to the variable with the `*` is → development/languages/Python/types/list:
  gh|about-Python|/iterable/unpacking/type.py||

}

sa:

  A list can be passed to a function as its «individual elements» by prepending the list with a star when the function is called, see → development/languages/Python/functions/parameters#py-arg-unpack[unpacking arguments when calling a function].

  Sometimes, when unpacking a in iterable into variables, some of these variables are not needed later. This can be indicated by
  unpacking them into the → development/languages/Python/variables#py-var-underscore[underscore variable].

  Windows/PowerShell: → Windows/PowerShell/language/type/array#ps-assign-array-to-array[`$elem1, $elem2, $rest = $a, $b, $c, $d, $e, $f`]

  Iterable upacking can be seen as a prototype for *pattern matching* (see → development/languages/Python/PEP/Structurual-Pattern-Matching).
