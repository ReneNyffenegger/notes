$ Grammar (parsing)
@ grammar


A notation for a *syntax free* grammar is → development/languages/parsing/EBNF.

Lexical symbols:
  • identifiers
  • numbers
  • strings
  • operators
  • delimiters
  • comments
  • …?

Lexical symbols are composed of characters (note the distinction).

{ Types of grammars (Chomsky hierarchy)

  table { lll

           ☰ ☰ ~Machine~
    Type 0 ☰ Unrestricted grammar ☰ Touring machine (Deterministic (DTM) vs Non-deterministic (NTM), the default being DTM
    Type 1 ☰ Context senstivie grammar ☰ Linear bounded automata (LBA) (also deterministic vs. non-deterministic)
    Type 2 ☰ Context free grammar ☰ Push down automata (PDA), also D vs N, the default being NPDA
    Type 3 ☰ Regular grammar ☰ Finite automata (FA), also DFA vs NFA, the default being DFA

  table }

  { Expressive power

    Type 0 grammars have the most expressive power, Type 3 the least expressive power.

    The expressive power of of DFAs is equal to the expressive power of NFAs. Therefore, every NFA can be converted into a DFA.

    The expressive power of NPDAs is greated than the expressive power of DPDAs. Therefore, some NPDAs can't be converted into a DPDA.

    The expressive power of DTMs is equal to the expressive power of NTMs.

  }
  { Misc

    FA: no memory needed
    -
    PDA: FA + 1 stack
    -
    TM = FA + 2 stacks

  }

}
