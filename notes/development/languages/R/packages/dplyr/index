$ R package: dplyr

{ SQL like access #dplyr-sql-like

  The arguably six most important functions of *dplyr* provide → development/databases/SQL[SQL like] access to → development/languages/R/data-structures/data-frame[dataframes].
  These functions are
    • `filter()` to select observations by their values
    • `arrange()` to reorder rows
    • `mutate()` to create new variables with functions of existing values
    • `summarise()` to create summaries of values
    • `select()` to select variables by their names
    • `group_by()`

  The first argument in these functions is always a → development/languages/R/data-structures/data-frame[data frame] and these functions return a (new) data frame.

  gh|about-r|/packages/dplyr/sql-like.r||

}
{ Count a categorical value #r-dplyr-count-levels

  A → development/languages/R/data-structures/data-frame[data frame] is piped (`%>%`) into the `dplyr` function `count` to count the occurences of each value (that is: the
  → development/languages/R/data-structures/factor#r-factor-level[levels]) of the
  categorical variable (aka → development/languages/R/data-structures/factor[factor]):

  gh|about-r|/packages/dplyr/count-categorical-value.R||

}
{ Count a continuous variable

  Using the `cut_width()` function of → development/languages/R/packages/ggplot2[`ggplot2`], a continuous variable can be cut into equally sized widths and then
  be counted:

  gh|about-r|/packages/dplyr/count-continuous-value.R||

}
{ Assign unique number to rows

 `mutate()` in combination with `row_number()` allows to assign a unique number (id) to each row in a data set. In the following example,
  the new column is named `id`.

  gh|about-r|/packages/dplyr/assign-id-with-rownumber.R||

}
{ filter

  As there is a `between` operator in → development/databases/SQL[SQL], there is also a `between` in dplyr:
  gh|about-r|/packages/dplyr/filter/between.R||

}
{ near()

 `near()` is a handy function that checks if two numbers are very close to each other. The function returns `TRUE` where the `==` operator would yield false because of
  finite precision arithmetic.

  gh|about-r|/packages/dplyr/near.R||

}
{ case when #dplyr-case_when

  The function `case_when` mimics the → development/databases/SQL[SQL] statement `case when`.

  gh|about-r|/packages/dplyr/case_when.R||

  See also the → development/languages/R/statements/switch#switch-range[`switch` statement] combined with
  → development/languages/R/functions/findInterval[`findInterval(…)`].

}
{ show_query

  If `dplyr` is used to access databases via → development/languages/R/packages/DBI[`DBI`] rather than → development/languages/R/data-structures/data-frame[data frames],
  `dplyr` will dymaically create → development/databases/SQL[SQL statements].
   -
  In such cases, `show_query(…)` can then be used to display the generated SQL statement:

  gh|about-r|/packages/dplyr/sql/show_query.R||


}

sa:

  `dplyr` is part of the → development/languages/R/packages/tidyverse[tidyverse].

  → development/languages/R/packages
