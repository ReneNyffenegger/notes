$ R package: ggplot2

The ggplot2 package features a graphic paradigm which is called the »grammar of graphics«.

The package was created by Hadley Wickham, the author of »ggplot2: Elegant Graphics for Data Analysis« (Springer 2009).

ggplot2 is one of the core members of → development/languages/R/packages/tidyverse[tidyverse].

ggplot operates on → development/languages/R/data-structures/data-frame[data frames].

{ The seven parameters of the grammar of graphics

  The *grammar of graphics* has seven parameters that allow to create and adjust a graphic:
    • data
    • geom
    • mappings (Aesthetical mappings describe how *variables* of the data is mapped to *visual properties*)
    • stat(s)
    • adjustment of position (scaling)
    • coordinate system
    • a faceting scheme

code {
library(ggplot2)

ggplot(data = a_data_frame) +
  geom_XXX(
    mapping  = aes(x = var_1, y = var_2),
    stat     = …
    position = …
  )                +
  coord_XXX ( … )  +
  facet_XXX ( … )
code }

}
{ ggplot()

  In ggplot2, a plot is started with the function `ggplot(data = ds)`. The `data` argument specifies the → development/languages/R/datasets[dataset] to use in the graph.

  This function creates a coordinate system on which layers can be added (for example `geom_point(…)`.
  -
  Layers are added with the `+` operator.

}
{ geom_…()

  geom…() defines how a plot represents data.

 `ggplot2` provides over 30 geom_*() functions. More extensions are found on → https://www.ggplot2-exts.org/[ggplot2-exts.org].

  A `geom_…()` function takes a `mapping` argument. It is returned by `aes(x = …, y= …)`.

  Every geom has its default *stat* (for example the default stat of `geom_bar()` is `stat_count()`).

  { Plotting multiple geoms

    Multiple geoms can be displayed in a plot by adding them
code {
ggplot(data = …) +
  geom_…(mapping = aes(x=…, y=…)) +
  geom_…(mapping = aes(x=…, y=…))
code }

    If both `mapping` arguments are equal, they can be factor out:
code {
ggplot(data = … , mapping = aes(x=…,y=…)) +
  geom_…() +
  geom_…()
code }

  }

}
{ aes()

  The `x=` and `y=` arguments of `aes(…)` specify which variables of the dataset that was specified in `ggplot(…)` are mapped to the x and y coordinates.

  The returned value of `aes()` can either be passed to `ggplot()` or a layer. If passed to `ggplot()`, the aesthetics become defaults for each layer.

 *Old parameter names* are replaced with better ones: `shape` for `pch`, `size` for `cex` (etc.?).

}
{ Line chart (year)

  gh|about-r|/packages/ggplot2/line-chart-year.R||

  gh|about-r|/packages/ggplot2/img/line-chart-year.png||

}
{ Bar chart

  Count the occurences of each item:

  gh|about-r|/packages/ggplot2/geom_bar.R||

  gh|about-r|/packages/ggplot2/img/geom_bar.png||

}
{ Counting combinations

  The following example first creates a → development/languages/R/data-structures/data-frame[data frame]. → development/languages/R/packages/dplyr[`dplyr`] is then used
  to count the occurence of every combination of `val_one` and `val_two`. Finally, `geom_count()` is used to also graphically plot the counts of these combinations.

  gh|about-r|/packages/ggplot2/geom_count.R||

  gh|about-r|/packages/ggplot2/img/geom_count.png||

}
{ Using count in a data frame

  The following example produces the same plot as above, but uses the `count` column of the data frame to specify the dot size in the plot:

  gh|about-r|/packages/ggplot2/geom_point-size.R||

}
{ heatmap

  gh|about-r|/packages/ggplot2/heatmap.R||

  gh|about-r|/packages/ggplot2/img/heatmap.png||

}

sa:

  The next iteration of `ggplot2` seems to be `ggvis`: it has the *pipe* (`%>%`).

  → development/languages/R/functions/graphics

  → development/languages/R/functions/qqplot[qqplot]

  The `ggformula` package provides a formula interface to ggplot2 graphics.

  → development/languages/R/packages
