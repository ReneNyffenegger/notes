$ R package: shiny

*shiny* allows to build interactive web apps with → development/languages/R[R].

{ app.R

  `app.R` is the (single) script that contains a *shiny app*.

  `app.R` consists of three components:
    • A user interface object (traditionally called `ui`)
    • A server function (traditionally called `server`)
    • Calling `shinyApp(ui = ui, server = server)`

code {
library(shiny)

ui     <- fluidPage (
            …
          );

server <- function(
                input ,  # input stores the current values of all widgets
                output
          ) {

            # This function is called when a user starts
            # using a shiny app.
            …
          }

shinyApp(ui = ui, server = server)
code }

   `app.R` is usually stored in its own directory and executed with
code {
runApp('/path/to/the/directory');
code }

  An app can be executed in *show case mode* in which case the code of the app is shown and the executed code highlighted.
code {
runApp('/path/to/the/directory', display.mode='showcase');
code }
  Alternatively, show case mode can also be enabled within the `DESCRIPTION` file.

}
{ fluidPage

`fluidPage()` is called with calls to *elements* that define the user interface. With `fluidPage()`, the layout of the elements is adjusted to the dimensions of the browser.

 Some often seen elements in the call of `fluidPage` are
   • `titlePanel`
   • `sidebarLayout`
   • `navbarPage` for a *multi page* experience with a navigation bar.


code {
ui <- fluidPage(

        titlePanel('Some Title goes here'),

        sidebarLayout(
          # position = 'right',
            sidebarPanel(…)   ,
            mainPanel   (…)
        )
)
code }

  An alternative to using `fluidPage` is to use `fluidRow` and `column` for a tabular interface.j

}
{ sidebarLayout

 `sidebarLayout` takes at least these two arguments:
   • `sidebarPanel`
   • `mainPanel`

}
{ *Panel functions

  `*Panel()` functions are used to add content to the user interface.j

}
{ *Output

 `*Output()` functions display → development/languages/R/object[R objects] on the user interface.

? These functions are placed into the calls to the `*Panel()` functions.

  When calling a `*Output` function, one argument is required: the name of the reactive element.
  -
  The name given then becomes a slot(?) (entry) in the `output` variable, for example `output$foo` for `textOutput('foo')`.
  -
  Each of these entries should correspond to a `render*` function whose return value is assigned to the `output$…` slot.

  Some (or all?) of the `*Output` functions are
    • `dataTableOutput`
    • `imageOutput`
    • `plotOutput`
    • `tableOutput`
    • `textOutput` (text)
    • `verbatimTextOutput` (text)
    • `htmlOutput` (raw → development/web/HTML[HTML] output)
    • `uiOutput` (raw → development/web/HTML[HTML] output)

}
{ HTML Elements

 
? HTML elements can be placed where `*Output` elements can be placed as well.

  gh|about-r|/packages/shiny/htmlElements/app.R||

  { HTML functions just generate text

    `shiny`'s → development/web/HTML[HTML] functions just generated HTML test:
code {
library(shiny)

div(class='tq84', 'Hello world')
# <div class="tq84">Hello world</div>

textInput('id_text', 'Text label')
# <div class="form-group shiny-input-container">
#   <label for="id_text">Text label</label>
#   <input id="id_text" type="text" class="form-control" value=""/>
# </div>

sidebarPanel(div('first div'), div('second div'))
# <div class="col-sm-4">
#   <form class="well">
#     <div>first div</div>
#     <div>second div</div>
#   </form>
# </div>
code }

  }
  { img

code {
img(src='something.png', width=200)
code }

    The specified image is searched in a directory named `www` beneath the application folder.

  }

}
{ Input Widgets

 *Widgets* get input from a user.


  Most widgets are created with a `*Input` function, some are created with `*Button` or `*Buttons` function:
    • `actionButton`
    • `checkboxGroupInput`
    • `checkboxInput`
    • `dateInput`
    • `dateRangeInput`
    • `fileInput`
    • `helpText`
    • `numericInput`
    • `radioButtons`
    • `selectInput`
    • `sliderInput`
    • `submitButton`
    • `textButton`

  Each widget function take at least two arguments: the *name* of the widget and a *label* (which can be `''`).
  -
  The value of the widget is stored within the `server` function in `input$widgetName`.


  { sliderInput

    The `sliderInput` widget allows to enter a single value or a range. The behaviour depends on the value of the parameter `value`. If it is
    a two element → development/languages/R/data-structures/vector[vector], a range is expected.

    Choose a single value (within a given range):
code {
        sliderInput(inputId = 'foo',
                    label   = 'Foo',
                    min     =  18  ,
                    max     =  72  ,
                    value   =  44
        )
code }
    
    Choose a sub range within a given range:
code {
        sliderInput(inputId = 'bar_range',
                    label   = 'bar Range',
                    min     =  0         ,
                    max     =  100       ,
                    value   = c(10, 90)
        )
code }

  }

}
{ Inputs

  All inputs are *reactive*.

}
{ render* functions

  The `render*` functions processes the value of an R expression and makes it suitable for displaying in an element that was placed on the user interface with one of the `*Output` functions.
  -
  The expression can consist of many lines of code.

  The expressions need to be encapsulated into curly braces (`{ … }`).

  The expressions in `render*` functions are executed when a user changes the value of a widget.

  Some (all) functions are
    • `renderDataTable`
    • `renderImage`
    • `renderPlot`
    • `renderPrint`
    • `renderTable`
    • `renderText`
    • `renderUI`

}
{ Close button

  gh|about-r|/packages/shiny/closeButton/app.R||

}
{ Exiting app when browser closes

  gh|about-r|/packages/shiny/exitWhenBrowserCloses/app.R||
}
{ Debugging

  { Printing to stderr

code {
→ development/languages/R/functions/cat(file=stderr(), "input$foo = ", $input$foo, "\n");
code }

   It's recommended to write to stderr because output to stdout might be captured because in some cases (for example `renderPrint`) might be captured by a `capture.output`.

  }
  { browser()

    The call to the (wierdly named) `browser()` statement stops execution and allows to inspect variables etc.

    After inspecting them, execution can be resumed with `cont` (or `c` for short?).

  }
  { Showing the reactive log

code {
options(shiny.reactlog = TRUE);
runApp('/path/to/app');
code }

   After setting this option, the reactive log can be shown by pressing `ctrl+F3` in the → development/web/browser[browser] window that hosts the app.

  }
  { Calling an error function

    The `shiny.error` option allows to specify a function to be called when an error occurs.

code {
options(shiny.error = browser);
code }


  }

}
{ DESCRIPTION

  A file named `DESCRIPTION` might be placed into the application folder, for example with the following content.
code {
Title: Some name for the shiny-app
Author: Joe
DisplayMode: Showcase
Type: Shiny
code }  

}
{ TODO

  { Shiny app skeleton

    A Shiny App → development/languages/R/object[object] is created or run with `shinyApp(…)`.

    If the object is created in the console and not assigned to a → development/languages/R/variable[variable], it is passed to
    the → development/languages/R/functions/print[`print(…)` function] which in turn will run the application.

    A Shiny App object can be explicitely run by passing it to the `runApp(…)` function.

    gh|temp-shiny|/skeleton/App.R||

  }
  { sidebarLayout()

    gh|temp-shiny|/ui/layout/sidebar/App.R||

  }
  { Various ways to get input from a user

   `shiny` comes with a few widgets (bootstrap?) to get input (data) from a user.

    These widgets need to be placed in the `ui` side of an app.

    gh|temp-shiny|/ui/XYZLayout/app.R||

  }
  { Hiding and showing panels

   `conditionalPanel(…)` allows to show or hide a panel depending on the value
    of a → development/languages/JavaScript[JavaScript] expression which in
    turn might be set using the `output$…` construct.

    gh|temp-shiny|/ui/XYZpanel/conditional/app.R||

  }
  { uiOutput / renderUI

    With the `uiOutput` / `renderUI` combination, it's possible to dynamically create input widgets.

    gh|temp-shiny|/ui/XYZoutput/ui/app.R||

  }
  { HTML tags #shiny-html-tags

    Text can be rendered with different → development/web/HTML/tags[HTML tags]. The available tags are found as → development/languages/R/function[functions] in the `tags` → development/languages/R/data-structures/list.

    The following example uses → development/languages/R/functions/lapply[`lapply()`] on `names(tags)` to produce an → development/web/HTML/tags/ul[unordered list] of tags.

    gh|temp-shiny|/ui/html/tags/App.R||

  }
  { Reactive functions

    Some functions are reactive: `render…()`, …?

   `renderPlot` is *reactive*: it is called whenever the inputs (`input$…`) change.

    *Reactive elements* must be accessed within reactive functions. If accessed outside of a reactive context, the error *Operation not allowed without an active reactive context* is thrown.

    Apparently, a reactive context can also be established with the function `reactive({ … })`.


  }

}

sa:
  R packages
    → development/languages/R/packages/shinydashboard[`shinydashboard`] and → development/languages/R/packages/shinyjs[`shinyjs`].

    → development/languages/R/packages
