$ R package: DBI

The `DBI` package defines a generic → development/databases[database] interface for → development/languages/R[R].


{ DBI Backends #r-dbi-backend

  The actual database dependent implementation is implemented by so called *DBI backends*, some of which start with `R`
  (for example → development/languages/R/packages/RMySQL[`RMySQL`] or
  → development/languages/R/packages/ROracle[`ROracle`]).

  A backend needs to define three → development/languages/R/object/class[classes] which are subclasses of
    • `DBIDriver`
    • `DBIConnection`
    • `DBIResult`
 
}
{ Some methods

  → development/languages/R/packages/DBI/dbDataType[`DBI::dbDataType(dbiCon, rObj)`] returns a proposed → development/databases/SQL/data-types[SQL (database) data type] with which an
  → development/languages/R/object[R objects] should be stored on a specific database backend.

  { dbExistsTable

    `dbExistsTable(con, tab)` checks if a table exists.

  }
  { dbColumnInfo

    `dbColumnInfo` describes a result set (that is: a `DBIResult`).

  }
  { dbListFields

    `dbListFields(con, 'tab_name')` returns a → development/languages/R/data-structures/vector[vector] that contains the names of the columns of the
    → development/databases/SQL/table[table] named `*tab_name*.

    Notably, it does *not* return the columns' → development/databases/SQL/data-types[data types] and I didn't find a straight forward method in DBI that would to that.
    However, the column types of a tables can be queried a bit combersomly with → development/databases/SQL/select[`select * from table`] combined with a
    → development/databases/SQL/select/limiting-resultset[SQL limit clause that truncates the returned record set to 0 records]:
code {
db          <- dbConnect(…)

empty_res   <- dbSendQuery(db_omis_lab, 'select top 0 * from data')
col_info    <- dbColumnInfo(empty_res)
dbClearResult(empty_res)
code }

    Notes:
      • It seems that `dbSendQuery` cannot be used here.
      • `col_info` is a → development/languages/R/data-structures/data-frame[data frame] with two columns, named `name` and `type`.

  }

}
{ TODO

  `dbExecute` can be used for → development/databases/SQL/DML[DML statements], `create table`, `drop table` etc.
  -
  For a reason I don't really understand, and unlike other functions such as `dbSendQuery(…)`, `dbExecute` needs to be prefixed with `DBI::`:
code {
DBI::dbExecute(con, 'create table t (v varchar(20))');
code }

}

sa:


  Testing the → development/languages/R/packages/DBI/dbConnect/encoding[`encoding` parameter of `dbConnect`]

  → development/languages/R/packages

  The → development/languages/Perl/modules/DBI[Perl module DBI].

  → development/databases#accessing-databases[Accessing databases]
