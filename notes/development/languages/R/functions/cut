$ R function: cut

`cut` assigns each element of a → development/languages/R/data-structures/vector to a «bin». The sizes (start and end values) of each bin is indicated with the second argument.

In the following example, the → development/languages/R/data-structures/vector[vector] `v` containes elements between 2 and 19.
-
Each of these elements is assigned a bin, the first of which spans 0…5, the second of which spans 5…10 etc (according to the second parameter).

The returned value (`c`) is a vector (actually: a → development/languages/R/data-structures/factor) that contains the bin for each element of `v`.
`c` has the same length as `v`.

The first element (8) falls between `(5,10]`, the
second element (13) falls between `(10,15]` etc.
gh|about-r|/functions/cut/basic.R||

{ The returned factor and its levels

 `cut` returns a → development/languages/R/data-structures/factor whose (default) → development/languages/R/data-structures/factor#r-factor-level[levels] look like `(start,end])`.
  Although this notation *looks* mathemtical, the levels are in fact characters:
  gh|about-r|/functions/cut/factor.R||

}
{ Using non-default labels

  The `levels` of the returned factor can be named with the `labels` argument. The following example assignes a (textual) code (low, medium, high) to a (numerical) rating in the range between 0 and 10:
  gh|about-r|/functions/cut/labels.R||

}
{ Using no labels at all

  If the argument `labels` is set to `FALSE`, `cut` does not return a factor but an integer → development/languages/R/data-structures/vector (that indicates the bucket or bin of the interval into which a number is assigned):
  gh|about-r|/functions/cut/labels-FALSE.R||

}
{ Getting the bucket number from a factor

  It is also possible to get the bucket number by coercing the returned factor with → development/languages/R/functions/as/integer[`as.integer`] (See also → development/languages/R/functions/as/integer#r-as-integer-factor).
  gh|about-r|/functions/cut/as.integer.R||

}
{ Distributing the vector's elements into n equally sized intervals

  A special case is if the second parameter is a single number (a vector of length 1). In this case, `cut` will assign the input vector's elements into the specified number of equally sized intervalls:
  gh|about-r|/functions/cut/n-intervalls.R||

}


sa:
  → development/languages/R/functions/index 
