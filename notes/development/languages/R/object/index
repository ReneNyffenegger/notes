$ R objects

All R objects are built upon the native → development/languages/R/data-structures[data structures]:
  • → development/languages/R/data-structures/vector[vector],
  • → development/languages/R/data-structures/matrix,
  • → development/languages/R/data-structures/list[list] and
  • → development/languages/R/data-structures/data-frame[data frame]


{ Exploring R objects #exploring-r-objects

  The following functions are useful to explore the »internals« of an object:
    • → development/languages/R/functions/class[`class`]
    • → development/languages/R/functions/mode[`mode`]
    • → development/languages/R/functions/str[`str`] displays the *internal structure* of an object
    • → development/languages/R/functions/summary[`summary`]
    • → development/languages/R/functions/typeof[`typeof`]

  See also the → development/languages/R/packages/lobstr[package `lobstr`]

}
{ Attributes

  All R objects, except the special `NULL` object, can have one or more → development/languages/R/object/attributes[attributes] attached to it. These are stored as a *pairlist*.

}
{ Symbols

  R Objects are accessed via *symbols* or *variables* (Is variable the same thing as a symbol?).

 *Symbols* are also objects.

  Symbols have the → development/languages/R/object/mode[mode] *name*, storage mode *symbol* and type *symbol*.

}
{ Expression objects

  An expression objects contains one or more parsed but unevaluated statements.

  Expression objects are very similar to → development/languages/R/data-structures/list[lists].

}
{ C Structures for objects

  In the → development/languages/R/source[source code of R], an object is a pointer to a structure with → development/languages/C-C-plus-plus/C/language/typedef[typedef] `SEXPREC`.

  The different datatypes are represented by `SEXPTYPE` (which is a typedef'd `unsigned int`, see → development/languages/R/source/src/include/Rinternals_h[`src/include/Rinternals.h`]).

}
{ Serializing objects


  An object can be serialized with `serialize`, `save` or → development/languages/R/functions/saveRDS-readRDS[`saveRDS`] and be deserialzed with
 `unserialize`, `load` or `loadRDS`.

}
{ Object orientation

  R has three object oriented systems: S3, S4 and S5


}

{ TODO

    → development/languages/R/object/class[class],
    → development/languages/R/object/mode[mode]

}
sa:

  → development/languages/R/functions/identical[`identical(obj_1, obj_2)`] tests if two objects are *exactly* equal.

  → development/languages/R/function[Functions] are objects, too.

  → development/languages/R/object/NULL[The `NULL` object].

  → development/languages/R/functions/dput[`dput`] dumps an object in the form of R code.
