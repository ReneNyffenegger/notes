$ R: atomic vectors
@ vector

(Atomic) *vectors* are probably *the* most fundamental → development/languages/R/data-structures[data structure] in the → development/languages/R[R programming language].

An atomic vector is different from a one-dimensional → development/languages/R/data-structures/array[array]: an array has a `dim` → development/languages/R/object/attributes[attribute] of
length one while a vector has no such attribute.

An atomic vector is also different from a → development/languages/R/data-structures/list[list]. The elements of a vector are all of the same type while
a list can contain any arbitrary type.

Atomic vectors are constructed with the → development/languages/R/functions/c[`c` function] or the
→ development/languages/R/functions/vector[`vector` function].

→ development/languages/R/functions/dim#r-dim-vector[`dim()` applied on a vector] returns NULL.

The three properties of vectors are
  • type (of which there are six)
  • length (the number of elements that the vector contains, see function → development/languages/R/functions/length[`length()`])
  • attributes (which add arbitrary → development/Data/metadata[metadata])

{ The six vector types

  R has six basic (»atomic«) vector types:
  table { lll

    → development/languages/R/functions/typeof[`typeof(…)`] ☰ → development/languages/R/functions/mode[`mode(…)`] ☰ `storage.mode(…)`
    logical   ☰ logical   ☰ logical
    integer   ☰ numeric   ☰ integer
    double    ☰ numeric   ☰ double
    character ☰ character ☰ character
    complex   ☰ complex   ☰ complex
    raw       ☰ raw       ☰ raw

  table }

}
{ Homogeneous

  All elements within a vector share the same type, that is: they have the same → development/languages/R/object/mode[mode]
  In contrast, → development/languages/R/data-structures/list[lists] are heterogeneous.

  As vectors can have elements of only one data type, it's not possible to nest vectors within other vectors:
  gh|about-R|/data-structures/vector/not-nested.R||

}
{ Creating vectors

  For example with
    • → development/languages/R/functions/c[`c(…)`]
    • → development/languages/R/functions/seq[`seq(…)`]
    • → development/languages/R/functions/as/vector[`as.vector`] produces a vector with a given → development/languages/R/object/mode[mode] and length.
    • …

}
{ 1-indexed

  The first element of a vector has index `1`:
code {
elems <- c('one', 'two', 'three')
elems[1] # one
code }

}
{ Iterating over vectors

  For example with
    • → development/languages/R/functions/sapply[`sapply`]
    • …
}
{ Comparing vectors

  gh|about-r|/vector/comparing.R||

}
{ Selecting elements

  gh|about-r|/vector/selecting_elements.R||

}
{ Names property

  Vectors can have the *names* property which names each element within the vector.

  gh|about-r|/vector/names_property.R||

}
{ Visualizing vectors

  A simple method to visualize the values in a vector is to use → development/languages/R/functions/barplot[`barplot`].

}
{ Printing vectors vertically #r-vector-print-vertically

  At times, the elements of a vector can be easier seen by printing each element on its own line. This is possible with → development/languages/R/functions/cat#cat-separate-line[`cat(…)`].

  gh|about-r|/data-structures/vector/print-vertically.R||

}

sa:

  Vectors can be created with → development/languages/R/functions/seq[`seq(…)`].

  → development/languages/R/functions/unlist[`unlist(…)`] to turn a vector into a → development/languages/R/data-structures/list[list].

  → development/languages/R/functions/is_vector

  The indices of a *logical vector* that are `TRUE` are returned by the function → development/languages/R/functions/which[`which()`].
  -
  → development/languages/R/functions/match[`match(…)`] returns the index of the *first* element in a vector that matches a specific value.

  → development/languages/R/functions/Vectorize[`Vectorize(…)`].

  In order to print each element of a vector in its own line, → development/languages/R/functions/cat#cat-separate-line[`cat` with `sep="\n"`] might be used.

  → development/languages/R/functions/for[`for`] allows to iterate over an atomic vector (See → development/languages/R/functions/for#r-for-iterate-vector[iterating over a character vector]).

  → development/languages/R/functions/table[`table`] can be used to → development/languages/R/functions/table#r-table-count-frequency[count the frequencies of its elements] and to
  → development/languages/R/functions/table#r-table-contigency-tables[create contigency tables] from two or more vectors.

  A vector can be turned into a → development/languages/R/data-structures/factor[factor] with
  → development/languages/R/functions/as/factor[`as.factor(…)`].

  → development/languages/R/data-structures/vector/NA[`NA`] is a constant logical vector of length 1 whose only element is `NA`.

  → development/languages/R/packages/Hmisc/Cs[`Cs` of package Hmisc] creates a character vector from *unquoted* names.

  → development/languages/R/data-structures/matrix/vector-to-matrix[Create a matrix from a vector]
