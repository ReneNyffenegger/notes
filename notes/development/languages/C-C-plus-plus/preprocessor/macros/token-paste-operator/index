$ C/C++ Preprocessor: Token paste operator

The *token paste operator* concatenates two tokens in a macro body into one single token that is not separated by a space. The syntax is `token_one ## token_two`. The token paste operator is particularly useful
in a macro with arguments where the token paste operator concatenates two arguments.

{ Simple demonstration

  The follwing simple example of the token paste operator aims at demonstrating how it can be used.

  First, a simple macro with two arguments is defined: `PASTE_TWO_TOKENS`. When the macro is used (and expanded), it simply concatenates the two arguments.

  If `PASTE_TWO_TOKENS` is used with two tokens that have previoulsy been `#defined`, the macro does not substitute the tokens with their defined value.
  In order to do that, another macro needs to be created: `PASTE_TWO_TOKENS_INDIRECT`. In the example, this macro simply passes the tokens to `PASTE_TWO_TOKENS`. However, while they're being forwared to
 `PASTE_TWO_TOKENS`, they're also expaned.

  `PASTE_TWO_TOKENS_INDIRECT` is also needed, for example, to expand predefined macros such as → development/languages/C-C-plus-plus/preprocessor/macros/predefined/__COUNTER__[`__COUNTER__`] and concatenate it.

  gh|about-preprocessor|/macros/token-paste-operator/once-and-twice.c||

}
sa:
  → development/languages/C-C-plus-plus/preprocessor/macros/concatenate[Concatenate words to single identifiers]
