$ Creating a shared and static library with the Meson build system

This page is an attempt to show how a static and a shared → development/languages/C-C-plus-plus[C] library can be built with the → development/build-systems/Meson[Meson build system].
-
It is a sequel to → development/languages/C-C-plus-plus/GCC/create-libraries.

The files discussed on this page were contributed by → https://github.com/albfan[Alberto Fanjul (albfan)]. I appreciated and benefitted from his work very much and I hope you can, too.

{ Overview of the source files

  This example builds a static and shared version of the tq84-library (whose sources can be viewd → development/languages/C-C-plus-plus/GCC/create-libraries#tq84-lib-src[here]).
  -
  The sources are located under `./src/tq84`.

  After building the libraries, the executables using the libraries are built. There is only one file that uses the library: → development/languages/C-C-plus-plus/GCC/create-libraries#main-src[`./src/main.c`].

}
{ meson.build files

  The Meson build system is mainly configured with `meson.build` files.

  In our example, there are three `meson.build` files: in the top level directory, in the `./src` directory beneath (where `main.c` and `dynamic-library-loader.c` are located) and lastly
  in `./src/tq84` where the files for the shared objects are located (`add.*` and `answer.*`).

  { Top level meson.build file

    Our top level `meson.build` uses the Meson function `project()` to name the project (*sum*) and specify the → development/languages[programming language] for the
    project (in this case: → development/languages/C-C-plus-plus/C). Also, the project's license and version are stated here.

    The `subdir()` function instructs Meson to enter into the specified directory (`src`) and execute the `meson.build` file in that subdirectory

    gh|gcc-create-library|/meson.build||

  }
  { ./src/meson.build

    The `./src/meson.build` file starts with the `subdir()` function. So, Meson first descends into `./src/tq84` and executes that `meson.file` which creates the static and shared object files.
    -
    It is necessary to build them first because the executables are dependent on it. More on this later.

    After building the shared objects, control is returned to `./src/meson.build`. This file now instructs Meson to build three executables, each with the `executable()` function.
    -
    The first argument indicates the name of the executable and the unnamed following (that is: positional) arguments the sources to be compiled. In our case, this is one file: `main.c`.

    The named argument `link_with` is used to determine with which files the executable is to be linked.
    -
    Note that we use a variables here: `tq84_lib_static` and `tq84_lib_shared`. The values for these variables were previously set when running `./src/tq84/meson.build`.

    The executable `dynamic-library-loader` uses the functions `dlsym()`, `dlopen()` and `dlerror()` which are found in `libdl`. The gnu → development/languages/C-C-plus-plus/GCC/linker[linker], this library would be linked with the `-ldl` flag.
    -
    In order for Meson to do the same thing, we first get a compiler object (`cc`) through the `meson` object's `get_compiler('c')` function. Then, the compiler object can be queried for the
    correct `ld` library with `cc.find_library('dl')`.
    -
    With this information, we're ready to create the executable `dynamic-library-loader`.

    gh|gcc-create-library|/src/meson.build||

  }
  { ./src/tq84/meson.build

    The `./src/tq84/meson.build` file is responsible to create the shared and static shared objects.

    The first line assigns the source names to the variable `runtime_sources` so that they don't need to be repeated.

    The *static library* is built with the `static_library()` function, the *shared library* with the `shared_library()` function.

    The `install` flag set to `true` causes the target to be installed (probably to → Linux/fhs/usr/lib[`/usr/lib`].

    gh|gcc-create-library|/src/tq84/meson.build||

  }

}
