$ gcc -std

Choose the → development/languages/C-C-plus-plus/C/standards[c standard] according to which a compilation unit should be compiled, for example
  • `-std=gnu89`
  • `-std=c90`
  • `-std=c99`
  • `-std=c11` 
  • …

`-std=c89` is equivalent to using the `-ansi` → development/languages/C-C-plus-plus/GCC/options[option].

{ g++

  The standards for → development/languages/C-C-plus-plus/CPP start with `c++`:
    • `-std=c++98`
    • `-std=c++11`
    • `-std=c++14`
    • `-std=c++17`
    • `-std=c++2a`

  → development/GNU extensions can be chosen with `-std=gnu++98` etc.

}
{ Combination with -pedantic #gcc-std-and-pedantic

  `-std=c90` makes gcc accept a superset of C90 (for example the more flexible C99 variable declarations anywhere in the program). In order to make gcc enforce the C90 standard,
  the → development/languages/C-C-plus-plus/GCC/options/pedantic[`-pedantic`] flag needs to also be specified.

  This is demonstrated in the following program. It compiles without warning if compiled with either
    • `-std=c89`
    • `-std=c90`
    • `-std=c99`
    • `-std=c99 -pedantic`
  However, if compiled with one of the following, it issues a warning about the *mixed declaration and code*:
    • `-std=c89 -pedantic`
    • `-std=c90 -pedantic`

  gh|about-gcc|/options/std/variable-declaration.c||

}

sa:

  → development/languages/C-C-plus-plus/C/standards

  → development/languages/C-C-plus-plus/GCC/options
