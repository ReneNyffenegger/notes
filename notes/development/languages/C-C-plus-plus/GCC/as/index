$ GNU assembler

{ Turning on intel syntax or AT&T syntax #gnu-as-intel-syntax

code {
.intel_syntax noprefix
xor eax, eax

.att_syntax prefix
movl %adx, %eax…
code }

  See also
     • The → development/GNU/toolchain/binutils/objdump#objdump-M[`-M`] option of `→ development/GNU/toolchain/binutils/objdump` chooses the assembly dialect.
     • `set disassemly-flavor intel` in → development/tools/gdb.
     • → development/languages/assembler/x86/dialects#x64-gnu-as-dialects[Assembler dialects (GNU/x64)]

}
{ TODO

`foo.s`:
code {
.text
.globl _start
_start:
	push	$11		# sys_execve
	popl	%eax

	cdq

	pushl %edx		# null-terminator byte(s)
	pushl $0x68732f2f	# //sh
	pushl $0x6e69622f	# /bin
	movl %esp, %ebx		# "/bin//sh" addr

	movl	%edx, %ecx

int $0x80	# syscall
code }

Turning `foo.S` into `foo.o`:
code {
$ as foo.s  -o foo.o
code }

code {
$ ld foo.o  -o foo
code }

code {
$ objdump -d foo
code }

  { Useful preprocessor directives

    Useful preprocessor directives:
      • `.arch target-architecture` (to emit an error if an incompatible instruction for the target architecture is used). Compares to the → development/languages/C-C-plus-plus/GCC/options/m_lowercase/arch[`-march`] gcc option.
      • `.cpu cpu-name`: to specify the target processor (also to emit errors when incompatible instructions are used). Compares to the → development/languages/C-C-plus-plus/GCC/options/m_lowercase/cpu[`-mcpu`] gcc option.
      • `.include file`
      • `.macro`
      • `.if`
      • `.global` (to make a *symbol* visible to → Linux/shell/commands/ld[ld]).
      • `.equ` to define a constant. (Compares to the `#define` → development/languages/C-C-plus-plus/preprocessor[preprocessor] directive)
      • `.set`
      • `.name` to create an alias for register names
      • `.size`
      • `.struct`
      • `.skip`
      • `.space`
      • `.text`
      • `.string`
      • `.hword`, `.2byte`, `.word`, `.4byte`, `.quad`, `.8byte` for 16, 32 and 64 bit variable declarations.
      • `.ascii` / `.asciiz`
      • `.data`
      • `.bss` (unitialized data)
      • `.align …`

  }
}

sa: 

  → development/languages/C-C-plus-plus/GCC/options/S_uppercase[`gcc -S`] to create assembler code.
  -
  → development/languages/C-C-plus-plus/GCC/options/masm[`gcc -masm=…`] to select the assembly dialect.
  -
  → development/languages/C-C-plus-plus/GCC/options/f/verbose-asm[`gcc -fverbose-asm`] to add extra commentary to make the produced assembly file more readable.

  → development/languages/C-C-plus-plus/GCC/as/inline[inline assembly].

  → development/languages/C-C-plus-plus/GCC

  → development/GNU/toolchain/binutils

  → development/languages/assembler, → development/languages/assembler/learning[Learning assembler with gas].


