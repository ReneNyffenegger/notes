$ The Standard C Library

«Enhances» → development/languages/C-C-plus-plus/C with
  • input/output
  • memory management
  • string manipulation
  • etc

{ Some functions and function families

  → development/languages/C-C-plus-plus/C/libc/arg_parse

  → development/languages/C-C-plus-plus/C/libc/alarm[`alarm`]

  Error related functions such as → development/languages/C-C-plus-plus/C/libc/functions/error/perror[`perror()`]

  → development/languages/C-C-plus-plus/C/libc/exit[exit]

  → development/languages/C-C-plus-plus/C/libc/getc[getc]

  → development/languages/C-C-plus-plus/C/libc/getopt[getopt]

  → development/languages/C-C-plus-plus/C/libc/ioctl[ioctl]

  → development/languages/C-C-plus-plus/C/libc/alloc[Memory allocation] such as `malloc`.

  → development/languages/C-C-plus-plus/C/libc/strings-and-arrays[String and array functions] (such as `strcmp` to compare strings).

  → development/languages/C-C-plus-plus/C/libc/date-and-time[Date and time]

  → development/languages/C-C-plus-plus/C/libc/functions/open[`open` and `fopen`]

  → development/languages/C-C-plus-plus/C/libc/functions/seek[`fseek` and `lseek`]

  → development/languages/C-C-plus-plus/C/libc/signal[signal handling]

  → development/languages/C-C-plus-plus/C/libc/sleep[sleep / nanosleep]

  → development/languages/C-C-plus-plus/C/libc/search/t[`tsearch` and `tfind`] to implement an associative array.

  → development/languages/C-C-plus-plus/C/libc/stat[stat]

  → development/languages/C-C-plus-plus/C/libc/wait[wait]

  With the → development/languages/C-C-plus-plus/C/libc/stdarg_h[`<stdarg.h>`] include file, it is possible to access variadic arguments in functions.

  { gets / fgets #libc-gets-fgets

    `gets()` reads a line, terminated by a new line or EOF. For this reason, `gets` should almost never be used because in normal circustances, it's impossible to know in advance
    how long the line will be.

    `fgets()` reads from a file rather than from → development/stdin-stdout-stderr[stdin] and allows to specify the maximum amount to be read.

  }

  { printf family

    Gone → development/languages/C-C-plus-plus/C/libc/functions/printf[here].

  }

  { scanf family

    Gone → development/languages/C-C-plus-plus/C/libc/functions/scanf[here]


  }
  { syscall #libc-syscall

    Call a → Linux/kernel/sys-calls[Linux kernel syscall] directly, »without« libc (that is except using libc's `syscall`):
    gh|about-libc|/syscall.c||

  }

}
{ include files

  { string.h

    *Reserved names*: Names that begin with `str`, `mem` or `wcs` and are followed by a lowercase letter are reserved because they might be added in the declarations in the `<string.h>` header file.

  }

}
{ glibc

  As per → https://stackoverflow.com/a/2120070/180275[this stackoverflow answer], → development/GNU[GNU's] libc (→ https://www.gnu.org/software/libc/libc.html[glibc]) is → Linux[Linux] specific and won't work on → Windows.

}
{ musl

  → http://www.musl-libc.org/[musl] claims to be a *lightweight, fast, simple, free* standard library.

}

{ TODO

  → development/languages/C-C-plus-plus/C/libc/src/sysdeps/x86_64/elf/start_S

  The relation of `dirent` struct (`<dirent.h>`) to the → Linux/kernel/source/include/linux/dcache_h#linx-dentry[`dentry`] struct in Linux.

}

sa:
  → development/languages/C-C-plus-plus/C/libc/building-test-version

  → Linux/fhs/usr/lib/libc_a

  The gcc options → development/languages/C-C-plus-plus/GCC/options/no/compare-nostartfiles-nodefaultlibs-nolibc-nostdlib[`-nostartfiles`, `-nodefaultlibs`, `-nolibc` and `-nostdlib`].

  → development/languages/C-C-plus-plus/C/libc/input-output[Input/output]

  The → development/languages/C-C-plus-plus/C/libc/structs/FILE[`FILE` struct].

  → development/languages/C-C-plus-plus/CPP-Standard-Library 


links:
  → http://www.gnu.org/software/libc/manual/html_node/index.html[The GNU C Library]

