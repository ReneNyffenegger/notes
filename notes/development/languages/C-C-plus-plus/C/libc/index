$ The Standard C Library

«Enhances» → development/languages/C-C-plus-plus/C with
  • input/output
  • memory management
  • string manipulation
  • etc

{ Some functions

  → development/languages/C-C-plus-plus/C/libc/arg_parse

  → development/languages/C-C-plus-plus/C/libc/getc

  → development/languages/C-C-plus-plus/C/libc/getopt

  → development/languages/C-C-plus-plus/C/libc/malloc

  { gets / fgets

    `gets()` reads a line, terminated by a new line or EOF. For this reason, `gets` should almost never be used because in normal circustances, it's impossible to know in advance
    how long the line will be.

    `fgets()` reads from a file rather than from stdin and allows to specify the maximum amount to be read.

  }

  { printf family #printf-family

    The complement to the printf family is the → #scanf-family.


  }

  { scanf family #scanf-family

    The scanf family is the complement to the → #printf-family. It decomposes a string into parts and assigns the values of these parts to variables.

  }
  { syscall #libc-syscall

    Call a → Linux/kernel/sys-calls[Linux kernel syscall] directly, »without« libc (that is except using libc's `syscall`):
    gh|about-libc|/syscall.c||

  }

}

{ TODO

  → development/languages/C-C-plus-plus/C/libc/src/sysdeps/x86_64/elf/start_S

}

sa:
  → development/languages/C-C-plus-plus/C/libc/building-test-version

  → Linux/fhs/usr/lib/libc_a

links:
  → http://www.gnu.org/software/libc/manual/html_node/index.html[The GNU C Library]

