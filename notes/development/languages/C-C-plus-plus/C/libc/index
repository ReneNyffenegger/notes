$ The Standard C Library

«Enhances» → development/languages/C-C-plus-plus/C with
  • input/output
  • memory management
  • string manipulation
  • etc

{ Some functions

  → development/languages/C-C-plus-plus/C/libc/arg_parse

  → development/languages/C-C-plus-plus/C/libc/exit

  → development/languages/C-C-plus-plus/C/libc/getc

  → development/languages/C-C-plus-plus/C/libc/getopt

  → development/languages/C-C-plus-plus/C/libc/malloc

  → development/languages/C-C-plus-plus/C/libc/sleep

  → development/languages/C-C-plus-plus/C/libc/search/t[`tsearch` and `tfind`] to implement an associative array.

  → development/languages/C-C-plus-plus/C/libc/wait

  With the → development/languages/C-C-plus-plus/C/libc/stdarg_h[`<stdarg.h>`] include file, it is possible to access variadic arguments in functions.

  { gets / fgets

    `gets()` reads a line, terminated by a new line or EOF. For this reason, `gets` should almost never be used because in normal circustances, it's impossible to know in advance
    how long the line will be.

    `fgets()` reads from a file rather than from stdin and allows to specify the maximum amount to be read.

  }

  { printf family #printf-family

    Apparently, with → development/languages/C-C-plus-plus/C/standards#c99, there is also a `snprintf` for *safe* string assembly.

    The complement to the printf family is the → #scanf-family.

    For `vsprintf`, see → development/languages/C-C-plus-plus/C/libc/stdarg_h/index.html#libc-stdarg-h-vsprintf[here].

    See also → development/languages/printf[`printf` in different languages] and
    → development/languages/C-C-plus-plus/CPP-Standard-Library/sstream/ostringstream[`ostringstream`] for a
    → development/languages/C-C-plus-plus[C++] replacement for `sprintf`.

  }

  { scanf family #scanf-family

    The scanf family is the complement to the → #printf-family. It decomposes a string into parts and assigns the values of these parts to variables.

  }
  { syscall #libc-syscall

    Call a → Linux/kernel/sys-calls[Linux kernel syscall] directly, »without« libc (that is except using libc's `syscall`):
    gh|about-libc|/syscall.c||

  }

}
{ glibc

  As per → https://stackoverflow.com/a/2120070/180275[this stackoverflow answer], → development/GNU[GNU's] libc (→ https://www.gnu.org/software/libc/libc.html[glibc]) is → Linux[Linux] specific and won't work on → Windows.

}
{ musl

  → http://www.musl-libc.org/[musl] claims to be a *lightweight, fast, simple, free* standard library.

}

{ TODO

  → development/languages/C-C-plus-plus/C/libc/src/sysdeps/x86_64/elf/start_S

}

sa:
  → development/languages/C-C-plus-plus/C/libc/building-test-version

  → Linux/fhs/usr/lib/libc_a

  The gcc options → development/languages/C-C-plus-plus/GCC/options/no/compare-nostartfiles-nodefaultlibs-nolibc-nostdlib[-nostartfiles, -nodefaultlibs, -nolibc and -nostdlib].

links:
  → http://www.gnu.org/software/libc/manual/html_node/index.html[The GNU C Library]

