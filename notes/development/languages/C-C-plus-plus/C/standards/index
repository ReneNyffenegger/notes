$ C standards

C (and → development/languages/C-C-plus-plus/CPP[C++]) standards (as also → development/languages/C-C-plus-plus/CPP/standards[C++ standards]) are usually named after the year in which they were published.
-
For example *C++98* was published in 1998.

{ C89/C90 #c90

  The → development/languages/C-C-plus-plus/GCC[gcc] → development/languages/C-C-plus-plus/GCC/options[option] → development/languages/C-C-plus-plus/GCC/options/std[`-std=c89`] or `-ansi`
  enforces this standard.

  Because this standard was ratified in 1990, it occasinally is referred to as *C90*.

  Amendment 1 to C90 introduced → development/languages/C-C-plus-plus/C/libc/strings-and-arrays#libc-memcpy[`wmemcpy`].

}
{ C94/C95/AMD1

  AMD1 is an amendment to the C89/C90 standard:
    • digraphs
    • `__STDC_VERSION__`


}
{ C99 #c99

  A new standard

  Apparently, C99 introduced among others
    • `bool` (`<stdbool.h>`)
    • `int32_t` etc. (`<stdint.h>`)
    • `for (int i = …) {}`
    • `snprintf` (see → development/languages/C-C-plus-plus/C/libc/functions/printf[`printf` family]).
    • → development/languages/C-C-plus-plus/CPP[C++] like *one line* comments (`//`)

}
{ C11

  The latest(?) C standard.

  `<threads.h>`

  `gets()` (already deprecated in C99) replaced with `gets_s()` because of → development/security[security] issues.

}
sa:
  GCC's → development/languages/C-C-plus-plus/GCC/options/std[`-std=…`] option.
