$ C: function pointers

{ Three functions with the same signature

  Here are three functions. All of the have the same signature: they take a `char const*` and a `char` and they return an `unsigned int`:

  gh|about-c|/datatypes/pointer/function/funcs.h||

  Here is their implementation:

  gh|about-c|/datatypes/pointer/function/funcs.c||

}
{ Using a function pointer

  The following short code declares a function pointer, assignes a function to it and executes the function via the function pointer

  gh|about-c|/datatypes/pointer/function/declare-assign-execute.c||

}
{ Passing a function pointer to a function


  A function whose first argument is a function pointer. The function executes the function pointer with the other two arguments it receives:

  gh|about-c|/datatypes/pointer/function/pass-to-func.c||

}
{ Returning a function pointer

  Similarly, it's possible to declare a function that returns a function pointer:

  gh|about-c|/datatypes/pointer/function/return.c||


}



sa:
  â†’ development/languages/C-C-plus-plus/C/language/typedef#c-typedef-function-pointer[Typedef'fing a function pointer]
