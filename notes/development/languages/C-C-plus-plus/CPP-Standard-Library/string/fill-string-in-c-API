$ Fill a std::string in a C API 

In → development/languages/C-C-plus-plus/C, a function that is supposed to return a string to its caller usually does so by having a `char* buf` argument. The C function then writes the string
to be returned into the memory buffer (`buf`) that is provided by the calller.

Of course, in → development/languages/C-C-plus-plus/CPP, with the → development/languages/C-C-plus-plus/CPP-Standard-Library[standard library], we want to use a
`std::string` but *also* need to call such C functions.

In order to do that, we first have to allocate a buffer that is large enough to receive the string and then pass the pointer to the buffer with `&buf[0]`. This is demonstrated
in the following simple example:
gh|about-cpp-standard-library|/string/fill-string-in-c-API.cpp||

This works at least with C++11 because the characters are stored in one continous buffer.


sa:
  `data()` returns a pointer to the first character of a string and, with C++17, is an alias to `&str[0]` if the `string` is not `const`.

  → development/languages/C-C-plus-plus/CPP-Standard-Library
