$ Node.js

Node.js bundles the → development/languages/JavaScript/engines/V8 → development/languages/JavaScript/engines (which is also used by → development/web/browser/Chrome) with some libraries for I/O and networking.

{ Installation #node-js-install

  { Linux

    → Linux/distributions/arch:
code {
→ Linux/shell/commands/sudo → Linux/distributions/arch/pacman -Sy nodejs
sudo pacman -Sy npm
code }
  }
  { Windows

    On → Windows with → Windows/Chocolatey, with one of the following (I am not really sure how they differ, but
    see also → https://stackoverflow.com/a/34830675/180275[this stackoverflow answer]).
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y nodejs
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y nodejs-lts
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y nodejs.install
code }

?  Without administrative privileges, a → development/archive-files/zip can be downloaded from → https://nodejs.org/en/download/prebuilt-binaries[here] (choose *Prebuilt Binaries* in the tabs)

  }
  { APT

    Distributions with APT (Debian, Ubuntu, …). `npm` is typically required, too:
code {
sudo apt install nodejs
sudo apt install npm
code }

    It turns out that the installed version is quite behind (as of 2023-03-04:) 
code {
$ node -v
v12.22.12
code }

  }
}

{ Hello World

  gh|about-node.js|/hello-world.js||

  The Hello World application can be started with
code {
$ node hello-world.js
code }

}
{ Using node.js as a shell

  node.js can be used as a shell by typing the executable name `node` without a script name:
code {
PS C:\Users\Rene> node
code }

  Exiting from the shell:
code {
> process.exit()
code }

}
{ Logging

  Some basic logging functionality is provided by the `logging` module.

  The `logging` module needs not be added with `require('logging')` (*2020-09-23*: this seems not to be the case anymore).

  gh|about-node.js|/api/console/log.js||

}
{ Modules / require()

  Types of modules
    • Built-in (core) modules (such as `fs`, `http`, …)
    • NPM modules: these are 3rd party modules, to be installed with `→ development/languages/JavaScript/npm install …`.
    • Local modules (identified by using path specifiers as `./`, `../` in their name and having on of the suffixes `.js`, `.json`, `.mjs`, `.cjs`, `.wasm` or `.node`).

  { require() #node-js-require

    Modules are imported with the special purpuse function `require` (which is not part of the standard → development/languages/JavaScript API).

    In order for a module to be importable with `require`, the module must either be
      • a *folder* with a `package.json` file, or
      • a → development/languages/JavaScript *file*
   
  }

}
{ Accessing environment variables

  The values of → development/environment-variable[environment variables] can be accessed via `process.env.ENVVAR`:

  gh|about-node.js|/api/process/env.js||

}
{ Temporary directory #node-js-tmp-dir

  The path of the temporary directory (usually `→ Linux/fhs/tmp` on → Linux) is returned by `os.tmpdir()` or `os.tmpdir`:
  gh|about-node.js|/api/os/tmpdir.js||

}
{ TODO

  { Package managers
    { Yarn

      Yarn, *yet another resource navigator*, is an alternative package manager to → development/languages/JavaScript/npm.

      Unlike npm, Yarn does not come pre-installed with Node.js and needs therefore to be installed separately:
code {
npm install yarn -g 
code }

    }
    { pnpm

     *pnpm* is the *performant* node package manager.

      The focus of pnpm is to be an alternative to npm which is disk-space efficient.

      It seems that pnpm can be installed like so:
code {
npm install -g pnpm
code }

    }
    { Feature comparison between npm, Yarn and and pnpm

      → https://pnpm.io/feature-comparison[pnpm.io/feature-comparison] has a tabular feature comparison between npm, Yarn and pnpm

    }
    { corepack

      → https://www.npmjs.com/package/corepack[Corepack] acts as a bridge between Node.js projects and the package managers they are intended to be used with during development.

      In practical terms, Corepack allows to use Yarn, npm and/or pnpm without having to install them.

    }
  }
  { nvm #nvm

   *nvm* is a version manager for node.js which works on POSIX compliant shells (including → Windows/Subsystem-for-Linux[WSL]).

    nvm is installed with the following command:
code {
→ tools/cURL[curl] https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
code }

    The following command installs version 19 to `~/.nvm/versions/node/v19.…/bin/node`:
code {
nvm install 19
code }
 

  }

}

sa:

  → development/languages/JavaScript/npm is the *node package manager*.

  `→ Linux/fhs/home/username/_node_repl_history`
