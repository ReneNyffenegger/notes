$ JavaScript: String object
@ String

{ Methods and properties

  table { ll

    `prototype.at()` ☰
    `fromCharCode()` ☰
    `fromCodePoint()` ☰
    `length` ☰
    `prototype.charAt()` ☰
    `prototype.charCodeAt()` ☰
    `prototype.codePointAt()` ☰
    `prototype.concat()` ☰
    `prototype.endsWith()` ☰
    `prototype.includes()` ☰
    `prototype.indexOf()` ☰
    `prototype.lastIndexOf()` ☰
    `prototype.localeCompare()` ☰
    `prototype.match()` ☰
    `prototype.matchAll()` ☰
    `prototype.normalize()` ☰
    `prototype.padEnd()` ☰
    `prototype.padStart()` ☰
    `prototype.repeat()` ☰
    `prototype.replace()` ☰
    `prototype.replaceAll()` ☰
    `prototype.search()` ☰
    `prototype.slice()` ☰ Returns a substring from a string. Compare with the `slice()` method of the `→ development/languages/JavaScript/objects/Array` object.
    `prototype.split()` ☰
    `prototype.startsWith()` ☰
    `prototype.substr()` ☰*Deprecated*
    `prototype.substring()` ☰
    `prototype.toLocaleLowerCase()` ☰
    `prototype.toLocaleUpperCase()` ☰
    `prototype.toLowerCase()` ☰
    `prototype.toString()` ☰
    `prototype.toUpperCase()` ☰
    `prototype.trim()` ☰
    `prototype.trimEnd()` ☰
    `prototype.trimStart()` ☰
    `prototype.valueOf()` ☰
    `prototype[@@iterator]()` ☰
    `raw()` ☰

  table }

  The following wrapper embed the string into the corresponding representation of an → development/web/HTML/tags. Thes functions are *deprecated*:
    • `prototype.anchor()`
    • `prototype.big()`, `prototype.small()`
    • `prototype.blink()`
    • `prototype.bold()`, `prototype.italics()`
    • `prototype.fixed()`
    • `prototype.fontcolor()`, `prototype.fontsize()`
    • `prototype.link()`
    • `prototype.strike()`
    • `prototype.sub()`, `prototype.sup()`

}

{ charAt

  gh|about-javascript|/objects/String/charAt.html||

}
{ slice

  `slice()` returns a substring from a string.

code {
str.slice(from);
str.slice(from, to);
code }

  `from` and `to` can be negative numbers in which case they're counted from the end of the string.

}
{ toUpperCase

  Convert a string to upper case.

  gh|about-javascript|/objects/String/toUpperCase.html||

}
{ fromCharCode #js-String-fromCharCode

  `String.fromCharCode` creates a string from one ore more → development/Unicode/Codepoints[Unicode codepoints], see → development/languages/JavaScript/code-snippets/objects/String/fromCharCode[here].

}
{ determineType

  gh|about-javascript|/objects/String/determineType.html||

}

sa:

  → development/languages/JavaScript/objects/String/regular-expression[Methods that operate] on
  → development/regular-expressions[regular expressions].

  Creating → development/languages/JavaScript/language/expressions/primary-expressions/template-literals#js-multi-line-string[multi line strings] with
  → development/languages/JavaScript/language/expressions/primary-expressions/template-literals[template literals].

  → development/languages/JavaScript/objects/String/regular-expression[String functions for regular expressions]

  → development/languages/JavaScript/code-snippets/objects/global/parseInt[`parseInt`] to create an integer from a String.

  → development/languages/JavaScript/code-snipptes

  → development/languages/JavaScript/objects


