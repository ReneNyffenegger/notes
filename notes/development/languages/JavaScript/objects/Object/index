$ Javascript: Object object
@ Object

{ Methods and properties

  table { ll
   `assign()` ☰
   `create()` ☰
   `defineProperties()` ☰
   `defineProperty()` ☰
   `entries()` ☰
   `freeze()` ☰ A frozen object cannot be changed anymore. Compare with `isFrozen()`
   `fromEntries()` ☰
   `getOwnPropertyDescriptor()` ☰
   `getOwnPropertyDescriptors()` ☰
   `getOwnPropertyNames()` ☰
   `getOwnPropertySymbols()` ☰
   `getPrototypeOf()` ☰  The standard way to access an object's prototype. The *deprecated* and not standard property that stores the object's prototype is `__proto__`. Compare with `Reflect.getPrototypeOf()`.
   `hasOwn()` ☰ *Experimental*
   `is()` ☰
   `isExtensible()` ☰
   `isFrozen()` ☰ Compare with `freeze()`
   `isSealed()` ☰
   `keys()` ☰
   `preventExtensions()` ☰
   `prototype.__defineGetter__()` ☰ *Deprecated*
   `prototype.__defineSetter__()` ☰ *Deprecated*
   `prototype.__lookupGetter__()` ☰ *Deprecated*
   `prototype.__lookupSetter__()` ☰ *Deprecated*
   `prototype.__proto__` ☰ *Deprecated*
   `prototype.constructor` ☰ Returns a reference to the *Function object* that created the instance object.
   `prototype.hasOwnProperty()` ☰
   `prototype.isPrototypeOf()` ☰
   `prototype.propertyIsEnumerable()` ☰
   `prototype.toLocaleString()` ☰
   `prototype.toSource()` ☰ *Non-Standard*, *Deprecated*
   `prototype.toString()` ☰
   `prototype.valueOf()` ☰
   `seal()` ☰
   `setPrototypeOf()` ☰
   `values()` ☰
  table }

}

{ create

  gh|about-javascript|/objects/Object/create.html||

}
{ getOwnPropertyNames

  gh|about-javascript|/objects/Object/getOwnPropertyNames.html||

}
{ __noSuchMethod__

  gh|about-javascript|/objects/Object/__noSuchMethod__.html||

}

sa:
  → development/languages/JavaScript/objects
