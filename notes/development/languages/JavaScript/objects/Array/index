$ JavaScript: Array object
@ Array

`Array` inherits from `→ development/languages/JavaScript/objects/Function`.

{ Methods and properties

  table { ll
    `get` ☰
    `prototype[@@unscopables]` ☰
    `prototype.length` ☰
    `prototype[@@iterator]()` ☰
    `prototype.at()` ☰
    `prototype.concat()` ☰
    `prototype.copyWithin()` ☰
    `prototype.entries()` ☰
    `prototype.every()` ☰
    `prototype.fill()` ☰
    `prototype.filter()` ☰
    `prototype.find()` ☰
    `prototype.findIndex()` ☰
    `prototype.findLast()` ☰
    `prototype.findLastIndex()` ☰
    `prototype.flat()` ☰
    `prototype.flatMap()` ☰
    `prototype.forEach()` ☰
    `from()` ☰
    `prototype.group()` ☰ *Experimental*
    `prototype.groupToMap()` ☰ *Experimental*
    `prototype.includes()` ☰
    `prototype.indexOf()` ☰
    `isArray()` ☰
    `prototype.join()` ☰
    `prototype.keys()` ☰
    `prototype.lastIndexOf()` ☰
    `prototype.map()` ☰
    `of()` ☰
    `prototype.pop()` ☰
    `prototype.push()` ☰
    `prototype.reduce()` ☰
    `prototype.reduceRight()` ☰
    `prototype.reverse()` ☰
    `prototype.shift()` ☰
    `prototype.slice()` ☰
    `prototype.some()` ☰
    `prototype.sort()` ☰
    `prototype.splice()` ☰
    `prototype.toLocaleString()` ☰
    `prototype.toString()` ☰
    `prototype.unshift()` ☰
    `prototype.values()` ☰

  table }
 

{ reduce

code {
js> let reduced = [4,2,1,9].reduce( (a, e) =>  { print(`a = ${a}, e = ${e}`); return a+e;} );
a = 4, e = 2
a = 6, e = 1
a = 7, e = 9

js> print(reduced);
16
code }

Use an *init value* for accumulator `a` (here: `3`):
code {
js> let reduced = [4,2,1,9].reduce( (a, e) =>  { print(`a = ${a}, e = ${e}`); return a+e;}, 3 );

a = 3, e = 4
a = 7, e = 2
a = 9, e = 1
a = 10, e = 9
code }

}
{ slice

code {
js> let a = ['zero', 'one', 'two', 'three', 'four', 'five'];

js> a.slice()
["zero", "one", "two", "three", "four", "five"]

js> a.slice(1)
["one", "two", "three", "four", "five"]

js> a.slice(2)
["two", "three", "four", "five"]

js> a.slice(2,3)
["two"]

js> a.slice(2,4)
["two", "three"]
code }

}
  { concat

code {
js> let a = ['zero', 'one', 'two', 'three', 'four', 'five'];

js> a.concat('six', 'seven')
["zero", "one", "two", "three", "four", "five", "six", "seven"]
code }

code {
js> [].concat(7, 3, 9);
[7, 3, 9]
code }

code {
js> [1,2].concat( [3, 4], [5, 6]);
[1, 2, 3, 4, 5, 6]

js> [1,2].concat( [[3, 4], [5, 6]], [7], [[8]]);
[1, 2, [3, 4], [5, 6], 7, [8]]
code }

  }
  { push

   `push` adds an element to the end of an array and returns the number of elements in the array after adding the elements.

code {
js> let a = [1, 2, 3];
js> a.push(4,5)
5
js> a
[1, 2, 3, 4, 5]
code }

  }
  { toString

    gh|about-javascript|/objects/Array/toString.html||

  }
  { flat

code {
js> let a = 
[ 
  [1,2],
  [
    3,
    [4,5,
      [
       6,7
      ],
     8
    ]
  ]
];

js> a.flat()
[1, 2, 3, [4, 5, [6, 7], 8]]

js> a.flat().flat()
[1, 2, 3, 4, 5, [6, 7], 8]

js> a.flat().flat().flat()
[1, 2, 3, 4, 5, 6, 7, 8]
code }

  `x.flat(n)` is equivalent to applying `flat()` n times to `x`:
code {
js> a.flat(2)
[1, 2, 3, 4, 5, [6, 7], 8]
code }

  It's possible to use `Infinity` for `n`:
code {
js> a.flat(Infinity)
[1, 2, 3, 4, 5, 6, 7, 8]
code }

  }
}

{ Constructor

  Note: `new Array(42)` creates an array with 42 elements while `new Array(42, 99, 13)` creates
  an array with 3 elements!

  gh|about-javascript|/objects/Array/constructor.html||

}
sa:

  → development/languages/JavaScript/objects/Array/pairwise-combination[Create all element pairs of an array]

  → development/languages/JavaScript/objects
