$ JavaScript: Array object
@ Array

`Array` inherits from `→ development/languages/JavaScript/objects/Function`.

{ Methods and properties

  table { ll
    `get` ☰
    `prototype[@@unscopables]` ☰
    `prototype.length` ☰
    `prototype[@@iterator]()` ☰
    `prototype.at()` ☰
    `prototype.concat()` ☰
    `prototype.copyWithin()` ☰
    `prototype.entries()` ☰
    `prototype.every()` ☰ Returns true if a function returns true for each element in the array. Compare with `some()`
    `prototype.fill()` ☰
    `prototype.filter()` ☰
    `prototype.find()` ☰
    `prototype.findIndex()` ☰
    `prototype.findLast()` ☰
    `prototype.findLastIndex()` ☰
    `prototype.flat()` ☰
    `prototype.flatMap()` ☰
    `prototype.forEach()` ☰ Iterate over the elements of the array. Compare also with the `forEach()` method of `→ development/web/DOM/interfaces-mixins/NodeList` and the `for (e of a)` and → development/languages/JavaScript/language/statements/for/in[`for (k in x)`] Javascript language construct.
    `from()` ☰
    `prototype.group()` ☰ *Experimental*
    `prototype.groupToMap()` ☰ *Experimental*
    `prototype.includes()` ☰
    `prototype.indexOf()` ☰
    `isArray()` ☰
    `prototype.join()` ☰
    `prototype.keys()` ☰
    `prototype.lastIndexOf()` ☰
    `prototype.map()` ☰
    `of()` ☰
    `prototype.pop()` ☰
    `prototype.push()` ☰
    `prototype.reduce()` ☰
    `prototype.reduceRight()` ☰
    `prototype.reverse()` ☰
    `prototype.shift()` ☰
    `prototype.slice()` ☰ Compare with the `slice()` method of the `→ development/languages/JavaScript/objects/String` object.
    `prototype.some()` ☰ Compare with `every()`
    `prototype.sort()` ☰
    `prototype.splice()` ☰
    `prototype.toLocaleString()` ☰
    `prototype.toString()` ☰
    `prototype.unshift()` ☰
    `prototype.values()` ☰

  table }
 

  { forEach

    It's possible to modify the objects in the function that is called by `forEach()`.
    -
    In the following example, the objects are added the new property `txt`:
code {
let o1  = {num: 5};
let o2  = {num: 3};
let o3  = {num: 7};

[o1, o2, o3].forEach(o => o.txt = '*'.repeat(o.num));

print(o1.txt);
print(o2.txt);
print(o3.txt);
code }

  }
  { sort

code {
js> let a = [
  { nam: 'abc', id: 5 },
  { nam: 'def', id: 2 },
  { nam: 'ghi', id: 9 },
  { nam: 'jkl', id: 3 },
  { nam: 'mno', id: 3 }
];

js> s = a.sort( (p, q) => p.id > q.id );

js> s.forEach( e => print(e.nam) );
code }

  }
  { reduce

code {
js> let reduced = [4,2,1,9].reduce( (a, e) =>  { print(`a = ${a}, e = ${e}`); return a+e;} );
a = 4, e = 2
a = 6, e = 1
a = 7, e = 9

js> print(reduced);
16
code }

  Use an *init value* for accumulator `a` (here: `3`):
code {
js> let reduced = [4,2,1,9].reduce( (a, e) =>  { print(`a = ${a}, e = ${e}`); return a+e;}, 3 );

a = 3, e = 4
a = 7, e = 2
a = 9, e = 1
a = 10, e = 9
code }

  }
  { slice

code {
js> let a = ['zero', 'one', 'two', 'three', 'four', 'five'];

js> a.slice()
["zero", "one", "two", "three", "four", "five"]

js> a.slice(1)
["one", "two", "three", "four", "five"]

js> a.slice(2)
["two", "three", "four", "five"]

js> a.slice(2,3)
["two"]

js> a.slice(2,4)
["two", "three"]
code }

  }
  { every

   `every(f)` returns true if the function `f` returns true for all elements in the array:
code {
js> a = [ 7, 5, 3, 9, 8 ];

js> a.every( e => e > 0 );
true

js> a.every( e => e > 5 );
false
code }

  }
  { concat

code {
js> let a = ['zero', 'one', 'two', 'three', 'four', 'five'];

js> a.concat('six', 'seven')
["zero", "one", "two", "three", "four", "five", "six", "seven"]
code }

code {
js> [].concat(7, 3, 9);
[7, 3, 9]
code }

code {
js> [1,2].concat( [3, 4], [5, 6]);
[1, 2, 3, 4, 5, 6]

js> [1,2].concat( [[3, 4], [5, 6]], [7], [[8]]);
[1, 2, [3, 4], [5, 6], 7, [8]]
code }

  }
  { push

   `push` adds an element to the end of an array and returns the number of elements in the array after adding the elements.

code {
js> let a = [1, 2, 3];
js> a.push(4,5)
5
js> a
[1, 2, 3, 4, 5]
code }

  }
  { toString

    gh|about-javascript|/objects/Array/toString.html||

  }
  { flat

code {
js> let a = 
[ 
  [1,2],
  [
    3,
    [4,5,
      [
       6,7
      ],
     8
    ]
  ]
];

js> a.flat()
[1, 2, 3, [4, 5, [6, 7], 8]]

js> a.flat().flat()
[1, 2, 3, 4, 5, [6, 7], 8]

js> a.flat().flat().flat()
[1, 2, 3, 4, 5, 6, 7, 8]
code }

  `x.flat(n)` is equivalent to applying `flat()` n times to `x`:
code {
js> a.flat(2)
[1, 2, 3, 4, 5, [6, 7], 8]
code }

  It's possible to use `Infinity` for `n`:
code {
js> a.flat(Infinity)
[1, 2, 3, 4, 5, 6, 7, 8]
code }

  }
}

{ Constructor

  Note: `new Array(42)` creates an array with 42 elements while `new Array(42, 99, 13)` creates
  an array with 3 elements!

  gh|about-javascript|/objects/Array/constructor.html||

}
sa:

  → development/languages/JavaScript/objects/Array/pairwise-combination[Create all element pairs of an array]

  → development/languages/JavaScript/objects
