$ JavaScript: Array object
@ Array

{ reduce

code {
js> let reduced = [4,2,1,9].reduce( (a, e) =>  { print(`a = ${a}, e = ${e}`); return a+e;} );
a = 4, e = 2
a = 6, e = 1
a = 7, e = 9

js> print(reduced);
16
code }

Use an *init value* for accumulator `a` (here: `3`):
code {
js> let reduced = [4,2,1,9].reduce( (a, e) =>  { print(`a = ${a}, e = ${e}`); return a+e;}, 3 );

a = 3, e = 4
a = 7, e = 2
a = 9, e = 1
a = 10, e = 9
code }

}
{ slice

code {
js> let a = ['zero', 'one', 'two', 'three', 'four', 'five'];

js> a.slice()
["zero", "one", "two", "three", "four", "five"]

js> a.slice(1)
["one", "two", "three", "four", "five"]

js> a.slice(2)
["two", "three", "four", "five"]

js> a.slice(2,3)
["two"]

js> a.slice(2,4)
["two", "three"]
code }

}
{ concat

code {
js> let a = ['zero', 'one', 'two', 'three', 'four', 'five'];

js> a.concat('six', 'seven')
["zero", "one", "two", "three", "four", "five", "six", "seven"]
code }

code {
js> [].concat(7, 3, 9);
[7, 3, 9]
code }

}
{ push

 `push` adds an element to the end of an array.

  gh|about-javascript|/objects/Array/push.html||

}
{ toString

  gh|about-javascript|/objects/Array/toString.html||

}


{ Constructor

  Note: `new Array(42)` creates an array with 42 elements while `new Array(42, 99, 13)` creates
  an array with 3 elements!

  gh|about-javascript|/objects/Array/constructor.html||

}
sa:

  â†’ development/languages/JavaScript/objects
