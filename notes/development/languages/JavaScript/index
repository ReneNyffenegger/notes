
→ https://stackoverflow.com/a/29897320/180275[JavaScript] = ECMAScript + DOM + BOM

{ Built-in types / objects 

  { Primitive built-in types #js-primitive-built-in-types
 
    The values of the primitive built-in types is → development/Data that is not stored with or in an → development/languages/JavaScript/objects.

    ECMAScript defines the following *primitive built-in types*:
    table { ll
      ~Type~ ☰ ~Range of values~
      Undefined ☰ one value: `undefined`
      Null ☰ one value: `null`
      Boolean ☰ `true` and `false`
      Number ☰ → development/IEEE/754[IEEE-754]-2008 64-bit double-precision numbers
      BigInt ☰ (?, not defined by ECMAScript ?)
      String ☰ A sequence of zero through 2⁵⁶-1 16-bit unsigned integer values («elements»)
      Symbol ☰ The set of strings that may be used as the key of an → development/languages/JavaScript/objects#js-object-properties[object property]
    table }

    All primitive built-in types except `null` and `undefined` have ~object wrappers~ so that their values can be stored in or with objects.
    -
    The respective wrapper objects' `valueOf()` method returns the primitive value again.


  }
  { Object

    Then there is the non-primitive built-in type → development/languages/JavaScript/objects/Object[`Object`].
  }

}

{ TODO

  `call` vs `apply`

  { Destructing assignments

code {
function x() { return {num: 42, txt: "hello world"}; }

const {num, txt, def='unassigned'} = x();
console.log(num);
console.log(txt);
console.log(def);

const {num: ft, txt: hw} = x()
console.log(ft);
console.log(hw);
code }

code {
function y({a, b}) { console.log(a * b);
y( {a: 7, b: 6} );
code }


  }
  { Modules

    A module is a JavaScript unit that exports objects (such as functions or variables) (`export` keyword).

    See also `<script type="module">…</script>`.

?   Modules are fetched using CORS.

    { ES Modules vs CommonJS

      The ECMS standard (ES) is the official standard to package JavaScript for reuse. The corresponding keywords are `export` and `import`.

      → https://nodejs.org/dist/latest-v19.x/docs/api/modules.html#modules-commonjs-modules[CommonJS] is the original way to package JavsScript for Node.js. The corresponding keywords are `module.exports` and `require()`.
      -
      Node version 13.2.0 has ES modules (as well?).

      In order for Node.js to treat a module as ES module, there are three possibilities:
        • use `.mjs` file suffix
        • use the `type` field with a value of `module` in `package.json`
        • use the `--input-type=module` command line option

      The suffix `.cjs` is used to mark a file as a CommonJS module.
   

      ES Module:
code {
import pkg from 'moduleName'
code }
   
      CommonJS:
code {
module.exports.sym = …;
code }

code {
const pkg = require('moduleName')
code }

     }
  }

}

sa:

  → development/languages/JavaScript/engines[Javascript engines]

  → development/languages/JavaScript/jrunscript is a command line script shell whose default language is JavaScript.

  Using the → development/web/HTML/tags/script[`<script>`] element together with its `language` attribute to
  → development/web/HTML/tags/script/language/determine-JavaScript-version[determine the version of JavaScript].

  → https://tc39.github.io/ecma262/[The latest drafts] of the ECMAScript® Language Specification.

  When writing code for the Web with JavaScript, there are a great many APIs available. → https://developer.mozilla.org/en-US/docs/Web/API[Web APIs] has a list of all(?) interfaces
  one might use to develop a program.

  → development/languages/JavaScript/code-snipptes[code snippets]

  → development/languages/JavaScript/helpers

  → development/languages/JavaScript/objects[Java Script objects]

  → development/languages/JavaScript/Object-Oriented

  → development/languages/JavaScript/inline-vs-external

  → development/languages/Java/classes/javax/script

  In → development/databases/Oracle/Releases-and-versions/21c[Oracle 21c], `→ development/databases/Oracle/installed/packages/dbms/mle` allows to execute JavaScript «in» the database.

  → development/languages/JScript and Microsoft's JScript compiler → Windows/dirs/Windows/Microsoft_NET/Framework64/vn_n_n/jsc_exe[`jsc.exe`].

  → development/languages/JavaScript/SpiderMonkey is a JavaScript-Engine which is written in → development/languages/C-C-plus-plus[C/C++]. It is interesting because it has
  → development/languages/JavaScript/SpiderMonkey/shell[JavaScript shell].
  -
  → development/languages/JavaScript/Rhino is also an implemenation for JavaScript, it is written in → development/languages/Java[Java], however.
  -
  Another shell is → development/languages/JavaScript/Node_js

  → development/languages/JavaScript/JSON[JSON]: JavaScript Object Notation

  → development/web/CSS/javascript

  → design/graphic/svg/examples/javascript

  → development/languages/JavaScript/jQuery

  → development/languages/VBA/Useful-object-libraries/Microsoft-Script-Control#ms-script-control-call-js[Calling a simple JavaScript function] from
  → development/languages/VBA[Visual Basic for Applications] with the → development/languages/VBA/Useful-object-libraries/Microsoft-Script-Control[MS Script Control] object.

  The CSS `→ development/web/CSS/selectors/at-rules/media` at-rule `scripting` can be used to apply different stylesheets depending on if JavaScript is enabled.

  Other → development/languages[programming languages]

  → development/web/browser/WebAssembly: A programming language that runs on → development/web/browser[browsers].

