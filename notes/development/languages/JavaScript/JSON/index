$ JSON - JavaScript Object Notation
@ JSON

JSON is a simple (as in lightweight) standard for → development/Data/exchange[exchanging (structured) data].

The *media type* for JSON is `application/json`.

{ Features and design goals 

  The main features and design goals of JSON include
    • It's text based (so, also humans, not only machines, can read and create JSON documents)
    • It's minimal: JSON defines only a very small set of rules
    • Portability
    • Subset of → development/languages/JavaScript

  Because of this simplicity, JSON has become popular and many websites use JSON instead of
  → development/XML to serialize → development/Data for communication between server applications and their clients.

}
{ Javascript origin

  JSON originates from the object literals of → development/languages/JavaScript (ECMAScript) and is specified in
  → development/web/RFC#rfc-7159[RFC 7159] (The JavaScript Object Notation (JSON) Data Interchange Format).
  -
  In fact, JSON is referred in ECMA-262 (see also ECMA-404 (The JSON Data Interchange Format)).

  Because the JSON syntax originates in JavaScript, it is possible to use → development/languages/JavaScript/objects/global/function-properties/eval[`eval(jsonDocument)`] in JavaScript to parse
  a JSON document.
  -
  Of course, this poses a *security risk* (like that of → development/databases/SQL/injection) if the JSON document contains executable code.

}
{ Tokens

  The *grammar* of JSON has only six structural characters:
    • `{` and `}`
    • `[` and `]`
    • `:`
    • `,`

  Besides them, there are three other kinds of tokens:
    • strings (enclosed in `"`) is a sequence of → development/Unicode[Unicode] characters
    • numbers
    • literals (`true`, `false` or `null`)

}
{ Comments

  The JSON specification does not support comments in JSON.

}
{ Primitive data types (scalars)

  JSON specifies four *primitive data types*. Each *scalar* value has one of these data types.

  table { lll
    ~Data Type~ ☰ ~Example~ ☰ ~Comment~
     String ☰ `"string"` ☰ A sequence of zore or more → development/Unicode characters (→ development/Unicode/UTF-8 (default), UTF-16 or UTF-32)
     Number ☰ `42`, `-13.9` ☰ Represented in base 10; leading zeros are not allowed
     Boolean ☰ `true`, `false` ☰ The only two values whose data type is *boolean*
     Null ☰ `null` ☰ The only value whose data type is *null*
  table }

  In strings, quotes neets to be escaped with a backslash, for example `"He said \"hello\"."`.


}
{ Structured types

  The primitive data types are building blocks to create *structured types*.

  There are two structured types:
  table { ll
    objects ☰ *Unordered* set name/value pairs
    arrays ☰ *Ordered* list of values (whose data type need not to be the same)
  table }

  The terms *object* and *array* have their origins in → development/languages/JavaScript (see JavaScript → development/languages/JavaScript/objects[objects] and → development/languages/JavaScript/objects/Array[arrays])

  { Objects

    JSON objects are embedded in curly braces (`{ … }`).

    A JSON object consists of comma separated *key-value pairs*. The key is a string and is separated from the value by a colon (`:`).
    -
    These key value pairs are referred to as *members*.

code {
{
   "item": "Lemon",
   "price": {
         "val":      1.84,
         "currency: "CHF"
   }
}
code }

  }
  { Arrays

    Arrays are embedded in square brackets: `[ … ]`.

    An array is an ordered, comma-separated list of JSON values.

code {
[ "foo",
   42,
   null,
   { "foo": "bar" }
]
code }

  }

}
{ Values

  A value is either a primitive or a structured type.

}


sa:

  → development/Data/exchange/formats

  The → development/languages/Python/standard-library/json[Python standard module json]

  → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/JSON

  → development/languages/JavaScript/JSON/LD

  The → development/languages/JavaScript object → development/languages/JavaScript/objects/JSON[`JSON`].

  The SQL standard included the (optional) feature for JSON support in → misc/ISO/9075#sql-2016[SQL:2016].

  → development/languages/VBA/Useful-object-libraries/Microsoft-Script-Control#ms-script-control-parse-json[Parsing JSON] in → development/languages/VBA[Visual Basic for Applications] with the
  → development/languages/VBA/Useful-object-libraries/Microsoft-Script-Control object.

  → development/Unicode/BOM[BOMs] are illegal in JSON.

  The → Windows/PowerShell/command-inventory/noun/json[PowerShell command noun `json`] with the two cmdlets
  → Windows/PowerShell/command-inventory/noun/json/convertTo[`convertTo-JSON`] and
  → Windows/PowerShell/command-inventory/noun/json/convertFrom[`convertFrom-JSON`].

  → https://github.com/JamesNK/Newtonsoft.Json[Json.NET] is a high-performance JSON framework for → Microsoft/dot-net.
  -
  Another .NET class that can be used to parse JSON is → Microsoft/dot-net/namespaces-classes/System/Web/Script/Serialization/JavaScriptSerializer[`System.Web.Script.Serialization.JavaScriptSerializer`].

  The *JSON Data Interchange Syntax* is defined in → development/standards/Ecma[ECMA-404].

  The → development/databases/Oracle/SQLcl#sqlcl-sqldev-select-hints[SQLcl and SQL Developer select hint] `/*json*/` causes an SQL result set to be returned in JSON.

  JSON (as well as also for example → development/Data/exchange/formats/CSV) are → development/Data/exchange/formats#data-exchange-challenges[prone to data corruption].

  A → development/Unicode/BOM[BOM] is illegal in JSON (→ https://tools.ietf.org/html/rfc7159#section-8.1[RFC 7159, Section 8.1]

  The Oracle package → development/databases/Oracle/installed/packages/dbms/json[`dbms_json`]

links:
  → https://jmespath.org/[JMESPath] is a query language for JSON.
