$ JSON - JavaScript Object Notation
@ JSON

JSON is a simple (as in lightweight) standard for → development/Data/exchange[exchanging (structured) data].

The → development/web/Multipurpose-Internet-Mail-Extensions[media type] for JSON is `application/json`.

{ Features and design goals 

  The main features and design goals of JSON include
    • It's text based (so, also humans, not only machines, can read and create JSON documents)
    • It's minimal: JSON defines only a very small set of rules
    • Portability
    • Subset of → development/languages/JavaScript

  Because of this simplicity, JSON has become popular and many websites use JSON instead of
  → development/XML to serialize → development/Data for communication between server applications and their clients.

}
{ Javascript origin

  JSON originates from the object literals of → development/languages/JavaScript (ECMAScript) and is specified in
  → development/web/RFC#rfc-8259[RFC 8259] (The JavaScript Object Notation (JSON) Data Interchange Format) which obsoleted → development/web/RFC#rfc-7159[RFC 7159].
  -
  In fact, JSON is referred in ECMA-262 (see also ECMA-404 (The JSON Data Interchange Format)).

  Because the JSON syntax originates in JavaScript, it is possible to use → development/languages/JavaScript/objects/global/function-properties/eval[`eval(jsonDocument)`] in JavaScript to parse
  a JSON document.
  -
  Of course, this poses a *security risk* (like that of → development/databases/SQL/injection) if the JSON document contains executable code.

}
{ Tokens

  The *grammar* of JSON has only six structural characters:
  table { ll
    `{` and `}` ☰ They contain an object
    `[` and `]` ☰ They contain the elements of an array
    `:` ☰ The colon separates a key from a value in an object
    `,` ☰ The comman separates the elements in an array
  table }

  Besides them, there are three other kinds of tokens:
    • strings:  a sequence of → development/Unicode[Unicode] characters, enclosed between a pair of `"`.
    • numbers
    • literals (`true`, `false` or `null`)

}
{ Comments

  The JSON specification does not support comments in JSON.

}
{ Primitive data types (scalars) #json-scalar

  JSON specifies four *primitive data types*. Each *scalar* value has one of these data types.

  table { lll
    ~Data Type~ ☰ ~Example~ ☰ ~Comment~
     String ☰ `"string"` ☰ A sequence of zore or more → development/Unicode characters (→ development/Unicode/UTF-8 (default), UTF-16 or UTF-32).
     Number ☰ `42`, `-13.9` ☰ Represented in base 10; leading zeros or plus signs are not allowed.
     Boolean ☰ `true`, `false` ☰ The only two values whose data type is *boolean*.
     Null ☰ `null` ☰ The only value whose data type is *null*.
  table }

  { Strings #json-string
 
    → development/web/RFC#rfc-7159[RFC-7159] contains the following remarks about strings:
    "
       The representation of strings is similar to conventions used in the → development/languages/C-C-plus-plus[C family] of programming languages.
       A string begins and ends with quotation marks.  
       All Unicode characters may be placed within the quotation marks, except for the characters that must be escaped:
       quotation mark, reverse solidus [aka backslash], and the control characters (U+0000 through U+001F).

       Any character may be escaped.  If the character is in the Basic
       Multilingual Plane […], then it may be
       represented as a six-character sequence: a reverse solidus, followed
       by the lowercase letter u, followed by four hexadecimal digits that
       encode the character's code point.
    "

    RFC-7159 also says that some characters can be represented with two characters: `\n`, `\t`, `\\` etc.

    Thus, the following is a correct JSON string that contains quotes and a → development/line-break[new line]: `"He said:\n\"hello\"."`.
  }  

  { No built-in date type

    JSON does not specify a data-type for dates and/or times.
    -
    However, dates are generally stored in JSON as strings in the → misc/ISO/8601 format.

  }

}
{ Structured types

  The primitive data types are building blocks to create *structured types*.

  There are two structured types:
  table { ll
    objects ☰ *Unordered* set name/value pairs
    arrays ☰ *Ordered* list of values (whose data type need not to be the same)
  table }

  The terms *object* and *array* have their origins in → development/languages/JavaScript (see JavaScript → development/languages/JavaScript/objects[objects] and → development/languages/JavaScript/objects/Array[arrays])

  { Objects #json-object

    JSON objects are embedded in curly braces (`{ … }`).

    A JSON object consists of comma separated *key-value pairs*. The key is a string and is separated from the value by a colon (`:`).
    -
    These key value pairs are referred to as *members*.

code {
{
   "item": "Lemon",
   "price": {
         "val":      1.84,
         "currency: "CHF"
   }
}
code }

  }
  { Arrays #json-array

    Arrays are embedded in square brackets: `[ … ]`.

    An array is an ordered, comma-separated list of JSON values.

code {
[ "foo",
   42,
   null,
   { "foo": "bar" }
]
code }

  }

}
{ Values

  A value is either a primitive or a structured type.

}
{ Pretty printing JSON on the command line

  The `→ development/languages/JavaScript/JSON/tools/jq` command line tool is arguably the best way for pretty printing JSON.

  With → development/languages/Python, the following line would pretty print a JSON object:
code {
echo '{"num": 42, "txt": "Hello world"}' | python -m → development/languages/Python/standard-library/json[json].tool
code }

}


sa:

  → development/Data/exchange/formats

  The → development/languages/Python/standard-library/json[Python standard module `json`]

  → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/JSON[`JSON`].

  → development/languages/JavaScript/JSON/LD

  The → development/languages/JavaScript object → development/languages/JavaScript/objects/JSON[`JSON`].

  The SQL standard included the (optional) feature for JSON support in → misc/ISO/9075#sql-2016[SQL:2016].

  Parsing or emitting JSON in → development/languages/VBA[Visual Basic for Applications (VBA)]:
   • → development/languages/VBA/Useful-object-libraries/Microsoft-Script-Control#ms-script-control-parse-json[Using the MS Script control]
   • Tim Hall's → https://github.com/VBA-tools/VBA-JSON[project on github] (See also this → development/languages/VBA/libraries/JSON/Tim-Hall[Simple test script])
   • The function → development/languages/VBA/modules/Office/ExcelRange/excelRangeToJson[`excelRangeToJson`] (VBA module → development/languages/VBA/modules/Office/ExcelRange[ExcelRange]) converts an → Microsoft/Office/Excel/Object-Model/Range[excel range] to a JSON representation.
   • The VBA module → development/languages/VBA/modules/Common/JSON

  → development/Unicode/BOM[BOMs] are illegal in JSON.

  The → Windows/PowerShell/command-inventory/noun/json[PowerShell command noun `json`] with the two cmdlets
  → Windows/PowerShell/command-inventory/noun/json/convertTo[`convertTo-JSON`] and
  → Windows/PowerShell/command-inventory/noun/json/convertFrom[`convertFrom-JSON`].

  → https://github.com/JamesNK/Newtonsoft.Json[Json.NET] is a high-performance JSON framework for → Microsoft/dot-net.
  -
  Another .NET class that can be used to parse JSON is → Microsoft/dot-net/namespaces-classes/System/Web/Script/Serialization/JavaScriptSerializer[`System.Web.Script.Serialization.JavaScriptSerializer`].

  The *JSON Data Interchange Syntax* is defined in → development/standards/Ecma[ECMA-404].

  The → development/databases/Oracle/SQLcl#sqlcl-sqldev-select-hints[SQLcl and SQL Developer select hint] `/*json*/` causes an SQL result set to be returned in JSON.

  JSON (as well as also for example → development/Data/exchange/formats/CSV) are → development/Data/exchange/formats#data-exchange-challenges[prone to data corruption].

  A → development/Unicode/BOM[BOM] is illegal in JSON (→ https://tools.ietf.org/html/rfc7159#section-8.1[RFC 7159, Section 8.1])

  → development/languages/JavaScript/JSON/GeoJSON

  Oracle
    • The package → development/databases/Oracle/installed/packages/dbms/json[`dbms_json`]
    • → development/databases/Oracle/SQL/JSON[SQL/JSON]
    • → development/databases/Oracle/SQL/functions/json/table[`json_table`] projects a JSON document onto a *virtual table* that can be used in an → development/databases/Oracle/SQL/statement like an ordinary → development/databases/Oracle/objects/tables.
    • My simple → development/databases/Oracle/PL-SQL/libs/personal/jsn[PL/SQL package JSN]

  `→ development/languages/JavaScript/JSON/tools/jq` is like `→ development/languages/sed` for JSON data (`curl -H "Accept: application/vnd.github.mercy-preview+json"  https://api.github.com/search/repositories\?q\=topic:ecs+topic:go | jq '.items[] | {url:.url, description:.description}'`).

links:
  → development/languages/JavaScript/JSON/querying/JMESPath is a query language for → development/languages/JavaScript/JSON.

  → https://json5.org/[JSON5] is a superset of JSON that aims to alleviate some of the limitations of JSON, for example:
    • Unquoted keys (if they're an → https://262.ecma-international.org/5.1/#sec-7.6[identifier name])
    • Arrays may have a single trailing comma.
    • Strings may be single quoted.
    • Numbers may be hexadecimal or begin with an explicit plus sign.
    • Comments (single and multi-line)


? → https://www.papaparse.com/[Papa Parse] converts → development/Data/exchange/formats/CSV to JSON and vice versa.

  The → development/web/php function `→ development/web/php/snippets/json/decode`

  Reading a JSON document → development/web/libraries/D3_js/data#d3-json[with d3.js] (→ development/languages/JavaScript)

  → development/languages/JavaScript/JSON/Web-Token
