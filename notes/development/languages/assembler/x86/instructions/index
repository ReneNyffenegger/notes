
→ development/languages/assembler/x86/instructions/call[`call`]

→ development/languages/assembler/x86/instructions/int/3[`int 3`]

→ development/languages/assembler/x86/instructions/iret[`iret`]

→ development/languages/assembler/x86/instructions/jmp[`jmp`]

→ development/languages/assembler/x86/instructions/mov[`mov`]

→ development/languages/assembler/x86/instructions/movs[`movs`]

→ development/languages/assembler/x86/instructions/pop[`pop`]

→ development/languages/assembler/x86/instructions/push[`push`]

→ development/languages/assembler/x86/instructions/rdtsc[`rdtsc`]

→ development/languages/assembler/x86/instructions/ret[`ret`]

→ development/languages/assembler/x86/instructions/syscall[`syscall`]

→ development/languages/assembler/x86/instructions/syscall[`sysenter`]

→ development/languages/assembler/x86/instructions/xchg[`xchg`]

{ Instruction format

  An instruction consists of
    • optional up to four in total 1-byte (legacy) prefixes (in any order)
    • 1 to three *primary opcode bytes* (`opcode` or `0f opcode` or `0f 38 opcode` or `of 3a opcode`)
    • if required: an *addressing form specifier* that consists of the *ModR/M* byte and sometimes also of the *scale-index-base* byte.
    • if required: an address displacement (1, 2 or 4 bytes)
    • if required: immediate data (1, 2 or 4 bytes)

  For details refer to chapter two (»instruction format«) and appendix B (»Instruction formats and encoings«) in volume two (»instruction set reference«) in
  → https://www.systutorials.com/go/intel-x86-64-reference-manual[Intel® 64 and IA-32 Architectures Software Developer’s Manual].

}
{ System calls / entering kernel mode

  *x86-64*: → development/languages/assembler/x86/instructions/syscall[`syscall`]

  *x86*: → development/languages/assembler/x86/instructions/sysenter[`sysenter`]. 

  legacy: `int 0x80`

  In the 80386 days, the fastest way to switch from V86 mode to kernel mode was to → https://blogs.msdn.microsoft.com/oldnewthing/20041215-00/?p=37003/[execute an invalid instruction].

}
