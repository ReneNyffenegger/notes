$ Assember (x86)

{ Registers

  eax, ebx, ecx, edx: 32 bit general purpose register (GPR)
  -
  ah, bh, ch, dh: Upper 16 bits of respective GPRs
  -
  al, bl, cl, dl: Lower 16 bits of respective GPRs
  -
  64 Bit version like 32 bit, but with RAX, RBX â€¦
  
  eax has special semantic for arithmic functions.
  -
  ecx has special semantic for looping functions.j
  
  esp: stack pointer
  -
  ebp: basepointer
  
  esi: source for string operations
  
  edi: destination for string operations

  eip: intstruction pointer

  
  cs: code segment
  -
  ds: data segment
  -
  ss: stack segment
  -
  es, fs, gs: aribtrary segments

  ef: flags

  

}
{ Instructions

  Instructions have one to three operands, most often two:
code {
not  eax
add  eax, ebx
imul eax, edx, 64
code }

}
{ Memory reference (pointers)

code {
add [esp], eax ; add value of eax to value of memory pointed at by esp (top of the stack).
code }

}
{ div / idiv

Results stored in eax and edx (rest of division)

code {
mov eax, 42 ; load dividend
mov ecx,  5 ; load divisor
div ecx     ;

code }

}
{ Misc

  Setting a register to zero (clearing it):
code {
xor eax, eax
code }

  Clear three registers in four bytes:
code {
xor ebx, ebx
mul ebx
code }

}
