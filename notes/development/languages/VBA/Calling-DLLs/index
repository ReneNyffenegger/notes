$ Accessing and calling DLLs from VBA (Visual Basic for Applications)

These are some findings when I experimented with calling a DLL from VBA.

I created the DLL from → development/languages/C-C-plus-plus/C[c] with the
→ development/languages/C-C-plus-plus/GCC[GNU compiler].

The functions to be called from VBA needed the `→ development/languages/C-C-plus-plus/calling-convention#stdcall[__stdcall]` attribute.

The function `diff_double` takes two doubles, displays them in a message box and calculates
their difference and returns it.
-
In VBA, the doubles that are passed to the function need to be passed with the `byVal` option.

The function `swap_double_ptr` takes to pointers to doubles, hence their values must be
passsed to the function with the `byRef` option.
-
Since the arguments are passed by reference, the function can modify their value. This is what
the function does: it swaps their values.

The function `to_upper_char_ptr` takes a pointer to a `char`. Thus a string can be passed to this
function. Although the function expects a pointer, in the special case of strings, they need
to be passed with `byVal` anyway.

The function `bits_in_long` shows which bits are set in a long. I needed that to verify that a VBA constant
like `&h80000051` has the highest most bit set when assigned to a `long` → development/languages/VBA/language/datatypes[datatype].

The functions (also subs) that VBA calls need to be declared in the VBA source code with the `declare` statement.
-
This statement identifies the physical location of the DLL, the entry points (functions) and calling conventions (`byVal` vs `byRef`).

{ The source code for the DLL

  gh|VBA-calls-DLL|/c/dll.c||

}
{ The VBA source that calls the DLL

  gh|VBA-calls-DLL|/call-the-dll.bas||

}
{ Passing pointers

  The following is an experiment if I can pass null pointers to a dll. This is apparently possible if the pointer argument is
  declared `→ development/languages/VBA/language/subs-and-functions/byVal-byRef[byRef]` and the special type `any`.

  gh|VBA-calls-DLL|/c/asAny.c||

  gh|VBA-calls-DLL|/asAny.bas||

}
{ Passing a pointer to a struct

  The following DLL was used to experiment with passing pointers (also null pointers) to structs (called types in VBA) from VBA into a DLL:

  gh|VBA-calls-DLL|/c/ptrToStruct.c||

  gh|VBA-calls-DLL|/ptrToStruct.bas||

}
{ Returning an array of strings from the DLL #vba-dll-return-string-array

  It is even possible to return an → development/languages/VBA/language/arrays[array] of → development/languages/VBA/language/datatypes/string[strings] from the dll.

  gh|VBA-calls-DLL|/c/returnStringArray.c||

  gh|VBA-calls-DLL|/returnStringArray.bas||

  → development/languages/VBA/Calling-DLLs/loadedModules is similar to this example but demonstrates how a two dimensional array is returned from a DLL to VBA.

  See also → development/languages/VBA/language/arrays#vba-array-return.

}
{ TODO

  Apparently, when strings are passed to DLL via the `declare` construct, the runtime of Visual Basic runtime does an automatic → development/Unicode[Unicode] to Ansi and vice versa conversion. This
  seems to be the case *even* if the string is passed with an `as any` type.

}


sa:

  → development/languages/VBA/Calling-DLLs/byVal-vs-byRef_as-longPtr-vs-as-any

  → development/languages/C-C-plus-plus/GCC/linker/options/add-stdcall-alias[`-Wl,--add-stdcall-alias`]

  → development/languages/VBA[Visual Basic for Applications]

  → development/languages/VBA/Calling-DLLs/exported-functions-of-dll
