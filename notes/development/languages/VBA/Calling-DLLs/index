$ Calling DLLs from VBA (Visual Basic for Applications)

These are some findings when I experimented with calling a DLL from VBA.

I created the DLL from → development/languages/C-C-plus-plus/C[c] with the
→ development/languages/C-C-plus-plus/C/GCC[GNU compiler].

The functions to be called from VBA needed the `__stdcall` attribute.

The function `diff_double` takes two doubles, displays them in a message box and calculates
their difference and returns it.
-
In VBA, the doubles that are passed to the function need to be passed with the `byVal` option.

The function `swap_double_ptr` takes to pointers to doubles, hence their values must be
passsed to the function with the `byRef` option.
-
Since the arguments are passed by reference, the function can modify their value. This is what
the function does: it swaps their values.

The function `to_upper_char_ptr` takes a pointer to a `char`. Thus a string can be passed to this
function. Although the function expects a pointer, in the special case of strings, they need
to be passed with `byVal` anyway.

The functions (also subs) that VBA calls need to be declared in the VBA source code with the `declare` statement.
-
This statement identifies the physical location of the DLL, the entry points (functions) and calling conventions (`byVal` vs `byRef`).

{ The source code for the DLL

  gh|VBA-calls-DLL|/c/dll.c||

}
{ The VBA source that calls the DLL

  gh|VBA-calls-DLL|/call-the-dll.bas||

}
sa:
  → development/languages/VBA[Visual Basic for Applications]
