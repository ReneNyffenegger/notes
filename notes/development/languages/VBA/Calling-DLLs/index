$ Accessing and calling DLLs from VBA (Visual Basic for Applications)

These are some findings when I experimented with calling a → Windows/development/Portable-Executable/DLL[DLL] from → development/languages/VBA[Visual Basic for Applications].

I created the DLL from → development/languages/C-C-plus-plus/C[c] sources. 

Generally, functions that are exposed by the DLL to be called from VBA need to be declared with the`→ development/languages/C-C-plus-plus/calling-convention#stdcall[__stdcall]` attribute 
(→ development/languages/C-C-plus-plus/calling-convention).

With the → development/languages/C-C-plus-plus/GCC[GNU compiler] (→ Windows/development/MinGW), I created
the DLLs in → Windows/cmd-exe[cmd.exe] like so:
code {
gcc -c dll.c
gcc -shared dll.o -o the.dll -Wl,→ development/languages/C-C-plus-plus/GCC/linker/options/add-stdcall-alias[--add-stdcall-alias]
code }
The → development/languages/C-C-plus-plus/GCC/linker/options/add-stdcall-alias[`--add-stdcall-alias`] → development/languages/C-C-plus-plus/GCC/options/Wl[linker option] is needed to *undecorate*
the exported function names.


With Microsofts Compiler, I created the DLLs like so
code {
cl /LD dll.c user32.lib /Fethe.dll /link /def:dll.def
code }
I didn't find any option in `cl` to undecorate exported function names, therefore, I needed a `dll.def` file.

The first test was to pass values → development/languages/VBA/Calling-DLLs/byRef-byVal[`byVal` and `byRef`].

In the next test, I tried to → development/languages/VBA/Calling-DLLs/pass-null-pointers[pass null pointers] to the DLL.

This test tried to pass → development/languages/VBA/Calling-DLLs/pointer-to-struct[pointers to structs (`type`)].

It is even possible to return an → development/languages/VBA/language/arrays[array] of → development/languages/VBA/language/datatypes/string[strings] from the dll which is
demonstrated in → development/languages/VBA/Calling-DLLs/return-an-array-of-strings[this test].

{ TODO

  Apparently, when strings are passed to DLL via the `declare` construct, the runtime of Visual Basic runtime does an automatic → development/Unicode[Unicode] to Ansi and vice versa conversion. This
  seems to be the case *even* if the string is passed with an `as any` type.

}

sa:

  → development/languages/VBA/Calling-DLLs/byVal-vs-byRef_as-longPtr-vs-as-any

  → development/languages/C-C-plus-plus/GCC/linker/options/add-stdcall-alias[`-Wl,--add-stdcall-alias`]

  → development/languages/VBA[Visual Basic for Applications]

  → development/languages/VBA/Calling-DLLs/exported-functions-of-dll
