$ Accessing and calling DLLs from VBA (Visual Basic for Applications)

These are some findings when I experimented with calling a → Windows/development/Portable-Executable/DLL[DLL] from → development/languages/VBA[Visual Basic for Applications].

I created the DLL from → development/languages/C-C-plus-plus/C[C] sources. 

Generally, functions that are exposed by the DLL to be called from VBA need to be declared with the`→ development/languages/C-C-plus-plus/calling-convention#stdcall[__stdcall]` attribute 
(→ development/languages/C-C-plus-plus/calling-convention).

In the VBA source code, the functions to be called in the DLL are made known to VBA with the → development/languages/VBA/language/statements/declare[`declare` statement].

The first test was to pass values → development/languages/VBA/Calling-DLLs/byRef-byVal[`byVal` and `byRef`].

In the next test, I tried to → development/languages/VBA/Calling-DLLs/pass-null-pointers[pass null pointers] to the DLL.

This test tried to pass → development/languages/VBA/Calling-DLLs/pointer-to-struct[pointers to structs (`type`)].

→ development/languages/VBA/Calling-DLLs/return-char-array[This example] tries to explore various ways to return a string from a DLL.

It is even possible to return an → development/languages/VBA/language/arrays[array] of → development/languages/VBA/language/datatypes/string[strings] from the dll which is
demonstrated in → development/languages/VBA/Calling-DLLs/return-an-array-of-strings[this test].

In → development/languages/VBA/Calling-DLLs/callback[this example], I demonstrate how a DLL can call a function that is declared in the VBA code.

→ development/languages/VBA/Calling-DLLs/pass-object-and-call-method[This example] tries to pass a
→ development/languages/VBA/language/datatypes/object[VBA object] to a DLL and have the DLL invoke a member method on the class.

{ Compiling the sources

  The sources for these tests are → https://github.com/ReneNyffenegger/VBA-calls-DLL[in my Github project `VBA-calls-DLL`].

  All C sources are named `dll.c` and located in their own subdirectory. The subdirectories also come with a `*.bas` file that then uses the compiled DLL.

  { GNU compiler

    With the → development/languages/C-C-plus-plus/GCC[GNU compiler] (→ Windows/development/MinGW), I created
    the DLLs in → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] like so:

code {
gcc -Wall -Werror -c dll.c
gcc -shared dll.o -o the.dll -Wl,→ development/languages/C-C-plus-plus/GCC/linker/options/add-stdcall-alias[--add-stdcall-alias]
code }

    The → development/languages/C-C-plus-plus/GCC/linker/options/add-stdcall-alias[`--add-stdcall-alias`] → development/languages/C-C-plus-plus/GCC/options/Wl[linker option] is needed to *undecorate*
    the exported function names.

    TODO: It is unclear what to do if the VBA code runs in a → development/languages/VBA/language/32-vs-64-bit[32-bit environment] but only a 64-bit → Windows/development/MinGW compiler is available.
    Using the → development/languages/C-C-plus-plus/GCC/options/m_lowercase[`-m32`] option of gcc resulted in a linker error.

  }
  { Microsoft's (visual?) compiler

    With Microsofts Compiler, I created the DLLs like so
code {
→ Windows/development/Visual-Studio/cl[cl] /LD dll.c user32.lib /Fethe.dll /link /def:dll.def
code }

    I didn't find any option in `cl` to undecorate exported function names, therefore, I needed a `dll.def` file.

  }
  { Referencing additional libraries

    The → development/languages/VBA/Calling-DLLs/return-char-array[returning a string] example uses the `SysAllocString` → Windows/development/WinAPI[WinAPI] call which is implemented in
    → Windows/dirs/Windows/System32/oleaut32_dll[`oleaut32.dll`]. Thus, at least with the GNU compiler, `oleaut32.lib` needs to be linked as well:
code {
gcc -shared dll.o -loleaut32 -o the.dll -Wl,--add-stdcall-alias
code }

  }

}
{ Specifying the path to the DLL

  In order for the VBA run time envioronment to find the DLL, the direcotry path to the DLL needs to be either in the → Windows/development/environment-variables/PATH[`%PATH%` environment variable] or
  the full path to the dll needs to specified in the → development/languages/VBA/language/statements/declare[`declare` statement].

  The directory path to the DLL can be added to the PATH variable in → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] like so
code {
C:\Path\do\directory\where\dll\was\compiled> PATH=%CD%;%PATH%
code }

  Excel can then be started with a variation of
code {
C:\Path\do\directory\where\dll\was\compiled> → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN/EXCEL_EXE["c:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE"]
code }


}

{ TODO

  → http://vb.mvps.org/tips/vb5dll/

  Apparently, when strings are passed to DLL via the `declare` construct, the runtime of Visual Basic runtime does an automatic → development/Unicode[Unicode] to Ansi and vice versa conversion. This
  seems to be the case *even* if the string is passed with an `as any` type.

}

sa:

  → development/languages/VBA/Calling-DLLs/byVal-vs-byRef_as-longPtr-vs-as-any

  → development/languages/C-C-plus-plus/GCC/linker/options/add-stdcall-alias[`-Wl,--add-stdcall-alias`]

  → development/languages/VBA[Visual Basic for Applications]

  → development/languages/VBA/Calling-DLLs/exported-functions-of-dll
