$ VBA: collection
@ collection

{ Creating a collection

  In order to use a collection, it needs to be created with the → development/languages/VBA/language/operators/new[`new` operator].
code {
dim coll as collection
set coll = new collection
code }

}
{ Basic collection operations: Add, access and remove items

  After creating a collection, items can be added to the end of the collection with its `coll.add(elem)` method.

  The nth item in a collection can be accessed with `coll(n)`. Note that unlike in → development/languages/C-C-plus-plus[C and C++] and many other → development/languages[programming languages], the element-index of a VBA-collection is
  not zero based.

  The nth item of a collection is removed with `coll.remove(n)`.

  The number of elements in the collection is returned by `coll.count`.
  
  These basic operations are summarized in the following simple VBA function:
  gh|about-VBA|/objects/collection/add-and-remove-items.bas||


}
{ for each … in #vba-collection-for-each

  The → development/languages/VBA/language/statements/for#vba-for-each[`for each … in`] statement allows to iterate over the items in a collection.

  gh|about-VBA|/objects/collection/for-each-in.bas||


}
{ Indexing items with a key

  Items can be added with an associated key. The key is then used to find the item in the collection.

  gh|about-VBA|/objects/collection/key-value.bas||

}

{ Misc

  The IID probably is `{A4C46780-499F-101B-BB78-00AA00383CBB}`. The corresponding *type lib* (for version 2.1) is `VEN2232.OLB`.

}

sa:

  → development/languages/VBA/language/arrays[Arrays]

  The → development/languages/VBA/objects/err[`err`] object

  → development/languages/VBA/language
