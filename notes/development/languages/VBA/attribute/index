$ VBA: attributes

{ Module attributes #vba-module-atttributes

  Module attributes are declared in the header of a → development/languages/VBA/language/module[module].

  The following attributes are available
  table { ll
   `VB_Createable` ☰
   `VB_Exposed` ☰
   `VB_GlobalNameSpace` ☰
   `VB_Name` ☰
   `VB_PredeclaredId` ☰ If set to `true`, a class becomes «globally scoped» and then behaves similarly to a C-Sharp static class, that is: a singleton.
  table }

  The default values for these attributes is *false*.
  
  `VB_Exposed` and `VB_Createable` determine a → development/languages/VBA/language/classes[class's]
  → development/languages/VBA/language/module/class#vba-class-accessibility-and-instancing[accessibility and instancing].

}

{ Method attributes

  • → development/languages/VBA/attribute/vb_description[`VB_VarDescription`] allows to add a description to a → development/languages/VBA/language/subs-and-functions[subs and functions].
  • `VB_UserMemId`: specifies the → Windows/development/COM#com-dispid[DISPID] for the method. If the value is 0, it specifies an object's → development/languages/VBA/language/classes#vba-default-member-func[default member function].
  • `VB_MemberFlags`

  { VB_ProcData #VB_ProcData

    Then there is also `VB_ProcData` which is used after recording a macro (at least in → Microsoft/Office/Excel).

    After recording a macro, giving it the name `rec` and assigning the keyboard shortuct `ctrl+T`, adding a description, the corresponding `Attribute` lines looks like so:
code {
Sub rec()
Attribute rec.VB_Description = "This macro was recorded to\nreveal Attribute values."
Attribute rec.VB_ProcData.VB_Invoke_Func = "t\n14"

   …

End Sub
code }

    Note that shortcut keys that were assigned with → Microsoft/Office/Excel/Object-Model/Application#excel-application-onKey[`application.onKey`] (Excel) are not stored with such Attributes

  }

}

{ Variable attributes

  • VB_VarDescription

}
