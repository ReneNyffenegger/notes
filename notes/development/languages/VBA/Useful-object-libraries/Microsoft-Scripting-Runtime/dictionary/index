$ VBA: Microsoft Scripting Runtime - dictionary

The → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime[Scripting Runtime] has a *dictionary* object which allows to index variables by keys or numbers. In other
→ development/languages[programming languages], this feature is also referred to as *hashes* or *associative arrays*.

In order to use the `dictionary` object (or the scripting runtime for that mattter), the respective reference needs to be added:
code {
thisWorkbook.→ Microsoft/Office/Visual-Basic-Editor/Object-Model/VBProject[vbProject].→ Microsoft/Office/Visual-Basic-Editor/Object-Model/Reference[references].addFromGuid _
        → development/UUID-GUID[GUID]   :="{420B2830-E718-11CF-893D-00A0C9054228}" , _
        major  :=  1                                      , _
        minor  :=  0
code }

It is also possible to create a dictionary object using → development/languages/VBA/functions/createObject[`createObject()`]:
code {
set dict = createObject("scripting.dictionary")
code }

{ Methods and properties

  table { ll
    `add(keyName, val)` ☰ Adds a new (named) key with the given value. If `keyName` already exists, an error is thrown.
    `exists(keyName)` ☰ Check if a key with the name `keyName` aready exists.
    `items` ☰ returns an → development/languages/VBA/language/arrays[array] of → development/languages/VBA/language/datatypes/variant[variants] that contains the *values* (without key names) of the dictionary.
    `keys` ☰ returns an → development/languages/VBA/language/arrays[array] of → development/languages/VBA/language/datatypes/variant[variants] that contains the *key names* of the dictionary.
    `remove(keyName)` ☰ Remove the key whose name is `keyName`
    `removeAll` ☰ Remove all key/value pairs thus emptying the dictionary.

    `compareMode` ☰ This property sets or gets the way with which key value names are compared and can be set to `vbUseCompareOption` (use value of → development/languages/VBA/language/statements/option/compare[`option compare`]), `vbBinaryCompare`, `vbTextCompare`, `vbDatabaseCompare` (→ development/databases/Access[MS Access] only). A value greater than 2 is interpreted as the 
    `count` ☰ This property corresponds to the number of stored key value pairs
    `item(keyName)` ☰ Sets or gets the value of the key whose name is `keyName`. When getting the value of an inexisting key, the key is created. When setting the value of an existing key, the value is overwritten.
    `key(keyname) = …` ☰ Overwrites the value for an already existing key. If key does not exist, an error is thrown.
  table }

}

{ Adding and removing keys

  An attempt to add an already existing key throws an → development/languages/VBA/language/error_handling[error] with number 457.
  -
  An attempt to remove an unexisting key throws an error with number 32811.

  gh|about-VBA|/object-libraries/microsoft-scripting-runtime/dictionary/add-remove.bas||

}
{ removeAll

  All keys of a given dictionary can be removed with `removeAll`:

  gh|about-VBA|/object-libraries/microsoft-scripting-runtime/dictionary/removeAll.bas||

}
{ Determine if key is present #vba-dictionary-isEmpty

  → development/languages/VBA/functions#vba-isEmpty[`isEmpty(dict, key)`] allows to check whether a key is present in the dictionary:

  gh|about-VBA|/object-libraries/microsoft-scripting-runtime/dictionary/isEmpty.bas||

}
{ for each in #vba-dictionary-for-each-in

  gh|about-VBA|/object-libraries/microsoft-scripting-runtime/dictionary/for-each-in.bas||
  
  See also → development/languages/VBA/collection#vba-collection-for-each[for each in] on collections 

}
{ uBound and lBound #vba-dictionary-ulBound

  → development/languages/VBA/functions/lBound-uBound[`lBound` and `uBound`] can be applied on a dictionary's `items` and `keys`:

   gh|about-VBA|/object-libraries/microsoft-scripting-runtime/dictionary/luBound.bas||

}

sa:

  A dictionary can not only store → development/languages/VBA/language/datatypes/object[objects], it can even be indexed by objects,
  → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary/obj#vba-dict-key-obj[see here].

  → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/index

  → https://github.com/VBA-tools/VBA-Dictionary[VBA-Dictionary (github)] is a *drop-in replacement* for `Scripting.Dictionary` that promises to behave exactly the same.
