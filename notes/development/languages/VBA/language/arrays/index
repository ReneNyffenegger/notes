$ VBA: arrays
@ array

{ Declaring arrays

  An array might be declared with `dim arrayName() as dataType`.

  The following example uses this syntax to declare an array and calls → development/languages/VBA/functions#vba-split[`split()`] to initialize the array with some strings.
  gh|about-VBA|/language/arrays/declare.bas||


  In order to declare an array with a fixed size, the `dim a(n to m) as …` construct might be used. This has also the benefit, that we don't have to rely on the
  `option base` → development/languages/VBA/language/statements[statement].

  gh|about-VBA|/language/arrays/declare-n-to-m.bas||


}
{ Creating arrays

  An easy way to create an array is to use the → development/languages/VBA/functions#vba-array[`array()`] function. It returns a
  → development/languages/VBA/language/datatypes/variant[variant], however.

 
  { Using bracket notation #vba-array-brackets

    An interesting way to create arrays is using brackets (which is a short hand notation for → Microsoft/Office/Excel/Object-Model/Application#excel-application-evaluate[`Application.evaluate`]):
    gh|about-VBA|/language/arrays/create-1d-array-with-brackets.bas||

    In a similar spirit, a *two dimensional* array can be created. A comma separates the element within an array, the semicolon separates the arrays:
    gh|about-VBA|/language/arrays/create-2d-array-with-brackets.bas||

  }

}
{ Function returning an array #vba-array-return

  It's possible to create a → development/languages/VBA/language/subs-and-functions[function] that
  → development/languages/VBA/language/subs-and-functions/returning-values[returns an array].

  gh|about-VBA|/language/arrays/return.bas||

  See also → development/languages/VBA/Calling-DLLs/return-an-array-of-strings[returning a string array from a DLL].

}
{ Determining the size of an array #vba-array-size

  There is no built-in function that returns the size (length) of an array.
  Two functions are needed to calculate the size of an array: → development/languages/VBA/functions#vba-lbound[`lbound`] and
   → development/languages/VBA/functions#vba-ubound[`ubound`] which return the lower and upper index of the elements in an array, respectively.

  Thus, the size of array is:
code {
uBound(ary) - lBound(ary) + 1
code }

}
{ TODO

  `option base` statement.

}

sa:

   → development/languages/VBA/functions#vba-split[`split`] can be used to create an array from a → development/languages/VBA/language/datatypes/string[string] and the corresponding
   → development/languages/VBA/functions#vba-join[`join`] can be used to create a string from an array.

   The keyword → development/languages/VBA/language/subs-and-functions/parameters/paramArray[`paramArray`] allows to pass an arbitrary number of parameters
   to a → development/languages/VBA/language/subs-and-functions[sub or function].


 → development/languages/VBA/language/statements/for#vba-for-each[`for each`]

 → development/languages/VBA/collection

 → development/languages/VBA/language

 → Microsoft/Office/Excel/Object-Model/Range#excel-range-dump-array[Dump the content of an array onto an excel sheet].

  Using → Microsoft/Office/Excel/Object-Model/WorksheetFunction[`WorksheetFunction.index`] to → development/languages/VBA/language/arrays/extract[extract arrays from arrays].

  → Microsoft/Office/Excel/Object-Model/Range/assign-to-variant[Assigning a range] to a → development/languages/VBA/language/datatypes/variant[variant] to create a
  *two dimensional array*.

  → development/languages/VBA/language/arrays/pass-to-func[Passing an array] to a → development/languages/VBA/language/subs-and-functions[function].

  { Excel

    Using → Microsoft/Office/Excel/Object-Model/WorksheetFunction/transpose[`worksheetFunction.transpose`] to → Microsoft/Office/Excel/Object-Model/WorksheetFunction/transpose#excel-transpose-array[write the values of an array vertically] into a
    → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].
  
    → Microsoft/Office/Excel/Object-Model/Range/value#excel-write-2D-array[Writing a 2D array] to a worksheet.

    Excel's → Microsoft/Office/Excel/Object-Model/Application#excel-application-match[`application.match`] function allow to test if a given element is present in an array.

  }

