$ VBA: arrays

{ Declaring arrays

  An array might be declared with `dim arrayName() as dataType`.

  The following example uses this syntax to declare an array and calls → development/languages/VBA/functions#vba-split[`split()`] to initialize the array with some strings.

  gh|about-VBA|/language/arrays/declare.bas||

}
{ Creating arrays with brackets #vba-array-brackets

  An interesting way to create arrays is using brackets (which is a short hand notation for → Microsoft/Office/Excel/Object-Model/Application#excel-application-evaluate[`Application.evaluate`]):
  gh|about-VBA|/language/arrays/create-1d-array-with-brackets.bas||

  In a similar spirit, a *two dimensional* array can be created. A comma separates the element within an array, the semicolon seperates the arrays:
  gh|about-VBA|/language/arrays/create-1d-array-with-brackets.bas||

}
{ TODO

  `option base` statement.

}

sa:

 → development/languages/VBA/functions#vba-lbound[lbound] and
 → development/languages/VBA/functions#vba-ubound[ubound] return the lower and upper index of the elements in an array.

 → development/languages/VBA/language/statements/for#vba-for-each[`for each`]

 → development/languages/VBA/collection

 → development/languages/VBA/language

 → Microsoft/Office/Excel/Object-Model/Range#excel-range-dump-array[Dump the content of an array onto an excel sheet].
