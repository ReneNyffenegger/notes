$ VBA: subs and functions

  → development/languages/VBA/language/subs-and-functions/optional-parameters[optional parameters]

  → development/languages/VBA/language/subs-and-functions/returning-values[returning values]

  → development/languages/VBA/language/subs-and-functions/byVal-byRef[byVal / byRef]

  This page discusses → development/languages/VBA/language/subs-and-functions/call-with-without-parantheses[if parentheses are required or not allowed when calling a function/sub]


{ Returning from functions

  Although there seems to be a `return` statement in VBA (in order to return to a `goto`), the way to return from a function is to use
 `exit function`.

  Exiting a sub or function (`exit sub`, `exit function`, `end sub`, `end function`) → development/languages/VBA/objects/err#clearing-err-object[clears the `err` object].

}
{ Names

  Underscores in a sub or function name have a special meaning: they indicate *event procedures/functions*.

}
{ Dynamically calling subs

  VBA allows to call functions and methods whose names are stored in a variable, see → Microsoft/Office/Excel/Object-Model/Application#excel-application-run[application.run] and
  → development/languages/VBA/functions#vba-callByName[`callByName`].

}
{ Error: Procecdure too large

  Apparently, the maximum size of a VBA sub or function is 64 KB. I mean… *really*?

}
sa:
  → development/languages/VBA/language/statements/call

  → development/languages/VBA/language/subs-and-functions/parameters[Function/sub parameters]

  → development/languages/VBA/language/subs-and-functions/property[`property set` and `get` functions].

  Subs and functions can be described with the → development/languages/VBA/attribute/vb_description[`VB_Description`] attribute.

  → development/languages/VBA/language/arrays/pass-to-func[Passing arrays] to functions.

  Using → development/languages/VBA/language/subs-and-functions/parameters/paramArray[`paramArray`] to pass an arbitrary number of arguments to a function.

  A `sub` or `function` runs under a specific → development/languages/VBA/language/error_handling#vba-error-handling-policy[error handling policy].

  In → Microsoft/Office/Excel, using the special statement → Microsoft/Office/Excel/Object-Model/Application/volatile[`application.volatile`], a function, whose return value is used on a → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet], can be marked as volatile
  which affects when the function is called for → Microsoft/Office/Excel/formulas#excel-formula-recalculation[formula recalculation].
