$ VBA: byVal vs byRef

A value that is passed to a → development/languages/VBA/language/subs-and-functions[sub or function] with a  → development/languages/VBA/language/subs-and-functions/parameters[parameter] is passed either *by reference* or
*by value*.
-
If it is passed *by value*, the sub/function gets a copy of the value. 

Because it is a copy, the function can change the value of the parameter without it having an effect to the value of the caller.
-
However, if a parameter is passed *by reference*, the modifications to the value in the sub/function are reflected in the calling context.

In order to force a parameter to be *by reference*, the keyword `byRef`, in order to force it to be *by value*, the keyword `byVal` must be used,
-
In absence of these keywords, the way the function is invoked detemines if a parameter is passed *by reference* or *by value*.

{ Demonstration

  The following simple → development/languages/VBA[VBA] code snippet tries to demonstrate the difference between `byVal` and `byRef` parameters:

  gh|about-VBA|/language/subs-and-functions/byVal-byRef/difference.bas||

}
{ Default depends on way of calling function

  If a parameter is neither defined as `byRef` or `byVal`, it depends on the way how the function or sub is called if the parameter treated as `byRef` or `byVal`.

  table { lll
    ~How the sub/function is called~ ☰ ~Parameters are~ ☰ ~Comment~
    `subName(param1, …`)             ☰ `byVal`          ☰  With parentheses, the parameters are passed `byVal`
    `subName param1, …`              ☰ `byRef`          ☰  Without parentheses, the parameters are passed `byRef`
    `call subName(param1, …)`        ☰ `byRef`          ☰  With a → development/languages/VBA/language/statements/call[`call`] statement, the parameters are passed `byRef` (even though parentheses are used)
  table }

  gh|about-VBA|/language/subs-and-functions/byVal-byRef/default.bas||

}
{ Compile error: ByRef argument type mismatch

  If parameters that are defined `byRef` get their value from a variable when the sub/function is called, the → development/languages/VBA/language/datatypes[data type] of the parameter
  and the variable must be equal, otherwise a *ByRef argument type mismatch* error is thrown:
  gh|about-VBA|/language/subs-and-functions/byVal-byRef/img/compile-error.png||

  Such an error can be forced with the following VBA snippet:
  gh|about-VBA|/language/subs-and-functions/byVal-byRef/compile-error.bas||

  Note, the line that reads `call s(42)` does not cause this error, although `42` has a different data type as the parameter. This is because the value for the parameter is now provided
  from a constant rather than a variable.

}


sa:
  → development/languages/VBA/language/subs-and-functions/parameters[Sub and function parameters]

  → development/languages/VBA/Calling-DLLs/byVal-vs-byRef_as-longPtr-vs-as-any
