$ VBA data types
@ data type

All VBA → development/languages/VBA/language/variables[variable] data types are compatible with the *variant* datatype that is defined by OLE Automation.

The VBA data types are:
table { lll
  ~Name~                                                            ☰ ~Comments~ ☰ ~Constant~ (`vbVarType` enumeration, returned by → development/languages/VBA/functions/varType[`varType()`])
  → development/languages/VBA/language/datatypes/byte               ☰ ☰ `vbByte` (17)
  → development/languages/VBA/language/datatypes/boolean[boolean]   ☰ ☰ `vbBoolean` (11)
  → development/languages/VBA/language/datatypes/currency           ☰ ☰ `vbCurrency` (6)
  → development/languages/VBA/language/datatypes/date[date]         ☰ ☰ `vbDate` (7)
  decimal                                                           ☰ (not declarable) ☰ `vbDecimal` (14)
  → development/languages/VBA/language/datatypes/double[double]     ☰ ☰ `vbDouble` (5)
  `error`                                                           ☰ (?: `→ development/languages/VBA/language/statements/dim e as error` is possible…) ☰ `vbError` (10)
  → development/languages/VBA/language/datatypes/integer[integer]   ☰ 4 bytes with sign ☰ `vbInteger` (2)
  → development/languages/VBA/language/datatypes/long[long]         ☰ 4 bytes with sign ☰ `vbLong` (3)
  → development/languages/VBA/language/datatypes/longLong[longLong] ☰ 8 bytes (present only on 64-bit platforms) ☰ `vbLongLong` (20)
  longPtr                                                           ☰ ☰
  → development/languages/VBA/language/datatypes/object[object]     ☰ such as → Microsoft/Office/Excel[excel] objects, or user objects in *class modules*) (TODO: aka »object reference«? ☰ `vbObject` (9)
  → development/languages/VBA/language/datatypes/single[single]     ☰ Other → development/languages[programming languages] might call this data type a *float* ☰ `vbSingle` (4)
  → development/languages/VBA/language/datatypes/string[string]     ☰ ☰ `vbString` (8)
  → development/languages/VBA/language/datatypes/variant[variant]   ☰ The actual type of the variable is determined at run time rather than compile time ☰ `vbVariant` (12). Only used when added to `vbArray`.
  array                                                             ☰ ☰ `vbArray` (8192). This value is never returned by → development/languages/VBA/functions/varType[`varType()`], instead, the type-number of the elements in the array is added to 8192.
  null                                                              ☰ ☰ `vbNull` (1)
  empty                                                             ☰ ☰ `vbEmpty` (0)
  data access object ☰ ☰ `vbDataObject` (13)
  user defined types ☰ Data types that were declared with the `type` → development/languages/VBA/language/statements[statement] ☰ `vbUserDefinedType` (36)
table }
Additionally, the `type` → development/languages/VBA/language/statements[statement] allows to create a → development/languages/VBA/language/datatypes/user-defined[user defined datatype].

Each data type has a *default value* to which a variable is initialized when it is created.

Apparently, VBA does not have a `char` datatype. `byte` might be used instead.

A variable cannot be declared as `decimal`. Instead, the variable needs to be declared as `variant` and assigned to with `→ development/languages/VBA/functions#vba-cDec[cDec]("42.1234")`.
-
Alternatively, a → development/languages/VBA/language/datatypes/currency[`currency`] variable might be used which accurately stores up to four decimal places.

Except the `byte` datatype, there are no unsigned datatypes.

At runtime, the type of a variable can be determined with → development/languages/VBA/functions/typeName[`typeName(var)`] and
→ development/languages/VBA/functions/varType[`varType(var)`].

{ Declaring data types of variables and constants

  The data type of variables can be declared with the → development/languages/VBA/language/statements/dim[`dim`] statement.

  The → development/languages/VBA/language/statements/deftype[`deftype`] → development/languages/VBA/language/statements[statements] allows to specify default types depending on with which characters a variable starts, at module level.

  { Type-declaration character #vba-type-declaration-character

    A variable's data type can also be specified with the following symbols which are referred to as *type-declaration characters*.
      • `%`: integer
      • `&`: long
      • `@`: currency
      • `!`: single
      • `#`: double
      • `$`: string

    These characters need to be appended to the variable name.

  }
  { Simple example

    gh|about-VBA|/language/datatypes/declaring.bas||

  }
}

sa:

  → development/languages/VBA/functions/conversion[Data type conversion functions]

  → development/languages/VBA/language

  → development/languages/VBA/language/datatypes/date/convert-UTC-text-to-date[Convert a UTC text to a date]

  Compare with the → Microsoft/Office/Excel/data-types[Excel data types]

links:
  The VBA Language Specification: → development/languages/VBA/language/datatypes/index[Data Values and Value Types]
