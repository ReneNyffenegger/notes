$ VBA: data type string
@ string

A → development/languages/VBA[VBA] string is a sequence of 16-bit binary encoded → development/Unicode → development/Unicode/Codepoints[code points] (= UTF-16?).

The → development/languages/VBA/functions#vba-format[`format`] function can be used to convert some data types into a string, see for example
→ development/languages/VBA/language/datatypes/date/format[converting a date into a string].

  The function → development/languages/VBA/functions/xPtr[`strPtr`] that returns a pointer to the string.

{ A string is a BSTR

  The following example shows that internally a VBA string is really a BSTR. The example uses
  the memory accessing functions `GetMemX_` which can be found in the → development/languages/VBA/runtime-lib[VBA runtime library].

  gh|about-VBA|/language/datatypes/string/BSTR.bas||

}
{ Special characters #vba-string-special-characters

  The following VBA script tries to demonstrate the difficulties in VBA when dealing with «special characters».

  The example declares two strings, `kappa` and `smiley` and tries to assign the respective characters to these strings (`"κ"` and `"☺"`). It turns out that the → Microsoft/Office/Visual-Basic-Editor[VBA editor] is not
  capable of storing any character. (I *guess* that it can only store those of the system default locale). Thus, these characters are assigned a question mark.

  It then uses → development/languages/VBA/functions/chr#vba-chrW[`chrW()`] to create the desired characters from a Unicdoe → development/Unicode/Codepoints[code point]. The `ascW` function confirms that the correct values were assigned to strings. However,
  if used with `msgBox` or `debug.print`, VBA still is not capable of displaying the correct character and still prints the character as question mark.

  Next, the example checks if at least these characters can be written into a file. When the file is created with the → development/languages/VBA/language/statements/open[`open`] statement, it turns out, it is not possible, the characters are again
  written as question marks.

  Finally, another file is created with → development/databases/ADO/objects/stream[`ADODB.stream`] and → development/Unicode/character-set[character set] → development/Unicode/UTF-8[UTF-8]. Finally, the characters are written as desired.

  Note: in order to run this example, it needs a → development/databases/ADO#adodb-add-reference[reference to ActiveX Data Objects].

  gh|about-VBA|/language/datatypes/string/special-characters.bas||

}

sa:

  → development/languages/VBA/functions/conversion/cStr[`cStr(arg)`] converts `arg` into a string.

  The → development/languages/VBA/functions/replace[`replace` function] can be used to replace (fixed) string portions with another string.

  → development/languages/VBA/language/datatypes[datatypes]
