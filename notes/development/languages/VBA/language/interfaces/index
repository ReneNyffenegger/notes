$ VBA: Class interfaces

The main purpose of *interfaces* is to guarantee that → development/languages/VBA/language/classes[classes] that implement the interface provide a set of functions and subs.
-
Thus, an interface is somewhat similar to a pure abstract class in → development/languages/C-C-plus-plus/CPP[C++]

{ Iexample

  An interface is an ordinary → development/languages/VBA/language/classes file that contains → development/languages/VBA/language/subs-and-functions[functions and subs].
  -
  Within such file, there is no language construct (such as a `interface` keyword) that indicates that this is an interface.

  Because the following → development/languages/VBA/language/classes is used as an interface, the bodies of the subs and functions are left empty.

  gh|about-VBA|/language/interfaces/example/Iexample.cls||

}
{ Implementing the interface

  The following two classes (named `Foo` and `Bar`) implement the interface.

  The source code requires the keyword `implements`, followed by the name of the interface that a class wants to implement.

  A class that implements an interface is required to provide a sub or function for all *public* subs and functions that are defined
  in the interface class. If one of these functions/subs is not provided, the compiler will issue the error message
 *Object module needs to implement «functionName» for interface «interfaceName»*.
  -
  Thus, using interfaces guarantees that a set of subs and functions along with certain parameters are implemented by the class which then can be used by the
  class's consumer.

  The methods that are declared in the interface must have a prefix with the name of the interface followed an underscore and the sub/function that is implemented
  -
  In this example, these names are `IExample_aSub` and `IExample_aFunc`.

  { Foo.cls

    gh|about-VBA|/language/interfaces/example/Foo.cls||

  }
  { Bar.cls

    gh|about-VBA|/language/interfaces/example/Bar.cls||

  }

}
{ Using the interfaces

  When using interfaces, the variables that store an object that implements an interface can be declared with the name name of the interface: `dim ex_1 as Iexample` and assigned a new implementation of that interface
  with `set ex_1 = new Foo`.

  gh|about-VBA|/language/interfaces/example/main.vb||

}
{ Creating the example

  An Excel → Microsoft/Office/Excel/Object-Model/Workbook that contains the source files for this example can be created with the
  → Microsoft/Office/VBScript-App-Creator and the following script:
  gh|about-VBA|/language/interfaces/example/createExcel.wsf||


}

sa:
  → development/languages/VBA/language/classes[VBA classes]

  → development/languages/VBA/language

links:
  Vitosh: → https://www.vitoshacademy.com/vba-interfaces-in-vba-how-and-why[VBA – Interfaces in VBA How And Why?] and the corresponding
  → https://github.com/Vitosh/VBA_personal/tree/master/Interfaces[github repository].
