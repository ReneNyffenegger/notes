$ VBA: classes

Classes require a *class module* whose name determines the name of the class it contains.

{ Constructor, destructor

  Defining a class with a constructor and a destructor.
  gh|about-VBA|/language/classes/constructor-destructor/tq84.bas||

  Note again: classes (such as the above) need to be inserted into a VBA project as *class module*, not as a »standard« module.

  Initializing the class (calls the constructor and the destructor):
  gh|about-VBA|/language/classes/constructor-destructor/main.bas||

}
{ Member variables

  Defining a class with three member variables of which two are `public` and one
  is `private`.
  gh|about-VBA|/language/classes/member-variables/tq84.bas||

  Using the class
  gh|about-VBA|/language/classes/member-variables/main.bas||

}
{ Member functions

  Here's a class with a member function and a member sub:
  gh|about-VBA|/language/classes/member-functions/tq84.cls||

  After instantiating the class with the `new` operator, it can be used to store and retrieve a value:
  gh|about-VBA|/language/classes/member-functions/main.bas||

}
{ property let/set

  After defining `property let` and `property set` functiones, the person's name and age can be set with the familiar VBA constructs `obj.member = var` and
  `var = obj.member`.

  Here, we're definining a class for a person with such property set and let functions. As usual with simple examples, a person has a name and an age.

  gh|about-VBA|/language/classes/let-set/person.bas||

  The corresponding sub that uses the class:
  gh|about-VBA|/language/classes/let-set/main.bas||

  TODO: Compare with `property set` method.

}
{ Copying and the new operator


  In order to create a new instance of a class, the keyword `new` must be used. This is demonstrated in the following example.

  First, a new instance of the `tq84` class is cretead with `new tq84` and its reference assigned to the `obj_1` variable.

  Then, the `obj_1` is assigned to `obj_2`. Since there is no invocation of `new`, no new instance is created. Thus, the constructor `class_initialize` is not called and
  both `obj_1.m` and `obj_2.m` point to the same string.

  In order for the destructor `class_terminate` to be called, both references to the class need to be set to → development/languages/VBA/language/null-and-nothing-etc#vba-nothing[`nothing`].

  gh|about-VBA|/language/classes/copying/main.bas||

  The class:
  gh|about-VBA|/language/classes/copying/tq84.cls||

}
{ Default member

  If the declaration of the a class's `property` member method is *immediately* followed by an `→ development/languages/VBA/attribute[attribute] NAME.vb_UserMemId = 0` statement (`NAME` being the name of the property), then this
  property becomes the default property for the class and will be invoked when an instance of the class is used without a member.

  gh|about-VBA|/language/classes/default-member/person.cls||

  gh|about-VBA|/language/classes/default-member/main.bas||

}


sa:

  → development/languages/VBA/language/classes/reference-counting[reference counting]

  → development/languages/VBA/language/interfaces[VBA interfaces]

  → development/languages/VBA/functions/index#vba-callByName[`callByName()`],
  -
  → development/languages/VBA/functions/typeName[`typeName()`]

  Datatype → development/languages/VBA/language/datatypes/object[object].

  → development/languages/VBA/language
