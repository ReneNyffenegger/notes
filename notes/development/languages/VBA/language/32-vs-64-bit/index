$ VBA: 32-bit vs 64-bit

The → development/languages/VBA/language/datatypes/longPtr[`longPtr` data type] is 4 bytes in a 32-bit environment (of → Microsoft/Office) and 8 bytes in a 64-bit environment.

The → development/languages/VBA/language/datatypes/longLong[`longLong` data type] is only defined in 64-bit environments, see
→ development/languages/VBA/compiler-directives/winX/longLong[testing for 64-bit environments].

In a 64-bit environment, the compiler directive constant `win64` → development/languages/VBA/compiler-directives/const#vba-predefined-compiler-constants[is predefined],
see → development/languages/VBA/compiler-directives/winX[also here].

{ ptrSafe keyword #vba_32_64_ptrSafe

  The `ptrSafe` keyword makes sure that a  can be safely run in a 64 bit-environment.

  A 64 bit version of Office *requires* that → development/languages/VBA/language/statements/declare[`declare` statement] statements are decorated with `ptrSafe`.

  I *believe* (but would like to have this confirmed or refuted) that the idea of `ptrSafe` is to force a developer to think about the → development/languages/VBA/language/datatypes[data types] that need to be adjusted
  when moving from 32 bit to 64 bit. By declaring a function with `ptrSafe`, the developer explicitely states that the necessary changes to → development/languages/VBA/language/datatypes/longLong[`longLong`] and
  → development/languages/VBA/language/datatypes/longPtr[`longPtr`] have been performed.

  The `ptrSafe` can be conditionally applied to a declare statement by using → development/languages/VBA/compiler-directives/conditional-compilation[`#if … then … #end if` conditional compilation] constructs:
code {
#if → development/languages/VBA/compiler-directives/vbaX[vba7] then 
    declare ptrsafe sub … 
#else 
    declare         sub …
#endif
code }

}
sa:

  The → development/languages/VBA/language/statements/declare#vba-declare-ptrSafe[`ptrSafe`] attribute of a
  → development/languages/VBA/language/statements/declare[`declare` statement].

  → Windows/WOW64
