$ VBA error handling
@ error handling


→ development/languages/VBA/language/error_handling/erl

{ Error handler Terminology

  An *error handler* is neither a → development/languages/VBA/language/subs-and-functions[sub nor a function], rather, its a section of a sub or function that starts
  with a *label*.

  Such an *error handler* is said to be ~enabled~ if it was turned on with a → development/languages/VBA/language/error_handling/on_error_goto[`on error goto <label>`] statement.

  When an enabled error handler *is handling* an error, the error handler is said to be ~active~.

}
{ Error handling policy of a sub or function #vba-error-handling-policy

  A → development/languages/VBA/language/subs-and-functions[sub or function] runs under a *error handling policy*.

  The policy that is in effect when a *runtime error* occurs specifies how that error is handled.

  VBA has five policies:
  table { ll
     Default ☰ Stop current procedure and return the error object (→ development/languages/VBA/objects/err[`err`]) to the calling procedure and proceed according to calling procedure's error policy.
     Resume next ☰ Execute «next» → development/languages/VBA/language/statements[statement] (that is the statement that also would have executed if no error had occured)
     Goto ☰ Set current procedure's policy to *default* and continue at the *label* that is associated with → development/languages/VBA/language/error_handling/on_error_goto[`on error goto`].
     Retry ☰
     Ignore ☰
     Terminate ☰ Behaviour is implementation defined
  table }

  A sub's or function's error handling policy is changed with the → development/languages/VBA/language/statements/on-error[`on error`] statement.

  When a function or sub is called, its policy is the *Default* policy, *except* if the sub/function is invoked  from a *host application*, in which case it is set
  to *Terminate*.

}
{ Runtime errors #vba-runtime-errors

  Some ineresting, imho, runtime errors include
  table { rl
      5 ☰ Invalid procedure call or argument
      6 ☰ Overflow
      9 ☰ Subscript out of range
     10 ☰ *redimensioned variable is currently locked by a → development/languages/VBA/language/subs-and-functions/byVal-byRef[`byRef`] parameter*
     11 ☰ Division by zero
     13 ☰ Type mismatch: *declared type of ~redimensioned variable~ is → development/languages/VBA/language/datatypes/variant[`variant`] and its value type is not an array*
     20 ☰ Resume without error (Encountering → development/languages/VBA/language/statements/resume[`resume`] statement without error)
     62 ☰ Input past end of file
     91 ☰ Object variable or With block variable not set
     94 ☰ Invalid pattern string
     94 ☰ Invalid use of → development/languages/VBA/language/null-and-nothing-etc#vba-null[null]
    438 ☰ Object doesn't support this property or method
    424 ☰ Object required
    450 ☰ Wrong number of arguments or invalid property assignment
    448 ☰ Named argument not found
    449 ☰ Argument not optional
    450 ☰ Wrong number of arguments or invalid property assignment

  table }

}

sa:

  The → development/languages/VBA/language/statements/on-error[`on error`] and the
  → development/languages/VBA/language/statements/resume[`resume`] statements.

  The VBA → development/languages/VBA/objects/err[`err`] object.

  → development/languages/VBA/language
