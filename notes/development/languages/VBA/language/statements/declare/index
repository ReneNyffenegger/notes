$ VBA statement: declare
@ declare

code {
declare sub      subName  lib "some.dll"                   (parameters)
declare sub      subName  lib "some.dll" alias "otherName" (parameters)
declare function funcName lib "some.dll"                   (parameters) as returnType
declare function funcName lib "some.dll" alias "otherName" (parameters) as returnType
code }

`declare` is needed to locate a procedure or function in a → Windows/development/Portable-Executable/DLL[DLL].

In order to be callable from VBA, this procedure or function needs to have the → development/languages/C-C-plus-plus/calling-convention#stdcall[stdcall] calling convention.

Don't confuse `declare` with → development/languages/VBA/language/statements/dim[`dim`].

{ ptrSafe #vba-declare-ptrSafe

  The `ptrSafe` keyword makes sure that a `declare` statement can be safely run in a → development/languages/VBA/language/32-vs-64-bit[64-bit] environment.

  The `ptrSafe` attribute indicates to the VBA compiler that the `declare`
  statement is targeted for a → development/languages/VBA/language/32-vs-64-bit[64-bit version of Office]. Without this
  attribute, using the `declare` statement in a 64-bit system will result in the compile-time error
  "
    The code in this project must be updated for use on 64-bit systems. Please review and update Declare statements and then
    mark them with the PtrSafe attribute.
  "

}

sa:

  → development/languages/VBA/Calling-DLLs[Accessing and calling DLLs from VBA]

  → development/languages/VBA/language/statements
