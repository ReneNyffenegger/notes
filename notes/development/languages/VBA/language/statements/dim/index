$ VBA statement: dim
@ dim

The `dim` statement allows to declare the → development/languages/VBA/language/datatypes[data type] of → development/languages/VBA/language/variables[variables].
-
Don't confuse `dim` with → development/languages/VBA/language/statements/declare[`declare`].

The → development/languages/VBA/language/statements/option/explicit[`option explicit`] statement ensures that variables are declared with a `dim` statement. The `dim` statement is also necessary when
→ development/languages/VBA/language/statements/deftype[`defType`] or → development/languages/VBA/language/datatypes#vba-type-declaration-character[type-declaration characters] are used.

In order to declare a global variable, the → development/languages/VBA/language/statements/public[`public`] statement is needed.

{ dim … as new … #vba-dim-as-new

  The following special construct declare and initializes an object-→ development/languages/VBA/language/variables[variable] in one statement:
code {
dim obj as new → development/languages/VBA/language/classes[someClass]
code }

  However, the object is initialized only when it is first referenced, see
  → development/languages/VBA/language/classes/constructor-destructor/beware-of-dim-as-new[beware of the `dim … as new …` statement].

}
{ Declaring multiple variables with one dim statement

  It is possible to declare multiple variables with one `dim` statement like so:
code {
dim v1, v2 as long
code }
 
  Unfortunately, this does not do what might be expected: the type of `v1` will be a → development/languages/VBA/language/datatypes/variant[variant]:

  gh|about-VBA|/language/statements/dim/beware.bas||

}
{ A variable is declared for a sub/function, not for a scope #vba-dim-scope

  Unlike in → development/languages/C-C-plus-plus/C[C] like languages, the `dim` statements belongs to the scope of the function within which it occurs, not within a narrower scope such as a
  → development/languages/VBA/language/statements/_looping[looping statement].

}

sa:
  
  The → development/languages/VBA/language/statements/const[`const`] statement.

  → development/languages/VBA/language/statements
