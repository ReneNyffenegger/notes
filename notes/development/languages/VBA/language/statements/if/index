$ VBA statement: if
@ if

{ if then … end if

  gh|about-VBA|/language/statements/if/if-then.bas||

}
{ if then … else … end if

  gh|about-VBA|/language/statements/if/if-else.bas||

}
{ if then … elseif … end if

  gh|about-VBA|/language/statements/if/if-then-elseif.bas||

}
{ Checking multiple conditions with logical operators

  Multiple conditions can be checked using the logical → development/languages/VBA/language/operators[operators] `not`, `and`, `or`, `xor`, `eqv` and `imp`:
  gh|about-VBA|/language/statements/if/or-and.bas||

}
{ Single line

  If the `if` statement controls only one following statement, the following statement can be put on the same line as the `if` statement. The `end if` part is then not
  necessary anymore. Multiple statements are separated with colons (`:`)
code {
if fruit="apple"  then msgBox "yes"
if fruit="banana" then msgBox "yes": debug.print("The fruit is a banana")
code }

  Similarly, this is also possible with the `else` part. Note that in this construct, an `elseif` (without spaces) is not recognized.
code {
if xyz="apple" then msgBox "yes" else msgBox "no"

if x = 1 then debug.print ("one") else if x = 2 then debug.print ("two") else if x = 3 then debug.print (3) else debug.print ("out of range")
code }

  Of course, using the underscore (VBA's → development/languages/VBA/line-continuation[line continuation character]), such a «one line» `if then else` statement can be aligned
  more neatly:
code {
if      x = 1 then debug.print ("one"  ) _
else if x = 2 then debug.print ("two"  ) _
else if x = 3 then debug.print ("three") _
else               debug.print ("?"    )
code }

}

sa:

  The → development/languages/VBA/language/statements/select[`select`] statement.

  → development/languages/VBA/language/statements

  → development/languages/VBA/compiler-directives/conditional-compilation[Conditional compilation with `#ifdef … then` and `#end if`].
