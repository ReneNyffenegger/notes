$ VBA statement: for
@ for

`for` is a → development/languages/VBA/language/statements/_looping[looping statement].


{ for n = 1 to y

  gh|about-VBA|/language/for.bas|one-to-one|
  
  Such a for loop can be exited with →development/languages/VBA/language/statements/exit#vba-exit-for[exit for].

}
{ for each #vba-for-each

  The `for each elem in coll` statement runs a series of statements for each element in a collection.
  -
  The iteration can be terminated before the last element was reached with `exit for`.

  If the type of the collection is an → development/languages/VBA/language/arrays[array], the type of `elem` must be → development/languages/VBA/language/datatypes/variant.

  gh|about-VBA|/language/for_each.bas|one-to-one|

 *See also* → development/languages/VBA/collection#vba-collection-for-each[for each in] on collections and
  on → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary#vba-dictionary-for-each-in[dictionaries].
  -
  The `for each` statement can also be used to → Microsoft/Office/Excel/Object-Model/Range#excel-range-for-each[iterate over each cell in an excel range].

  In order to create a custom behaviour for `for each … in` statements, the → development/languages/VBA/IUnknown/IEnumVARIANT[`IEnumVARIANT`] interface must
  be implemented.


}

sa:


  → development/languages/VBA/language/statements

  The → development/languages/C-Sharp[C#] statement → development/languages/C-Sharp/language/keywords/statement/iteration/foreach-in[`foreach … in`]
