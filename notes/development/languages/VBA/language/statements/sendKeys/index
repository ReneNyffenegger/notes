$ VBA: Simulate keyboard typing with sendKeys statement
@ sendKeys

`sendKeys` is a → development/languages/VBA/language/statements[VBA statement] to simulate keyboard typing into the active window.

The first (mandatory) parameter is a → development/languages/VBA/language/datatypes/string[string] that specifies the keys to be sent. The
second (→ development/languages/VBA/language/subs-and-functions/optional-parameters/keyword-optional[optional]) parameter is
a → development/languages/VBA/language/datatypes/boolean[boolean] that specifies if `sendKeys` returns to the caller before all
key strokes were processed (`true`: wait until they're processed, `false`: return immediately).

Except the special characters `+`, `^`, `%`, `~`, `(` and `)`, each key stroke is represented by its character. The special characters have the following meaning:
  `+`: shift
  `^`: ctrl
  `%`: alt

Parentheses apply a special character's meaning to a series of characters. Thus `+(abc)` indicates that first shift is pressed, then an `a` followed by a `b` and a `c` and only then
the shift is released.

The curly braces are used to type other special keys of the keyboard:
  • `{backspace}` or `{bs}` or `{bksp}`: backspace
  • `{break}`: break
  • `{capslock}`: caps lock
  • `{del}` or `{delete}`: delete
  • `{down}`: down arrow (etc.)
  • `{f1}`: F1 function key (etc.)

It's possible to simulate the *repeated pressing* of a key: `{UP 42}` »presses« the *up arrow* key 42 times.

In order to »press« curly braces, they need to be enclosed in curly braces themselvs: `{{}` or `{}}`.


{ Writing into notepad and saving the text file

  The following example starts notepad, types some text into it, and uses ctrl-s to open the *safe as dialog* where
  a file name is sent.

  gh|about-VBA|/language/statements/sendKeys.bas||

}
{ TODO

  The *VBA runtime* constants `vbKey…`.

}

sa:

  Perl Module → development/languages/Perl/modules/Win32/GuiTest/index[`Win32::GuiTest`].

  The Powershell script → development/tools/scripts/personal/simulate-activity_ps1[`simulate-activity.ps1`]
