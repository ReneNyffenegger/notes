$ VBA: variables
@ variable

A variable has a → development/languages/VBA/language/datatypes[datatype].


rem {
Local variables are declared with the → development/languages/VBA/language/statements/dim[`dim`] statement, → development/languages/VBA/language/variables/global[global variables] with
→ development/languages/VBA/language/statements/public[`public`].
rem }

The address in memory where the value of a variable is stored is returned with the function → development/languages/VBA/functions/xPtr[`varPtr(var)`].

{ Lifetime of variables #vba-variable-lifetime

  The time between the creation and destruction of a variable is the variable's lifetime (aka *extent*).

  There are five lifetimes for variables
    • Program extent: variable is defined by *host application* or *VBA specification*
    • Module extent: which also include *static local variables* within a → development/languages/VBA/language/subs-and-functions[sub or function].
    • Procedure extent:
    • → development/languages/VBA/language/datatypes/object[Object] extent
    • Aggregate extent: in → development/languages/VBA/language/datatypes/user-defined[UDTs]

}
{ Declaring variables

  { dim statement

    The → development/languages/VBA/language/statements/dim[`dim`] statement declares a variable that is
      • local to a → development/languages/VBA/language/subs-and-functions[sub or function]
      • local to a → development/languages/VBA/language/module[module]

  }
  { global statement

    A variable can be declared → development/languages/VBA/language/variables/global[global] at module level in which case the variable is accessible from other modules as well.


  }

}
sa:

  In order to make sure that variables are declared (→ development/languages/VBA/language/statements/dim[`dim`] statement),
  → development/languages/VBA/language/statements/option/explicit[`option expclicit`] can be used.

  → development/languages/VBA/language/null-and-nothing-etc[Null and nothing etc.]
