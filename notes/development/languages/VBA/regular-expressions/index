$ VBA: Regular expressions

In → development/languages/VBA[VBA], 
→ development/regular-expressions[regular expressions] need the reference → Windows/development/COM/Useful-object-libraries/Microsoft-VBScript-Regular-Expressions[Microsoft VBScript Regular Expressions 5.5].
(whose → development/UUID-GUID[GUID] is `{3F4DACA7-160D-11D2-A8E9-00104B365C9F}`).
-
This GUID might be conveniently added to a VBA project using the → Microsoft/Office/Visual-Basic-Editor/Object-Model#vbe-add-reference[VB Editor Object Model]. The following snippet
works in → Microsoft/Office/Excel:
code {
thisWorkbook.VBProject.references.addFromGuid _
        GUID   :="{3F4DACA7-160D-11D2-A8E9-00104B365C9F}", _
        major  :=  5,                                      _
        minor  :=  5
code }

{ Objects

  { RegExp

    Methods and properties of the `RegExp` objects are:
    table { ll

      `Execute(src)` ☰ Returns an `IMatchCollection2` object (see `MatchCollection` below)
      `Global` ☰ A `boolean`
      `IgnoreCase` ☰ A `boolean`
      `MultiLine` ☰ A `boolean`
      `Pattern` ☰ The regular expression (`string`)
      `Replace(src, repl)` ☰ Returns a `string`
      `Test(src)` ☰ Returns a `boolean`

    table }

  }
  { MatchCollection

   `MatchCollection` is a collection of `IMatch2` objects/interfaces (see `Match` below).

    A `MatchCollection` object can be obtained by `RegExp.Excecute()`.

    table { ll
       `Count` ☰ The number of matches captured by this object. Can be greater then 1 if `RegExp.global` is set to `true`.
       `Item(n)` ☰ The nth item in the collection (first item has index 0)
    table }

  }
  { Match

    table { ll
       `FirstIndex` ☰ The position of the first character that was matched by the corresponding part of the regex pattern.
       `Length` ☰ The length of the text that was matched by the regex pattern (i. e. the length of `Value`)
       `SubMatches` ☰ An `ISubmatches` object/interface (See `SubMatches`) below
       `Value` ☰ `string`. *Default value*
    table }

  }
  { SubMatches

?  `SubMatches` are used for the portion captured with → development/languages/VBA/regular-expressions/paranthesis[paranthesis] in the regular expression.

    table { ll
       `Count` ☰ Corresponds to the number of capturing parantheses in the regular expression.
       `Item` ☰ The `string` that was matched by the parantheses.
    table }

  }
}

{ Split

  gh|about-VBA|/regular-expressions/split.bas||

}
{ Replace SQL comments #vba-re-remove-sql-comments

  gh|about-VBA|/regular-expressions/replace-sql-comments.bas||

  Compare with the `removeSQLComments` function in → development/languages/VBA/modules/Database/SQL[the SQL VBA module].

}
{ Excel

  The following example tries to show how regular expressions might be used in → Microsoft/Office/Excel[Excel] to fill cell values with the result of a regexp pattern that is applied to
  other cells.

  gh|about-VBA|/regular-expressions/excel.bas||

}
{ Extract nth match

  By setting the `global` flag to → development/languages/VBA/language/datatypes/boolean[`true`], it's possible to access the nth match of pattern within a text:
  gh|about-VBA|/regular-expressions/extract-nth-match.bas||

}

sa:

  → development/languages/VBA/regular-expressions/paranthesis[Using parenthesis] to extract submatches.

  VBA's → development/languages/VBA/language/operators/like[`like`] operator.

  → development/languages/VBA/language

  The .NET `→ Microsoft/dot-net/namespaces-classes/System/Text/RegularExpressions` namespace

  Find Excel cells → Microsoft/Office/Excel/Object-Model/Range/cell/find-cells-matching-a-regexp-or-containing-only-whitespace-characters[matching a given regular expression or contain whitespace characters only].

  → development/regular-expressions[Regular expressions]
