$ VBA: data type conversion functions

The → development/languages/VBA/language/datatypes[data type] conversion functions of
→ development/languages/VBA[VBA] are: `cBool`, `cByte`, `cCur`,
→ development/languages/VBA/functions/conversion/cDate[`cDate`], `cDec`, `cDbl`, `chr`, `cInt`, `cLng`, `cLngLng`, `cLngPtr`, `cSng`, 
→ development/languages/VBA/functions/conversion/cStr[`cStr`], `cVar` and `cvErr`.

`strConv` converts from one → development/languages/VBA/language/datatypes/string[string data type] to another string data type.

{ Numerical conversion functions

  The numerical conversion functions `cDec`, `cInt`, `cLng` etc. convert a string to the corresponding → development/languages/VBA/language/datatypes[datatype].
  -
  If the string starts or ends with a minus sign, the returned value is negative, too:
code {
debug.print(cInt("42-"))
-42
debug.print(cDbl("-8.42"))
-8.42
code }

  { cDec #vba-cDec

    Although VBA doesn't have a decimal → development/languages/VBA/language/datatypes[datatype], a string value (such as `"42.1234"`) can be converted to a decimal with `cDec`.

  }
  { cLng #vba-cLng

    gh|about-VBA|/functions/cLng.bas||

  }

}

}

{ Misc

  Although VBA doesn't have a decimal → development/languages/VBA/language/datatypes[datatype], a string value (such as `"42.1234"`) can be converted to a decimal with `cDec`.

  Arguably, the functions `asc`,  → development/languages/VBA/functions#vba-hex[`hex`], `oct`, `str` and `val` might be considered conversion functions, too.

}

sa:
  → development/languages/VBA/functions[Other VBA functions]
