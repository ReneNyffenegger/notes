$ VBA functions
@functions

{ array #vba-array
 
 `array()` creates an → development/languages/VBA/language/arrays[array] and returns it as a → development/languages/VBA/language/datatypes/variant[variant].

  gh|about-VBA|/functions/array.bas||

}
{ callByName #vba-callByName

  
 `callByName` operates on → development/languages/VBA/language/classes[classes/objects]. So, we need to first create a class:
  gh|about-VBA|/functions/callByName/tq84Obj.bas||

  Now, we can call methods/subs etc on the class with `callByName`:
  gh|about-VBA|/functions/callByName/callMethodByName.bas||

  In → Microsoft/Office/Excel[Excel] forms, the special keyword `me` can be used to refer to *itself*.k

  In order to dynamically call → development/languages/VBA/language/subs-and-functions[ordinary subs], use
  → Microsoft/Office/Excel/Object-Model/Application#excel-application-run[application.run] (if the function
  runs in → Microsoft/Office/Excel, → Microsoft/Office/Word etc.)

}
{ chr and chrW

  → development/languages/VBA/functions/chr#vba-chr[`chr(n)`] converts the → development/Unicode/ASCII[ascii] code `n` to a (single character) → development/languages/VBA/language/datatypes/string[string].

  → development/languages/VBA/functions/chr#vba-chrW[`chrW(u)`] converts the → development/Unicode/Codepoints[Unicode codepoint] `u` to a character.
  

}
{ choose #vba-choose

  gh|about-VBA|/functions/choose.bas||

  Compare with the → development/languages/VBA/language/statements/select[`select`] statement and the
  → development/languages/VBA/functions/switch[`switch`] function.

}
{ cDec #vba-cDec

  Although VBA doesn't have a decimal → development/languages/VBA/language/datatypes[datatype], a string value (such as `"42.1234"`) can be converted to a decimal with `cDec`.

}
{ cLng #vba-cLng

  gh|about-VBA|/functions/cLng.bas||

}
{ date #vba-date

  `date` returns the current date. Compare with → #vba-now[`now`]

}
{ dateAdd

  → development/languages/VBA/functions/dateAdd[`dateAdd(…)`] adds an interval to a point in time.

}
{ dateSerial #vba-dateSerial

  `dateSerial(year, month, day)` constructs a → development/languages/VBA/language/datatypes/date[date] from the three integers `year`, `month` and `day`.

  See also → development/languages/VBA/functions/time-date/dateSerial-timeSerial[`timeSerial(hr, mi, ss)`].


}
{ environ #vba-environ

  `environ("ENVVAR")` returns the value of the → development/environment-variable[environment variable] `ENVVAR`.

}
{ fix #vba-fix

  `fix(num)` removes the fractional part of `num`.

  `fix(9.7)` returns `9`, `fix(-9.7)` returns `-9`, compare with → #fba-int[`int(num)`].

  See also → development/databases/Access/SQL/fix[`fix()` in Access SQL] to return the day of a → development/languages/VBA/language/datatypes/date[date].

}
{ format #vba-format

  The following example shows how `format` can be used to align a number on its decimal seperator:

  gh|about-VBA|/functions/format.bas||

  See also → development/languages/VBA/language/datatypes/date/format[Converting dates into strings].

}
{ freeFile #freeFile

 `freeFile` finds the next availabe number for → development/languages/VBA/language/statements/open[open]

  gh|about-VBA|/functions/freeFile.bas||

  See also the → development/languages/VBA/modules/Common/File#vba-file-class[VBA file class] that encapsulates this function.

}
{ hex

  `hex` converts a number into its hexadecimal representation.
  
   The following → https://github.com/ReneNyffenegger/about-VBA/blob/master/functions/hex.bas[snippet] prints `42 in hex is 2A`.
code {
msgBox "42 in hex is " & hex(42)
code }

  The opposite, converting a hexadecimal representation to a number can be achieved with → #vba-cLng[`cLng("&h2A")`].

}
{ int #vba-int

  `int(num)` removes the fractional part of `num`. It can be used instead of the non-existing function `floor`.

  `int(9.7)` returns `9`, `int(-9.7)` returns `-10`, compare with → #vba-fix[`fix(num)`]

}
{ inputBox

  → development/languages/VBA/functions/inputBox[`inputBox()`] lets the user enter a → development/languages/VBA/language/datatypes/string[string].

}
{ join #vba-join

  `join(arrayVariable, joinString)` creates a → development/languages/VBA/language/datatypes/string[string] from the values of the  elements in an → development/languages/VBA/language/arrays[array] by inserting
  `joinString` between the element values.
  -
  Thus, it behaves quite the same as Perl's → development/languages/Perl/functions/join[join] function.

  gh|about-VBA|/functions/join.bas||

  The opposite of `join` is → #vba-split.


}
{ mid #vba-mid

  → development/languages/VBA/functions/mid[`mid()`] is the equivalent of the function which is called → development/languages/Perl/functions/substr[`substr`] or similar in other → development/languages[programming languages].


}
{ now #vba-now

  `now` returns the current date and time as a → development/languages/VBA/language/datatypes/date[`date`].

  Compare with → #vba-date[`date`]

}
{ isEmpty #vba-isEmpty

  `isEmpty` can be used to determine if a → development/languages/VBA/language/datatypes/variant[variant] was initialized. On other
  → development/languages/VBA/language/datatypes[datatypes], this seems not possible (or probably more accurately, they are automatically initialized).
  -
  The following example displays that the variant variable is empty but the others are not.

  gh|about-VBA|/functions/isX/isEmpty.bas||

 `isEmpty` is used in → Microsoft/Office/Excel[Excel] to determine if a cell is empty and in
  → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary[`dictionaries`] (scripting runtime) to check if a
  → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary#vba-dictionary-isEmpty[key is present].

  See also → development/languages/VBA/language/null-and-nothing-etc[null and nothing etc.]

}
{ isError

  `isError` can for example be used in → Microsoft/Office/Excel[Excel] to check if a cell contains an error (which is displayed as `#N/A`).

}
{ lBound #vba-lbound

  `lBound` returns the index of the first element in an → development/languages/VBA/language/arrays[arrays]. (Note: that's spelled *ell-bound*, not *one-bound*).

  The function can also be applied on → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary#vba-dictionary-ulBound[dictionaries].

  See → #vba-ubound

}
{ len #vba-len

  Determine the number of characters in a string.

}
{ lenB

  → development/languages/VBA/functions/lenB[`lenB(var)`] returns the number of bytes a variable requires.

}
{ replace

  → development/languages/VBA/functions/replace[`replace()`] can be used to replace substrings in strings with another string.

}
{ rnd

  → development/languages/VBA/functions/rnd[`rnd(…)`] returns a random number.

}
{ rtrim

  `rtrim` removes trailing spaces on a string's right side:
  gh|about-VBA|/functions/rtrim.bas||

}
{ shell #vba-shell

  → development/languages/VBA/functions/shell[`shell`] can be used to start a program (application).

}
{ split #vba-split

 `split(string, delimiter)` creates an → development/languages/VBA/language/arrays[array] of strings from a → development/languages/VBA/language/datatypes/string[string].
  -
  Thus, it behaves quite the same as Perl's → development/languages/Perl/functions/split[`split`] function.

  gh|about-VBA|/functions/split.bas||

  The opposite of `split` is → #vba-join

}
{ strPtr

  See → development/languages/VBA/functions/xPtr[here].

}
{ switch

  → development/languages/VBA/functions/switch[see here].

}
{ timeSerial #vba-timeSerial

  `timeSerial(hr, mi, ss)` creates a time (of datatype → development/languages/VBA/language/datatypes/date[date]) whose hour is `hr`, minute is `mi` and second is `ss`.

  See also → development/languages/VBA/functions/time-date/dateSerial-timeSerial[`dateSerial(yr, mm, dy)`].

}
{ timer

  The function → development/languages/VBA/functions/timer[`timer`] returns a → development/languages/VBA/language/datatypes/single that contains the number of seconds (to two decimal places) since midnight.

}
{ typeName

  `typeName(var)` returns a string according to the → development/languages/VBA/language/datatypes[datatype] of `var`.
  -
  See → development/languages/VBA/functions/typeName[`typeName()`]

}
{ typeOf … is className

  The `typeOf var is classname` construct allows to check if a given variable is of a particular type.
  -
  See → development/languages/VBA/functions/typeOf-is[`typeOf … is`]


}
{ uBound #vba-ubound

  `uBound` returns the index of the last element in an → development/languages/VBA/language/arrays[arrays]

   gh|about-VBA|/functions/xBound.bas||

   See also → #vba-lbound
}
{ varPtr

  See → development/languages/VBA/functions/xPtr[here].
 
}
{ varType

  → development/languages/VBA/functions/varType[`varType`] returns a number that indicates the → development/languages/VBA/language/datatypes[datatype] of a variable.

}
{ Other functions

abs

→ development/languages/VBA/language/arrays[array]

→ development/languages/VBA/functions/asc-ascW[`asc` and `ascW`].

atn



command

→ development/languages/VBA/functions/conversion[Conversion functions]: `asc`, `cBool`, `cByte`, `cCur`,
→ development/languages/VBA/functions/conversion/cDate[`cDate`], `cDec`, `cDbl`, → development/languages/VBA/functions/chr#vba-chr[`chr`], `cInt`, `cLng`, `cLngLng`, `cLngPtr`, `cSng`, `cStr`, `cVar`, `cvErr`, `hex`, `oct`, `str`, `val`.

cos

→ development/languages/VBA/functions/createObject[`createObject`]: to create an *Active X Object*.

`curDir()` returns a → development/languages/VBA/language/datatypes/variant whose underlying type is a → development/languages/VBA/language/datatypes/string that stores the *current directory*. By default, this directory seems
to be → Windows/dirs/Users/username/Documents[`C:\Users\username\Documents`].

cVErr

dDB

derived Math

dir

doEvents

eOF

error

exp

fileAttr

fileDateTime

fileLen

filter

formatCurrency

formatNumber

formatPercent

fV

getAllSettings

getAttr

→ development/languages/VBA/functions/getObject[`getObject`]

getSetting

hex


iIf

iMEStatus

input

→ development/languages/VBA/functions/inStr[`inStr`] searches for (sub-)strings in strings.

inStrRev

int, Fix

iPmt

iRR

isArray

isMissing

isNull: Todo: see → development/languages/VBA/language/null-and-nothing-etc[null and nothing etc.]

isNumeric

isObject

lCase

left

len

loc

lOF

log

lTrim, RTrim, and Trim

macID

macScript

math

mid

mIRR

msgBox (TODO: → development/languages/VBA/runtime-lib/VBE7/redirect-msgBox[redirecting call to msgBox])

now

nPer

nPV

→ development/languages/VBA/functions/objPtr[`objPtr`]

oct

partition

pmt

pPmt

pV

qBColor

rate

→ development/languages/VBA/functions/RGB[`RGB(r, g, b)`] creates a → development/languages/VBA/language/datatypes/long value that represents a color.

right

rnd

round

seek

sgn

shell

sin

sLN

space

spc

sqr

str

→ development/languages/VBA/functions/strComp[strComp] compare → development/languages/VBA/language/datatypes/string[strings] case sensitively, or case insensitevely.

strConv

string

strReverse

sYD

tab

tan

type Conversion

uCase

val


}

sa:
  → development/languages/VBA
