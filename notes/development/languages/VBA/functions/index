$ VBA functions
@functions

{ array #vba-array
 
 `array()` creates an → development/languages/VBA/language/arrays[array] and returns it as a → development/languages/VBA/language/datatypes/variant[variant].

  gh|about-VBA|/functions/array.bas||

}
{ callByName #vba-callByName

  
 `callByName` operates on → development/languages/VBA/language/classes[classes/objects]. So, we need to first create a class:
  gh|about-VBA|/functions/callByName/tq84Obj.bas||

  Now, we can call methods/subs etc on the class with `callByName`:
  gh|about-VBA|/functions/callByName/callMethodByName.bas||

  In → Microsoft/Office/Excel[Excel] forms, the special keyword `me` can be used to refer to *itself*.k

  In order to dynamically call → development/languages/VBA/language/subs-and-functions[ordinary subs], use
  → Microsoft/Office/Excel/Object-Model/Application#excel-application-run[application.run] (if the function
  runs in → Microsoft/Office/Excel, → Microsoft/Office/Word etc.)

}
{ choose #vba-choose

  gh|about-VBA|/functions/choose.bas||

  Compare with the → development/languages/VBA/language/statements/select[`select`] statement and the
  → development/languages/VBA/functions/switch[`switch`] function.

}
{ cDec #vba-cDec

  Although VBA doesn't have a decimal → development/languages/VBA/language/datatypes[datatype], a string value (such as `"42.1234"`) can be converted to a decimal with `cDec`.

}
{ cLng #vba-cLng

  gh|about-VBA|/functions/cLng.bas||

}
{ date #vba-date

  `date` returns the current date. Compare with → #vba-now[`now`]

}
{ dateAdd

  `dateAdd` can be used to add *intervals* to a given point in time:

  gh|about-VBA|/functions/dateAdd.bas||

  See also → development/languages/VBA/functions/dateDiff[`dateDiff`].

}
{ dateSerial #vba-dateSerial

  `dateSerial(year, month, day)` constructs a → development/languages/VBA/language/datatypes/date[date] from the three integers `year`, `month` and `day`.

  See also → development/languages/VBA/functions/time-date/dateSerial-timeSerial[`timeSerial(hr, mi, ss)`].


}
{ environ #vba-environ

  `environ("ENVVAR")` returns the value of the → development/environment-variable[environment variable] `ENVVAR`.

}
{ fix #vba-fix

  `fix(num)` removes the fractional part of `num`.

  `fix(9.7)` returns `9`, `fix(-9.7)` returns `-9`, compare with → #fba-int[`int(num)`].

}
{ format #vba-format

  The following example shows how `format` can be used to align a number on its decimal seperator:

  gh|about-VBA|/functions/format.bas||

  See also → development/languages/VBA/language/datatypes/date/format[Converting dates into strings].

}
{ freeFile #freeFile

  `freeFile` finds the next availabe number for → development/languages/VBA/language/statements/open[open]

  gh|about-VBA|/functions/freeFile.bas||

}
{ hex

  `hex` converts a number into its hexadecimal representation.
  
   The following → https://github.com/ReneNyffenegger/about-VBA/blob/master/functions/hex.bas[snippet] prints `42 in hex is 2A`.
code {
msgBox "42 in hex is " & hex(42)
code }

  The opposite, converting a hexadecimal representation to a number can be achieved with → #vba-cLng[`cLng("&h2A")`].

}
{ int #vba-int

  `int(num)` removes the fractional part of `num`. It can be used instead of the non-existing function `floor`.

  `int(9.7)` returns `9`, `int(-9.7)` returns `-10`, compare with → #vba-fix[`fix(num)`]

}
{ join #vba-join

  `join(arrayVariable, joinString)` creates a → development/languages/VBA/language/datatypes/string[string] from the values of the  elements in an → development/languages/VBA/language/arrays[array] by inserting
  `joinString` between the element values.
  -
  Thus, it behaves quite the same as Perl's → development/languages/Perl/functions/join[join] function.

  gh|about-VBA|/functions/join.bas||

  The opposite of `join` is → #vba-split.


}
{ mid #vba-mid

  `mid` is the equivalent of the function which is called
  → development/languages/Perl/functions/substr[`substr`] or similar in other → development/languages[programming languages].

code {
dim result as string
result = mid("The foo bar", 5, 3) ' Assign "foo" to result
code }

}
{ now #vba-now

  `now` returns the current date and time as a → development/languages/VBA/language/datatypes/date[`date`].

  Compare with → #vba-date[`date`]

}
{ isEmpty #vba-isEmpty

  `isEmpty` can be used to determine if a → development/languages/VBA/language/datatypes/variant[variant] was initialized. On other
  → development/languages/VBA/language/datatypes[datatypes], this seems not possible (or probably more accuratly, they are automatically initialized).
  -
  The following example displays that the variant variable is empty but the others are not.

  gh|about-VBA|/functions/isEmpty.bas||

  `isEmpty` is used in → Microsoft/Office/Excel[Excel] to determine if a cell is empty and in
  → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary[`dictionaries`] (scripting runtime) to check if a
  → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary#vba-dictionary-isEmpty[key is present].

  See also → development/languages/VBA/language/null-and-nothing-etc[null and nothing etc.]

}
{ isError

  `isError` can for example be used in → Microsoft/Office/Excel[Excel] to check if a cell contains an error (which is displayed as `#N/A`).

}
{ lBound #vba-lbound

  `lBound` returns the index of the first element in an → development/languages/VBA/language/arrays[arrays]. (Note: that's spelled *ell-bound*, not *one-bound*).

  The function can also be applied on → development/languages/VBA/Useful-object-libraries/Microsoft-Scripting-Runtime/dictionary#vba-dictionary-ulBound[dictionaries].

  See → #vba-ubound

}
{ replace

  gh|about-VBA|/functions/replace.bas||

}
{ rtrim

  `rtrim` removes trailing spaces on a string's right side:
  gh|about-VBA|/functions/rtrim.bas||

}
{ shell #vba-shell

  `shell` can be used to start a program (application). The returned *task id* can be used
  in the → development/languages/VBA/language/statements/appActivate[`appActivate`] statement.

  gh|about-VBA|/functions/shell.bas||

}
{ split #vba-split

 `split(string, delimiter)` creates an → development/languages/VBA/language/arrays[array] of strings from a → development/languages/VBA/language/datatypes/string[string].
  -
  Thus, it behaves quite the same as Perl's → development/languages/Perl/functions/split[`split`] function.

  gh|about-VBA|/functions/split.bas||

  The opposite of `split` is → #vba-join

}
{ strPtr

  See → development/languages/VBA/functions/xPtr[here].

}
{ switch

  → development/languages/VBA/functions/switch[see here].

}
{ timeSerial #vba-timeSerial

  `timeSerial(hr, mi, ss)` creates a time (of datatype → development/languages/VBA/language/datatypes/date[date]) whose hour is `hr`, minute is `mi` and second is `ss`.

  See also → development/languages/VBA/functions/time-date/dateSerial-timeSerial[`dateSerial(yr, mm, dy)`].

}
{ timer

  The function → development/languages/VBA/functions/timer[`timer`] returns a → development/languages/VBA/language/datatypes/single that contains the number of seconds (to two decimal places) since midnight.

}
{ typeName

  `typeName(var)` returns a string according to the → development/languages/VBA/language/datatypes[datatype] of `var`.
  -
  See → development/languages/VBA/functions/typeName[`typeName()`]

}
{ typeOf … is className

  The `typeOf var is classname` construct allows to check if a given variable is of a particular type.
  -
  See → development/languages/VBA/functions/typeOf-is[`typeOf … is`]


}
{ uBound #vba-ubound

  `uBound` returns the index of the last element in an → development/languages/VBA/language/arrays[arrays]

   gh|about-VBA|/functions/xBound.bas||

   See also → #vba-lbound
}
{ varPtr

  See → development/languages/VBA/functions/xPtr[here].
 
}
{ varType #vba-varType

  `varType` returns a number that indicates the → development/languages/VBA/language/datatypes[datatype] of a variable.

   gh|about-VBA|/functions/varType.bas||

   VBA defines a few constants for these numbers, such as `vbInteger`, `vbLong`, `vbDate`, `vbEmpty`, `vbNull` etc.

   Compare with the → development/languages/VBA/functions/typeName[`typeName`] function.

}
{ Other functions

abs

→ development/languages/VBA/language/arrays[array]

asc

atn


chr

command

conversion functions: `asc`, `cBool`, `cByte`, `cCur`, `cDate`, `cDec`, `cDbl`, `chr`, `cInt`, `cLng`, `cLngLng`, `cLngPtr`, `cSng`, `cStr`, `cVar`, `cvErr`, `hex`, `oct`, `str`, `val`.

cos

→ development/languages/VBA/functions/createObject[`createObject`]: to create an *Active X Object*.

curDir

cVErr



dDB

derived Math

dir

doEvents

eOF

error

exp

fileAttr

fileDateTime

fileLen

filter

formatCurrency

formatNumber

formatPercent

fV

getAllSettings

getAttr

getObject

getSetting

hex


iIf

iMEStatus

input

inputBox

inStr

inStrRev

int, Fix

iPmt

iRR

isArray

isMissing

isNull: Todo: see → development/languages/VBA/language/null-and-nothing-etc[null and nothing etc.]

isNumeric

isObject

lCase

left

len

loc

lOF

log

lTrim, RTrim, and Trim

macID

macScript

math

mid

mIRR

msgBox (TODO: → development/languages/VBA/runtime-lib/VBE7/redirect-msgBox[redirecting call to msgBox])

now

nPer

nPV

oct

partition

pmt

pPmt

pV

qBColor

rate

rGB

right

rnd

round

seek

sgn

shell

sin

sLN

space

spc

sqr

str

strComp

strConv

string

strReverse

sYD

tab

tan

type Conversion

uCase

val


}

sa:
  → development/languages/VBA
