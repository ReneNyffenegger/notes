$ VBA Module CommonFunctionalityDB [Access]

This VBA tries to encapsulate functionalities that I more or less regurarly found necessary in → development/databases/Access[Access] projects.

`doesTableExist(tableName)` determines if a table exists.

`dropTableIfExists` drops a table if it exists and does nothing otherwise. Thus, it is a replacement for the lacking SQL statement `drop table … if exists`.

`executeQuery("select … from …")` creates (or replaces) a → Microsoft/Office/Access/Object-Model/QueryDef[`QueryDef`] (using `createOrReplaceQueryDef`) and then opens the
query. Thus, it makes it possible to quickly view the result of a dynamic SQL statement entered in the → Microsoft/Office/Visual-Basic-Editor/Immediate-Window[immediate window].
-
`executeQueryFromFile("c:\path\to\file.sql")` reads the given file (`slurpFile()` in → development/languages/VBA/modules/Common/File[`File.bas`]) and then
removes potention comments (`removeSQLComments()` in → development/languages/VBA/modules/Database/SQL[`SQL.bas`]) and then calls `executeQuery()`. Thus,
it's possible to quickly display the result of an SQL statement stored in a file.

`truncDate(dt)` returns the (rounded down) date (midnight) of `dt` (thus it behaves like Oracle's `trunc(date)`). Because `dt` is a → development/languages/VBA/language/datatypes/variant[variant]
that represents a → development/languages/VBA/language/datatypes/date[date], it can handle → development/databases/Access/SQL/null[`null`] values.
(Compare with → development/databases/Access/SQL/fix[`fix`] and → development/databases/Access/SQL/dateValue[`dateValue`]).

`closeAllQueryDefs` closes all open QueryDef's. This might be necessary if a view needs to be dropped programatically (for example using `executeSQL()`.

`showErrors` iterates over `→ Microsoft/Office/Access/Object-Model/DBEngine[dbEngine].errors` and prints them with `debug.print`.

gh|VBAModules|/Access/CommonFunctionalityDB.bas||

sa:

  → development/languages/VBA/modules/index
