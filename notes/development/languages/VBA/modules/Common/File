$ VBA Module File [Common]

{ File.bas #vba-file_bas

  `slurpFile` reads the entire content of a file and returns it as a → development/languages/VBA/language/datatypes/string[string].

  `slurpFileCharSet` is basically the same as `slurpFile`, however, it allows to specify a
   → development/Unicode/character-set[character set] when the file is slurped. This was necessary, because
   → development/languages/VBA[VBA] apparently is unable to handle → development/Unicode/UTF-8[UTF-8] out of the box.
   -
   In order to achieve the goal, the → development/databases/ADO/objects/stream/loadFromFile#adodb-stream-loadFrom-file-charCode[ADODB stream object's `loadFromFile`] method
   was needed (See also → development/languages/VBA/language/statements/open/character-encoding[VBA's `open` statement with char sets]).
   -
   Apparently, any value found in the → Windows/registry[registry] under → Windows/registry/tree/HKEY_CLASSES_ROOT/MIME/Database/Charset[`HKEY_CLASSES_ROOT\MIME\Database\Charset`] can be used for
   the value of the parameter `charSet`.

  `flushToFile` is the opposite of `slurpFile`: it writes a string to a file.

  `fileBaseName` turns a path (such as `p:\ath\to\foo.txt`) to the name of a file without suffix (in this case: `foo`).

  `fileSuffix` returns the suffix of the file only (for example: `txt`).

  `fileExists` checks if a given file exists.

  `tempPath` uses the → Windows/development/WinAPI function `GetTempPath` to return the folder into which temporary files can (should?) be written.


  gh|VBAModules|/Common/file/File.bas||

}
{ splitFile.bas #vba-split-file

  Split a file into chunks (for example to send large files with eMail):
  gh|VBAModules|/Common/file/splitFile.bas||

  See also → development/tools/scripts/personal/split-merge-file[spltting and merging] files with → development/languages/Perl[perl].

}

sa:

  → development/languages/VBA/modules/index
