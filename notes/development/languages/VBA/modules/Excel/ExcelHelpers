$ VBA Module ExcelHelpers [Excel]

*ExcelHelpers* is a → development/languages/VBA/language/module[Visual Basic for Application module] that provides some functions I encounter when automating Excel related tasks
with → development/languages/VBA[VBA].

ExcelHelpers depends on
  • → development/languages/VBA/modules/Common/Collection[Collection]

{ Functions

  table { ll
    → #vba-mod-exh-colLetterToNum[`colLetterToNum`], `colNumToLetter` ☰ converts between column letters and column numbers
    → #vba-mod-exh-createButton[`createButton`] ☰ Create a → Microsoft/Office/Excel/Object-Model/Button[button] that occupies a specifed → Microsoft/Office/Excel/Object-Model/Range[range].
    `deleteRange` ☰ If the specified  → Microsoft/Office/Excel/Object-Model/Range#excel-range-name[range name] exists: calls its → Microsoft/Office/Excel/Object-Model/Range/clearFormats[`.clearFormats`] and → Microsoft/Office/Excel/Object-Model/Range#excel-range-clearContents[`.clearContents`] methods and then deletes the → Microsoft/Office/Excel/Object-Model/Name[named range].
    → #vba-mod-exh-deleteWorksheet[`deleteWorksheet`] ☰
    → #vba-mod-exh-findWorksheet[`findWorksheet`] ☰
    → #vba-mod-exh-freezeHeader[`freezeHeader`] ☰
    → #vba-mod-exh-insertHyperlinkToVBAMacro[`insertHyperlinkToVBAMacro`] ☰ Inserts a → Microsoft/Office/Excel/functions/hyperlink[`=hyperlink(…)`] worksheet function that calls a → development/languages/VBA/language/subs-and-functions[user defined VBA function] when clicked.
    `isRibbonShown` ☰ Returns `true` or `false`, depending on the visibility of the → Microsoft/Office/GUI/Ribbon[Ribbon]
    `pageNumberOfCell(c)` ☰ returns the page number on which the given → Microsoft/Office/Excel/Object-Model/Range/cell (`c`) is located.
    → #vba-mod-exh-resetExcelSheet[`resetExcelSheet`] ☰ Resets a → Microsoft/Office/Excel/Object-Model/Worksheet to a pristine state.
    → #vba-mod-exch-showRibbon[`showRibbon`] ☰ Shows or hides the → Microsoft/Office/GUI/Ribbon[Ribbon]
    `unprotect(sh, pw)` ☰ tries to → Microsoft/Office/Excel/Object-Model/Worksheet/protect-unprotect[unprotect] worksheet `sh` with → development/security/password `pw`. Returns `true` if successful, `false` otherwise. Compare with menu → Microsoft/Office/Excel/GUI/Ribbon/tabs/Review/Protect/Protect-Sheet[Review -> Protect -> Protect Sheet]

  table }

  { findWorksheet #vba-mod-exh-findWorksheet

code {
findWorksheet(
   name as string, _
   optional deleteIfExists as boolean = false, _
   optional wb as workbook = nothing
)
code }

   `findWorksheet(…)` returns the → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet] that is identified by the given name.

    If no such worksheet exists, it is created.

    Optionally, the parameter `deleteIfExists` can be set to → development/languages/VBA/language/datatypes/boolean[`true`] to always return a newly created worksheet.

    The third parameter, `wb`, specifies the workbook in which the sheet is to be found. If using the default `nothing`, it searches for a worksheet with the given name in `thisWorkbook`.

  }
  { insertHyperlink #vba-mod-exh-insertHyperlinkToVBAMacro

code {
dim hyperlinkCell as range : set hyperlinkCell = …
insertHyperlinkToVBAMacro hyperlinkCell, "text", "VBA_function_name_to_be_called"
code }

    Using → development/languages/VBA/language/subs-and-functions/parameters[parameters] to be passed to the VBA function:
code {
insertHyperlinkToVBAMacro hyperlinkCell, "text", "VBA_function_name_to_be_called", "Param one", 2, 3…
code }

    Note: the function that is called must return a → Microsoft/Office/Excel/Object-Model/Range[`range`] which specifies the target → Microsoft/Office/Excel/Object-Model/Range/cell of the function.

    2021-07-26: it turns out that a function that is called via `insertHyperlinkToVBAMacro` has only limited capabilites when modifying a
    → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet's] content (at least when
    calling `→ Microsoft/Office/Excel/Object-Model/Worksheet/usedRange[usedRange].→ Microsoft/Office/Excel/Object-Model/Range#excel-range-clearContents[clearContents]`)

  }
  { deleteWorksheet #vba-mod-exh-deleteWorksheet

   `deleteWorksheet` deletes a → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].

    It turns out that deleting a worksheet is not a really straight forward operation in VBA.

  }
  { freezeHeader #vba-mod-exh-freezeHeader

   `freezeHeader n` freezes the first `n` rows, thus creating a horizontal header. The → development/languages/VBA/language/subs-and-functions/optional-parameters[parameter is optional] and defaults to 1.

    2021-07-26, V0.5: `freezeHeader` can now be called with two (optional) parameters of which the first indicates the number of rows indicates the number of rows and the second one
    the number of columns on the left side (which, of course, makes the name of the sub a bit missleading).

  }
  { colLetterToNum, colNumToLetter #vba-mod-exh-colLetterToNum

   `colLetterToNum` returns the column (as number) that corresponds to a column letter. (`colLetterToNum("D")` returns 4 etc.)

   `colNumToLetter` returns the letter that corresponds to a number (`colNumToLetter("AA")` returns 27).

  }
  { createButton #vba-mod-exh-createButton

   `createButton` creates a → Microsoft/Office/Excel/Object-Model/Button[button] that occupies a given → Microsoft/Office/Excel/Object-Model/Range[range] (parameter `rng`).

   The parameter `txt` specifies the button's caption, `nameSub` the name of the → development/languages/VBA/language/subs-and-functions[sub] to be invoked when the button is pressed.

code {
function createButton(   _
   rng     as range ,    _
   txt     as string,    _
   nameSub as string   )    as button 
code }

  }
  { resetExcelSheet #vba-mod-exh-resetExcelSheet

   `resetExcelSheet` resets a → Microsoft/Office/Excel/Object-Model/Worksheet to a pristine state.

    This function was (or at least seemed) necessary when working with a code module that belonged to a given worksheet and I didn't want to destroy the code module by deleting and re-creating a worksheet.

    A test case for this function is → development/languages/VBA/modules/_test/Office/xls-resetExcelSheet[here].

  }
  { showRibbon #vba-mod-exh-showRibbon

    `showRibbon true|false` shows or hides the → Microsoft/Office/GUI/Ribbon[Ribbon].

code {
showRibbon true
showRibbon false
code }

    A test case for this function is → development/languages/VBA/modules/_test/Office/xls-showRibbon[here].

  }
}

{ Source code

  gh|VBAModules|/Office/ExcelHelpers.vb||

}
{ History

  table { ll
    V0.3 ☰ Add hyperlink functionality
    V0.4 ☰ Function `deleteWorksheet`: set a sheet's visibility to `xlSheetVisible` before deleting the sheet.
    V0.5 ☰ `freezeHeader` now takes two optional parameters and adapts the changes of *BN*.
    V0.6 ☰ → #showRibbon[`showRibbon`]
    V0.7 ☰
    V0.8 ☰ `resetExcelSheet`: Set `activewindow.splitRow`, `.splitColumn` to `0`, `.split` and `.freezePanes` to `false`.
    V0.9 ☰ `resetExcelSheet`: call `sh.cells.→ Microsoft/Office/Excel/Object-Model/Range/clear_[clear]`, not `→ Microsoft/Office/Excel/Object-Model/Worksheet/usedRange[usedRange].clear`, because, apparently, drawn borders are not reflected `usedRange`.
    V0.10 ☰ Add `colNumToLetter`
  table }

}
sa:

  → development/languages/VBA/modules/Excel/_test

  → development/languages/VBA/modules/Office/ExcelRange[ExcelRange] has some specific functions to support the handling of
  support functions for → Microsoft/Office/Excel/Object-Model/Range[Excel's `Range` object].

  → Microsoft/Office/Excel/helpers[Excel Object Model (helpers)]

  → development/languages/VBA/modules
