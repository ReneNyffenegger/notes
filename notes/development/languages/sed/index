abbr: Stream Editor

code {
command

addr command
addr-start,addr-end command

addr! command
addr-start,addr-end! command
code }

{ Command line options

  `-n`

  `-i`: → development/languages/sed/in-place-editing[In place editing]: chage a file instead of writing to stdout:

}

{ Commands

`# comment` (No address allowed)

`=`: Print current line number with trailing new line.

`b` Start next cycle
-
`b label`: Jump to *label*.

`d`: delete → development/languages/sed/data-buffers#pattern-space

`D`

`e`: execute → development/languages/sed/data-buffers#pattern-space as → Linux/shell/commands/[command] and replace pattern-space with the command's output.
-
`e → Linux/shell/commands[command]`: fill → development/languages/sed/data-buffers#pattern-space with output of *command*.

`F` Print the current input file name.

`g`: Copy → development/languages/sed/data-buffers#hold-space into → development/languages/sed/data-buffers#pattern-space.

`G`: Add newline and → development/languages/sed/data-buffers#hold-space to → development/languages/sed/data-buffers#pattern-space.

`h`: Copy → development/languages/sed/data-buffers#pattern-space into → development/languages/sed/data-buffers#hold-space.

`H`: Add newline and → development/languages/sed/data-buffers#pattern-space to → development/languages/sed/data-buffers#hold-space.

`l`, `ln`: Print pattern space (line length: *n*). Non printable characters escaped in → development/languages/C-C-plus-plus/C[C style] fashion.

`L`
-
`L n`

`N`

`p`: print → development/languages/sed/data-buffers#pattern-space to stdout. Usually used with (`-n` command line option).

`P`: Print → development/languages/sed/data-buffers#pattern-space up to first new line.

`q exit-code`: Prints → development/languages/sed/data-buffers#pattern-space (unless `-n is used` and exits with *exit-code*. Requires exactly one address.
-
`Q`

`r filename`
-
`R`

`s/regexp/replacement/flags`: Substitute *regexp* with *replacement* in → development/languages/sed/data-buffers#pattern-space.

`t`
-
`t label`
-
`T label`

`v version` fail if sed's version lower than version (minimum: 4.0)

`w filename`: write → development/languages/sed/data-buffers#pattern-space to *filename*. When sed is started *filename* is created or truncated, then appended to.

`x`: Exchange content of → development/languages/sed/data-buffers#pattern-space and → development/languages/sed/data-buffers#hold-space.

`y/source-chars/dest-chars`: Replace characters in → development/languages/sed/data-buffers#pattern-space (n-th *source-char* becomes n-th *dest-char*). (Called «transliteration»?)

`z`: Empty → development/languages/sed/data-buffers#pattern-space. More efficient and robust than `s/.*//`.

`{ command-1 command-2 ... command-n }`: group multiple commands for an address or address range.


`: label`: Introduce a location to which can be jumped to with `b` and `t`.


}

{ Addresses

  { One address form

    Addresses select lines on which to apply a *command*.

    `n`: (n being a number) the n-th line.
    -
    If multiple files were given, the number accumulates accross the files, except the `-s` flag is given.

    `nfirst~nstep`: (nfirst and nstep being numbers): every nstep'th line, starting with nfirst.

    `$`: last line.

    `/regular-expression/`: each line that matches the given regular expression.

    `\Cregular-expressionC`: same as above, `C` being any character (that does not occur in *regular-expression*?)

  }

  { Two address form (address ranges)

     `addr-one,addr-two`

     Commands start to apply from the first address, up and until the second address matches.
     -
     If `addr-two` is a regular expression, it won't be checked on the line where `addr-one` matches.


  }
  { Negating addresses

code {
addr!command
code }

     An address or address range followed by a `!` is negated: it applies command on the «other» lines.

  }

}

sa:
  → development/languages/sed/examples

  → development/languages

  → Linux/shell/bash/variables/regular-expressions

links:

  → https://github.com/ReneNyffenegger/about-sed
