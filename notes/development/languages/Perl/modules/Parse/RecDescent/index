$ Perl module Parse::RecDescent



gh|PerlModules|/Parse/RecDescent/script.pl||
The script prints:
code {
Parsed operation: 1st ident: Foo + Bar
Parsed operation: 1st ident: x10 / y15
didn't match
Parsed operation: 1st ident: a - b

Universal token prefix pattern: >\s*<
code }

{ Rules and productions

Rules consist of alternatives of productions. In the grammar, they
are defined like so:
code {
rule : production_1 | production_2 |
  production_3 | production_4
code }

  Productions: zero or more of following items
    • subrule: name of another rule
    • token: pattern or string
    • action: block of Perl code
    • directive: instruction to the parser
    • comment

  A rule matches text if any (the first!) of its production matches.

  A production matches if its items within match in the order stated.

}

{ First production, not longest

Unlike *yacc* (breadth-first), the first production (depth-first) takes precedence over the longest.

This is the fundamental difference between *bottom up* and *recursive descent* parsing.

gh|PerlModules|/Parse/RecDescent/first-production_not-longest.pl||
code {
Parse with first grammar:
seq_1: A B C D
character: E
character: F
character: G

Parse with second grammar:
seq_1: A B C D E F
character: G
code }

}
{ @item and %item

  `$item[0]` and `$item{__RULE__}` is/are the name of the rule.

  `$item[n]` are the values of the nth subitem in the rule.

  gh|PerlModules|/Parse/RecDescent/item.pl||

}

{ Source code

  Apparently, the module is hosted on → https://github.com/jtbraun/Parse-RecDescent[github].

}

sa:

  Perl module `Marpa::R2`

  → development/languages/Perl/modules/index[Perl modules]
