$ Perl: Plain Old Documents (POD)

code {
→ development/languages/Perl/perldoc perlpod
code }

{ Setting encoding

code {
=encoding utf8
code }

}
{ Structuring documents with sections

Documents are structured with `=headN` (N = 1 … 4)

code {
=head1 Title

Some text. 

More text

    # code is indented by 4 spaces
    my $foo = 'bar';

=cut
code }

Note: the empty line after =headN seems important.

  { recommended order of sections

    The recommended order of sections (`=head1`) in a → development/languages/Perl/modules[Perl module] is:
      • NAME
      • SYNOPSIS
      • DESCRIPTION (of module)
      • Description of methods in module
      • BUGS/CAVEATS
      • AUTHOR
      • SEE ALSO
      • COPYRIGHT and LICENSE

  }

}
{ Items

code {
=over indent-level

=item * foo

Optional text for item foo

=item * bar

Optional text for item bar

=item * baz

=back
code}

The optional number `indent-level` specifies how far (in `M`s) the text should be indented. Can be ignored.

}
{ Formatting text

code {
I<italic>, B<bold>, C<code>, E<lt>, E<gt>, E<verbar>, E<sol>,
F<filename.txt> S<text with no breaking spaces>
code }

Formatting text that contains `<` or `>` is possible using double brackets: `<< … >>`:
code {
<< if (a < b) >>
code }
Note: the space after `<<` and before `>>` is ignored.

}
{ Hyperlinks

code {
L<http://www.example.xyz/foo/bar.html>
L<link text|http://www.example.xyz/foo.bar.html>
L<Module::Name>
L<Module::Name/section>
code }

}
{ Index entries

code {
X<index entry one>
X<another index entry>
code }

}
