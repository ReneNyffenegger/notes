$ three.js

A three.js application needs at least a *scene*, a *camera* and a *renderer*.

{ Mesh

  A mesh is an object that applies a *material* to a *geometry*.

  The mesh can then be inserted into a *scene* (for example `scene.add()`) and then be moved around

}
{ Object3D

 → https://threejs.org/docs/#api/en/core/Object3D[`Object3D`] is the base class for most objects in three.js.

  Every instance of an `Object3D` object has an associated *matrix* (→ #matrix4) which defines the object's transformations: position, rotation and scale.

  An object's matrix-transformation is relativ to the object's parent object. The transformation relative to the world can be obtained with `obj.matrixWorld`.

  A → https://threejs.org/docs/#api/en/objects/Bone[`Bone`] is almost identical to a blank `Object3D`.

}
{ Matrix4 #matrix4

}

sa:

  → development/web/libraries/D3_js
