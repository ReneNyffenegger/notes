$ three.js

A three.js application needs at least a *scene*, a *camera* and a *renderer*.

{ Geometry

  With r125, → https://discourse.threejs.org/t/three-geometry-will-be-removed-from-core-with-r125/22401[`THREE.Geometry` was removed] and
 `THREE.BufferGeometry` was suggested as replacement.

  { THREE.BufferGeometry

    An instance of a → https://threejs.org/docs/index.html?q=buffergeometry#api/en/core/BufferGeometry[`THREE.BufferGeometry`] represents a
      • mesh,
      • line or
      • point geometry

    Besides geometrical data like vertex coordinates, an instance also stores attributes such as
      • face indices
      • normals
      • colors
      • UVs
      • custom attributes (which are used to reduce the cost of passing this data to the GPU)

  }
}
{ Material

  A material describes an object's appearance.

}
{ Camera

  Abstract base class for cameras.

  The mostly used derived classes are `PerspectiveCamera` and `OrthographicCamera`.


}
{ Mesh

  A mesh is an object that applies a *material* to a *geometry*.

  A mesh inherits from `Object3D`.

  The mesh can then be inserted into a *scene* (for example `scene.add()`) and then be moved around

}
{ Scene

? A scence is (typically?) rendered by a renderer (WebGLRenderer or WebGPURenderer (or CanvasRenderer? or others?))

}
{ WebGLRenderer

  An instance of a `WebGLRenderer` renders a scene using a camera.

  See also the `WebGPURenderer` class.

}
{ Texture

  A texture can be created from
    • static images
    • HTML 5 canvas elements
    • … ?

  Creating a texture from a HTML 5 canvas element:
code {
const canvas = document.createElement('canvas'),
ctx = canvas.getContext('2d')
canvas.width  = …
canvas.height = …
  …
const texture  = new THREE.Texture(canvas)
const material = new THREE.MeshStandardMaterial({ map: texture })
const geometry = new THREE.BoxGeometry(200, 200, 200)
const mesh     = new THREE.Mesh(geometry, material)
scene.add(mesh)
  …
ctx.fillStyle = '#435acd'
ctx.fillRect(0, 0, canvas.width, canvas.height)
ctx.font = '15pt Arial'
…
code }

}
{ Object3D

 → https://threejs.org/docs/#api/en/core/Object3D[`Object3D`] is the base class for most objects in three.js.

  Every instance of an `Object3D` object has an associated *matrix* (→ #matrix4) which defines the object's transformations: position, rotation and scale.

  An object's matrix-transformation is relativ to the object's parent object. The transformation relative to the world can be obtained with `obj.matrixWorld`.

  A → https://threejs.org/docs/#api/en/objects/Bone[`Bone`] is almost identical to a blank `Object3D`.

}
{ Controls

  Abstract base class for control objects.

  Control objects control an Object3D, usually a camera.

}
{ Matrix4 #matrix4

}

sa:

  → development/web/libraries/D3_js
