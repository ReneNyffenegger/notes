$ SQLite: pragmas
@ pragmas

`pragma` is an → development/databases/SQLite[SQLite] statement that is specific to the SQLite SQL dialect, that is, it is not
→ misc/ISO/9075[standard SQL], but rather an extension of SQLite.

The `pragma` statement has two primary purposes:
   • Modify how some particularities work, or
   • Querying the → development/databases/SQLite/internals[internal] data.


{ Select interface for pragmas #pragma-select-interface

  Pragmas that are used to query internal data return the data as a table. These pragma have corresponding interface that allows to query them with a
  → development/databases/SQLite/sql/select[`select`] statement.

  The name of these interfaces is the pragma name prefixed with `pragma_`.

  For example, the following two statements are roughly equivalent:
code {
pragma → development/databases/SQLite/sql/pragma/table_info[table_info]('tab_foo');
select * from pragma_table_info('tab_foo');
code }

}
{ Misc pragmas

  → development/databases/SQLite/sql/pragma/foreign_keys[`foreign_keys`] controls if → development/databases/SQLite/tables/constraints/foreign-key[foreign keys] are enforced.

  → development/databases/SQLite/sql/pragma/table_info[`table_info('tab_name')`] displays column information of the → development/databases/SQLite/tables[table] named `tab_name`.


{ cache_size

  This pragma controls the memory usage of → development/databases/SQLite.

 `pragma cache_size = 1000000` allocates 1 MB for the DB cache.

}
{ case_sensitive_like

 `case_sensitive_like`  controls whether or not a → development/databases/SQLite/sql/expressions/like[`like`] expression compares two strings case sensitively or case insensitively:
  see → development/databases/SQLite/sql/expressions/collate#sqlite-collate-case-sensitive[collate and case sensitiveness].

}
{ compile_options #pragma-compile-options

 `pragma compile_options` shows the values of the compile options used when → development/databases/SQLite[SQLite] was compiled.

}
{ foreign_key_check

  gh|about-sqlite|/pragma/foreign_key_check.sql||

}
{ journal_mode #pragma-journal-mode

  The *journal mode* can be set to `WAL` (Write-Ahead Log). In most cases, WAL provides more concurrency as readers to not block writers
  and a writer does not block readers.

  More details can be found → https://www.sqlite.org/wal.html[here].

  See also → development/languages/Perl/modules/DBD/SQLite/write-while-reading[Perl - DBD::SQLite: write while reading].

}
{ schema_version

  gh|about-sqlite|/pragma/schema_version.sql||

}
{ synchronous

 `pragma synchronous = OFF` prevents → development/databases/SQLite from doing `fsync`'s when writing.

  This helps improve the → development/databases/SQLite/Performance[performance], however, the database is not transactionally safe anymore.

}
}
