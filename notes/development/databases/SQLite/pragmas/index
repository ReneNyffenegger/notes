$ SQLite: pragmas
@ pragmas

`pragma` is an → development/databases/SQLite[SQLite] statement that is specific to the SQLite SQL dialect, that is, it is not
→ misc/ISO/9075[standard SQL], but rather an extension of SQLite.

The `pragma` statement has two primary purposes:
   • Modify how some particularities work, or
   • Querying the → development/databases/SQLite/internals[internal] data.


{ Select interface for pragmas #pragma-select-interface

  Pragmas that are used to query internal data return the data as a table. These pragma have corresponding interface that allows to query them with a
  → development/databases/SQLite/sql/select[`select`] statement.

  The name of these interfaces is the pragma name prefixed with `pragma_`.

  For example, the following two statements are roughly equivalent:
code {
pragma → development/databases/SQLite/sql/pragma/table_info[table_info]('tab_foo');
select * from pragma_table_info('tab_foo');
code }

}
{ Misc pragmas

  → development/databases/SQLite/sql/pragma/foreign_keys[`foreign_keys`] controls if → development/databases/SQLite/tables/constraints/foreign-key[foreign keys] are enforced.

  → development/databases/SQLite/sql/pragma/table_info[`table_info('tab_name')`] displays column information of the → development/databases/SQLite/tables[table] named `tab_name`.


{ cache_size

  This pragma controls the memory usage of → development/databases/SQLite.

 `pragma cache_size = 1000000` allocates 1 MB for the DB cache.

}
{ case_sensitive_like

 `case_sensitive_like`  controls whether or not a → development/databases/SQLite/sql/expressions/like[`like`] expression compares two strings case sensitively or case insensitively:
  see → development/databases/SQLite/sql/expressions/collate#sqlite-collate-case-sensitive[collate and case sensitiveness].

}
{ compile_options

 `pragma → development/databases/SQLite/sql/pragma/compile_options[compile_options]` shows the values of the
  → development/databases/SQLite/compile/options[compile time options] used when → development/databases/SQLite[SQLite] was compiled.

}
{ foreign_key_check

  gh|about-sqlite|/pragma/foreign_key_check.sql||

}
{ index_list

 The sqlite shell command `.schema` does not explicitely display the indexes created for unique columns. These indexes can be shown however with `index_list`.

code {
create table t1 (id integer primary key, txt text not null       , val double);
create table t2 (id integer primary key, txt text not null unique, val double);
code }

  The following statement returns an empty set:
code {
pragma index_list('t1');
code }

  For `t2`, the index for the unique index *is* shown:
code {
pragma index_list('t2');
--
-- 0|sqlite_autoindex_t2_1|1|u|0
code }

  See also the `index_info` pragma, which shows the columns of an index:
code {
pragma index_info('sqlite_autoindex_t2_1');
--
-- 0|1|txt
code }

}
{ journal_mode #pragma-journal-mode

 `→ development/databases/SQLite/sql/pragma/journal_mode` can be set to `WAL` (Write-Ahead Log). In most cases, WAL provides more concurrency as readers to not block writers
  and a writer does not block readers.

  More details can be found → https://www.sqlite.org/wal.html[here].

  See also → development/languages/Perl/modules/DBD/SQLite/write-while-reading[Perl - DBD::SQLite: write while reading].

}
{ page_size, page_count #sqlite-pragma-page_

 `pragma page_size` returns the size of a page in bytes (for example 4096) and `page_count` the number of pages in the database.

  Thus, `page_size` multiplied by `page_count` is the total size of the database in bytes.

  Compare with `select pageno, pgoffset, pgsize from → development/databases/SQLite/internals/schema-objects/dbstat`.

}
{ schema_version

  gh|about-sqlite|/pragma/schema_version.sql||

}
{ synchronous

 `pragma synchronous = OFF` prevents → development/databases/SQLite from doing `fsync`'s when writing.

  This helps improve the → development/databases/SQLite/Performance[performance], however, the database is not transactionally safe anymore.

  TODO: → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1414-L1432[These comments and defines] in the source code:
code {
** Note that (for historical reasons) the PAGER_SYNCHRONOUS_* macros differ
** from the SQLITE_DEFAULT_SYNCHRONOUS value by 1.
**
**           PAGER_SYNCHRONOUS       DEFAULT_SYNCHRONOUS
**   OFF           1                         0
**   NORMAL        2                         1
**   FULL          3                         2
**   EXTRA         4                         3
**
** The "PRAGMA synchronous" statement also uses the zero-based numbers.
** In other words, the zero-based numbers are used for all external interfaces
** and the one-based values are used internally.
*/
#ifndef SQLITE_DEFAULT_SYNCHRONOUS
# define SQLITE_DEFAULT_SYNCHRONOUS 2
#endif
#ifndef SQLITE_DEFAULT_WAL_SYNCHRONOUS
# define SQLITE_DEFAULT_WAL_SYNCHRONOUS SQLITE_DEFAULT_SYNCHRONOUS
#endif
code }

}
}
