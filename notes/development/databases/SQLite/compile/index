$ Compile SQLite

{ 2024-06-17 / Linux / Version 3.43.0 

  These are some notes about compiling SQLite 3.43.0 on Linux, taken 2024-06-17.

  Clone the → https://github.com/sqlite/sqlite[official Git mirror] of the SQLite 
code {
cd ~
git clone https://github.com/sqlite/sqlite
cd sqlite
./configure
code }  

  Calling `.configure` created the following files:
code {
$ find . -type f -cmin -1
./libtool
./config.status
./Makefile
./config.log
./sqlite_cfg.h
./sqlite3.pc
code }

  { sqlite_cfg.h

    `sqlite_cfg.h` (which was produced by calling `./configure` from → https://github.com/sqlite/sqlite/blob/master/sqlite_cfg.h.in[`sqlite_cfg.h.in`]) contains various `HAVE_` (such as `HAVE_INT64_T` etc.) and other macros (such as `#define PACKAGE_VERSION "3.47.0"`)

    `sqlite_cfg.h` is included from → https://github.com/sqlite/sqlite/blob/master/src/sqliteInt.h[`src/sqliteInt.h`] which in turn is included from most (or all C source files).

  }
  { src/sqliteInt.h

    … 

  }
  { sqlite3.h

   `sqlite3.h` is the public «SQLIte interface» and included from → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L199[`src/sqliteInt.h`].

  }
  { Some functions

    table { ll
      `sqlite3_open_v2` ☰ Note, If flags contains `SQLITE3_CREATE` it also *must* contain `SQLITE_OPEN_READWRITE`, otherwise `SQLITE_MISUSE` is returned.
      `sqlite3_initialize` ☰ Allocation of memory, VFS and the mutex subsystem. Must be called explicitely prior to doing any serious work unless SQLITE_OMIT_AUTOINIT` is defined.
    table }

  }
  { struct sqlite3

    → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1663[Each database connection is an instance] of `struct sqlite3`.

    table { lll

  `sqlite3_vfs *pVfs` ☰  OS Interface ☰
  `struct Vdbe *pVdbe` ☰  List of active virtual machines ☰
  `CollSeq *pDfltColl` ☰  BINARY collseq for the database encoding ☰
  `sqlite3_mutex *mutex` ☰  Connection mutex ☰
  `Db *aDb` ☰  All backends (database files). `aDB[0]` → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1437C32-L1437C64[is the main database file] and `aDB[1]` → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1438C4-L1438C61[is the database file used to hold temporary tables]. Additional databases may be attached. Unlike most scheme objects, `aDb[1]` → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1452C54-L1453C75[is not associated witha B-Tree] ☰ 
  `int nDb` ☰  Number of backends currently in use ☰
  `u32 mDbFlags` ☰  flags recording internal state ☰
  `u64 flags` ☰  flags settable by pragmas. See below ☰
  `i64 lastRowid` ☰  ROWID of most recent insert (see above) ☰
  `i64 szMmap` ☰  Default mmap_size setting ☰
  `u32 nSchemaLock` ☰  Do not reset the schema when non-zero ☰
  `unsigned int openFlags` ☰  Flags passed to sqlite3_vfs.xOpen() ☰
  `int errCode` ☰  Most recent error code (SQLITE_*) ☰
  `int errByteOffset` ☰  Byte offset of error in SQL statement ☰
  `int errMask` ☰  & result codes with this before returning ☰
  `int iSysErrno` ☰  Errno value from last system error ☰
  `u32 dbOptFlags` ☰  Flags to enable/disable optimizations ☰
  `u8 enc` ☰  Text encoding ☰
  `u8 autoCommit` ☰  The auto-commit flag. ☰
  `u8 temp_store` ☰  1: file 2: memory 0: default ☰
  `u8 mallocFailed` ☰  True if we have seen a malloc failure ☰
  `u8 bBenignMalloc` ☰  Do not require OOMs if true ☰
  `u8 dfltLockMode` ☰  Default locking-mode for attached dbs ☰
  `signed char nextAutovac` ☰  Autovac setting after VACUUM if >=0 ☰
  `u8 suppressErr` ☰  Do not issue error messages if true ☰
  `u8 vtabOnConflict` ☰  Value to return for s3_vtab_on_conflict() ☰
  `u8 isTransactionSavepoint` ☰  True if the outermost savepoint is a TS ☰
  `u8 mTrace` ☰  zero or more SQLITE_TRACE flags ☰
  `u8 noSharedCache` ☰ True if no shared-cache backends ☰
  `u8 nSqlExec` ☰ Number of pending OP_SqlExec opcodes ☰
  `u8 eOpenState` ☰ Current condition of the connection ☰
  `int nextPagesize` ☰  Pagesize after VACUUM if >0 ☰
  `i64 nChange` ☰  Value returned by sqlite3_changes() ☰
  `i64 nTotalChange` ☰  Value returned by sqlite3_total_changes() ☰
  `int aLimit[SQLITE_N_LIMIT]` ☰ Limits ☰
  `int nMaxSorterMmap` ☰  Maximum size of regions mapped by sorter ☰

  `struct sqlite3InitInfo init` ☰  Information used during initialization ☰

  `int nVdbeActive` ☰  Number of VDBEs currently running ☰
  `int nVdbeRead` ☰  Number of active VDBEs that read or write ☰
  `int nVdbeWrite` ☰  Number of active VDBEs that read and write ☰
  `int nVdbeExec` ☰  Number of nested calls to VdbeExec() ☰
  `int nVDestroy` ☰  Number of active OP_VDestroy operations ☰
  `int nExtension` ☰  Number of loaded extensions ☰
  `void **aExtension` ☰  Array of shared library handles ☰

  `trace` ☰ A union with`void (*xLegacy)(void*,const char*)` and `int (*xV2)(u32,void*,void*,void*)`  ☰ 

  `void *pTraceArg` ☰  Argument to the trace function ☰

  `void (*xProfile)(void*,const char*,u64)` ☰  Profiling function ☰ Not `SQLITE_OMIT_DEPRECATED`
  `void *pProfileArg` ☰  Argument to profile function ☰ Not `SQLITE_OMIT_DEPRECATED`

  `void *pCommitArg` ☰  Argument to xCommitCallback() ☰
  `int (*xCommitCallback)(void*)` ☰  Invoked at every commit. ☰
  `void *pRollbackArg` ☰  Argument to xRollbackCallback() ☰
  `void (*xRollbackCallback)(void*)` ☰  Invoked at every commit. ☰
  `void *pUpdateArg` ☰ ☰
  `void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64)` ☰ ☰
  `void *pAutovacPagesArg` ☰  Client argument to autovac_pages ☰
  `void (*xAutovacDestr)(void*)` ☰  Destructor for pAutovacPAgesArg ☰
  `unsigned int (*xAutovacPages)(void*,const char*,u32,u32,u32)` ☰ ☰
  `Parse *pParse` ☰  Current parse ☰

  `void *pPreUpdateArg` ☰  First argument to `xPreUpdateCallback` ☰ `SQLITE_ENABLE_PREUPDATE_HOOK`
  `void (*xPreUpdateCallback)(void*,sqlite3*,int,char const*,char const*,sqlite3_int64,sqlite3_int64)` ☰  Registered using `sqlite3_preupdate_hook()` ☰ `SQLITE_ENABLE_PREUPDATE_HOOK`
  `PreUpdate *pPreUpdate` ☰  Context for active pre-update callback ☰ `SQLITE_ENABLE_PREUPDATE_HOOK`

  `int (*xWalCallback)(void *, sqlite3 *, const char *, int)` ☰ ☰ Not `SQLITE_OMIT_WAL`
  `void *pWalArg` ☰ ☰ Not `SQLITE_OMIT_WAL`

  `void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*)` ☰ ☰
  `void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*)` ☰ ☰
  `void *pCollNeededArg` ☰ ☰

  `sqlite3_value *pErr` ☰  Most recent error message ☰

   `u1` ☰ A `union` with `volatile int isInterrupted` (true if `sqlite3_interrupt` has been called) and `double notUsed1 ☰

  `Lookaside lookaside` ☰ Lookaside malloc configuration ☰

  `sqlite3_xauth xAuth` ☰ Access authorization function ☰ Not `SQLITE_OMIT_AUTHORIZATION`
  `void *pAuthArg` ☰ 1st argument to the access auth function ☰ Not `SQLITE_OMIT_AUTHORIZATION`

  `int (*xProgress)(void *)` ☰  The progress callback ☰ not `SQLITE_OMIT_PROGRESS_CALLBACK`
  `void *pProgressArg` ☰  Argument to the progress callback ☰ not `SQLITE_OMIT_PROGRESS_CALLBACK`
  `unsigned nProgressOps` ☰  Number of opcodes for progress callback ☰ not `SQLITE_OMIT_PROGRESS_CALLBACK`

  `int nVTrans` ☰  Allocated size of aVTrans ☰ not `SQLITE_OMIT_VIRTUALTABLE`
  `Hash aModule` ☰  populated by sqlite3_create_module() ☰ not `SQLITE_OMIT_VIRTUALTABLE`
  `VtabCtx *pVtabCtx` ☰  Context for active vtab connect/create ☰ not `SQLITE_OMIT_VIRTUALTABLE`
  `VTable **aVTrans` ☰  Virtual tables with open transactions ☰ not `SQLITE_OMIT_VIRTUALTABLE`
  `VTable *pDisconnect` ☰  Disconnect these in next sqlite3_prepare() ☰ not `SQLITE_OMIT_VIRTUALTABLE`

  `Hash aFunc` ☰ Hash table of connection functions ☰
  `Hash aCollSeq` ☰ All collating sequences ☰
  `BusyHandler busyHandler` ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1175-L1187[The busy callback] for the database handle. Each pager opened via the `sqlite**` handle is passed a pointer to `sqlite.busyHandler`. The busy-handler callback is currently invoked only from within `pager.c` ☰ 
  `Db aDbStatic[2]` ☰ Static space for the 2 default backends ☰
  `Savepoint *pSavepoint` ☰ List of active savepoints ☰
  `int nAnalysisLimit` ☰ Number of index rows to ANALYZE ☰
  `int busyTimeout` ☰ Busy handler timeout, in msec ☰
  `int nSavepoint` ☰ Number of non-transaction savepoints ☰
  `int nStatement` ☰ Number of nested statement-transactions ☰
  `i64 nDeferredCons` ☰  Net deferred constraints this transaction. ☰
  `i64 nDeferredImmCons` ☰ Net deferred immediate constraints ☰
  `int *pnBytesFreed` ☰  If not NULL, increment this in DbFree() ☰
  `DbClientData *pDbData` ☰ `sqlite3_set_clientdata()` content ☰

rem {
   The following variables are all protected by the STATIC_MAIN
   mutex, not by sqlite3.mutex. They are used by code in notify.c.

   When X.pUnlockConnection==Y, that means that X is waiting for Y to
   unlock so that it can proceed

   When X.pBlockingConnection==Y, that means that something that X tried
   tried to do recently failed with an SQLITE_LOCKED error due to locks
   held by Y.
rem }
  `sqlite3 *pBlockingConnection` ☰ Connection that caused `SQLITE_LOCKED` ☰ `SQLITE_ENABLE_UNLOCK_NOTIFY`
  `sqlite3 *pUnlockConnection` ☰  Connection to watch for unlock ☰ `SQLITE_ENABLE_UNLOCK_NOTIFY`
  `void *pUnlockArg` ☰  Argument to xUnlockNotify ☰ `SQLITE_ENABLE_UNLOCK_NOTIFY`
  `void (*xUnlockNotify)(void **, int)` ☰  Unlock notify callback ☰ `SQLITE_ENABLE_UNLOCK_NOTIFY`
  `sqlite3 *pNextBlocked` ☰  Next in list of all blocked connections ☰ `SQLITE_ENABLE_UNLOCK_NOTIFY`

  `sqlite3_userauth auth` ☰ User authentication information. ☰ `SQLITE_USER_AUTHENTICATION`

    table }

  }
  { SQLITE_… macros

    Some (imho) interesting SQLITE_ macros include:
    table { ll
      `PREFERRED_SCHEMA_TABLE` ☰ With the value → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1209[`"sqlite_schema"`]
      `PREFERRED_TEMP_SCHEMA_TABLE` ☰ With the value → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1210[`"sqlite_temp_schema"`]

      `SQLITE_CUSTOM_INCLUDE` ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L184-L193[Optionally include a user-defined header] to define compilation options before they take effect. (This custom include file would be included in `src/sqliteInt.h` if specified).
      `SQLITE_DEBUG` ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L437-L438[Is the opposite of `NDEBUG`]. It should always be true that `defined(NDEBUG)==!defined(SQLITE_DEBUG)`. `SQLITE_DEBUG` implies → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L455-L459[`SQLITE_ENABLE_EXPLAIN_COMMENTS`]
      `SQLITE_DEFAULT_FILE_FORMAT` ☰ See also `SQLITE_MAX_FILE_FORMAT`
      `SQLITE_DEFAULT_PCACHE_INITSZ` ☰ The default initial allocation for the pagecache when using separate pagecaches for each database connection. A positive number is the number of pages. A negative number `N` translations means that a buffer of `-1024*N` bytes is allocated and used for as many pages as it will hold.
      `SQLITE_DEFAULT_RECURSIVE_TRIGGERS` ☰ Value can be changed at runtime with a `pragma`.
      `SQLITE_DEFAULT_SORTERREF_SIZE` ☰
      `SQLITE_DEFAULT_WORKER_THREADS` ☰ See also `SQLITE_MAX_WORKER_THREADS`
      `SQLITE_ENABLE_BATCH_ATOMIC_WRITE` ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L755[Cannot be used together] with `SQLITE_MMAP_READWRITE`.
      `SQLITE_ENABLE_EXPLAIN_COMMENTS` ☰ Incompatible with → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L599[`SQLITE_OMIT_EXPLAIN`]; enabled if → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L455-L459[`SQLITE_DEBUG`] is defined.
      `SQLITE_ENABLE_SQLLOG` ☰
      `SQLITE_FORCE_OS_TRACE` ☰
      `SQLITE_MAX_FILE_FORMAT` ☰ The file format number is an integer that is incremented whenever the VDBE-level file format changes. See also `SQLITE_DEFAULT_FILE_FORMAT`
      `SQLITE_MAX_WORKER_THREADS` ☰ See also `SQLITE_DEFAULT_WORKER_THREADS`
      `SQLITE_MMAP_READWRITE` ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L755[Cannot be used together] with `SQLITE_ENABLE_BATCH_ATOMIC_WRITE`.
      `SQLITE_MUTEX_STATIC_TEMPDIR` ☰ defined to the value of → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L204[`SQLITE_MUTEX_STATIC_VFS1`]
      `SQLITE_NEED_ERR_NAME` ☰ Needed for `sqlite3ErrName()`
      `SQLITE_OMIT_AUTHORIZATION` ☰ Compare with `SQLITE_USER_AUTHENTICATION`
      `SQLITE_OMIT_AUTOINIT` ☰ Omit automatic alls to `sqlite3_initialize()` (for example from from `sqlite3_open()`). This option might become the default behavior in a future release.
      `SQLITE_OMIT_EXPLAIN` ☰ Incompatible with → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L599[`SQLITE_ENABLE_EXPLAIN_COMMENTS`]
      `SQLITE_OMIT_FLOATING_POINT` ☰
      `SQLITE_OMIT_TEMPDB` ☰
      `SQLITE_OMIT_VIRTUALTABLE` ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L606[Implies] `SQLITE_OMIT_ALTERTABLE`
      `SQLITE_OMIT_WAL` ☰
      `SQLITE_TEMP_STORE` ☰ If set to `3`, temporary files are never used.
      `SQLITE_THREADSAFE` ☰
      `SQLITE_USER_AUTHENTICATION` ☰ Compare with `SQLITE_OMIT_AUTHORIZATION`

    table }

  }
  { Typedefs

    table { ll
      `sqlite_int64`, `sqlite_uint64`, → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L836C22-L836C25[`i64`], → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L837C23-L837C26[`u64`] etc. ☰
      `tRowcnt` ☰ The datatype used to → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L856[store estimates of the number of rows in a table or index].
      → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1383-L1389[`VList`] ☰ Records a mapping between parameters/variables/wildcards in the SQL statement (such as `$abc`, `@pqr` or `:xyz`) and the integer variable number associated with that parameter. See the format description on the `sqlite3VListAdd()`  routine for more information. ? A VList is really just an array of integers ?
    table }

  }

  { Other observations

    → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1293-L1352[Some structs]:
    table { ll
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2869-L2905[`AggInfo`] ☰
   `AuthContext` ☰
   `AutoincInfo` ☰
   `Bitvec` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L525-L551[`BtCursor`] ☰ A → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L500C16-L501C33[pointer to a particular entry within a particular B-Tree] within a database file. Declared in `src/btreeInt.h`
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L345-L363[`Btree`] ☰ A `Btree` instance is used for → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L326C4-L327C57[every open database file an SQLite has opened]. When the database file is shared, there are multiple `Btree` objects bunt only one `BtShared` object. Unclear to me is if `Btree` is used in other scenarios as well. Defined in `src/btreeInt.h`.
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L425-L460[`BtShared`] ☰ An instance of this object represents → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L391C4-L391C64[a single database file]. If the database file is shared bu multiple connections, → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L394C35-L397C32[there is only one `BtShared` object but multiple `Btree` objects].
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L480-L486[`CellInfo`] ☰ Information about a cell, filled by `parseCellPtr()`. See also the structs `Table` and `Column`
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2296-L2302[`CollSeq`] ☰ A *collating sequence*, basically a → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2289C15-L2290C65[name and comparison function] which defines the sequence's order.
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2239-L2248[`Column`] ☰ A column's name, datatype and collating sequence. See also the structs `Table` and `CellInfo`.
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4385-L4392[`Cte`] ☰ A *common table expression*. See also the `With` struct
   `CteUse` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1435-L1447[`Db`] ☰ The «backend»? used to access database files. See the `aDb` array in the `sqlite3` struct.
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4436-L4441[`DbClientData`] ☰ Client data associated with `sqlite3_set_clientdata()` and `sqlite3_get_clientdata()`.
   `DbFixer` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1466-L1478[`Schema`] ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2997-L3058[`Expr`] ☰
   `ExprList` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2575-L2590[`FKey`] ☰ An object corresponds to a *foreign key*.
   `FpDecode` ☰
   `FuncDestructor` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1962-L1976[`FuncDef`] ☰ Objects correspond to *SQL functions*. See also the `FuncDestructor` object.
   `FuncDefHash` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1992-L1996[`FuncDestructor`] ☰
   `IdList` ☰
   `Index` ☰
   `IndexedExpr` ☰
   `IndexSample` ☰
   `KeyClass` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2646-L2654[`KeyInfo`] ☰ An instance of this object is passed as the first argument to `sqlite3VdbeKeyCompare`. It controls the comparison of two index keys.
   `Lookaside` ☰
   `LookasideSlot` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L273-L304[`MemPage`] ☰ Each instance of this struct corresponds to a database page that is loaded into memory. Access to its data is → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L270-L271[secured by the mutex] `MemPage.pBt->mutex`. This struct declared in `btreeInt.h`.
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2205-L2212[`Module`] ☰ Module == virtual table definition?
   `NameContext` ☰
   `OnOrUsing` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3813-L3928[`Parse`] ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3798C4-L3798C26[An SQL parser context].
   `ParseCleanup` ☰
   `PreUpdate` ☰
   `PrintfArguments` ☰
   `RCStr` ☰
   `RenameToken` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4113-L4122[`Returning`] ☰ Information about the `RETURNING` clause.
   `RowSet` ☰
   `Savepoint` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3527-L3548[`Select`] ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3511C52-L3512C57[All information needed to generate code for a single `SELECT` statement]
   `SQLiteThread` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4209-L4282[`Sqlite3Config`] ☰ → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4205C25-L4205C73[Global configurations] for the SQLite library.
   `SelectDest` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3289-L3332[`SrcItem`] ☰ Representation of → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3269C34-L3269C77[a single term in the `FROM` clause of a query].
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3350-L3354[`SrcList`] ☰ One or more tables that are the source of content for an SQL statement
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4128-L4136[`sqlite3_str`] ☰ `StrAccum` is an → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L1337C41-L1337C71[internal alias for `sqlite3_str`].
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2418-L2456[`Table`] ☰ Each schema for each SQL table, virtual table or view is represented in memory by an instance of this struct.
   `TableLock` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2851-L2854[`Token`] ☰ A token as produces by the lexer.
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4448-L4452[`TreeView`] ☰ printing the content of data structures on `sqlite3DebugPrintf()` using a tree-like view.Only available when `SQLITE_DEBUG` is enabled.
   `Trigger` ☰
   `TriggerPrg` ☰
   `TriggerStep` ☰
   `UnpackedRecord` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3487-L3508[`Upsert`] ☰ Description of → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L3474C50-L3475C22[a single `ON CONFLICT` clause in an upsert].
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L2396-L2406[`VTable`] ☰ An object corresponds to a *virtual table*.
   `VtabCtx` ☰
   `Walker` ☰
   `WhereInfo` ☰
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4477-L4507]`Window`] ☰ Used in various ways, mostly for → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4455C18-L4456C13[window functions].
   → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/sqliteInt.h#L4405-L4410[`With`] ☰ See also the `Cte` struct.
   table }

  }

  { Database files

    → https://github.com/sqlite/sqlite/blob/c7cbcfbbbd522c972527b92b9dfee63c82a97fbc/src/btreeInt.h#L506C4-L507C32[Database files can be shared] by multiple database connectsion, unlike cursors.

  }


}
{ Older notes of unknown date, tyring to compile SQLIte on Windows with Visual Studio

  Apparently, `tclsh.exe` is needed. It can be downloaded from → https://bitbucket.org/tombert/tcltk/downloads/tcltk85-8.5.19-14.tcl85.Win10.x86_64.tgz

  After downloading it, → Windows/dirs/Windows/System32/tar_exe[`tar.exe`] (pre-installed with → Windows/versions/10[Windows Version 10]) can be used to extract `tclsh.exe` and `tcl85.dll`:
code {
rem tar -xf tcltk85-8.5.19-14.tcl85.Win10.x86_64.tgz  *tclsh.exe  *tcl85.dll
rem move  tcltk85-8.5.19-14.tcl85.Win10.x86_64\bin\* %userprofile%\bin
tar -xf tcltk85-8.5.19-14.tcl85.Win10.x86_64.tgz
set PATH=%cd%\tcltk85-8.5.19-14.tcl85.Win10.x86_64\bin;%path%
code }

  Possibly, an `init.tcl` file should now be created under the user's home directory.

  In order to prevent *Error: NMAKE : fatal error U1073: don't know how to make '..\manifest'*:
code {
→ Windows/dirs/Windows/System32/fsutil_exe/file[fsutil file] createNew manifest
fsutil file createNew manifest.uuid
code }

code {
mkdir bld
cd    bld

rem nmake /f ..\Makefile.msc TOP=..
nmake /f ..\Makefile.msc TOP=.. sqlite3.c
nmake /f ..\Makefile.msc TOP=.. sqlite3.dll
nmake /f ..\Makefile.msc TOP=.. sqlite3.exe
code }

code {
nmake /f ..\Makefile.msc TOP=.. test
code }
  TODO: test creates lots of *fatal error C1083: Cannot open include file: 'tcl.h': No such file or directory*.

}
sa:
  → development/databases/SQLite/compile/options[Compile time options]
