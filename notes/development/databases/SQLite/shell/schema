$ SQLite shell: .schema
@ .schema

The → development/databases/SQLite/shell[SQLite shell] command `.schema` dumps an → development/databases/SQLite[SQLite database's] schema.
-
`.schema %pattern%` dumps the tables that match `%pattern%`.

`.schema` prints the SQL statement that was used to create a → development/databases/SQLite/tables or → development/databases/SQLite/views. Thus, the output might be somewhat hard to read, especially
if one simply wants to query a table's or view's column names and types.
-
In such a case, the alternative → development/databases/SQLite/sql/pragma/table_info[`pragma table_info('<table name>')`] does exactly that.

{ Demonstration

  The following example demonstrates `.schema`:

  { Create schema

    First, we need a schema:

    gh|about-sqlite|/shell/schema/create-schema.sql||

  }
  { .schema

    Show the enitre schema:
    gh|about-sqlite|/shell/schema/schema.sql||

  }
  { .schema table-name #sqlite-schema-table-name

    Display the → development/databases/SQLite/tables/create[`create table`] statement for a specific table:
    gh|about-sqlite|/shell/schema/schema-tabname.sql||

  }
  { .schema %pattern%

    Finally, display the statements for the tables that match a *pattern*:
    gh|about-sqlite|/shell/schema/schema-pattern.sql||

  }
}

sa:

  The → development/databases/SQLite/internals/schema-objects[internal] table → development/databases/SQLite/internals/schema-objects/sqlite_master[`sqlite_master`].

  `.fullschema`

  → development/databases/SQLite/shell[SQLite shell]
