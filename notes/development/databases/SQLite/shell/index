$ SQLite shell

{ Command line invocations

code {
sqlite3 [options] db-filename [→ development/databases/SQLite/sql[SQL statement]]
code }

  Options include:
  table { ll
   `-A ARGS…`            ☰ run `.archive ARGS` and exit
   `-append`             ☰ append the database to the end of the file
   `-ascii`              ☰ set output mode to 'ascii'
   `-bail`               ☰ stop after hitting an error
   `-batch`              ☰ force batch I/O
   `-box`                ☰ set output mode to 'box'
   `-column`             ☰ set output mode to 'column'
   `-cmd COMMAND`        ☰ run `COMMAND` before reading → development/stdin-stdout-stderr[stdin]
   `-csv`                ☰ set output mode to 'csv'
   `-echo`               ☰ print commands before execution
   `-init FILENAME`      ☰ read/process named file
   `-[no]header`         ☰ turn headers on or off
   `-help`               ☰ show this message
   `-html`               ☰ set output mode to HTML
   `-interactive`        ☰ force interactive I/O
   `-json`               ☰ set output mode to 'json'
   `-line`               ☰ set output mode to 'line'
   `-list`               ☰ set output mode to 'list'
   `-lookaside SIZE N`   ☰ use N entries of SZ bytes for lookaside memory
   `-markdown`           ☰ set output mode to 'markdown'
   `-memtrace`           ☰ trace all memory allocations and deallocations
   `-mmap N`             ☰ default mmap size set to N
   `-newline SEP`        ☰ set output row separator. Default: '\n'
   `-nofollow`           ☰ refuse to open symbolic links to database files
   `-nullvalue TEXT`     ☰ set text string for NULL values. Default ''
   `-pagecache SIZE N`   ☰ use N slots of SZ bytes each for page cache memory
   `-quote`              ☰ set output mode to 'quote'
   `-readonly`           ☰ open the database read-only
   `-separator SEP`      ☰ set output column separator. Default: '|'
   `-stats`              ☰ print memory stats before each finalize
   `-table`              ☰ set output mode to 'table'
   `-version`            ☰ show SQLite version
   `-vfs NAME`           ☰ use NAME as the default VFS
   `-zip`                ☰ open the file as a ZIP Archive
  table }

  An SQL script can be redirected into the SQLite executable, for example in → Windows/PowerShell like so
code {
→ Windows/PowerShell/command-inventory/noun/content/get[get-content] sql-script.sql | sqlite3.exe
code }

}
{ Some interesting dot-commands

  `.open some.db`, `.open --new some.db` (`--new` deletes contents of some.db if exists)

  `.read filename`: execute → development/databases/SQLite/sql[sql statements] in `filename`.

  `.exit`, `.quit` to terminate an SQLite session

  `.shell cmd` executes `cmd` in a → Linux/shell[shell].

  `.headers on` and `.headers off`

  `.mode` specifices the *format* in which a result set is returned. It recognizes the following formats:
     → development/Data/exchange/formats/CSV[`csv`], `column`, `html`, `insert`, `line`, `list` (which is the default), `quote`, `tabs`, `tcl` and `box`.
  -
  When using `.mode column` (which produces a → development/databases/SQLite/shell/tabular-output[tabular output]), the widths of the individual columns might be adjusted with `.width n m n o …` (where `n`, `m` …) specifiy
  the column widthds in characters.

  `.print Message`

  `.output file.txt` sends output to file.txt

  `.dump` to → development/databases/SQLite/shell/dump/export-import[export and import a database].


  `.timer on`, `.timer off`

  `.show`

  `.changes on`: automatically calls → development/databases/SQLite/functions#changes[`changes()`] and → development/databases/SQLite/functions#total_changes[`total_changes()`] after each
  statement.

  { Describing schema, tables etc.

    Commands that can be used to find schema object or describe tables include:
      • → development/databases/SQLite/shell/schema[`.schema`]
      • `.fullschema`
      • `.tables`
      • `.tables %part_of_table_name%`


  }
  { Get columns of a table

code {
.header on
.width 2 30 10 4 4
.mode columns
pragma table_info('table_name');
code }

  }
  { TODO

   `.testcase`
 
   `.imposter`

   → development/databases/SQLite/shell/load[`.load`] to load a → Windows/development/Portable-Executable/DLL[DLL] or a *shared object* in order to add more functionality to SQLite.


   `.scanstats`

  }

}

sa:
  → development/databases/SQLite
