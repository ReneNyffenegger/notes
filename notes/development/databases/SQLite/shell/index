$ SQLite shell

{ Command line invocations

code {
sqlite3 [options] db-filename [→ development/databases/SQLite/sql[SQL statement]]
code }

  { Other options

    table { ll
     `-A ARGS…`            ☰ run `.archive ARGS` and exit
     `-append`             ☰ append the database to the end of the file
     `-bail`               ☰ stop after hitting an error
     `-batch`              ☰ force batch I/O
     `-cmd COMMAND`        ☰ run `COMMAND` before reading → development/stdin-stdout-stderr[stdin]
     `-echo`               ☰ print commands before execution
     `-init FILENAME`      ☰ read/process named file
     `-[no]header`         ☰ turn headers on or off
     `-help`               ☰ show this message
     `-interactive`        ☰ force interactive I/O
     `-lookaside SIZE N`   ☰ use N entries of SZ bytes for lookaside memory
     `-markdown`           ☰ set output mode to 'markdown'
     `-memtrace`           ☰ trace all memory allocations and deallocations
     `-mmap N`             ☰ default mmap size set to N
     `-newline SEP`        ☰ set output row separator. Default: '\n'
     `-nofollow`           ☰ refuse to open symbolic links to database files
     `-nullvalue TEXT`     ☰ set text string for NULL values. Default ''
     `-pagecache SIZE N`   ☰ use N slots of SZ bytes each for page cache memory
     `-readonly`           ☰ open the database read-only
     `-separator SEP`      ☰ set output column separator. Default: '|'
     `-stats`              ☰ print memory stats before each finalize
     `-table`              ☰ set output mode to 'table'
     `-version`            ☰ show SQLite version. Compare with the SQLite shell dot command `.version`. The version is also printed when the SQLite shell is started.
     `-vfs NAME`           ☰ use NAME as the default VFS
     `-zip`                ☰ open the file as a ZIP Archive
    table }

    { Options to set output mode/format

     The following options set the *output mode* (i. e. format):
     `-ascii`, `-box`, `-column`, `-csv`, `-html`, `-json`, `-line`, `-list`, `-quote` 

    }
  }
  { Redirecting a script into the SQLite executable

    An SQL script can be redirected into the SQLite executable, for example in → Windows/PowerShell like so
code {
→ Windows/PowerShell/command-inventory/noun/content/get[get-content] sql-script.sql | sqlite3.exe
code }

    See also the `-cmd COMMAND` command line option

  }

}
{ Some interesting dot-commands

   table { ll

  `.open some.db`, `.open --new some.db` ☰ (`--new` deletes contents of some.db if exists)
  `.read filename` ☰  execute → development/databases/SQLite/sql[SQL statements] in `filename`.
  `.exit`, `.quit` ☰ to terminate an SQLite session
  `.shell cmd` ☰  executes `cmd` in a → Linux/shell[shell].
  `.headers on`, `.headers off` ☰
  `.mode` ☰ specifices the *format* in which a result set is returned. It recognizes the following formats: → development/Data/exchange/formats/CSV[`csv`], `column`, `html`, `insert`, `line`, `list` (which is the default), `quote`, `tabs`, `tcl` and `box`.  When using `.mode column` (which produces a → development/databases/SQLite/shell/tabular-output[tabular output]), the widths of the individual columns might be adjusted with `.width n m n o …` (where `n`, `m` …) specifiy the column widths s in characters.
  `.print Message` ☰
  → development/databases/SQLite/shell/dot-commands/output[`.output file.txt`] ☰ sends output to `file.txt`
  `.dump` ☰ to → development/databases/SQLite/shell/dump/export-import[export and import a database].
  `.timer on`, `.timer off` ☰
  `→ development/databases/SQLite/shell/dot-commands/show` ☰ Report the values for some settings such as col- and row separator, the filename of the opened database etc.
  `.changes on` ☰  automatically calls → development/databases/SQLite/functions#changes[`changes()`] and → development/databases/SQLite/functions#total_changes[`total_changes()`] after each statement.
  `.eqp on`, `.eqp off` ☰ Turn on/off automatic *explain query plan* mode. If turned on, the shell will automatically run an → development/databases/SQLite/sql/explain/query-plan[`explain query plan`] for each statement entered and display the plan.
  → development/databases/SQLite/shell/dot-commands/version[`.version`] ☰ Prints the version of the engine, zlib and the compiler with which the engine was compiled. Compare with the command line option `--version`

  table }

  { Describing schema, tables etc.

    Commands that can be used to find schema object or describe tables include:
      • → development/databases/SQLite/shell/schema[`.schema`]
      • `.fullschema`
      • `.tables`
      • `.tables %part_of_table_name%`


  }
  { Get columns of a table

code {
.header on
.width 2 30 10 4 4
.mode columns
pragma table_info('table_name');
code }

  }
  { TODO

   `.testcase`
 
   `.imposter`

   → development/databases/SQLite/shell/load[`.load`] to load a → Windows/development/Portable-Executable/DLL[DLL] or a *shared object* in order to add more functionality to SQLite.


   `.scanstats`

  }

}

sa:
  → development/databases/SQLite
