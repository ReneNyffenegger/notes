$ SQLite shell

{ Some interesting dot-commands

  `.open some.db`, `.open --new some.db` (--new deletes contents of some.db if exists)

  `.read filename`: execute → development/databases/SQLite/sql[sql statements] in `filename`.

  `.exit`, `.quit`

  `.shell cmd` executes `cmd` in a → Linux/shell[shell].

  `.headers on` and `.headers off`

  `.mode` specifices the *format* in which a result set is returned. It recognizes the following formats:
     → development/Data/exchange/formats/CSV[`csv`], `column`, `html`, `insert`, `line`, `list` (which is the default), `quote`, `tabs` and `tcl`.
  -
  When using `.mode column` (which produces a → development/databases/SQLite/shell/tabular-output[tabular output]), the widths of the individual columns might be adjusted with `.width n m n o …` (where `n`, `m` …) specifiy
  the column widthds in characters.

  `.print Message`

  `.output file.txt` sends output to file.txt

  `.dump` to → development/databases/SQLite/shell/dump/export-import[export and import a database].

  `.schema`, `.fullschema`

  `.timer on`, `.timer off`

  `.show`

  `.changes on`: automatically calls → development/databases/SQLite/functions#changes[`changes()`] and → development/databases/SQLite/functions#total_changes[`total_changes()`] after each
  statement.

  { TODO

   `.testcase`
 
   `.imposter`

   → development/databases/SQLite/shell/load[`.load`] to load a → Windows/development/Portable-Executable/DLL[DLL] or a *shared object* in order to add more functionality to SQLite.


   `.scanstats`

  }

}

sa:
  → development/databases/SQLite
