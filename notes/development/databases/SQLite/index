
{ An SQLite database is one file

  A really cool feature of SQLite is that a database is really just *one ordinary file*.

  This file can be copied from one computer to another, even from → Windows to → Linux and vice versa.

  At times, there is no need to even have a file. In such cases, a transient SQLite database can be created completely in memory.

  See also: → development/databases/SQLite/internals/database-file.

}
{ SQLite runs without server

  SQLite does not require a server installation.
  
}
{ Turning off autocommit

  SQLite commits every statement by default (so called *auto commit*).

  To turn this behaviour off (which increases performance greatly when lots of statements are executed in sequence), the statements must be enclosed in `begin transaction` .. `commit transaction`:
code {
begin transaction;

insert into tab_something values ('foo', 'bar', 'baz');
insert into tab_something values ('one', 'two',  null);
…
…

commit transaction;
code }

}
{ pragma

code {
pragma quick_check;
code }

}
{ Compiling the amalgamation

  «Default» (no optimazation etc.) compilation Shell:

  { Compiling object files from sqlite3.c

    First, we need a few variables:
code {
AMALDIR=sqlite
OBJDIR=/tmp
BINDIR=~/bin
code }

    We're now ready to create the object files:
code {
gcc -DSQLITE_OMIT_SHARED_CACHE -DSQLITE_THREADSAFE=0 -Ofast -c $AMALDIR/sqlite3.c -o $OBJDIR/sqlite3-thread-0.o
gcc -DSQLITE_OMIT_SHARED_CACHE -DSQLITE_THREADSAFE=1 -Ofast -c $AMALDIR/sqlite3.c -o $OBJDIR/sqlite3-thread-1.o
gcc -DSQLITE_OMIT_SHARED_CACHE -DSQLITE_THREADSAFE=2 -Ofast -c $AMALDIR/sqlite3.c -o $OBJDIR/sqlite3-thread-2.o
code }

  }

  { Compiling the shell executable

    Note, `-lpthread` is required if the object file was created with the macro `SQLITE_THREADSAFE` set to 1 or 2:
code {
gcc $AMALDIR/shell.c $OBJDIR/sqlite3-thread-0.o -ldl           -o $BINDIR/sqlite3-shell-thread-0
gcc $AMALDIR/shell.c $OBJDIR/sqlite3-thread-1.o -ldl -lpthread -o $BINDIR/sqlite3-shell-thread-2
gcc $AMALDIR/shell.c $OBJDIR/sqlite3-thread-2.o -ldl -lpthread -o $BINDIR/sqlite3-shell-thread-2
code }

    Make a particular executable the default:
code {
ln -s $BINDIR/sqlite3-shell-thread-0 $BINDIR/sqlite3-shell
code }

code {
sqlite3-shell :memory: '→ development/databases/SQLite/sql/pragma/compile_options[pragma compile_options]'
code }

  }
  { No readline support

    Unfortunately, when compiled as outlined above, there is no readline support.
    -
    It seems it needs to be enabled → https://sqlite.org/forum/info/eb24496693bbc7da[already when configuring the project].

  }

}
{ PHP

  It seems sqlite can be accessed (in Ubuntu) from → development/web/php with
code {
→ Linux/shell/commands/sudo apt-get install php-sqlite3
code }

}
{ Using PowerShell to find SQLite databases in a file system

  The following simple → Windows/PowerShell/pipeline[PowerShell pipeline] finds SQLite databases below the current directory in a file system:
code {
get-childItem  -recurse -attributes !directory |
   foreach-object {
      $firstCharacters = ([char[]] (get-Content $_.fullName -encoding byte -totalCount 15)) -join ''
      if ($firstCharacters -eq 'SQLite format 3') {$_}
   }
code }

}
{ Trivia

  The → https://github.com/endlesssoftware/sqlite3/blob/8004eeafeec9ac4bc0fbc7a3c0bb01eca55694a0/os.h#L133-L134[default prefix for temporary files] used to be `sqlite_` but was changed
  to `etilqs_` so that annoyed users wouldn't find the phone numbers of the SQLite developers when googling for *sqlite*.

}
{ TODO

  { Forking, threads and caching statements across processes

    The FAQuestion → https://www.sqlite.org/faq.html#q6[Is SQLite threadsafe] recommends not to `fork()` an open SQLite database into a child → Linux/kernel/process.

   `sqlite3_open_v2` called with with one of the following flags:
    table { lll
      ~Flag~ ☰ → https://www.sqlite.org/threadsafe.html[threading mode] ☰
      `SQLITE_OPEN_NOMUTEX` ☰ multi-thread ☰ Multiple threads can use the same database provided each thread has its own database connection.
      `SQLITE_OPEN_FULLMUTEX` ☰ serialzed ☰ Multiple threads can use the same database, critical code is secured with mutexes.
    table }

    The value define/macro `SQLITE_THREADSAFE` specfies the threading mode at compile time.

    → https://sqlite.org/forum/forumpost/a422f1ccc4407513[This thread] has some interesting insights.

  }
}

sa:
  → development/databases/SQLite/tables[tables],
  → development/databases/SQLite/views[views],
  → development/databases/SQLite/indices[indexes]

  → development/databases/SQLite/datatypes

  → development/databases/SQLite/sql[SQL statements],
  → development/databases/SQLite/functions

  → development/databases/SQLite/transactions

  → development/databases/SQLite/shell

  → development/databases/SQLite/c-interface/basic[The c interface]

  → development/languages/Perl/modules/DBD/SQLite

  → Linux/fhs/home/username/_sqliterc

  → development/databases/SQLite/internals

  → development/databases/SQLite/Performance

  → development/databases/SQLite/code-snippets[Code snippets]

  Python's → development/languages/Python/standard-library/sqlite3[sqlite3 standard library]

  The → development/languages/R package → development/databases/SQLite[`SQLite`].

  → development/web/php/snippets/sqlite

  { Windows 10

  Apparently, → Windows/versions/10 also uses SQLite, see → Windows/dirs/Windows/System32/winsqlite3_dll[`winsqlite3.dll`] under → Windows/dirs/Windows/System32[`%SystemRoot%\System32`].

  This DLL can be used to → development/databases/SQLite/VBA[connect to SQLite from Visual Basic for Applications].

  The → development/languages/C-C-plus-plus/preprocessor/include[`#include` files] to access this
  → Windows/development/Portable-Executable/DLL from
  → development/languages/C-C-plus-plus/C are under → Windows/dirs/Program-Files-x86/Windows-Kits/n/Include/version/um/winsqlite[`%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\winsqlite`].

    See also → Windows/dirs/Windows/System32/sqlceoledb40_dll[`sqlceoledb40.dll`] which seems to be the
    → development/databases/OLE-DB/provider[OLE DB provider] for SQLite.

  }


links:
  → https://github.com/govert/SQLiteForExcel[SQLiteForExcel] (on github) is a
  small, easy-to-use, → development/open-source SQL library to give access to sqlite from → development/languages/VBA[VBA].

  → https://github.com/softace/sqliteodbc[Open Source SQLite ODBC Driver]

  → development/databases/SQLite/archive[SQLite archives] might be a really cool replacement for zip or tar files.

  The → Microsoft/dot-net namespace → Microsoft/dot-net/namespaces-classes/System/Data/SQLite[`System.Data.SQLite`]

  An → https://osm.renenyffenegger.ch[experiment] that tries to load the → development/OpenStreetMap database into SQLite.
