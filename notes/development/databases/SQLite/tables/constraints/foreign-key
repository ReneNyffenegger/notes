$ SQLite: foreign key constraint

{ Createing a table with a foreign key

  A *foreign key* is created as part of the → development/databases/SQLite/tables/create[`create table`] statement as follows:
code {
create table T (
   ref_1,
   ref_2,
   val_1,
   val_2,
   foreign key (ref_1, ref_2) references parent
);
code }

  If the foreign key consists of *one column* only, it can alternatively be created like so:

code {
create table T (
   ref_id  foreign key references parent,
   val_1,
   val_2
);
code }

  gh|about-sqlite|/tables/constraints/foreign-key/simple.sql||

}
{ Enforcing foreign keys

  SQLite supports foreign key constraints since `3.6.19` (Oct 14, 2009) - but they're not enforced by default (but SQLite could
  handle a `create table` statement with foreign keys even before that).

  Even after `3.6.19`, SQLite must be compiled without `SQLITE_OMIT_FOREIGN_KEY` and without `SQLITE_OMIT_TRIGGER`.
  -
  The compile options used to compile can be queried with → development/databases/SQLite/pragmas#pragma-compile-options[pragma compile_options].

  In order to enforce a foreign key constraint, the following → development/databases/SQLite/pragmas[pragma] must be used:
code {
→ development/databases/SQLite/sql/pragma/foreign_keys[pragma foreign_keys] = on;
code }
  If this command returns nothing (rather than either a 0 or 1), foreign keys are not suppurted with the current SQLIte executable.

}
{ Adding foreign keys to an existing table

  After a → development/databases/SQLite/tables[table] is → development/databases/SQLite/tables/create[created], it's not possible anymore to add
  a foreign key with an → development/databases/SQLite/tables/alter[`alter table`] statement.

}


sa:
  → development/databases/SQLite/tables/constraints

  → development/databases/SQL/table/constraint/foreign-key[General notes about foreign keys in SQL]
