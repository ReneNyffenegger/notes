$ SQLite: primary key constraint
@ primary key

{ Creating primary keys

  A (single → development/databases/SQLite/tables/columns) → development/databases/SQL/table/constraint/primary-key[primary key constraint] can be added to an → development/databases/SQLite/tables[SQLite table] in the
  → development/databases/SQLite/tables/create[`create table`] statement in the *column definition* as shown below:
  gh|about-sqlite|/tables/constraints/primary-key/column-definition.sql||

  Alternatively, A single-column or multi-column primary key can be created with the *constraint clause* of the `create table` statement
  gh|about-sqlite|/tables/constraints/primary-key/table-constraint.sql||

}
{ NULL values

  It is a confirmed bug that SQLite allows primary key values to be → development/databases/SQLite/datatypes/null[`null`] if the primary key → development/databases/SQLite/tables/columns[column's]
  → development/databases/SQLite/datatypes[datatype] is not an → development/databases/SQLite/datatypes/integer[`integer`] and the table is a → development/databases/SQLite/tables/index#without-rowid[without rowid] table:
  gh|about-sqlite|/tables/constraints/primary-key/null-values.sql||

  This behaviour is supported because of historical reasons, see → https://sqlite.org/quirks.html[Quirks, Caveats, and Gotchas In SQLite].

}
{ Autoincrementing the primary key #autoincrement-pk

  The value of an `integer` primary key is auto incremented if the → development/databases/SQLite/sql/insert[`insert`] statement does not explicitly specify a value different from
  → development/databases/SQLite/datatypes/null[`null`].
  
  The keyword → development/databases/SQLite/tables/constraints/primary-key/autoincrement[`autoincrement`] is therefore optional for `primary key` columns.

  gh|about-sqlite|/tables/constraints/primary-key/autoincrement/demo.sql||

  If a primary key is an `integer`, the last inserted primary key value can be selected with the → development/databases/SQLite/tables/rowid#last_insert_rowid[`last_insert_rowid()`] function.

  See also the → development/databases/SQLite/internals/schema-objects[internal] table → development/databases/SQLite/internals/schema-objects/sqlite_sequence[`sqlite_sequence`].

}
{ ON CONFLICT clauses #sqlite-pk-on-conflict

  gh|about-sqlite|/constraints/primary-key/on-conflict-clauses.sql||

}
{ rowid / interger primary keys

  A primary key whose → development/databases/SQLite/datatypes[datatype] is an → development/databases/SQLite/datatypes/integer[integer] becomes the table's
  → development/databases/SQLite/tables[table's] → development/databases/SQLite/tables/rowid.

}
{ Adding primary keys to an existing table

  After a → development/databases/SQLite/tables[table] is → development/databases/SQLite/tables/create[created], it's not possible anymore to add
  a primary key with an → development/databases/SQLite/tables/alter[`alter table`] statement.

}



sa:

  The column `pk` in the → development/databases/SQLite/sql/pragma/table_info[`pragma table_info`] statement.

  → development/databases/SQLite/sql/insert/upsert[`upsert` clause] of an → development/databases/SQLite/sql/insert[`insert` statement].

  → development/databases/SQL/table/constraint/primary-key[General notes about primary keys in SQL]

  → development/databases/SQLite/tables/constraints
