$ MS Access: SQL
@ SQL

{ SQL dialect #acces-sql-dialect

  In most cases, the SQL dialect that is used in Access follows the → misc/ISO/9075#sql-89[SQL 89, level 1] standard.

  However, its possible to «upgrade» the used dialect to → Microsoft/Office/Access/GUI/Ribbon/tabs/File/Options/Object-Designers/Query-Design/SQL-Server-Compatible-Syntax_ANSI-92[SQL-92 compatiblity mode]:
  → Microsoft/Office/Access/GUI/Ribbon/tabs/File/Options/Object-Designers/Query-Design/SQL-Server-Compatible-Syntax_ANSI-92[File -> Options -> Object Designers -> SQL Server Compatible Syntax (ANSI 92)]

}

{ Create a new table with a select statement

The equivalent of other databases' `create table NewTable as select * from ...` is
code {
select *
into   NewTable
from   ...
code }

}

{ Referencing tables in other formats

  { Tables in another Access file
  
    Tables in another access database can be referenced with `[access-path].[tablename]` which allows, for
    example to insert into a table in another access (accdb) file:
  
  code {
insert into
[X:\path\to\backend.accdb].[TheTableName]
(x, y, z)
values
(1, 42, 99)
  code }
  
  }
  
  { Data in Excel
  
    Similarly, a worksheet can be referenced as a table with `[Excel 8.0;HDR=yes;DATABASE=\path\to\xlsx].[Worksheet Name$]`.
  
    Of course, if the data has no header, you will set `HDR=no`.
  
    Note the trailing `$` after the sheet name. If there were a named range in the excel sheet, the name of the
    range can be stated after the `$`. If the entire sheet has to be used, the `$` still needs to be present.
  
  code {
  insert into someTable
  select * from [Excel 8.0;HDR=yes;DATABSE=x:\path\to\the.xlsx].[worksheet name$]
  code }
  
  }

  { CSV files

code {
insert into someTabel
select *
from [TEXT;HDR=yes;DATABASE=x:\path\to\Directory\Containing\CSV].[fileName.csv]
code }

  }

}
{ Changing data type of column

  Change datatype of `col` in table `tab` to number:
code {
alter table  tab alter column col number;
code }

}
{ Date related

  Creating a `date`:
code {
dateSerial(year, month, day)
code }

}
{ No CASE WHEN … expression

  There is no `case when … then` expression in Access-SQL.
  -
  Instead, `iif` should be used:
code {
iif (condition, expr-if-true, expr-if-false)
code }

  If more than one conditional needs to be tested, the `switch(…)` function can be used:
code {
switch(
   condition-1, value-if-true-1
 , condition-2, value-if-true-2
   …
 , condition-n, value-if-true-n
)
code }

}
rem {
{ IIF wihin aggregate functions

  When using aggregated functions in a group by and the `iif()` function compares strings, the string must be enclosed
  in double quotes rather than single quotes, otherwise, a 

}
rem }
{ LIKE operator

  Access doesn't use the percent sign (`%`) as wild character in a `like` expression. Instead, it uses an asterisk (star): `*`.

 `#` matches a digit (0-9)

  And there are characters lists that resemble those of → development/regular-expressions[regular expressions]: `[a-f]` and `[!a-f]` (the latter meaning a character that is not in the range `a` through `f`.

  TODO: Apparently, this behaviour can be changed if a database is set to ANSI-92 standard.

}
{ Selecting records with GUIDs #access-select-guids

  A textual representation of a → development/UUID-GUID[GUID] can be converted into «real» GUID with → Microsoft/Office/Access/Object-Model/Application/GUIDFromString[`guidFromString("{…}")`].

  So, a record that is identified by a GUID can be selected like so:
code {
select *
from
   tab
where
   id = guidFromString('{A7CC3DA6-ABFB-E911-81A1-005056938A20}')
code }

}
{ Action queries #access-action-queries

  Apparently, Access refers to → development/databases/SQL/DML[DML statements] (and also DDL statements?) as *action queries*.
  There seem to be three ways to execute such action queries:
    • `→ Microsoft/Office/Access/Object-Model/DoCmd[doCmd].openQuery`
    • `→ Microsoft/Office/Access/Object-Model/DoCmd/runSQL[doCmd.runSQL]`
    • → Microsoft/Office/Access/Object-Model/Database/execute[`database.execute`]

}
{ TODO


  The `transform` statement allows crosstab queries (= Pivot queries?)

  The `parameters` declaration.

  `distinct` is not supported.

   No *limit clause*.

   The `imp` (implies) and `eqv` (equivalence) operators.

   → development/databases/Access/SQL/fix[`fix`] as equivalent to Oracle's `trunc(date)`.

  `select count(distinct col) from tab` not possible.

}

sa:

  → development/databases/Access/SQL/update-from-another-table[Update a table from values in another table]

  → development/databases/Access/SQL/select[Select statements]

  → development/databases/SQL

  The → Windows/PowerShell/modules/personal/MS-Access[PowerShell module MS-Access] allows to execute SQL statements from a PowerShell command line.
