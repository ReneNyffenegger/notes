$ SQL: GROUP BY / KEEP … DENSE_RANK

Some aggregate functions can be followed by the keywords `KEEP` and `DENSE_RANK`:
code {
max(expr) KEEP (DENSE_RANK first order by anotherExpr).
code }

Such a construct returns the value of `expr` whose record within a group has the lowest value for `anotherExpr`.

I hope the following example demonstrates this behavior.

Here's the data. The value of `ID` groups the data into three groups, *A*, *B* and *C*. 
gh|about-SQL|/select/group-by/keep-dense_rank/img/data.png||

For each group, we want to select the maximum value of `VAL` and the corresponding values (of the same record) for `TXT` and `NUM`.
For example, in group *B*, the maximum value of `ID` is 7 and the corresponding value for `TXT` and `NUM` are *de* and *28*.

First, we need a table:
gh|about-SQL|/select/group-by/keep-dense_rank/create-table.sql||

And some data in the table.
gh|about-SQL|/select/group-by/keep-dense_rank/insert-data.sql||

Then, we're ready to select the data as outlined above:
gh|about-SQL|/select/group-by/keep-dense_rank/select-data.sql||

The result set (here displayed in → development/Software/Oracle-SQL-Developer[Oracle SQL Developer]):
gh|about-SQL|/select/group-by/keep-dense_rank/img/result.png||

sa:

  `… KEEP (DENSE_RANK …)` can be followed by `OVER` in which case it becomes an → development/databases/SQL/select/analytic[analytic function].

  The → development/databases/DuckDB#duckdb-arg_max[`arg_max(v, w)` and `arg_min(v, w)`] aggregate functions in
  → development/databases/DuckDB have a similar purpose, but are more legible (imho).
