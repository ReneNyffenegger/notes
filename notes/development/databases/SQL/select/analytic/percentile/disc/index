$ SQL: PERCENTILE_DISC

This is an attempt at trying to explain the `percentile_disc()` SQL analytic function.

`percentile_disc(p) within group (over order by val)`, with `0<= p <= 1`, returns a value `r` such that `p*100` percent of the values of `val` are
less than `r`, within a given group (thus the clause `within group`).

I am trying to demonstrate that with the following SQL snippets.

{ Test data

  First, we need to create a table …
  gh|about-SQL|/select/analytic/percentile/disc/create-table.sql||

  … and fill it with some simple test data:
  gh|about-SQL|/select/analytic/percentile/disc/insert-1.sql||

}
{ Calculate some percentiles

  I now let SQL calculate the 20th, 40th and 70th percentile of the data.

  gh|about-SQL|/select/analytic/percentile/disc/select-some-percentiles.sql||

  The select statement returns `2`, `4` and `7`.

 `2` is the 20th percentile of the data because 20 % of data data are less than `2` (namely `0` and `1`). The same goes for the other two numbers as well.

  I was able to run this Query on → development/databases/Oracle[Oracle] and → development/databases/PostgreSQL[PostgreSQL].
  -
  → development/databases/SQL-Server[SQL Server] 2017 returns the error message *Msg 10753 The function 'percentile_disc' must have an OVER clause.*
  -
  → development/databases/SQLite[SQLite] 3.27.2 returned *near "(": syntax error*
  -
  → development/databases/MySQL[MySQL] was unable to execute the query, too.

}
{ 50th percentile / median vs average

  The 50th percentile is also called the *median*. The number of records with a value less than the median is (± 1) the same as the number of records with a value greater then the median.

  The following query compares the median with the average or mean (`avg()`).

  gh|about-SQL|/select/analytic/percentile/disc/compare-median-avg.sql||

  The query returns `5` (= the median aka 50th percentile of `val_one`), `5` (the average of `val_one`), `10` (the median of `val_two`) and `909098` (the mean of `val_two`).

  This result demonstrates that the median is much more robust against *outliers*. The high value of 9999999 drags the average into a region that does not look like the original data at all while
  the median still is in the region of most data of the original data.

}
{ Combining with group by

 `percentile_disc` (as also any other analytic function) can also be combined with `group by`.

  I Insert a few more records for another group (`item = 'bar'`):

  gh|about-SQL|/select/analytic/percentile/disc/insert-item-bar.sql||

  gh|about-SQL|/select/analytic/percentile/disc/select-group-by.sql||

  The query now returns the median for both groups (`bar`: 3, `baz`: 5). 

}
{ Combining with over clause

 `percentile_disc` can also be combined with the `over()` clause so that the query returns both, the original data *and* the calculated percentile.

  gh|about-SQL|/select/analytic/percentile/disc/select-over.sql||

  Now, that the select statement has the `over()` clause, it is also possible to run in in SQL Server 2017.

}

sa:

  → development/databases/SQL/select/analytic[Analytic functions]

  → science/mathematics/statistics/percentile
