$ SQL: Analytic functions

An *analytic function* computes a value for each returned record by applying the function on a group of records.
-
This is different from an → development/databases/SQL/select/group-by/aggregate-functions[aggregate function] in that the aggregate returns *one* value per group and
that the aggregate function is tied to a → development/databases/SQL/select/group-by[`group by`] (The `group by` can be omitted if the group is the entire selected result).

In the → development/databases/SQL/operation-order[SQL order of operations], aggregate functions are evaluated after the → development/databases/SQL/select/group-by/having[`having` clause] and thus
also after the → development/databases/SQL/select/group-by[`group by`] clause.

{ Types of analytic functions

  Analytic functions can roughly be divided into the following types
  table { ll
  
    → development/databases/SQL/select/analytic/ranking[Ranking]              ☰ Calulate the *rank*, → science/mathematics/statistics/percentile[percentile] or *n-tile* of a record in respect to its partition,
    Windowing            ☰ Cumulative and moveing averages (rolling totals). Applies to `sum`, `avg`, `count`, `variance` and `stddev`, `first_value` and `last_value`.
    Reporting            ☰ 
    → development/databases/SQL/select/analytic/lag-lead[lag / lead]    ☰ Used if one record needs to access values of another record
    first / last         ☰ First or last value of an *ordered* partition
    Linear regeression   ☰ Slope, intercept etc.
    Inversive percentile ☰ The value in a partition the belongs to a given percentile
    Hypothetical rank and distribution ☰ The rank or percentile that a value would have in a given set of values

  table }

}
{ (Some) analytic functions

  Some analytic functions are:
    • → development/databases/SQL/select/analytic/ntile[`ntile`] to partition a result set into n groups.
    • → development/databases/SQL/select/analytic/percentile/disc[`percentile_disc`] and → development/databases/SQL/select/analytic/percentile/disc[`percentile_disc`] to calculate the nth → science/mathematics/statistics/percentile of a value within a group.
    • → development/databases/SQL/select/analytic/lag-lead[`lag` and `lead`] to allow records of the result set to access values in other records.

}
{ Defining Window into which a row belongs

code {
OVER ( … ROWS  BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING )
OVER ( … ROWS  BETWEEN n         PRECEDING AND m         FOLLOWING )
OVER ( … ROWS  BETWEEN n         PRECEDING AND CURRENT ROW         )
…

OVER ( … RANGE BETWEEN           n        PRECEDING AND           m        FOLLOWING )
OVER ( … RANGE BETWEEN INTERVAL 'n' MONTH PRECEDING AND INTERVAL 'm' MONTH FOLLOWING )
OVER ( … RANGE BETWEEN UNBOUNDED PRECEDING          AND CURRENT ROW                  )
…
code }

  { Default window

  The ~default window~ is dependent on if the `ORDER BY` clause is specified.

  With an `ORDER BY` clause, it is
code {
OVER ( … RANGE BETWEEN UNBOUNDED PRECEDING and CURRENT ROW         )
code }

   Without an `ORDER BY` clause, it is 
code {
OVER ( … ROWS  BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING )
code }

  }

}
{ QUALIFY clause

  Analytic functions are not permitted in `where` or `having` clauses, but → https://www.h2database.com/html/main.html[H2] comes with a `qualify` clause where they're allowed,
  see → https://modern-sql.com/caniuse/qualify[modern SQL].



}
{ Navigating within a window

  Functions to *navigate within a window* are
    • `lag` and `lead` (→ misc/ISO/9075/features[feature] T615)
    • → development/databases/Oracle/SQL/select/analytic/value#ora-nth_value[`nth_value`] (→ misc/ISO/9075/features[feature] T618)
    • → development/databases/Oracle/SQL/select/analytic/value#ora-first_value[`first_value`] and `last_value` (→ misc/ISO/9075/features[feature] T617)

   While `lag` and `lead` allow to access a specific row relative to the current row, `nth_value(n)` provides access to to the `n`th row
   relative to the first or last row in a window.

  `first_value` and `last_value` are really just a special case of `nth_value(n)` where `n` is `1`.

}
sa:
  → development/databases/SQL/select/analytic
