$ SQL - Structured Query Language
@ SQL

SQL is a name, not an acryonym. It might stand for *SQL Query Language*, however :-).

SQL is a → science/computer/Programming-paradigm#declarative-languages[declarative], textual query language for relational → development/databases[databases].
-
It combines querying, updating and administrative instructions into a single language.
-
The administrative instructions allow to change the properties of a → development/databases[database] while it is running.


{ Implementations

  → development/databases/Oracle/SQL[Oracle]

  → Companies-Products/SAS[SAS'] propretiary implementation of SQL (Ansi 1999) is ~FedSQL~.

  → development/databases/Access/SQL[Access]

}
{ TODO

  { BIRD

    → https://bird-bench.github.io/[BIRD] (BIg Bench for LaRge-scale Database Grounded Text-to-SQL Evaluation) contains over 12,751 unique question-SQL pairs, 95 big databases with a total size of 33.4 GB. It also covers more than 37 professional domains, such as blockchain, hockey, healthcare and education, etc.

    Apparently, BIRD is related to → https://arxiv.org/pdf/2305.03111[Text-to-SQL parsing].

    See also → https://github.com/AlibabaResearch/DAMO-ConvAI/tree/main/bird[this link] in → https://github.com/AlibabaResearch/DAMO-ConvAI[this github repository].

  }
  { sqllogictest

    → https://www.sqlite.org/sqllogictest/doc/trunk/about.wiki[sqllogictest] is a program designed to verify that an SQL database engine computes correct results by comparing the results
    to identical queries from other SQL database engines.

  }
  { Parsing SQL

    → https://github.com/pganalyze/libpg_query[libpg_query] uses the actual PostgreSQL server source to parse SQL queries and return the internal PostgreSQL parse tree.

    → https://github.com/prestodb/presto[Presto] (the distributed SQL query engine for → development/Big-Data[big data]) comes with a → https://github.com/prestodb/presto/tree/master/presto-parser[parser].

  }
  { Malloy

    → https://malloydata.github.io/documentation/[Malloy] is an experimental analytical language that provides the ability to define a semantic data model for describing and querying data relationships and
    transformations on SQL databases.
    -
    Malloy currently works with SQL databases BigQuery, Postgres, and querying Parquet and CSV via DuckDB.

    "
       Malloy was designed by a team of people with a lot of experience in
       understanding the task of extracting meaning from data. Years of
       constant exposure to SQL resulted in a tremendous sense of wonder at the
       power of SQL … and a tremendous source of frustration at how bad SQL
       is at representing the types of operations needed to get meaningful data
       out of relational databases, and how difficult it is to maintain and
       extend a complex set of transformations written in SQL.
    "

  }
}
sa:

  → development/databases/SQL/statement

  → development/databases/SQL/select[select] from a → development/databases/SQL/table[table].

  → development/databases/SQL/DML[DML], DDL, DCL

  → development/databases/SQL/where

  → development/databases/SQL/operation-order[Order of operations]

  → development/databases/SQL/data-types[Data types]

  → misc/ISO/9075 and some notes about the → development/databases/SQL/history[history of SQL].

  The → development/languages/R[R] package → development/languages/R/packages/sqldf[`sqldf`] allows to manipuate
  → development/languages/R/data-structures/data-frame[R data frames] with SQL.
  -
  The package → development/languages/R/packages/dplyr[`dplyr`] has also some functionality that remind me of SQL.

  The special → development/databases/SQL/data-types/null[`null` data type]

  The .NET namespace → Microsoft/dot-net/namespaces-classes/System/Linq[`System.Linq`].

  → Microsoft/Azure/products/Data-Lake-Analytics#az-u-sql[U-SQL], the big data query language for → Microsoft/Azure/products/Data-Lake-Analytics, combines the declarative language of SQL with
  the programmability and type system of → development/languages/C-Sharp[C#].

  → development/databases/SQL/history/SEQUEL

  → development/Data/OLAP/MDX is a query language for → development/Data/OLAP.

  The → development/Data/open/Wikidata entity → https://opendata.renenyffenegger.ch/Wikimedia/Wikidata/entity/Q47607[Q47607].

  → development/databases/SQL/formatting/PowerShell/sqlformat-org-api
