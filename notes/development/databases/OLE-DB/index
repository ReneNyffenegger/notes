OLE DB is a → Windows/development/COM[COM] based framework that allow to transfer (tabular) → development/Data from a *data source* to a *consumer* after the consumer has «asked» for it.

OLE DB is one of the primary → Windows/development/MDAC technologies (the two others being → development/databases/ADO[ADO] and → development/databases/ODBC).

OLE DB was/is the (→ Windows/development/COM[COM]) successor of → development/databases/ODBC[ODBC]: OLE DB provides a uniform set of COM interfaces to be used by different applications.
-
Contrary to ODBC, which only allows to access relational → development/databases[databases], OLE DB can also be used to access other data stores.

A so-called  → development/databases/OLE-DB/connection-string[OLE DB connection string] identifies the data source and several attributes such as username/password (for authentication) or
time-out properties etc.

Usually, OLEDB is used to create → development/databases[database] drivers which are then used by another database access layer such
as → development/databases/ADO[ADO] or → Microsoft/dot-net/ADO. In such a constellation, OLEDB is called the *provider* and ADODB the *consumer*.
-
This is why an ADODB connection string might contain something like `provider=Microsoft.Jet.OLEDB.4.0;`.

{ Data source #ole-db-data-source

  An *OLE DB data source* identifies a → development/databases[database] that is accessed through OLE DB.

  In → development/databases/ADO[ADO], a connection to a data source is represented by an object whose type is → development/databases/ADO/objects/connection[`ADODB.Connection`].
  -
  In → Microsoft/dot-net, a connection is represented by an instance of → Microsoft/dot-net/namespaces-classes/System/Data/OleDb/OleDbConnection[`System.Data.OleDb.OleDbConnection`].

}
{ Provider

  An → development/databases/OLE-DB/provider[OLE DB provider] is (usually?) a → Windows/development/Portable-Executable/DLL that is able to manage and interact with a specific *data source*.

  There are providers for ordinary databases, but also for text files, spreadsheet data and other data formats.


}

sa:

  The → development/databases/SQL-Server/T-SQL function → development/databases/SQL-Server/T-SQL/functions/rowset/openrowset[`openrowset`] allows to query → development/Data[data] from an OLE DB data source.

  → Windows/development/MDAC/MSDASQL is → Microsoft[Microsoft's] OLE-DB provider for → development/databases/ODBC.

  → development/databases/SQL-Server/OLE-DB[OLE-DB and SQL Server]

  → Windows/dirs/Program-Files/Common-Files/System/ole-db[`%CommonProgramFiles%\System\ole db`]

  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin#oracle_home-bin-oledb[OLE DB related DLLs under `$ORACLE_HOME/bin`].

  The → Microsoft/dot-net Framework namespace for the Ole Db → Microsoft/dot-net namespace for the → Microsoft/dot-net/ADO#dot-net-data-provider[data provider] is
  → Microsoft/dot-net/namespaces-classes/System/Data/OleDb[`System.Data.OleDb`].

  The → Windows/registry/tree-structure/key[registry key] → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/ORACLE/KEY_homename/OLEDB[`HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE\KEY_homename\OLEDB`]

  → Microsoft/Office/Excel#xls-connecting-to-data-sources[Excel: connecting to data sources]
  -
  The → Microsoft/Office/Excel/Object-Model/WorkbookConnection[`workbookConnection`] object of → Microsoft/Office/Excel seems to be able to connect to ODBC sources.

  The → development/databases/OLE-DB/Excel-Client[Ole-DB Excel Client].
