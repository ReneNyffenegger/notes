$ schema.ini (Microsoft OLE DB Provider for Microsoft Access database engine)

A `schema.ini` file is needed in all but the most rudimentary cases when a → development/Data/exchange/formats/CSV file or other text file is read with the
→ development/databases/OLE-DB/provider[OLE DB provider] for → development/databases/OLE-DB/provider/Microsoft-Access-database-engine[Microsoft Access database engine]. The file specifies
some characteristics of the file(s) to be read.

{ Options

  { colNameHeader #colNameHeader

   Setting `colNameHeader` to `true` specifies that a the text file has a header with the names of the data columns. Setting it to `false` indicates that there is no header at all.

   The default is taken from the
   → Windows/registry/tree-structure/value[registry value]
   → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Office/application_version/Access-Connectivity-Engine/Engines/Text#FirstRowHasNames[`FirstRowHasNames`]
   under the
   → Windows/registry/tree-structure/key[registry key]
   → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Office/application_version/Access-Connectivity-Engine/Engines/Text[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Office\14.0\Access Connectivity Engine\Engines\Text`].

code {
colNameHeader=[true|false]
code }

  }
  { format

    The `format` option specifies how field values are separated one from another. They can be separated by a specific character or by using a fixed width for each column

    The following three lines shows how to specify field values that are separated by a character (tabulator, comma, bar). `delimited=(X)` allows to specifiy an arbitrary character as delimiter (except `"`).
code {
format=tabDelimited
format=CSVDelimited
format=delimited(|)
code }

    If the columns have a fixed width, `format` needs to be set to `fixedLength`.
code {
format=fixedLength
code }

  }
  { textDelimiter

   `textDelimiter=X` specifies the character with which a text can be enclosed that contains characters that are also used as field-delimiter.

    For example, the value *He said: yes* in a delimited file whose field-delimiter is the colon (`:`) might be enclosed with a single apostrophe (`'`), like so:
code {
foo:some text
baz:more text
bar:'he said:yes'
code }

   In order to parse such a file, the following two options need to be set:
code {
format=delimited(:)
textDelimiter='
code }

  The default of textDelimiter is the double apostrophe (`"`).

  }
  { MaxScanRows

    …

  }
  { decimalSymbol

    …

  }
  { numberLeadingZeros

   `numberLeadingZeros` specifies if numbers in the range -1 through 1 have a zero to the left side of the decimal point (or more accuratly: decimal symbol).

code {
numberLeadingZeros=[true|false]
code }

  }
  { dateTimeFormat

   `dateTimeFormat` specifies the expcected format for date and time values.

    Note espacially that minutes are specified with `nn` (not `mm` because `mm` indicates the month).

code {
dateTimeFormat=yyyy-mm-dd hh:nn:ss
code }

    When a `dateTimeFormat` is missing, the format is taken from the → Windows/control-panel item → Windows/dirs/Windows/System32/intl_cpl[region].

  }

}
{ Spcifying columns

  In input files where field-values are separated by a character (that is: variable width fields), a column needs to have two values: *column name* and its *data type*.

code {
col1=id   long 
col2=num  long
col3=flt  double
col4=txt  text
col5=dt   dateTime
code }

  It seems that column names need to be specified *even if* the → #colNameHeader option was set to true, and that the names of the column specification overwrite the names of the header.

}
{ Comments

  Lines in a `schema.ini` can be commented with a hash sign (`#`) or a semicolon (`;`).

  The hash sign or semicolon needs to be the first non-whitespace character, otherwise, it will cause an error.
  -
  Thus, the folloign is correct:
code {
; Customer data
[customers.csv]
# customers is delivered with a header
colNameHeader=true
code }

  Either of the following two lines is not correct and causes an error:
code {
[customers.csv]     ; Customer data
colNameHeader=true  # customers is delivered with a header
code }

}

sa:

  → Microsoft/Office/Excel/Object-Model/ListObject/connectionString/CSV[This example] demonstrates how a CSV file can be imported into an → Microsoft/Office/Excel/table[Excel table] with
  → development/languages/VBA[Visual Basic for Application]. In order to correctly import the CSV file, a schema.ini file is used.
