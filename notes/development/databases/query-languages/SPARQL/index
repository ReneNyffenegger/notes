
"
  Trying to use the Semantic Web without SPARQL is like trying to use a relational → development/databases[database] without → development/databases/SQL[SQL].
" [ Tim Berners-Lee ]

SPARQL (like → development/databases/SQL[SQL]) is a *declarative query language*. The language allows
to perform *data manipulation* and *data definition* operations on data that
is represented as a collection of → development/web/RDF[RDF] language sentences/statements.

SPARQL stands for *SPARQL Protocol and → development/web/RDF[RDF] Query Language*.

Apparently, SPARQL is used in → https://query.wikidata.org/[wikidata] (where queries can be formulated and executed).

A database is a set of *subject-predicate-object* triples.

*Variables* start with a question mark (`?`) or dollar symbol (`$`).

Comments are introduced with the *hash symbol* (`#`).

{ Select everything

  The following query is the most generic SPARQL query: it returns all known subject-predicate-object triplets:
code {
SELECT *
WHERE {
    ?sub ?pred ?obj .
}
code }

}
{ LIMIT clause

  Select the first 10 «records» only:
code {
SELECT *
WHERE {
    ?sub ?pred ?obj .
}
LIMIT 10
code }

}
{ Property path syntax

  → https://www.w3.org/TR/sparql11-query/#pp-language[Property path syntax]

  { Sequence path

code {
?subj x:P1/x:P2 ?obj .
code }

   equivalent(?) to

code {
?subj x:P1 ?tmp
?tmp  x:P2 ?obj
code }

  }
  { Zero or more

code {
?subj x:P1/x:P2* ?obj .
code }

   equivalent(?) to

code {
?subj x:P1 ?obj
code }
or
code {
?subj x:P1/xP2 ?obj
code }
or
code {
?subj x:P1/xP2/xP2 ?obj
code }
or
code {
?subj x:P1/xP2/xP2/xP2 ?obj
code }
  
  etc…

  }

}
{ Misc

code {
"2016-01-01"^^xsd:date
"18"^^xsd:integer
code }

}


{ JSON Result Format

code {
{
  "head":    { "vars": ["col_A", "col_B"] },
  "results": { "bindings": [
    { "col_A": { "type": "typed-literal", "value": "1910" } , "col_B": { "type": "typed-literal", "value": "2" }},
    { "col_A": { "type": "typed-literal", "value": "1950" } , "col_B": { "type": "typed-literal", "value": "2" }},
  }
}
code }

  Other keys that I've seen in the `head` object:
    • `link`

  Other keys that I've seen in the objects of the `bindings` array:
    • `datatype` (for example with the value `http://www.w3.org/2001/XMLSchema#integer`)
  

code {
{ 
  "head"   : {},
  "boolean": true
}
code }

  The → development/web/Multipurpose-Internet-Mail-Extensions[Internet Media Type / MIME] for SPARQL Query Results in JSON format is `application/sparql-results+json`.

}
{ Prefixes seen

code {
PREFIX dcterms:    <http://purl.org/dc/terms/>
PREFIX schema:     <http://schema.org/>
PREFIX rdfs:       <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX gn:         <http://www.geonames.org/ontology#>
PREFIX xsd:        <http://www.w3.org/2001/XMLSchema#>
PREFIX dbpediaowl: <http://dbpedia.org/ontology/>
PREFIX geosparql:  <http://www.opengis.net/ont/geosparql#>
PREFIX gtfs:       <http://vocab.gtfs.org/terms#>
PREFIX skos:       <http://www.w3.org/2004/02/skos/core#>
PREFIX wd:         <http://www.wikidata.org/entity/>
PREFIX wdt:        <http://www.wikidata.org/prop/direct/>
PREFIX wikibase:   <http://wikiba.se/ontology#>
PREFIX fn:         <http://www.w3.org/2005/xpath-functions#>
code }

  See also → https://www.wikidata.org/wiki/EntitySchema:E49[Wikidata prefixes (E49)]

}

sa:
  → development/databases/graph/neo4j

  → development/web/RDF

  → development/Apache/Jena/Fuseki[Apache Jena Fuseki] is a SPARQL server.
  -
  The query engine ARQ of → development/Apache/Jena.

  The → development/languages/R/packages/SPARQL[R package SPARQL]

links:
  → https://data.europa.eu/euodp/en/sparql[EU Open Data Portal]: access to the European Union open data.

  → https://www.oracle.com/technetwork/database/options/spatialandgraph/overview/rdfsemantic-more-2239071.html[Oracle]

  → http://www.wikidata.org/entity/P5305[Wikidata - P5305]: SPARQL endpoint
