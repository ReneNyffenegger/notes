
"
  Trying to use the → development/web/semantic[Semantic Web] without SPARQL is like trying to use a relational → development/databases[database] without → development/databases/SQL[SQL].
" [ Tim Berners-Lee ]

SPARQL (like → development/databases/SQL[SQL]) is a *declarative query language*. The language allows
to perform *data manipulation* and *data definition* operations on data that
is represented as a collection of → development/web/RDF[RDF] language sentences/statements.

SPARQL stands for *SPARQL Protocol and → development/web/RDF[RDF] Query Language*.

Apparently, SPARQL is used in → https://query.wikidata.org/[wikidata] (where queries can be formulated and executed).

A database is a set of *subject-predicate-object* triples.

Comments are introduced with the *hash symbol* (`#`).

{ Select everything

  The following query is the most generic SPARQL query: it returns all known subject-predicate-object triplets:
code {
SELECT *
WHERE {
    ?sub ?pred ?obj .
}
code }

}
{ Use predicates to search for specific nodes

  { Largest swiss city

code {
select
   ?largestSwissCity
{
   ?largestSwissCity   wdt:P31   wd:Q51929311 .
   ?largestSwissCity   wdt:P17   wd:Q39       .
}
code }

code {
select
   ?name
   ?largestSwissCity
{
   ?largestSwissCity   wdt:P31      wd:Q51929311 .
   ?largestSwissCity   wdt:P17      wd:Q39       .
   ?largestSwissCity   rdfs:label   ?name        . filter(lang(?name) = 'en')
}
code }

  }
  { Largest city of all countries

code {
select
   ?countryName
   ?cityName
   ?country
   ?largestCity
{
   ?largestCity   wdt:P31      wd:Q51929311 .
   ?largestCity   wdt:P17      ?country     .
   ?largestCity   rdfs:label   ?cityName    . filter(lang(?cityName   ) = 'en')
   ?country       rdfs:label   ?countryName . filter(lang(?countryName) = 'en')
}
order by
  ?countryName
code }

  }

}
{ LIMIT clause

  Select the first 10 «records» only:
code {
SELECT *
WHERE {
    ?sub ?pred ?obj .
}
LIMIT 10
code }

}
{ Property path syntax

  → https://www.w3.org/TR/sparql11-query/#pp-language[Property path syntax]

  { Sequence path

code {
?subj x:P1/x:P2 ?obj .
code }

   equivalent(?) to

code {
?subj x:P1 ?tmp
?tmp  x:P2 ?obj
code }

  }
  { Zero or more

code {
?subj x:P1/x:P2* ?obj .
code }

   equivalent(?) to

code {
?subj x:P1 ?obj
code }
or
code {
?subj x:P1/xP2 ?obj
code }
or
code {
?subj x:P1/xP2/xP2 ?obj
code }
or
code {
?subj x:P1/xP2/xP2/xP2 ?obj
code }
  
  etc…

  }

}
{ Shortcuts

  { Semicolon

code {
select
   ?xLabel
   ?x
{
   ?x   wdt:P361    wd:Q664063 . # "part of"            (P361) "Italy-Switzerland border" (Q664063)
   ?x   wdt:P31     wd:Q8502   . # "instance of"        (P31 ) "mountain"                 (Q8502  )
   ?x   wdt:P186    wd:Q47069  . # "made from material" (P186) "metamorphic rock"         (Q47069 )

   ?x   rdfs:label  ?xLabel    .    filter(lang(?xLabel) = 'en')
}
code  }
  → https://w.wiki/5nie[Run it]

   The semicolon uses the same subject for the next tripple-pattern as for the previous one, thus the variable `?x` needs not be repeated. The following
   query returns the same result as the previous one:
code {
select
   ?xLabel
   ?x
{
   ?x   wdt:P361    wd:Q664063 ; # "part of"            (P361) "Italy-Switzerland border" (Q664063)
        wdt:P31     wd:Q8502   ; # "instance of"        (P31 ) "mountain"                 (Q8502  )
        wdt:P186    wd:Q47069  . # "made from material" (P186) "metamorphic rock"         (Q47069 )

   ?x   rdfs:label  ?xLabel    .    filter(lang(?xLabel) = 'en')
}
code }
   → https://w.wiki/5nid[Run it]

  }
  { Comma

code {
select *
{
   ?x   wdt:P101   wd:Q189201  .
   ?x   wdt:P101   wd:Q1065742 .
   ?x   wdt:P101   wd:Q3328774 .

   ?x   rdfs:label ?xl . filter (lang(?xl) = 'de')
}
code }
  → https://w.wiki/5nib[Run it]

  The comma repeats the previous subject *and* predicate, the following query returns the same result as the previous one.
code {
select *
{
   ?x   wdt:P101   wd:Q189201  ,
                   wd:Q1065742 ,
                   wd:Q3328774 .

   ?x   rdfs:label ?xl . filter (lang(?xl) = 'de')
}
code }
    → https://w.wiki/5niZ[Run it]

  }

}
{ Variables

 *Variables* start with a question mark (`?`) or dollar symbol (`$`). `?var` refers to the same data as `$var` (→ https://w.wiki/5nb6[test on wikidata query service]):
code {
select
   $population
{
   wd:Q72  wdt:P1082  ?population
}
code }

}
{ FILTER

  { Location of FILTER in a group

    The location of a `filter` constraint in a *group graph pattern* does not change the output, the following three queries are equivalent and all return Swiss municipalities (wd:Q70208) whose
    population (P1082) is smaller than 50.

    
    → https://w.wiki/5nbY[Wikidata Query Service]:
code {
select
   ?municipality
   ?population
{
   ?municipality wdt:P31    wd:Q70208  .
   ?municipality wdt:P1082 ?population .
   filter(?population < 50)
}
code }

   → https://w.wiki/5nbZ[Wikidata Query Service]:
code {
select
   ?municipality
   ?population
{
   ?municipality wdt:P31    wd:Q70208  .
   filter(?population < 50)
   ?municipality wdt:P1082 ?population .
}
code }

  → https://w.wiki/5nba[Wikidata Query Service]:
code {
select
   ?municipality
   ?population
{
   filter(?population < 50)
   ?municipality wdt:P31    wd:Q70208  .
   ?municipality wdt:P1082 ?population .
}
code }

  }


}
{ Misc

  { Datatypes

code {
"2016-01-01"^^xsd:date
"18"^^xsd:integer
code }

  }

  { rdf:type | a

   `a` is a case-sensitive abbreviation for the predicate with the IRI → http://www.w3.org/1999/02/22-rdf-syntax-ns#type[`http://www.w3.org/1999/02/22-rdf-syntax-ns#type`].

  }
  { optional WHERE clauses

    The keyword `where` is optional.

  }
  { Four types of queries

    Four types of queries in SPARQL:
      • `select`
      • `ask`
      • `describe`
      • `construct`

    { ASK queries

    `ask` queries return either `true` or `false`.

    }

  }
  { Testing for inequality

    The inequality operator is `!=`, not `<>`. (`<>` is taken as an IRI?)
code {
filter (?abc != ?xyz)
code }

  }

}
{ JSON Result Format

code {
{
  "head":    { "vars": ["col_A", "col_B"] },
  "results": { "bindings": [
    { "col_A": { "type": "typed-literal", "value": "1910" } , "col_B": { "type": "typed-literal", "value": "2" }},
    { "col_A": { "type": "typed-literal", "value": "1950" } , "col_B": { "type": "typed-literal", "value": "2" }},
  }
}
code }

  Other keys that I've seen in the `head` object:
    • `link`

  Other keys that I've seen in the objects of the `bindings` array:
    • `datatype` (for example with the value `http://www.w3.org/2001/XMLSchema#integer`)
  

code {
{ 
  "head"   : {},
  "boolean": true
}
code }

  The → development/web/Multipurpose-Internet-Mail-Extensions[Internet Media Type / MIME] for SPARQL Query Results in JSON format is `application/sparql-results+json`.

}
{ Prefixes seen

code {
PREFIX dcterms:    <http://purl.org/dc/terms/>
PREFIX schema:     <http://schema.org/>
PREFIX rdfs:       <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX gn:         <http://www.geonames.org/ontology#>
PREFIX xsd:        <http://www.w3.org/2001/XMLSchema#>
PREFIX dbpediaowl: <http://dbpedia.org/ontology/>
PREFIX geosparql:  <http://www.opengis.net/ont/geosparql#>
PREFIX gtfs:       <http://vocab.gtfs.org/terms#>
PREFIX skos:       <http://www.w3.org/2004/02/skos/core#>
PREFIX wd:         <http://www.wikidata.org/entity/>
PREFIX wdt:        <http://www.wikidata.org/prop/direct/>
PREFIX wikibase:   <http://wikiba.se/ontology#>
PREFIX fn:         <http://www.w3.org/2005/xpath-functions#>
PREFIX gas:        <http://www.bigdata.com/rdf/gas#>
code }

  See also → https://www.wikidata.org/wiki/EntitySchema:E49[Wikidata prefixes (E49)]

}

sa:
  → development/databases/graph/neo4j

  → development/web/RDF

  → development/Apache/Jena/Fuseki[Apache Jena Fuseki] is a SPARQL server.
  -
  The query engine ARQ of → development/Apache/Jena.

  The → development/languages/R/packages/SPARQL[R package SPARQL]

  Querying the → development/Data/open/Wikidata SPARQL endpoint with → Windows/PowerShell/command-inventory/noun/restMethod/invoke#invoke-restMethod-wikidata[PowerShell's `invoke-restMethod` cmdlet].

links:
  → https://data.europa.eu/euodp/en/sparql[EU Open Data Portal]: access to the European Union open data.

  → https://www.oracle.com/technetwork/database/options/spatialandgraph/overview/rdfsemantic-more-2239071.html[Oracle]

  → http://www.wikidata.org/entity/P5305[Wikidata - P5305]: SPARQL endpoint
