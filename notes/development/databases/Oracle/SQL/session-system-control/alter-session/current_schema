$ Oracle: ALTER SESSION SET CURRENT_SCHEMA
@ alter session set current_schema


`user_one` creates a table ...
code {
connect user_one/passwordSecretGarden
create table tq84_table_user_one(txt varchar2(20));
code }

... and grants the table to `user_two`:
code {
grant  all on tq84_table_user_one to user_two; 
code }

The user inserts his username into the table:
code {
insert into tq84_table_user_one values(user);
commit;
code }

User two does an analog thing
code {
connect user_two/passwordGardenSecret
create table tq84_table_user_two(txt varchar2(20));
grant  all on tq84_table_user_two to user_one; 
insert into tq84_table_user_two values(user);
commit;
code }

If user two wants to select his own table, he does not need to prefix with his username:
code {
select * from tq84_table_user_two;
code }

However, if he wants to query user one's table, he must prefix it (unless a synonym exists):
code {
select * from user_one.tq84_table_user_one;
code }

If user two finds it tedious to always type user_one's schema, he might choose to set user_one as default schema:
code {
alter session set current_schema = user_one;
code }

The select statement now works perfectly:
code {
select * from tq84_table_user_one;
code }

Note: user_two is still `user_one`. It's not as though he would magically get some extra privileges.
The following statement returns `USER_ONE`, `USER_TWO`:
code {
select user, sys_context('userenv','current_schema') from dual;
code }

Also, if user_two queries USER_TABLES, he finds his tables:
code {
select * from user_tables where table_name like 'TQ84_TABLE_USER%';
code }

{ EXECUTE IMMEDIATE

  The → development/databases/Oracle/PL-SQL/execute-immediate[`execute immediate`] statement is not influenced by the «current schema», rather, it executes in the context of the connected user.

}
{ Determine the name of the current schema

  The name of the current schema can be determined with `→ development/databases/Oracle/SQL/functions/sys_context[sys_context]('userenv','current_schema')`.

  See also → development/databases/Oracle/installed/dynamic-performance-views/session/identify-own-session[identifiying the «own» session].

}
{ Transactions are not committed

 `alter session set current_schema = …` does not → development/databases/Oracle/SQL/TCL/commit the current → development/databases/Oracle/architecture/transaction[transaction].

}
sa:

  It's not possible to programmatically change `current_user`.

  Oracle recommends against using `alter session set current_schema` in within a PL/SQL unit with → development/databases/Oracle/PL-SQL/execute-immediate[`execute immediate`].

 `ALTER → development/databases/Oracle/SQL/statement/nouns/session[SESSION]`

  The → development/databases/Oracle/PL-SQL/authid[PL/SQL `authid` clause] allows to specify if table and view names are looked up in the context of a stored procedure's owner or executor.

  → development/databases/Oracle/SQL/statement/nouns/session#ora-alter-session-set[`alter session set …`]
