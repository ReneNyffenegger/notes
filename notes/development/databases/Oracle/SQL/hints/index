$ Oracle SQL Hints
@ hint

Most hints are used to influence the → development/databases/Oracle/optimizer[optimizer] and have no effect on the result of an SQL statement exuction.
-
There are three execptions, however, which *do* have an effect on the result of an SQL statement:
  • `change_dupkey_error_index`
  • `ignore_row_on_dupkey_index`
  • `retry_on_row_change`

The hints are formulated within → development/databases/SQL/statement/comment[comments] whose *first character* is a plus sign (`+`).
-
The comment must be inserted in an → development/databases/Oracle/SQL/statement[SQL statement] directly after the one of the keywords `select`, `update`, `insert`, `delete` or `merge`.
In all other places, a comment cannot be be recognized as a hint.

Multiple hints are separated by white space.

code {
select /*+ hint-1 hint-2 … */
  …
from
  …;
code }

A hint can have arguments:
code {
select /*+ hint(argument)                 */  …
select /*+ hint(argument-1 argument_2 … ) */  …
code }

When using *component queries* (for example when combined with `union`), both queries can have their own hint:
code {
select /*+ hint-1 */ …
  union
select /*+ hint-2 */ …
code }

All hints except `/*+ rule */` cause the → development/databases/Oracle/optimizer[(cost based) optimizer] to be used.

If mutliple hints are specified and a hint is not understood by Oracle (for example because of a typo), then Oracle will honor the hints on the left side of that hint and disregard the rest.

{ Four types of hints #ora-hint-4-types

  There are four types of hints:
  table { llll
    ☰ ~Operates on~ ☰ ~Examples~ ☰ ~Comment~
    Single-table ☰ *one* table or view ☰ `index(tab ix)` , `use_nl(…)` ☰
    Multi-table ☰ multiple table ☰ `leading(tab_a tab_b)` ☰
    Query-block ☰ single → development/databases/Oracle/SQL/statement/query-block[query blocks] ☰ `star_transformation(@sel$2)` , `unnest(@sel$2)` , `full(@sel$2 t1)` ☰ Compare with the column → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/qblock_name[`qblock_name`] in the → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`]
    Statement ☰ entire → development/databases/Oracle/SQL/statement[SQL statements] ☰ `all_rows` ☰
  table }

  Note that `use_nl(tab_a tab_b)` is shortcut for `use_nl(tab_a) use_nl(tab_b)` and therefore is not considered to be a multi-table hint.

  { Specifying table names in hints

    If a single or multi-table hint refers to a → development/databases/Oracle/objects/tables[table] that is → development/databases/Oracle/SQL/select/from/alias[aliased],
    the alias needs to be specified in the hint.
 
    Wrong:
code {
select /*+ index(scott.emp ix_emp) */ from scott.emp  e;
code }

    Better:
code {
select /*+ index(e) */ from scott.emp  e;
code }

    Schema names should be omitted.

  }

}
{ When hints might be used

  With an ideal optimizer, hints should not be used. However, it turns out that the optimizer sometimes creates a suboptimal plan in which case better performance can be achieved by hinting the SQL statement.
  
  Sometimes, the characteristics of the selected data changes rapidly so that the relevant → development/databases/Oracle/optimizer/statistics[statistics] are inaccurate which also might lead to a bad plan.

}
{ Jonathan Lewis' list of the Big Five Hints #ora-hint-jl-big-5

  Jonathan Lewis' list of the → https://jonathanlewis.wordpress.com/2015/12/03/five-hints[Big Five Hints] is:
    • `→ development/databases/Oracle/SQL/hints/list/merge`, `no_merge`
    • `push_pred`, `no_push_pred`
    • `unnest`, `→ development/databases/Oracle/SQL/hints/list/unnest/no`
    • `push_subq`, `no_push_subq`
    • `driving_site`

}

{ List of some hints

  table { ll
   ~Hint~ ☰ ~Comment~
   `and_equal` ☰ Choose an execution plan that uses an access path that merges the scans on several single-column indexes
   `antijoin` ☰
   `all_rows` ☰
   → development/databases/Oracle/SQL/hints/list/append[`append`], `noappend` ☰ `append`: If a table or an index is specified with `nologging`, this hint applied with an insert statement produces a *direct path* insert which reduces generation of → development/databases/Oracle/architecture/database/redo-data[redo].
   `append_values` ☰ Similar to `append`, but applies to `insert` statements with a `values` clause (as opposed to `insert` statements that get their data from subqueries).
   `cache`, `nocache` ☰ When performing a full table scan, this hint places → development/databases/Oracle/architecture/database/logical-structures/data-block[data blocks] at the most recently used end of the LRU list of the → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache[buffer cache]. Useful for (small) lookup tables.
   rem {
   `cardinality` ☰ Not documented. Apparently applied to a → development/databases/Oracle/SQL/statement/query-block rather than a table (or list of tables).
   rem }
   `cardinality` ☰ Not documented. For example `select /*+ cardinality(t, 1234) */ from tq84_tab t;`. This hint is superseded by `→ development/databases/Oracle/SQL/hints/list/opt/estimate`.
   `change_dupkey_error_index` ☰ One of the three hints with *semantic effect*. Compare with `ignore_row_on_dupkey_index`
   `cluster` ☰ Perform a → http://www.adp-gmbh.ch/ora/sql/join/join_methods.html#nested_loop[nested loop] by the → development/databases/Oracle/objects/clusters[cluster] index.
   `clustering`, `no_clustering` ☰
   `connect_by_filtering` ☰ Undocumented? → development/databases/Oracle/SQL/hints/find-in-shared-SQL-area[Found in the shared SQL area].
   `containers` ☰
   `→ development/databases/Oracle/SQL/hints/list/cursor_sharing_exact` ☰
   `dbms_stats` ☰ Undocumented? → development/databases/Oracle/SQL/hints/find-in-shared-SQL-area[Found in the shared SQL area].
   `driving_site` ☰ Specifies the «location» where a distributed query is executed. This hint is on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `dynamic_sampling` ☰ Control some behavior of → development/databases/Oracle/optimizer/statistics/dynamic[dynamic optimizer statistics] (Generally: `/*+ dynamic_sampling(0) */` or for a given table `/*+ dynamic_sampling(t 0) */`)
   → development/databases/Oracle/SQL/hints/list/parallel/enable-disable_dml[`enable_parallel_dml`], → development/databases/Oracle/SQL/hints/list/parallel/enable-disable_dml[`disable_parallel_dml`] ☰
   `expand_table`, `no_expand_table` ☰ See also the *expand table* → development/databases/Oracle/optimizer#ora-optimizer-qry-tran[query transformation]
   `fact`, `no_fact` ☰ Used in the context of *star tranformations* to indicate that the hinted table should (not) be considered a *fact table*.
   `first_rows` ☰ Compare with SQL Server's → development/databases/SQL-Server/sql/hints#mssql-query-hint[`FAST n` query hint]
   `fresh_mv` ☰
   `full` ☰ Access the data in a table with a *full table scan*, rather than using indexes (compare with the `rowid` and the various `index*` hints).
   `→ development/databases/Oracle/SQL/hints/list/gather/plan_statistics` ☰ Collect extra metrics during → development/databases/Oracle/SQL/statement/execution[SQL statement execution] and make them available in → development/databases/Oracle/installed/dynamic-performance-views/sql/plan[`v$sql_plan`] (?) and → development/databases/Oracle/installed/dynamic-performance-views/sql/plan/statistics[`v$sql_plan_statistics`]
   `gather_optimizer_statistics`, `no_gather_optimizer_statistics` ☰ `no_gather_optimizer_statistics` suppresses gathering statistics during *bulk loads* (such as `create table as select` statements). Such statistics can then later be gathered using `gather_optimizer_statistics` at statement level.
   `grouping` ☰
   `hash` ☰ → development/databases/Oracle/SQL/join[Join] two tables with a → development/databases/Oracle/SQL/join/hash[hash join], therefore not usable for inequality comparisons. Compare with `use_hash` and `use_nl`, `use_merge` etc.
   `hash_aj` ☰
   `hash_sj` ☰
   `ignore_row_on_dupkey_index` ☰ One of the three hints with *semantic effect*. Compare with `change_dupkey_error_index`
   `ignore_where_clause` ☰ Undocumented hint, found in *dynamic sampling* queries. Not sure what it does, but does not seem to actually ignore a where clause, at least not if used in a top level query.
   `index`, `no_index` ☰ Use (`/*+ index(t) */`) or don't use (`/*+ noindex(t) */`) an index on a table. Index name can additionaly be specified: `/*+ index(tab ix) */`. The index to be used can be described in terms of the columns: `/*+ index(tab tab(col_1, col_2…)) */`
   `index_asc` ☰
   `index_combine` ☰
   `index_desc` ☰
   `index_ffs`, `no_index_ffs` ☰
   `index_join` ☰
   `index_ss`, `no_index_ss` ☰
   `index_ss_asc` ☰
   `index_ss_desc` ☰
   `inline` ☰ Undocumented hitn. Compare with `materialize`
   `inmemory`, `no_inmemory` ☰
   `inmemory_pruning`, `no_inmemory_pruning` ☰
   `leading` ☰ Specify the order of tables when → development/databases/Oracle/SQL/join[joining] them. Compare with `ordered`.
   `materialize` ☰ Undocumented hint. Store the result of a query in a → development/databases/Oracle/SQL/clauses/with[`with` clause] in a → development/databases/Oracle/objects/tables/types/global-temporary[global temporary table]. Useful, if this result is referred to multiple times in the query. Compare with `cache` and `inline`. Apparently, an inline view is materialized when it uses `rownum`.
   `→ development/databases/Oracle/SQL/hints/list/merge`, `no_merge` ☰ Do or don't use *complex view merging*. These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `merge_aj` ☰
   `merge_sj` ☰
   `model_min_analysis` ☰
   `monitor`, `no_monitor` ☰ Do (or don't) → development/databases/Oracle/SQL/statement/execution/monitoring[monitor] SQL statement that take less (or more) than 5 seconds. See → development/databases/Oracle/installed/dynamic-performance-views/sql/monitor[`v$sql_monitor`] and → development/databases/Oracle/installed/dynamic-performance-views/sql/plan/monitor[`v$sql_plan_monitor`]. (Is there also a `no_monitoring` hint?)
   `no_monitoring` ☰ Undocumented? → development/databases/Oracle/SQL/hints/find-in-shared-SQL-area[Found in the shared SQL area].
   `native_full_outer_join`, `no_native_full_outer_join` ☰
   `nested_table_set_setid` ☰ Undocumented? → development/databases/Oracle/SQL/hints/find-in-shared-SQL-area[Found in the shared SQL area].
   `nl_aj` ☰
   `nl_sj` ☰
   `nlj_batching`, `→ development/databases/Oracle/SQL/hints/list/nlj/batching/no` ☰
   `nlj_prefetch`, `no_nlj_prefetch` ☰
   `no_expand` ☰
   `→ development/databases/Oracle/SQL/hints/list/no_query_transformation` ☰ Prevents the → development/databases/Oracle/optimizer from performing query transformation.
   `norewrite` ☰
   `no_substrb_pad` ☰ Using query keywords `ci_phrasematch` or `ci_startswith` result in errors
   `no_sql_tune` ☰ ?
   `no_xml_query_rewrite` ☰
   `no_xmlindex_rewrite` ☰
   `no_zonemap` ☰
   `opaque_transform` ☰ Not documented. Seems to be related to a serial execution at a remote site. See also *Doc ID 780503.1* and the column → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/other_tag[`other_tag`] of → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`]
   `optimizer_features_enable` ☰
   → development/databases/Oracle/SQL/hints/list/opt/estimate[`opt_estimate`] ☰ `opt_estimate` influences costing and cardinality estimates. This hint supersedes `cardinality`.
   `opt_param` ☰ Sets the value of a a limited set of → development/databases/Oracle/adminstration/init-parameters for the duration of the SQL statement. For example: `/*+ opt_param('_optimizer_adaptive_plans', 'false') */`
   `ordered` ☰ → development/databases/Oracle/SQL/join[Join] tables in the order in which they appear in the `from` clause. Compare with `leading` and → development/databases/SQL-Server/sql/hints#mssql-query-hint[SQL Server's query hint `force order`].
   → development/databases/Oracle/SQL/hints/list/parallel[`parallel`], `no_parallel` ☰
   `parallel_index`, `no_parallel_index` ☰
   `pq_concurrent_union`, `no_pq_concurrent_union` ☰ Enable/disable concurrent processing of `union` and `union all` statements.
   `→ development/databases/Oracle/SQL/hints/list/pq/distribute` ☰ Specifies the method with which rows are → development/databases/Oracle/SQL/statement/execution/parallel/distribution-methods[distributed among producer and consumer] query servers.
   `pq_filter` ☰ Specifies how rows are processed when filtering → development/databases/Oracle/SQL/select/subquery/correlated[correlated subqueries].
   `pq_skew`, `no_pq_skew` ☰
   → development/databases/Oracle/SQL/hints/list/push/pred[`push_pred`], `no_push_pred` ☰ Where to apply *join predicates* in combination with *non-merged view*. These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `push_subq`, `no_push_subq` ☰ `push_subq` instructs the optimizer to evaluate unmerged → development/databases/Oracle/SQL/select/subquery[subqueries] as early as possible. These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `px_join_filter`, `no_px_join_filter` ☰
   `→ development/databases/Oracle/SQL/hints/list/qb_name` ☰
   `relational` ☰ Undocumented? → development/databases/Oracle/SQL/hints/find-in-shared-SQL-area[Found in the shared SQL area].
   `→ development/databases/Oracle/SQL/hints/list/result_cache`, `no_result_cache` ☰ `/*+ result_cache */`, `/*+ result_cache(snapshot = 3600) */` (3600 seconds or one hour), `/*+ result_cache(shelflife = 3600) */`, `/*+ result_cache(syobj=true) */`
   `retry_on_row_change` ☰ One of the three hints with *semantic effect*.
   `rewrite`, `no_rewrite` ☰ Rewrite a query so that uses one (or more?) → development/databases/Oracle/objects/views/materialized[materialized views], if possible.
   `rowid` ☰ Access a row by its → development/databases/Oracle/SQL/data-types/rowid. Compare with `full` and the various `index*` hints.
   `rule` ☰ The only hint that cause the *rule based optimizer* (rather than the → development/databases/Oracle/optimizer[(cost based) optimizer] to be used).
   `star` ☰  Try to use a *star query plan*. A star plan has the largest table in the query last in the join order and joins it with a nested loops join on a concatenated index. The STAR hint applies when there are at least three tables, the large table's concatenated index has at least three columns, and there are no conflicting access or join method hints. The optimizer also considers different permutations of the small tables.
   `star_transformation`, `no_star_transformation` ☰
   `statement_queuing`, `no_statement_queuing` ☰ Influences if a statement is queued with *→ development/databases/Oracle/SQL/statement/execution/parallel[parallel] statement queuing*.
   `swap_join_inputs`, `no_swap_join_inputs` ☰
   `unnest`, `→ development/databases/Oracle/SQL/hints/list/unnest/no` ☰ Do or don't → development/databases/Oracle/optimizer/features/subquery/unnesting[unnest] → development/databases/Oracle/SQL/select/subquery[subqueries]. These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `use_band`, `no_use_band` ☰
   `use_concat` ☰
   `use_cube`, `no_use_cube` ☰
   `use_hash`, `no_use_hash` ☰ Compare with `/*+ hash */`
   `use_merge`, `no_use_merge` ☰
   `use_nl`, `no_use_nl` ☰
   `use_nl_with_index` ☰
   `use_weak_name_resl` ☰ Undocumented? → development/databases/Oracle/SQL/hints/find-in-shared-SQL-area[Found in the shared SQL area].
   `with_plsql` ☰ `with_plsql` is not an optimizer hint. See → development/databases/Oracle/errors/ORA-32034_unsupported-use-of_WITH-clause
   `xmlindex_sel_idx_tbl` ☰ Undocumented? → development/databases/Oracle/SQL/hints/find-in-shared-SQL-area[Found in the shared SQL area].
  table }

}
{ Global Hints

  { Not working for ANSI joins #ora-global-hint-ansi-join

    Oracle's documentation has the following → https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Comments.html#GUID-D316D545-89E2-4D54-977F-FC97815CD62E[note]:
    "  
       Specifying a global hint using the *tablespec* clause does not work for
       queries that use → development/databases/Oracle/SQL/join/ANSI[ANSI joins], because the optimizer generates additional
       views during parsing. Instead, specify @queryblock to indicate the query
       block to which the hint applies.
    "

  }

}


sa:

  An optimizer hint is not to be confused with → development/databases/Oracle/SQLcl#sqlcl-sqldev-select-hints[SQLcl and SQL Developer select hints].

  → development/databases/Oracle/installed/dynamic-performance-views/sql/hint[`v$sql_hint`], which can be
  → development/databases/Oracle/installed/dynamic-performance-views/sql/hint/join-feature-hierarchy[joined to `v$sql_feature_hierarchy`] to
  display each hint with an «SQL feature hierarchy» (See → development/databases/Oracle/installed/dynamic-performance-views/sql/feature/hierarchy[`v$sql_feature_hierarchy`]).

  The `→ development/databases/Oracle/SQL/hints/list/qb_name` hint specifies the value with which the column → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/qblock_name[`qblock_name`] in the
  → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`] is filled.

  If the → development/databases/Oracle/adminstration/init-parameters[init parameters] `optimizer_ignore_hints` or `optimizer_ignore_parallel_hints` are set to `true`,
  (→ development/databases/Oracle/optimizer related? and) parallel execution related) hints will be ignored.

  Erroneous hints are recorded in the column → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/other_xml[`other_xml`] of the
  → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[plan table] after executing → development/databases/Oracle/SQL/statement/verbs/explain[`explain plan`] on a an → development/databases/Oracle/SQL/statement.
