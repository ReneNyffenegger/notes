$ Oracle SQL hints

A hint is used to influence the → development/databases/Oracle/optimizer[optimizer].

Such a hint is placed in an → development/databases/Oracle/SQL/statement[SQL statement] directly after the first keyword within an SQL comment whose first character is a plus.
The comment may contain multiple hints that are separated by white space.

code {
select /*+ hint-1 hint-2 … */
  …
from
  …;
code }

When using *component queries* (for example when combined with `union`), both queries can have their own hint:
code {
select /*+ hint-1 */ …
  union
select /*+ hint-2 */ …
code }

If mutliple hints are specified and a hint is not understood by Oracle (for example because of a typo), then Oracle will honor the hints on the left side of that hint and disregard the rest.

{ Four types of hints #ora-hint-4-types

  There are four types of hints:
  table { llll
    ☰ ~Operates on~ ☰ - ~Examples~ ☰ ~Comment~
    Single-table ☰ *one* table or view ☰ `index(tab ix)` , `use_nl(…)` ☰
    Multi-table ☰ multiple table ☰ `leading(tab_a tab_b)` ☰
    Query-block ☰ single → development/databases/Oracle/SQL/statement/query-block[query blocks] ☰ `star_transformation(@sel$2)` , `unnest(@sel$2)` , `full(@sel$2 t1)` ☰ Compare with the column → development/databases/Oracle/SQL/statement/verbs/explain/plan_table#plan_table-qblock_name[`qblock_name`] in the → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`]
    Statement ☰ entire → development/databases/Oracle/SQL/statement[SQL statements] ☰ `all_rows` ☰
  table }

  Note that `use_nl(tab_a tab_b)` is shortcut for `use_nl(tab_a) use_nl(tab_b)` and therefore is not considered to be a multi-table hint.

}
{ List of common hints

  table { ll
   ~Hint~ ☰ ~Comment~
   `all_rows` ☰
   `append`, `noappend` ☰
   `append_values` ☰
   `cache`, `nocache` ☰ When performing a full table scan, this hint places → development/databases/Oracle/architecture/database/logical-structures/data-block[data blocks] at the most recently used end of the LURU list of the → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache[buffer cache]. Useful for (small) lookup tables.
   `cardinality` ☰ Not documented. Apparently applied to a → development/databases/Oracle/SQL/statement/query-block rather than a table (or list of tables).
   `change_dupkey_error_index` ☰
   `cluster` ☰
   `clustering`, `no_clustering` ☰
   `containers` ☰
   `cursor_sharing_exact` ☰
   `disable_parallel_dml` ☰
   `driving_site` ☰ Specifies the «location» where a distributed query is executed. This hint is on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `dynamic_sampling` ☰
   `enable_parallel_dml` ☰
   `fact`, `no_fact` ☰
   `first_rows` ☰
   `fresh_mv` ☰
   `full` ☰
   `gather_plan_statistics` ☰ Collect extra metrics during → development/databases/Oracle/SQL/statement/execution[SQL statement execution] and make them available in → development/databases/Oracle/installed/dynamic-performance-views/sql/plan[`v$sql_plan`]
   `gather_optimizer_statistics`, `no_gather_optimizer_statistics` ☰ `no_gather_optimizer_statistics` suppresses gathering statistics during *bulk loads* (such as `create table as select` statements). Such statistics can then later be gathered using `gather_optimizer_statistics` at statement level.
   `grouping` ☰
   `hash` ☰
   `ignore_row_on_dupkey_index` ☰
   `inline` ☰ Undocumented hint.
   `index`, `no_index` ☰
   `index_asc` ☰
   `index_combine` ☰
   `index_desc` ☰
   `index_ffs`, `no_index_ffs` ☰
   `index_join` ☰
   `index_ss`, `no_index_ss` ☰
   `index_ss_asc` ☰
   `index_ss_desc` ☰
   `inline` ☰ Compare with `materialize`
   `inmemory`, `no_inmemory` ☰
   `inmemory_pruning`, `no_inmemory_pruning` ☰
   `leading` ☰ Specify the order of tables when joining them. Compare with `ordered`.
   `materialize` ☰ Undocumented hint. Store the result of a query in a → development/databases/Oracle/SQL/clauses/with[`with` clause] in a → development/databases/Oracle/objects/tables/types/global-temporary[global temporary table]. Useful, if this result is referred to multiple times in the query. Compare with `cache` and `inline`. Apparently, an inline view is materialized when it uses `rownum`.
   `merge`, `no_merge` ☰ Do or don't use *complex view merging*. These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `model_min_analysis` ☰
   `monitor`, `no_monitor` ☰ Do (or don't) monitor SQL statement that take less (or more) than 5 seconds.
   `native_full_outer_join`, `no_native_full_outer_join` ☰
   `no_expand` ☰
   `noparallel` ☰
   `noparallel_index` ☰
   `no_query_transformation` ☰
   `norewrite` ☰
   `no_xml_query_rewrite` ☰
   `no_xmlindex_rewrite` ☰
   `no_zonemap` ☰
   `optimizer_features_enable` ☰
   `opt_param` ☰ Sets the value of a a limited set of → development/databases/Oracle/adminstration/init-parameters for the duration of the SQL statement. For example: `/*+ opt_param('_optimizer_adaptive_plans', 'false') */`
   `ordered` ☰ Join tables in the order in which they appear in the `from` clause. Compare with `leading`
   `parallel`, `no_parallel` ☰
   `parallel_index`, `no_parallel_index` ☰
   `pq_concurrent_union`, `no_pq_concurrent_union` ☰
   `pq_distribute` ☰
   `pq_filter` ☰
   `pq_skew`, `no_pq_skew` ☰
   `push_pred`, `no_push_pred` ☰ Where to apply *join predicates* in combination with *non-merged vieww*. These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `push_subq`, `no_push_subq` ☰ These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `px_join_filter`, `no_px_join_filter` ☰
   `qb_name` ☰
   `result_cache`, `no_result_cache` ☰
   `retry_on_row_change` ☰
   `rewrite`, `no_rewrite` ☰ Rewrite a query so that uses one (or more?) → development/databases/Oracle/objects/views/materialized[materialized views], if possible.
   `rule` ☰
   `star_transformation`, `no_star_transformation` ☰
   `statement_queuing`, `no_statement_queuing` ☰
   `unnest`, `no_unnest` ☰ Do or don't unnest → development/databases/Oracle/SQL/select/subquery[subqueries]. These hints are on → #ora-hint-jl-big-5[Jonathan Lewis' list of the Big Five Hints]
   `use_band`, `no_use_band` ☰
   `use_concat` ☰
   `use_cube`, `no_use_cube` ☰
   `use_hash`, `no_use_hash` ☰
   `use_merge`, `no_use_merge` ☰
   `use_nl`, `no_use_nl` ☰
   `use_nl_with_index` ☰
  table }

}
{ Jonathan Lewis' list of the Big Five Hints #ora-hint-jl-big-5

  Jonahtan Lewis' list of the → https://jonathanlewis.wordpress.com/2015/12/03/five-hints[Big Five Hints] is:
    • `merge`, `no_merge`
    • `push_pred`, `no_push_pred`
    • `unnest`, `no_unnest`
    • `push_subq`, `no_push_subq`
    • `driving_site`

}

{ TODO

  Oracle's documentation has the following → https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Comments.html#GUID-D316D545-89E2-4D54-977F-FC97815CD62E[note]:
  "  
     Specifying a global hint using the *tablespec* clause does not work for
     queries that use ANSI joins, because the optimizer generates additional
     views during parsing. Instead, specify @queryblock to indicate the query
     block to which the hint applies.
  "

}


sa:

  An optimizer hint is not to be confused with → development/databases/Oracle/SQLcl#sqlcl-sqldev-select-hints[SQLcl and SQL Developer select hints].

  → development/databases/Oracle/installed/dynamic-performance-views/sql/hint[`v$sql_hint`], which can be
  → development/databases/Oracle/installed/dynamic-performance-views/sql/hint/join-feature-hierarchy[joined to `v$sql_feature_hierarchy`] to
  display each hint with an «SQL feature hierarchy» (See → development/databases/Oracle/installed/dynamic-performance-views/sql/feature/hierarchy[`v$sql_feature_hierarchy`]).

  The `qbname` hint specifies the → development/databases/Oracle/SQL/statement/verbs/explain/plan_table#plan_table-qblock_name[`qblock_name`] in the
  → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`].
