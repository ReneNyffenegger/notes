$ Oracle SQL SELECT: GROUP BY clause
@ group by



{ GROUP BY extensions

  So-called *group by extensions* are
    • `rollup`
    • `cube` (produces *cross-tabulation* values)

  Group by extensions produce *superaggregate groupings* (or superaggregate rows) in addition to ordinary group aggregates (or regular rows).

  → development/databases/Oracle/SQL/select[`SELECT` statement] that contain group by extensions allow to use functions like
    • `grouping` (?)
    • `grouping_id`
    • ?

}

sa:

  → development/databases/Oracle/SQL/select/aggregate[Aggregate functions]

  With the → development/databases/Oracle/SQL/select/aggregate/having[`having`] clause, rules can be formulated that specify which (aggregated) rows are returned.

  The → development/databases/Oracle/SQL/statement/execution/plan/operations[execution plan operations]
    • → development/databases/Oracle/SQL/statement/execution/plan/operations/hash/group-by[`HASH GROUP BY`]
    • → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/aggregate[`SORT AGGREGATE`]

  Oracle does not allow to → development/databases/Oracle/SQL/data-types/lob#ora-lob-group-by[group by LOB columnns].

  The → development/databases/SQL/select/group-by[SQL `group by` clause].

  The *SQL work area* in the → development/databases/Oracle/architecture/instance/PGA.

  The → development/databases/Oracle/SQL/select/pivot[`pivot` clause] in an → development/databases/Oracle/SQL/select[`select` statement].

  The behavior of `group by` is influenced by the value of → development/databases/Oracle/adminstration/init-parameters/nls#ora-nls_sort[`nls_sort`].

  The → development/databases/Oracle/errors/00933_SQL-command-not-properly-ended error message.

  → development/databases/Oracle/Releases-and-versions/21c#ora-21c-group-by[`GROUP BY` extensions] introduced with 21c.

