$ Oracle SQL: SELECT with PIVOT clause

code {
pivot [xml] ( → development/databases/Oracle/SQL/select/aggregate[aggregate-function](expr), … ) for (column…) in (…)
code }

{ Selected columns and implicit group by

  The pivot clause does not require an explicit → development/databases/Oracle/SQL/select/group-by[`group by` clause] to aggregate the values of the expressions in the specified
  → development/databases/Oracle/SQL/select/aggregate[aggregate-functions]. Rather, the pivot clause implicitly groups on all → development/databases/Oracle/objects/tables/columns[columns]
  that are not explicitly mentioned in the pivot clause.

  The following table and select statements try to elaborate on that.

code {
→ development/databases/Oracle/SQL/statement/nouns/table/create tq84_pivot_test (
   id      number,
   col_1   varchar2(5),
   col_2   varchar2(5),
   col_3   varchar2(5),
   val_1   number,
   val_2   varchar2(5)
);

→ development/databases/Oracle/PL-SQL/block[begin]
   insert into tq84_pivot_test values (1, 'A', 'X', 'p', 8, 'one'  );
   insert into tq84_pivot_test values (2, 'A', 'X', 'p', 9, 'two'  );
   insert into tq84_pivot_test values (3, 'A', 'X', 'q', 2, 'three');  
   insert into tq84_pivot_test values (4, 'B', 'X', 'p', 7, 'four' );
   insert into tq84_pivot_test values (5, 'B', 'X', 'q', 5, 'five' );
   insert into tq84_pivot_test values (6, 'B', 'Y', 'r', 4, 'six'  );
   insert into tq84_pivot_test values (7, 'B', 'Y', 'q', 3, 'seven');
   insert into tq84_pivot_test values (8, 'C', 'Z', 'q', 6, 'eight');
   insert into tq84_pivot_test values (7, 'A', 'Y', 'q', 1, 'seven');
   → development/databases/Oracle/SQL/TCL/commit;
end;
/
code }

  In the following query, the `pivot` clause refers to the → development/databases/Oracle/objects/tables/columns[columns] `val_1` and `col_1`. These columns don't appear in the result set as ordinary columns, rather
  the `in` clause specifies the names of the additional columns, the aggregate function the column that is aggregated:
The 
code {
→ development/databases/Oracle/SQL/select/
   *
from
   tq84_pivot_test
   pivot (
      max(val_1) for
      col_1 in ('A', 'B')
   )
;
--
--         ID COL_2 COL_3 VAL_2        'A'        'B'
-- ---------- ----- ----- ----- ---------- ----------
--          1 X     p     one            8           
--          2 X     p     two            9           
--          3 X     q     three          2           
--          4 X     p     four                      7
--          5 X     q     five                      5
--          6 Y     r     six                       4
--          7 Y     q     seven          1          3
--          8 Z     q     eight                      
code }


The previous select statement is a bit meaningless because it groups on all available columns. Therefore, in most cases, it is advisable to select the columns which are grouped by in a → development/databases/Oracle/SQL/select/subquery:
code {
select
   *
from (
--
-- This → development/databases/Oracle/SQL/select/subquery explicitely selects the values
-- we want to have in the result. I. e.: the values for the columns ID and
-- VAL_2 are explicitely excluded:
--
   select
      col_1, col_2, col_3,
      val_1
   from
      tq84_pivot_test
)
pivot ( max(val_1) for col_1 in ('A', 'B'))
;
--
-- COL_2 COL_3        'A'        'B'
-- ----- ----- ---------- ----------
-- X     p              9          7
-- X     q              2          5
-- Y     r                         4
-- Y     q              1          3
-- Z     q                          
code }

  Finally, it is also possible to specify combination of «column values» for the additional columns.
  -
  By default, they have a rather ugly name with apostrophes in them. They can, however, be given more beautiful or meaningful names using the `as …` clause:
code {
select
   *
from (
   select
      col_1, col_2, col_3,
      val_1
   from
      tq84_pivot_test
)
pivot (
   max(val_1) for
     (col_1, col_2) in (
       ('A', 'X') as ax, -- Make column name more pleasing
       ('B', 'Y'),
       ('C', 'Z')
    )
);
--
-- COL_3         AX    'B'_'Y'    'C'_'Z'
-- ----- ---------- ---------- ----------
-- p              9                      
-- q              2          3          6
-- r                         4        
code }

  Cleaning up:
code {
→ development/databases/Oracle/SQL/statement/nouns/table/drop tq84_pivot_test;
code }


}
{ Other examples

  { Sum of sale per month and item

    A table that stores the date (`dt`) when an item (identified by `txt`) was sold. The price is kept in `value`:
code {
create table tq84_sale (
   dt          date,
   txt         varchar2(10),
   value       number(5,2)
);
code }

  Fill some test data:
code {
begin
                                                                 --     M o n t h      
                                                                 --                    
                                                                 --   07   08   09     
                                                                 -- ---------------    

insert into tq84_sale values (date '2000-08-10',  'Item 1', 10); --        10      
insert into tq84_sale values (date '2000-09-12',  'Item 1', 12); --             12
insert into tq84_sale values (date '2000-09-15',  'Item 1', 14); --             14
insert into tq84_sale values (date '2000-09-16',  'Item 1',  2); --              2
                                                                 --   --   --   --     
--                                            Sums for Item 1    --        10   28     
                                                                 --   ==   ==   ==     


insert into tq84_sale values (date '2000-07-02',  'Item 2', 11); --   11             
insert into tq84_sale values (date '2000-07-05',  'Item 2',  7); --    7
insert into tq84_sale values (date '2000-08-22',  'Item 2',  8); --         8
--                                                                    --   --   -- 
--                                             Sums for Item 2  :     18    8
--                                                                    ==   ==   == 

insert into tq84_sale values (date '2000-08-22',  'Item 3',  6); --         6        
--                                                                    --   --   --
--                                             Sums for Item 2  :           6
--                                                                    ==   ==   ==
end;
/
code }

  Query the data for three select months:
code {
→ development/databases/Oracle/SQL/clauses/with[with] translate_dt_to_month as (
   select
      to_char(dt, 'MM') month,
      txt,
      value
   from
      tq84_sale
)
select
   *
from
  translate_dt_to_month
  pivot (
     sum(value) for
     month in ('07' jul, '08' aug, '09' sep)
  )
order by
   txt;
--
-- TXT               JUL        AUG        SEP
-- ---------- ---------- ---------- ----------
-- Item 1                        10         28
-- Item 2             18          8           
-- Item 3                         6       
code }
  
  Cleaning up:
code {
drop table tq84_sale
code }

  }
  { Summing two values

    This example is similar to the previous one, but sums two values per period and item:
    gh|Oracle-Patterns|/SQL/select/pivot/test_02.sql||

  }
  { «Better» aliases for generated pivot columns.

    gh|Oracle-Patterns|/SQL/select/pivot/test_03.sql||

  }
  { Two aggregates

    gh|Oracle-Patterns|/SQL/select/pivot/two_aggregates.sql||

  }
}

sa:

  The → development/databases/Oracle/SQL/select/pivot/un[`unpivot` clause].

  The → development/databases/Oracle/SQL/statement/execution/plan/operations/hash/group-by/pivot[`HASH (GROUP BY PIVOT)`] plan operator.

  → development/databases/DuckDB#duckdb-pivot[DuckDB's implemenation of `PIVOT`] determines the number of returned columns dynamically at execution time.
