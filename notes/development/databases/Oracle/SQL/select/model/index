$ Oracle SQL: MODEL clause
@ model

{ Test data

  gh|Oracle-patterns|/SQL/select/model/intro/test-data.sql||

}
{ Minimal select statement with model clause

  In order to use the model clause, the columns of a select statement must be assigned to *dimensions*, *measures* and, optionally, to *partitions*.

  The columns that are assigned to *dimensions* will be used to identify the rows where values of the columns assigned to *measures* can be updated.
  -
  Because these columns are used to *uniquely* identify records in the modelled values, their values must be unique. If not, Oracle throws a
  → development/databases/Oracle/errors/ORA-32638_Non-unique-addressing-in-MODEL-dimension error.
  -
  If *partitions* are used, the rules formulated in an → development/databases/Oracle/SQL/statement with a *model clause* will act independently from each other on each partition.

  The following select statement does not bother to use the partition clause and assigns one dimension only: `row_`.

  Because no rules are defined, the values from the select statement won't be modified:
  gh|Oracle-patterns|/SQL/select/model/intro/minimal.sql||

}
{ Update a column

  Update all values in `col_3` (that is where `row_` has `any` value):
  gh|Oracle-patterns|/SQL/select/model/intro/update-col-3.sql||

}
{ Add a condition

  Update only values where `row_ > 3`:
  gh|Oracle-patterns|/SQL/select/model/intro/condition.sql||

}
{ Add a record to the result set

  Referencing a combination of dimension-values that does not yet exist creates this dimension.
  
  There is no record with `row_ = 7` in the test data, therefore, such a row will be created:
  gh|Oracle-patterns|/SQL/select/model/intro/add-record.sql||

}
{ Use dimension value

 `CV(dimension-column)` evaluates to the value of the current dimension of `dimension-column`
  gh|Oracle-patterns|/SQL/select/model/intro/use-dimension-value.sql||

}
{ Update value with value from «previous» record

  Update `col_3` with value from «previous» `col_2`:
  gh|Oracle-patterns|/SQL/select/model/intro/update-with-previous.sql||

}
{ Error messages

  { ORA-32611: incorrect use of MODEL CV operator

    gh|Oracle-patterns|/SQL/select/model/intro/err-32611.sql||

  }
  { ORA-32613: not a MODEL cell

    gh|Oracle-patterns|/SQL/select/model/intro/err-32613.sql||

  }
  { ORA-32622: illegal multi-cell reference

    gh|Oracle-patterns|/SQL/select/model/intro/err-32622.sql||

  }
  { ORA-00984: column not allowed here #ora-model-00984

    The following select statement causes an → development/databases/Oracle/errors/ORA-00984_column-not-allowed-here error:
    gh|Oracle-patterns|/SQL/select/model/intro/err-00984.sql||

  }

}
{ Misc

  { Model functions

    Model functions can only be used in the *model clause*. They include
    table { ll
      `cv` ☰ `cv` can only be used on the right-hand side of a model rule. The function returns the current value of a dimension column or partitioning column (carried from the left-hand side). If used outside of a cell reference, an argument (`dimension_column`) is required.
      `iteration_number` ☰ Can only be used if `iterate(num)` is used. The function returns the number of completed iterations through the model rules (`0` during the first iteration).
      `presentnnv` ☰ Can only be used on the right-nand side of a model rule. Compare with `nvl2`
      `presentv` ☰ Can only be used on the right-nand side of a model rule.
      `previous` ☰ Can only be used in the `iterate … [until]` clause of the model rules clause (see also the → development/databases/Oracle/errors/ORA-32618_incorrect-use-of-MODEL-PREVIOUS-function message).
    table }

  }
  { ITERATE

    The `iterate` clause executes the rules a number of times. The value of `iteration_number` starts with 0 and increases by 1 in each iteration.

code {
select
   id,
   num
from
   dual 
model
   dimension by (0 as id )
   measures     (0 as num)
  rules
   iterate (100)
   (
      num[iteration_number] = iteration_number * iteration_number
   );
--
--         ID        NUM
-- ---------- ----------
--          0          0
--          1          1
--          2          4
--    …
--         98       9604
--         99       9801
-- 
-- 100 rows selected. 
code }

  }

}

sa:

  → development/databases/Oracle/SQL/select/model/measures/add-column[Adding a column] with `measures(…)`.

  The → development/databases/Oracle/SQL/select/model/reference[`reference` clause].

  Examples:
    • → development/databases/Oracle/SQL/select/model/examples/forecast[Forecasting values]
    • → development/databases/Oracle/SQL/select/model/examples/date-generator[Date series generator]
    • → development/databases/Oracle/SQL/select/model/examples/approximate-pi[Aproximate π] using the Leibnitz formula

  → development/databases/SQL/operation-order[In the order of `select` operations], the *model clause* is applied between → development/databases/Oracle/SQL/select/set-operators[set operators]
  (`→ development/databases/Oracle/SQL/select/set-operators/union` etc.) and `→ development/databases/SQL/select/order-by`.

  Using the model clause in a → development/databases/Oracle/objects/views prevents the view from being → development/databases/Oracle/objects/views#ora-updatable-view[updatable].

  Error messages:
    • → development/databases/Oracle/errors/ORA-00957_duplicate-column-name#ora-00957-model[ORA-00957: duplicate column name]
    • → development/databases/Oracle/errors/ORA-32617_missing-MEASURES-keyword-in-MODEL-clause
    • → development/databases/Oracle/errors/ORA-32630_multiple-assignment-in-automatic-order-MODEL
