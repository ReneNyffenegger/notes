$ Oracle: Analytic functions

{ SUM and ORDER BY clause / Producing cumulative sum

 `sum(…) over (order by …)` is equivalent to `sum() over (order by … range between unbounded preceding and current row)`. A bit surprising to me, this default does not pruduce a cumulative
  sum. In order to produce such a sum, the clause `order by … rows between unbounded preceding and current row` must be used, as demonstrated in the following example:

code {
alter session set nls_date_format = 'yyyy-mm-dd';

create table tq84_accum_sum (
    dt     date,
    val    number(4,2)
);
 
begin
   insert into tq84_accum_sum values (date '2023-01-06', 4.03);
   insert into tq84_accum_sum values (date '2023-01-09', 2.12);
   insert into tq84_accum_sum values (date '2023-01-09', 1.07);
   insert into tq84_accum_sum values (date '2023-01-12', 2.85);
 
   commit;
end;
/
 
select
   dt,
   val,
   sum(val) over(order by dt                                                  ) accum_sum_1,
   sum(val) over(order by dt range between unbounded preceding and current row) accum_sum_2,
   sum(val) over(order by dt rows  between unbounded preceding and current row) accum_sum_3
from
   tq84_accum_sum;
--
-- DT                VAL ACCUM_SUM_1 ACCUM_SUM_2 ACCUM_SUM_3
-- ---------- ---------- ----------- ----------- -----------
-- 2023-01-06       4.03        4.03        4.03        4.03
-- 2023-01-09       2.12        7.22        7.22        6.15
-- 2023-01-09       1.07        7.22        7.22        7.22
-- 2023-01-12       2.85       10.07       10.07       10.07


drop   table tq84_accum_sum;
code }

}




sa:

  The → development/databases/Oracle/SQL/statement/execution/plan/operations/window/sort[`WINDOW (SORT)` SQL plan operation] is used
  if the `OVER()` clause contains either an `order by` or `partition by` clause. Otherwise, the
  → development/databases/Oracle/SQL/statement/execution/plan/operations/window/buffer[SQL plan operation `WINDOW (BUFFER)`] is used.

  A → development/databases/Oracle/SQL/statement/nouns/table/create/as-select[`create table … as …`] that involves a → development/databases/Oracle/architecture/database/link and
  → development/databases/Oracle/SQL/data-types/lob[CLOBs or BLOBs] and analytic functions sometimes(?) throws a
  → development/databases/Oracle/errors/ORA-22992_cannot-use-LOB-locators-selected-from-remote-tables#ora-22992-ctas[ORA-22992: cannot use LOB locators selected from remote tables].

  In order for a → development/databases/Oracle/objects/views/materialized[materialized view] to be fast refreshable, the query must not have references
  analytic functions in the `select` clause.

  → development/databases/SQL/select/analytic

  → development/databases/Oracle/Releases-and-versions/21c#ora-21c-analytic[Improvements in 21c]

  The → development/databases/Oracle/errors[error] messages
    • → development/databases/Oracle/errors/ORA-30483_window-functions-not-allowed-here
    • → development/databases/Oracle/errors/ORA-30485_missing-ORDER-BY-expression-in-the-window-specification

  An SQL statement with analytic functions has an → development/databases/Oracle/SQL/statement/execution/plan[execution plan] with a
  → development/databases/Oracle/SQL/statement/execution/plan/operations/window[`window`] operation.

  Using analytic functions in a → development/databases/Oracle/objects/views prevents the view from being → development/databases/Oracle/objects/views#ora-updatable-view[updatable].

  The analytic and → development/databases/Oracle/SQL/select/aggregate `→ development/databases/Oracle/SQL/select/aggregate/checksum` can be used to detect data changes in a table.
  Compare with `→ development/databases/Oracle/installed/packages/dbms/comparison`.
