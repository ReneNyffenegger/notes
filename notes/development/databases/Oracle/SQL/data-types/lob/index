$ Oracle data types BLOB, CLOB and NCLOB
@ clob and blobs

Clobs and blobs (commonly referred to as LOBs) are a set of → development/databases/Oracle/SQL/data-types[data types] that are designed to hold large amounts of data

The → development/databases/SQL-Server equivalent for clob is `text` and `image` for blobs.

{ LOB locator #ora-lob-locator

  A *LOB locator* is a (opaque?) data structure that allows to access the data of a LOB.

  In a database table, the LOB locator is stored with the table rows but the actual LOB data might be stored in a separate storage (usually in a separate
  → development/databases/Oracle/architecture/database/logical-structures/tablespace).

  An empty LOB locator is returned by → development/databases/Oracle/SQL/functions/lob#ora-func-empty_xlob[`empty_blob()` and `empty_clob()`] or
  → development/databases/Oracle/installed/packages/dbms/lob#dbms_lob-createTemporary[`dbms_lob.createTemporary`].

  LOB locators can be manipulated with the → development/databases/Oracle/installed/packages/dbms/lob[`dbms_lob`] package.

}
{ ORA-06502: PL/SQL: numeric or value error: character string buffer too small #lob-ora-06502

  When concatenting strings (→ development/databases/Oracle/SQL/data-types/varchar2[`varchar2`]) and the resulting length becomes larger than 64 KB,
  → development/databases/Oracle/PL-SQL throws an *ORA-06502: PL/SQL: numeric or value error: character string buffer too small* error message.

  This error can be prevented when (at least) the first element in such a concatenation is a clob. In the following example, this is achieved using the
 `to_clob(…)` function:
  gh|oracle-patterns|/SQL/datatypes/lob/ORA-06502.sql||

}
{ JDBC #ora-lob-jdbc

  With JDBC 4.0, LOBs should be manipulated with the following interfaces and implementations: (which provide random access to the data)
  table { ll
    ~Interface~ ☰ ~Implementation~
    `java.sql.Blob` ☰ `oracle.sql.Blob`
    `java.sql.Clob` ☰ `oracle.sql.clob`
    `java.sql.NClob` ☰ `oracle.sql.NClob` (In `ojdbc6.jar`)
  table }

  See also → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/jdbc/lib[`$ORACLE_HOME/jdbc/lib`]

}
{ Insert and select BLOC/CLOB examples

  → development/databases/Oracle/tools/sql-loader example: → development/databases/Oracle/tools/sql-loader/binary-data[load binary data (blob)]

  The → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Types/OracleBlob[`Oracle.DataAccess.Types.OracleBlob`] (with an example that demonstrates how
  a blob can be written to a file).

  → development/languages/Java/classes/java/sql#java-sql-insert-clob-oracle[This Java/JDBC example] inserts the content of (text-)files into
  CLOBs.

  → development/databases/Oracle/SQLcl/script/lob[This SQLcl example] puts an image (png) into a BLOB and then gets it again and stores it locally.
}

sa:

  → development/databases/Oracle/SQL/functions/lob[SQL functions that are related to LOBs]

  → development/databases/Oracle/SQL/data-types

  → development/databases/Oracle/installed/packages/dbms/lobutil[`dbms_lobutil`] contains diagnostic and utility functions for 11g LOBs.
