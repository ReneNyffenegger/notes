$ Oracle data types BLOB, CLOB and NCLOB
@ clob and blobs

Clobs and blobs (commonly referred to as LOBs) are a set of → development/databases/Oracle/SQL/data-types[data types] that are designed to hold large amounts of data.

`CLOB` stands for *character lob*, `BLOB` for *binary lob*, LOB stands for *large object*.
-
A `BLOB` (as also → development/databases/Oracle/SQL/data-types/raw[`raw` and `long raw`]) stores a sequence of bytes that is independent from an
→ development/Unicode/character-encoding[encoding]. a `clob` also stores a sequence of bytes, but unlike in a `blob`, this sequence is interpreted within an encoding.

The → development/databases/SQL-Server equivalent for clob is `text` and `image` for blobs.

{ LOB locator #ora-lob-locator

  A *LOB locator* is a (opaque?) data structure that allows to access the data of a LOB.

  In a database table, the LOB locator is stored with the table rows but the actual LOB data might be stored in a separate storage (usually in a separate
  → development/databases/Oracle/architecture/database/logical-structures/tablespace).

  An empty LOB locator is returned by → development/databases/Oracle/SQL/functions/lob#ora-func-empty_xlob[`empty_blob()` and `empty_clob()`] or
  → development/databases/Oracle/installed/packages/dbms/lob#dbms_lob-createTemporary[`dbms_lob.createTemporary`].

  LOB locators can be manipulated with the → development/databases/Oracle/installed/packages/dbms/lob[`dbms_lob`] package. In fact,
  all procedures and functions of this package must be called with a lob locator.

}
{ Three types of LOBs #ora-lob-3-types

  There are three types of LOBs:
  table { ll
     Persistent LOBs ☰ The data of persistent LOBs is stored with tables and are subject to → development/databases/Oracle/architecture/transaction[transactions].
     Temporary LOBs ☰ They reside in either a process's → development/databases/Oracle/architecture/instance/PGA[PGA] or → development/databases/Oracle/architecture/database/logical-structures/tablespace/temporary[temporary tablespace], depending on their size. 
     BFILEs ☰ The data is stored in a → Linux/filesystem/filesystems[file system].
  table }

  LOBs returned from SQL or PL/SQL built-in functions are temporary LOBs.

 `→ development/databases/Oracle/installed/dynamic-performance-views/temporary_lobs` shows a → development/databases/Oracle/architecture/session[session's] number of temporary LOBs.

  { Internal and external LOBs

    Because *persistent* and *temporary* LOBs are stored *in* the → development/databases/Oracle/architecture/database, they're referred to as *internal lobs*.

    BFILEs, on the other hand, are not stored in a database and are therefore referred to as *external LOBs*.

    Available → development/databases/Oracle/SQL/data-types[data types] for internal LOBs are `CLOB`, `NCLOB` and `BLOB`.
  
  }
}
{ ORA-06502: PL/SQL: numeric or value error: character string buffer too small #lob-ora-06502

  When concatenating strings (→ development/databases/Oracle/SQL/data-types/varchar2[`varchar2`]) and the resulting length becomes larger than 64 KB,
  → development/databases/Oracle/PL-SQL throws an *→ development/databases/Oracle/errors/ORA-06502_PL-SQL-numeric-or-value-error[ORA-06502: PL/SQL: numeric or value error]: character string buffer too small* error message.

  This error can be prevented when (at least) the first element in such a concatenation is a clob. In the following example, this is achieved using the
 `to_clob(…)` function:
  gh|oracle-patterns|/SQL/datatypes/lob/ORA-06502.sql||

}
{ Group by LOB columns not permitted #ora-lob-group-by

  Oracle does not allow to → development/databases/Oracle/SQL/select/group-by[group by] LOB-columns:
code {
create table tq84_grpby_clob (
  id number,
  txt clob
);

insert into tq84_grpby_clob values (1, 'foo');
code }

  The following select statement causes the error → development/databases/Oracle/errors/ORA-00932_inconsistent-datatypes#ora-00932-exp-got-clob[ORA-00932: inconsistent datatypes: expected - got CLOB]:
code {
select
   max(id),
   txt
from
   tq84_grpby_clob
group by
   txt;
code }

}

{ JDBC #ora-lob-jdbc

  With JDBC 4.0, LOBs should be manipulated with the following interfaces and implementations: (which provide random access to the data)
  table { ll
    ~Interface~ ☰ ~Implementation~
    `java.sql.Blob` ☰ `oracle.sql.Blob`
    `java.sql.Clob` ☰ `oracle.sql.clob`
    `java.sql.NClob` ☰ `oracle.sql.NClob` (In `ojdbc6.jar`)
  table }

  See also → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/jdbc/lib[`$ORACLE_HOME/jdbc/lib`]

}
{ Insert and select BLOC/CLOB examples

  → development/databases/Oracle/tools/sql-loader example: → development/databases/Oracle/tools/sql-loader/binary-data[load binary data (blob)]

  A → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Types/OracleBlob#ado-net-OracleBlob[.NET example] that demonstrates
  the Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Types/OracleBlob[`Oracle.DataAccess.Types.OracleBlob`] and
  a → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Types/OracleClob#ps-OracleClob[PowerShell] example that demonstrates writing a
  → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Types/OracleClob[`Oracle.DataAccess.Types.OracleClob`] to a file.

  → development/languages/Java/classes/java/sql#java-sql-insert-clob-oracle[This Java/JDBC example] inserts the content of (text-)files into
  CLOBs.

  → development/databases/Oracle/SQLcl/script/lob[This SQLcl example] puts an image (png) into a BLOB and then gets it again and stores it locally.
}

sa:


  A → development/databases/Oracle/SQL/statement/nouns/table/create/as-select[`create table … as …`] that involves a → development/databases/Oracle/architecture/database/link and
  CLOBs or BLOBs  and → development/databases/Oracle/SQL/select/analytic[analytic functions] sometimes(?) throws a
  → development/databases/Oracle/errors/ORA-22992_cannot-use-LOB-locators-selected-from-remote-tables#ora-22992-ctas[ORA-22992: cannot use LOB locators selected from remote tables].

  → development/databases/Oracle/SQL/functions/lob[SQL functions that are related to LOBs]

  The → development/databases/Oracle/OraOLEDB/connection-string-attributes[OraOLEDB specific connection attribute `SPPrmsLOB`].

  → development/databases/Oracle/SQL/functions/lob/to[`to_lob`] converts a → development/databases/Oracle/SQL/data-types/long[`long`] or a → development/databases/Oracle/SQL/data-types/raw[`long raw`] to a
  lob data type.

  → development/databases/Oracle/installed/packages/dbms/lobutil[`dbms_lobutil`] contains diagnostic and utility functions for 11g LOBs.

  LOBs that are stored in → development/databases/Oracle/objects/tables[tables] are described in → development/databases/Oracle/installed/data-dictionary/lobs[`dba_lobs`].

  The → development/databases/Oracle/SQL-Plus setting → development/databases/Oracle/SQL-Plus/set/long[`long`] specifies the number of bytes that are displayed for
  lob values.

  → development/databases/Oracle/SQL/data-types/lob/to-lines[Extract lines] from a clob.

  The PL/SQL package → development/databases/Oracle/PL-SQL/libs/personal/blob_wrapper[`blob_wrapper`]

  → development/databases/Oracle/SQL/data-types
