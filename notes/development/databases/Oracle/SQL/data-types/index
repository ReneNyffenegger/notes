$ Oracle SQL: Datatypes
@ datatypes

Some SQL and → development/databases/Oracle/PL-SQL data types include:
table { ll
  ☰ ~Comment~
  binary_float, binary_double ☰ → development/IEEE/754[IEE-754] 
  → development/databases/Oracle/SQL/data-types/boolean ☰ Only in → development/databases/Oracle/PL-SQL
  → development/databases/Oracle/SQL/data-types/char, nchar ☰ Max size in → development/databases/Oracle/PL-SQL: 32767 bytes, max size in → development/databases/Oracle/SQL: 2000 bytes
  → development/databases/Oracle/SQL/data-types/date ☰
  → development/databases/Oracle/SQL/data-types/interval ☰
  → development/databases/Oracle/SQL/data-types/json[`json`] ☰ A binary native representation for → development/languages/JavaScript/JSON data, «OSON», designed for fast query and update.
  → development/databases/Oracle/SQL/data-types/lob (blob and clob) ☰
  → development/databases/Oracle/SQL/data-types/long[`long`] ☰
  → development/databases/Oracle/SQL/data-types/number ☰
  pls_integer ☰
  → development/databases/Oracle/SQL/data-types/raw[raw and long raw] ☰
  → development/databases/Oracle/SQL/data-types/rowid ☰
  → development/databases/Oracle/SQL/data-types/timestamp ☰
  → development/databases/Oracle/SQL/data-types/varchar2, nvarchar2 ☰ Max size in → development/databases/Oracle/PL-SQL: 32767 bytes, max size in → development/databases/Oracle/SQL: 4000 bytes

table }

{ Datatypes for text

  Datatypes that are used to store text (characters) are `varchar2`, `char`, → development/databases/Oracle/SQL/data-types/long[`long`]

}
{ Datatypes to store binary data

  Datatypes to store binary data (arrays of bytes) are `raw` and `long raw`.

}
{ Identical datatypes

  Some identical data types are:
    • `pls_integer` and `binary_integer`
    • `integer` and `number(38)`
 
}
{ Conversion of types

  The SQL function → development/databases/Oracle/SQL/functions/type-conversion/validate_conversion[`validate_conversion`] can be used to check if a value can be converted to a given
  target data type.

  See also → development/databases/Oracle/SQL/data-types/conversion/implicit[implicit data type conversion]

}
{ Type codes used in packages #ora-data-type-codes

  → development/databases/Oracle/installed/packages/dbms/types[`dbms_types`] and
  → development/databases/Oracle/installed/packages/dbms/sql[`dbms_sql`] export type code constants. At times their codes (numbers) are equal, sometimes, they're not.

  table { lrlrl
  ~dbms_types~ ☰ ☰ ~dbms_sql~ ☰ ☰ ~Comment~

     `typecode_varchar`         ☰    1  ☰ `varchar2_type`                ☰   1 ☰  varchar vs varchar2 ??? compare with `typecode_varchar2`!
     `typecode_varchar2`        ☰    9  ☰                                ☰     ☰ 
     `typecode_number`          ☰    2  ☰ `number_type`                  ☰   2 ☰ 
                                ☰       ☰ `long_type`                    ☰   8 ☰
                                ☰       ☰ `rowid_type`                   ☰  11 ☰
     `typecode_date`            ☰   12  ☰ `date_type`                    ☰  12 ☰ 
                                ☰       ☰ `raw_type`                     ☰  23 ☰
     `typecode_raw`             ☰   95  ☰                                ☰     ☰ 
                                ☰       ☰ `long_raw_type`                ☰  24 ☰
     `typecode_char`            ☰   96  ☰ `char_type`                    ☰  96 ☰ 
     `typecode_bfloat`          ☰  100  ☰ `binary_float_type`            ☰ 100 ☰ 
     `typecode_bdouble`         ☰  101  ☰ `binary_double_type`           ☰ 101 ☰ 
                                ☰       ☰ `mlslabel_type`                ☰ 106 ☰
                                ☰       ☰ `user_defined_type`            ☰ 109 ☰
     `typecode_ref`             ☰  110  ☰ `ref_type`                     ☰ 111 ☰ 
     `typecode_clob`            ☰  112  ☰ `clob_type`                    ☰ 112 ☰ 
     `typecode_blob`            ☰  113  ☰ `blob_type`                    ☰ 113 ☰ 
     `typecode_bfile`           ☰  114  ☰ `bfile_type`                   ☰ 114 ☰ 
     `typecode_timestamp`       ☰  187  ☰ `timestamp_type`               ☰ 180 ☰ 
     `typecode_timestamp_tz`    ☰  188  ☰ `timestamp_with_tz_type`       ☰ 181 ☰ 
     `typecode_interval_ym`     ☰  189  ☰ `interval_year_to_month_type`  ☰ 182 ☰ 
     `typecode_interval_ds`     ☰  190  ☰ `interval_day_to_second_type`  ☰ 183 ☰ 
     `typecode_urowid`          ☰  104  ☰ `urowid_type`                  ☰ 208 ☰ 
     `typecode_timestamp_ltz`   ☰  232  ☰ `timestamp_with_local_tz_type` ☰ 231 ☰ 
     `typecode_cfile`           ☰  115  ☰                                ☰     ☰ 
     `typecode_object`          ☰  108  ☰                                ☰     ☰ 
     `typecode_varray`          ☰  247  ☰                                ☰     ☰ → development/databases/Oracle/PL-SQL/collection-types[collection type]
     `typecode_table`           ☰  248  ☰                                ☰     ☰ → development/databases/Oracle/PL-SQL/collection-types[collection type]
     `typecode_namedcollection` ☰  122  ☰                                ☰     ☰ 
     `typecode_opaque`          ☰   58  ☰                                ☰     ☰ opaque type
     `typecode_nchar`           ☰  286  ☰                                ☰     ☰ → development/databases/Oracle/installed/types/any[Any data API], short form for char with a charset form of SQLCS_NCHAR 
     `typecode_nvarchar2`       ☰  287  ☰                                ☰     ☰ → development/databases/Oracle/installed/types/any[Any data API], short form for char with a charset form of SQLCS_NCHAR 
     `typecode_nclob`           ☰  288  ☰                                ☰     ☰ → development/databases/Oracle/installed/types/any[Any data API], short form for char with a charset form of SQLCS_NCHAR 
table }    

}

sa:

  → development/databases/Oracle/installed/packages/dbms/types[`dbms_types`]

  The → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client/OracleDbType[`Oracle.DataAccess.Client.OracleDbType`] enum.

  The (pseudo?) data type `table` that is used for → development/databases/Oracle/PL-SQL/function-procedure/polymorphic-table[polymorphic table functions].

  Error and warning messages:
    • → development/databases/Oracle/errors/ORA-00932_inconsistent-datatypes
    • → development/databases/Oracle/errors/ORA-00997_illegal-use-of-LONG-datatype
    • → development/databases/Oracle/errors/ORA-01722_invalid-number
    • → development/databases/Oracle/errors/ORA-01790_expression-must-have-same-datatype-as-corresponding-value
    • → development/databases/Oracle/PL-SQL/errors-warnings/PLW-07204_conversion-away-from-column-type-may-result-in-sub-optimal-query-plan

  `pls_integer` and binary_integer` are identical.
