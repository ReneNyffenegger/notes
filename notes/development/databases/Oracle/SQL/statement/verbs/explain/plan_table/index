$ Oracle: PLAN_TABLE

`plan_table` is used by the SQL statement  → development/databases/Oracle/SQL/statement/verbs/explain[`explain plan`] to write its result to.

code {
create table PLAN_TABLE /* sharing=none */  (
        statement_id       varchar2(30)  ,  -- The value that was given to the (optional) clause SET STATEMENT_ID in an → development/databases/Oracle/SQL/statement/verbs/explain[explain plan] statement
        plan_id            number        ,  -- Uniquely identifies a plan (not a record).
                                            -- By default filled with value from → development/databases/Oracle/objects/sequences SYS.ORA_PLAN_ID_SEQ$,
                                            -- but can be controlled with → development/databases/Oracle/SQL/statement/verbs/explain#ora-explain-plan-stmt-id[set statement_id] clause of → development/databases/Oracle/SQL/statement/verbs/explain
        timestamp          date          ,
        remarks            varchar2(4000),
        operation          varchar2(30)  ,  -- … 
                                            -- If id = 0 (first row in plan): operation indicates the
                                            -- SQL statement type: DELETE STATEMENT, MERGE STATEMENT, SELECT STATEMENT, INSERT STATEMENT,
                                            -- CREATE TABLE STATEMENT or CREATE INDEX STATEMENT
        options            varchar2(255) ,  -- 
        object_node        varchar2(128) ,  -- Name of database link or for parallel queries order in which output from operation is consumed
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/object_name-owner[object_owner]       varchar2(128) ,
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/object_name-owner[object_name]        varchar2(128) ,  -- Identifies the name of the → development/databases/Oracle/objects[object] that is being accessed in the respective operation
        object_alias       varchar2(261) ,
        object_instance    numeric       ,  -- Ordinal position of object as found in SQL statement (left to right, outer to inner).
                                            -- View expansion number is unpredictable.
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/object_type        varchar2(30)  ,
        optimizer          varchar2(255) ,  -- In first row (statement line) in a plan: optimizer mode (`ALL_ROWS`, `CHOOSE` … ).
                                            -- For other rows, the value `ANALYZED` indicates that the accessed object is analyzied
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/search_columns[search_columns]     number        ,  -- Number of index columns that can be used to match a predicate,
                                            -- that is: the number of index columns with start and stop keys.
        id                 numeric       ,
        parent_id          numeric       ,
        depth              numeric       ,
        position           numeric       ,  -- First row in plan_table (id = 0): estimated cost (and equal to value in cost, see also → development/databases/Oracle/installed/dynamic-performance-views/sql/plan#vSsql-plan-position[here]).
                                            -- Other rows: relative position of children with same parent
        cost               numeric       ,  -- cost = F(cpu_cust, io_cost). A cost of 1 is (apparently) equal to the time required to read a single → development/databases/Oracle/architecture/database/logical-structures/data-block[block].
        cardinality        numeric       ,
        bytes              numeric       ,
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/other_tag          varchar2(255) ,
        partition_start    varchar2(255) ,
        partition_stop     varchar2(255) ,
        partition_id       numeric       ,
        other              long          ,
        distribution       varchar2(30)  ,
        cpu_cost           numeric       ,
        io_cost            numeric       ,
        temp_space         numeric       ,  -- Estimated required temporary space for the operation, for example sort or → development/databases/Oracle/SQL/join/hash[hash join].
        access_predicates  varchar2(4000),  -- Predicates that are used to locate rows, for example as start/stop predicates in an index range scan.
                                            -- Only operations where access_predicates is filled seem to be INDEX, CONNECT BY, → development/databases/Oracle/SQL/join/hash[HASH JOIN] and SORT
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/filter_predicates[filter_predicates]  varchar2(4000),  -- Predicates that are used to filter rows
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/projection[projection]         varchar2(4000),
        time               numeric       ,  -- Estimated duration (in seconds) that SQL statements spends for this operation
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/qblock_name[qblock_name]        varchar2(128) ,  -- Name of → development/databases/Oracle/SQL/statement/query-block[query block] (either generated or specified with → development/databases/Oracle/SQL/hints[QB_NAME hint])
        → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/other_xml[other_xml]          clob             -- Additional, differently structured (hence XML), values for an execution step.
);
code }

{ object_alias

  The value of `object_alias` is either → development/databases/Oracle/SQL/null[`null`] or matches the
  → development/regular-expressions[regular expression] `"[^"]+"@"[^"]+"$`, the following SQL does not return a record (at least I never encountered one):
code {
select count(*) from → development/databases/Oracle/installed/dynamic-performance-views/sql/plan[v$sql_plan] where not regexp_like(object_alias, '"[^"]+"@"[^"]+"$');
code }

?  The second part (after the `@`, which is enclosed in `"…"`) seems to correspond to a qblock name.

code {
select
   object_alias,
--
-- If not using an alias in the SQL statement, the first part of the object alias
-- is equal to the object_name. Note, that object_name can also refer to an index
-- in which case othe first part of the object alias is null:
   regexp_replace(object_alias, '^"([^"]+)"@"[^"]+"$', '\1') object_alias_part_1,
   object_name,
 
--
-- Often, the second part of the object alias is equal to the qblock_name (
-- especially if qblock_name is not using the hash-semantics (SEL$12EC7C91):
   regexp_replace(object_alias, '^"[^"]+"@"([^"]+)"$', '\1') object_alias_part_2,
   qblock_name,
-- -----
   object_type,
   operation
-- v$sql_plan.*
from
   v$sql_plan;
code }

}
{ access_predicates

code {
select
   count(*),
   operation
-- options
from
   v$sql_plan
where
   access_predicates is not null
group by
    operation
--  options
order by
   count(*) desc;
--
-- INDEX
-- → development/databases/Oracle/SQL/join/hash[HASH JOIN]
-- CONNECT BY
-- SORT
-- BITMAP INDEX
-- TABLE ACCESS
code }

}
