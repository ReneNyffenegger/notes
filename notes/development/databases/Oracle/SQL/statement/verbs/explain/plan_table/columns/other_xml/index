$ Oracle PLAN_TABLE: column OTHER_XML

The column `other_xml` of the → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`] displays additional, differently structured (hence
the → development/XML format) for an execution step. Such information includes:
  • Schema-name against which SQL statement was parsed
  • Database version (release number)
  • Hash value of → development/databases/Oracle/SQL/statement/execution/plan[execution plan]
  • Name of outline or SQL profile to create the plan
  • If → development/databases/Oracle/optimizer/statistics/dynamic[dynamic statistics] were used when the plan was created
  • Outline data which can reproduce the plan
  • An indication if the supplied → development/databases/Oracle/SQL/hints[hints] were erroneous

code {
create table tq84_tab (nm number, tx varchar2(10));

→ development/databases/Oracle/SQL/statement/verbs/explain[explain plan]
   → development/databases/Oracle/SQL/statement/verbs/explain#ora-explain-plan-stmt-id[set statement_id] = 'get_other_xml'
for
  select /*+ invalid_hint(t) */
     nm,
     tx
  from
     tq84_tab t;

select
   other_xml
from
   → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[plan_table]
where
   statement_id = 'get_other_xml' and
   other_xml is not → development/databases/Oracle/SQL/null[null];
code }

The (manually formatted) value of `other_xml` for this statment is:
code {
<other_xml>

  <info type="has_user_tab"             >yes</info>
  <info type="db_version"               >19.0.0.0</info>
  <info type="parse_schema"             ><![CDATA["RENE"]]></info>
  <info type="dynamic_sampling" note="y">2</info>
  <info type="plan_hash_full"           >1066212411</info>
  <info type="plan_hash"                >1254052927</info>
  <info type="plan_hash_2"              >1066212411</info>

  <stats type="compilation">
    <stat name="bg">8</stat>
  </stats>

  <qb_registry>
    <q o="2" f="y">
      <n><![CDATA[SEL]]></n>
      <f>
        <h>
          <t><![CDATA[T]]></t><s><![CDATA[SEL]]></s>
        </h>
      </f>
    </q>
  </qb_registry>

  <outline_data>
    <hint><![CDATA[FULL(@"SEL" "T"@"SEL")             ]]></hint>
    <hint><![CDATA[OUTLINE_LEAF(@"SEL")               ]]></hint>
    <hint><![CDATA[ALL_ROWS                           ]]></hint>
    <hint><![CDATA[DB_VERSION('19.1.0')               ]]></hint>
    <hint><![CDATA[OPTIMIZER_FEATURES_ENABLE('19.1.0')]]></hint>
    <hint><![CDATA[IGNORE_OPTIM_EMBEDDED_HINTS        ]]></hint>

  </outline_data>

  <hint_usage>
    <q>
      <n><![CDATA[SEL]]></n>
      <h o="EM" st="PE">
        <x><![CDATA[invalid_hint]]></x>
      </h>
    </q>
  </hint_usage>

</other_xml>
code }

{ Querying other_xml with XPATH expressions

 `other_xml` can be queried with → development/XML/XPath expressions.

code {
with x as (
   select xmlType(other_xml) other_xml from v$sql_plan where other_xml is not null
)
select 
   extractvalue(other_xml, '/*/info[@type = "plan_hash"]'                              ) plan_hash,
   extractvalue(other_xml, '/*/info[@type = "→ development/databases/Oracle/SQL/statement/execution/plan/adaptive[adaptive_plan]"]'                          ) adaptive_plan,
   extractvalue(other_xml, '/*/info[@type = "sql_profile"]'                            ) sql_profile,
   extractvalue(other_xml, '/*/info[@type = "sql_patch"]'                              ) sql_patch,
   extractvalue(other_xml, '/*/info[@type = "baseline"]'                               ) baseline,
   extractvalue(other_xml, '/*/info[@type = "outline"]'                                ) outline,
   extractvalue(other_xml, '/*/info[@type = "dynamic_sampling"]'                       ) dynamic_sampling,
   extractvalue(other_xml, '/*/info[@type = "dop"]'                                    ) dop,
   extractvalue(other_xml, '/*/info[@type = "dop_reason"]'                             ) dop_reason,
   extractvalue(other_xml, '/*/info[@type = "pdml_reason"]'                            ) pdml_reason,
   extractvalue(other_xml, '/*/info[@type = "idl_reason"]'                             ) idl_reason,
   extractvalue(other_xml, '/*/info[@type = "queuing_reason"]'                         ) queuing_reason,
   extractvalue(other_xml, '/*/info[@type = "px_in_memory"]'                           ) px_in_memory,
   extractvalue(other_xml, '/*/info[@type = "px_in_memory_imc"]'                       ) px_in_memory_imc,
   extractvalue(other_xml, '/*/info[@type = "row_shipping"]'                           ) row_shipping,
   extractvalue(other_xml, '/*/info[@type = "index_size"]'                             ) index_size,
   extractvalue(other_xml, '/*/info[@type = "result_checksum"]'                        ) result_checksum,
   extractvalue(other_xml, '/*/info[@type = "cardinality_feedback"]'                   ) cardinality_feedback,
   extractvalue(other_xml, '/*/info[@type = "performance_feedback"]'                   ) performance_feedback,
   extractvalue(other_xml, '/*/info[@type = "rely_constraint"]'                        ) rely_constraint,
   extractvalue(other_xml, '/*/info[@type = "xml_suboptimal"]'                         ) xml_suboptimal,
   extractvalue(other_xml, '/*/spd/cu'                                                 ) spd_cu,
   extractvalue(other_xml, '/*/info[@type = "gtt_session_st"]'                         ) gtt_session_st,
   extractvalue(other_xml, '/*/info[@type = "gather_stats_on_conventional_dml"]'       ) gather_stats_on_cnvtl_dml,
   extractvalue(other_xml, '/*/info[@type = "optimizer_use_stats_on_conventional_dml"]') opt_use_stats_on_cnvtl_dml,
   extractvalue(other_xml, '/*/info[@type = "slave_parse"]'                            ) slave_parse,
   extractvalue(other_xml, '/*/info[@type = "baseline_repro_fail"]'                    ) baseline_repro_fail,
   extractvalue(other_xml, '/*/info[@type = "cross_shard_query"]'                      ) cross_shard_query,
   extractvalue(other_xml, '/*/info[@type = "shard_id"]'                               ) shard_id,
   extract     (other_xml, '/*/hint_usage').getClobVal()
 from
   x
;
code }

}
