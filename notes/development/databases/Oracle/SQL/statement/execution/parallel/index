$ Oracle: Parallel SQL Execution

In an → development/databases/Oracle[Oracle] database, parallel → development/databases/Oracle/SQL/statement/execution[SQL execution] is based on
  • the Query Coordinator (QC) and
  • the Parallel Execution (PX) server processes.

{ QC - Query Coordinator

  QC initiates the parallel execution and distributes the work to PX servers.

  The QC is identified in execution plans as `→ development/databases/Oracle/SQL/statement/execution/plan/operations/px/coordinator`.

}
{ PX - Parallel Execution (Servers) #ora-parallel-px

  PX does most of the work for the job at hand.

  There are two types of PX servers:
    • producers (which produce the data for the)
    • consumers

  The number of PX servers that is started at → development/databases/Oracle/architecture/instance/startup-shutdown[instance startup] is determined by the
  → development/databases/Oracle/adminstration/init-parameters[init parameter] `parallel_min_servers`.
  -
  Oracle can dynamically add more PX servers, up to a maximum defined by the parameter `parallel_max_servers`.

  Pre-allocated PX servers are listed in `→ development/databases/Oracle/installed/dynamic-performance-views/px/process`.

}
{ QC and PX

  For example, in a parallel select statement with a `sum()`, the PX servers sum part of the data while the QC in the end will calculate the final
  sum from the results from the PX servers.

}
{ Ranger

  A Ranger process runs early and inspects the distribution of the input data in order to assign data ranges to server processes.

}
{ Enabling parallel execution #ora-enable-paralle-execution

  By default, Oracle is enabled for parallel execution of queries and → development/databases/Oracle/SQL/DDL[DDL statements].

  Parallel execution can be enabled for→ development/databases/Oracle/SQL/DML[DML statements], select and DDL statements with these `alter session` statements:
code {
→ development/databases/Oracle/SQL/statement/nouns/session[alter session] enable parallel dml;
→ development/databases/Oracle/SQL/statement/nouns/session[alter session] enable parallel query;
→ development/databases/Oracle/SQL/statement/nouns/session[alter session] enable parallel ddl;

→ development/databases/Oracle/SQL/statement/nouns/session[alter session] force  parallel dml parallel 16;
code }

  After enabling parallel dml or query, the new state is reflected in
  → development/databases/Oracle/installed/dynamic-performance-views/session[`v$session`].
code {
select
-- pdml_enabled, -- Obsolete, replaced by pdml_status
   pdml_status,
   pddl_status,
   pq_status,
   sid
from
   → development/databases/Oracle/installed/dynamic-performance-views/session[v$session]
where
   → development/databases/Oracle/installed/dynamic-performance-views/session#vSession-audsid[audsid] = → development/databases/Oracle/SQL/functions/sys_context('userenv', 'sessionid');
code }

  { Using SQL hints

code {
insert /*+ → development/databases/Oracle/SQL/hints/list/parallel/enable-disable_dml[enable_parallel_dml] */ …
code }

   Other → development/databases/Oracle/SQL/hints[hints] include
     • `statement_queuing`, `no_statement_queuing`
     • `→ development/databases/Oracle/SQL/hints/list/parallel`, `no_parallel`
     • `parallel_index`, `no_parallel_index`
     • → development/databases/Oracle/SQL/hints/list/parallel/enable-disable_dml[`enable_parallel_dml`], `disable_parallel_dml`
     • `pq_concurrent_union`, `no_pq_concurrent_union`
     • `pq_distribute`
     • `pq_skew`
     • … ?

  }
  { Transactions / rollback

  ? Apparently, an `alter session [enable|disable] parallel…` statement cannot be executed if a → development/databases/Oracle/architecture/transaction is still active.

  ? A rollback of a DML statement that was executed in parallel seems to be faster as well. TOOD: Needs to be investigated.

  }

}
{ Verify if (last) query was executed in parallel #ora-verify-parallel-execution

  The value of `last_query` of `→ development/databases/Oracle/installed/dynamic-performance-views/pq/sesstat` can be used to verify if the (last) executed query was executed in parallel.
  -
  Especially useful for such an investigation are the values where `statistic in ('Queries Parallelized', 'DOP')` (DOP = Degree of parallism).

  Note the typo in the `parlallel` → development/databases/Oracle/SQL/hints:
code {
select /*+ parlallel(4) */ count(*) from dba_objects where object_name like 'N%';
…
select
   statistic,
   last_query
from
   → development/databases/Oracle/installed/dynamic-performance-views/pq/sesstat
order by
   → development/databases/Oracle/SQL/functions/decode(statistic,
     'Queries Parallelized', chr(0),
     'DOP'                 , chr(1),
      statistic
  );
-- 
-- STATISTIC                      LAST_QUERY
-- ------------------------------ ----------
-- Queries Parallelized                    0
-- DOP                                     0
-- …
code }

  Same query, but with fixed hint:
code {
select /*+ → development/databases/Oracle/SQL/hints/list/parallel[parallel(4)] */ count(*) from dba_objects where object_name like 'N%';  
… 
select
   statistic,
   last_query
from
   → development/databases/Oracle/installed/dynamic-performance-views/pq/sesstat
order by
   → development/databases/Oracle/SQL/functions/decode(statistic,
     'Queries Parallelized', chr(0),
     'DOP'                 , chr(1),
      statistic
  );
-- 
-- STATISTIC                      LAST_QUERY
-- ------------------------------ ----------
-- Queries Parallelized                    1
-- DOP                                     4
-- …
code }

  See also *MOS Note 237287.1*.

}
{ Granules

  A *granule* is a unit of work into which parallelized operations can be divided.

  These granules are passed to  *parallel execution servers* (PX) to let them process one after another.

  The number of granules and their size is dependent on the degree of parallelism (DOP).

}
{ Degree of Parallelism (DOP) #ora-parallel-dop

  DOP: *Degree of parallelism*. The DOP defines the number of parallel *streams* with which a statement will be processed.

  In most cases, each stream has a sender and a receiver of data. In these cases, the number of parallel execution servers is twice the DOP.
  -
  An example where only and server is needed per DOP is a *single table scan*.

  See also → development/databases/Oracle/objects/tables/DOP[default DOP for tables] and
  the init parameter `→ development/databases/Oracle/adminstration/init-parameters/parallel/degree/min`

code {
select * from → development/databases/Oracle/installed/dynamic-performance-views/pq/sesstat where statistic = 'DOP';
code }

  { Default degree of parallelism

    In a *single instance environment*, the default degree of parallelism is determined by the product of the two parameters `cpu_count` and `parallel_threads_per_cpu`:
code {
with p as (
  select
    max(case when name = 'cpu_count'                then value end) cpu_count,
    max(case when name = 'parallel_threads_per_cpu' then value end) parallel_threads_per_cpu
  from
    v$parameter
)
select
  p.cpu_count,
  p.parallel_threads_per_cpu,
  p.cpu_count * p.parallel_threads_per_cpu "default parallism degree"
from
  p;
code }

  }

}
{ Data Flow Opration (DFO) #ora-parallel-dfo

  DFO: Data flow operation.

  In an execution plan, a DFO corresponds to the → development/databases/Oracle/SQL/statement/execution/plan/operations/px/send[`PX SEND`] operation.
  
  DFOs are arranged in an DFO tree (PX Coordinator).

  See also the column `DFO_NUMBER` in → development/databases/Oracle/installed/dynamic-performance-views/pq/tqstat[`V$PQ_TQSTAT`].

  { DFO Tree #ora-parallel-dfo-tree

    A DFO Tree corresponds to the → development/databases/Oracle/SQL/statement/execution/plan/operations/px/coordinator[`PX COORDINATOR`] operation.

code {
select * from → development/databases/Oracle/installed/dynamic-performance-views/pq/sesstat where statistic = 'DFO Trees';
code }

  }

}
{ TODO

  TQ: Table Queue

code {
select
   substr(parameter, 1,15) param,
   substr(value    , 1, 5) val
from
   → development/databases/Oracle/installed/dynamic-performance-views/option
where
   lower(parameter) like '%parallel%';
--
-- PARAM              VAL 
-- -----------------  ----
-- Parallel backup    TRUE
-- Parallel execut    TRUE
-- Parallel load      TRUE
code }

  { ORA-12801 and ORA-12805

    ORA-12801 is → development/databases/Oracle/errors/ORA-12801_error-signaled-in-parallel-query-server[error signaled in parrallel query server …].
    -
    ORA-12805 is *parallel query server died unexpectedly*

    These two errors are generic messages that may be caused when executing a parallel query. These errors are usually (always?) accompanied by additional messages which indicate
    the real cause of the problem.

  }

}
sa:
  → development/databases/Oracle/installed/packages/dbms/parallel_execute[`dbms_parallel_execute`]

  → development/databases/Oracle/installed/dynamic-performance-views/px/session[`v$px_session`] shows information about sessions that run parallely.
  -
 `→ development/databases/Oracle/installed/dynamic-performance-views/pq/sysstat`,
 `→ development/databases/Oracle/installed/dynamic-performance-views/pq/sesstat`

  The → development/databases/Oracle/objects/tables/parallel[`parallel` clause] in a `create table` statement.

  When the init parameter → development/databases/Oracle/adminstration/init-parameters/parallel/degree/policy[`parallel_degree_policy`] is set to `auto`, Oracle will queue the
  → development/databases/Oracle/SQL/statement/execution[execution of SQL statements] that require
  parallel execution if the necessary number of parallel execution servers is not available.

  → development/databases/Oracle/SQL/statement/nouns/table/create/as-select#ora-ctas-parallel[`create table … PARALLEL as select …`]

  Enabling → development/databases/Oracle/PL-SQL functions for → development/databases/Oracle/PL-SQL/function-procedure/parallel[parallel execution with the `parallel_enable` clause].

  → development/databases/Oracle/errors/ORA-12838_cannot-read-modify-an-object-after-modifying-it-in-parallel

  Init parameters such as `→ development/databases/Oracle/adminstration/init-parameters/parallel/threads_per_cpu`
