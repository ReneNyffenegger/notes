$ Oracle: SQL statement execution

{ Processing an SQL statement

  In order to process an SQL statement, the statement goes roughly to the following four stages:
    • Parsing the SQL text
    • Optimizing
    • Row source generation
    • Execution

  { Hard and soft parse #ora-hard-soft-parse

    Part of the process is to check if → development/databases/Oracle already has parsed the SQL text before. If this is the case and the result of that previous parsing can be used
    for execution, then Oracle can use that result for the execution of the «new» SQL statement. This situation is referred to as ~soft parse~ and the reusable data structures are
    found in the → development/databases/Oracle/architecture/instance/SGA/Shared-Pool/library-cache/Shared-SQL-Area of the → development/databases/Oracle/architecture/instance/SGA/Shared-Pool/library-cache.

    If Oracle does not find a suitable representation in the shared SQL area, the statement needs to be parsed. This is referred to as *hard parse* or *library cache miss*.

    Part of the hard parse is to determine if the available → development/databases/Oracle/optimizer/statistics[optimizer statistics] are sufficient to generate an optimal
    → development/databases/Oracle/SQL/statement/execution/plan[execution plan]. If this is not the case, Oracle determines → development/databases/Oracle/optimizer/statistics/dynamic[dynamic statistics] as part
    of the hard parse.

  }
  { Updating statistics

    When Oracle is done executing an SQL statement, it updates some statistical numbers for that statement in
    → development/databases/Oracle/installed/dynamic-performance-views/sql[`v$sql`].

    For long running statements, these statistics are updated every 5 seconds.

  }
  { Status of parsing

    The → development/databases/Oracle/architecture/instance/fixed-tables[X$] table
    → development/databases/Oracle/architecture/instance/fixed-tables/k/x/s/cc[`x$kxscc`] exhibits the current status of SQL statement in the column `kxsccsta`:
code {
decode(kxsccsta ,
  0, 'CURNULL'  ,
  1, 'CURSYNTAX',
  2, 'CURPARSE' ,
  3, 'CURBOUND' ,
  4, 'CURFETCH' ,
  5, 'CURROW'   ,
     'ERROR'
)                      status…
code }

  }

}
{ Terminating (quarantining) statements

  The *Resource Manager* might terminate the execution of an SQL statement when the statement consumed too many resources.
  -
? This is referred to as quarantining the statement.

  See also the columns `AVOIDED_EXECUTIONS` and `SQL_QUARANTINE` in → development/databases/Oracle/installed/dynamic-performance-views/sql/diff-sql_sqlarea[`v$sql` and `v$sqlarea`].

}
{ Tracing SQL statement execution #ora-sql-exec-tracing

  If an SQL statement runs longer than 5 seconds, or is hinted with the → development/databases/Oracle/SQL/hints[`/*+ monitor */` hint], some execution statistics are recorded in
  → development/databases/Oracle/installed/dynamic-performance-views/sql/monitor[`v$sql_monitor`]. The cumulative sum of these statistics are recorded in
  → development/databases/Oracle/installed/dynamic-performance-views/sql[`v$sql`].

  TODO
    • `→ development/databases/Oracle/installed/packages/dbms/session[dbms_session].session_trace_disable`
    • `→ development/databases/Oracle/installed/packages/dbms/session[dbms_session].session_trace_enable`
    • `→ development/databases/Oracle/installed/packages/dbms/session[dbms_session].set_sql_trace`
    • `xxx_trace_disable` and `xxx_trace_enable` procedures in → development/databases/Oracle/installed/packages/dbms/monitor[`dbms_monitor`]
    • → development/databases/Oracle/adminstration/trace-file-analyzer[Trace file analyzer], → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/suptools/tfa/release/tfa_home/bin/tfactl[`$ORACLE_HOME/suptools/tfa/release/tfa_home/bin/ftactl`]
    • → development/databases/Oracle/tools/oradebug
    • → development/databases/Oracle/architecture/database/system-files/Automatic-Diagnostic-Repository/trace-file[Trace files]

code {
select
   value
from
  → development/databases/Oracle/installed/dynamic-performance-views/diag/info[v$diag_info]
where
  name = 'Default Trace File';
code }

}


sa:

  → development/databases/Oracle/optimizer

  → development/databases/Oracle/SQL/statement/execution/parallel[Parallel SQL execution]

  The value of a limited set of → development/databases/Oracle/adminstration/init-parameters can be set for the duration of the executtion of an SQL statement with the
  → development/databases/Oracle/SQL/hints[`opt_param` hint].

  → development/databases/Oracle/installed/dynamic-performance-views/sql/plan/statistics[`v$sql_plan_statistics`] provides *actual* (not estimated as in → development/databases/Oracle/installed/dynamic-performance-views/sql/plan[`v$sql_plan`]) for every → development/databases/Oracle/SQL/statement/execution/plan/operations[SQL plan operation] of an executed SQL statement.

  → development/databases/Oracle/optimizer/adaptive[Adaptive query optimzation] allows to adjust an
  → development/databases/Oracle/SQL/statement/execution/plan[SQL execution plan] at *run-time*.

  When the init parameter → development/databases/Oracle/adminstration/init-parameters/parallel/degree/policy[`parallel_degree_policy`] is set to `auto`, Oracle will queue the
  execution of SQL statements that require
  → development/databases/Oracle/SQL/statement/execution/parallel[parallel execution] if the necessary number of parallel execution servers
  is not available.

  SQL execution can be tracked with → development/databases/Oracle/SQL/statement/execution[auditing].
