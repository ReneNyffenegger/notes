$ Oracle: SQL statement execution

{ Processing an SQL statement

  In order to process an SQL statement, the statement goes roughly to the following four stages:
    • → development/databases/Oracle/SQL/statement/execution/parsing[Parsing the SQL text]
    • Optimizing
    • Row source generation
    • Execution

  During compilation (optimziation?), Oracle decides if → development/databases/Oracle/optimizer/statistics/dynamic[dynamic statistics] will be used to generate an execution plan.

? At some point in time (after parsing?), Oracle stores the result of the parsing in the → development/databases/Oracle/architecture/instance/SGA/Shared-Pool/library-cache
  -
  Additional memory is allocated from the private SQL area during each execution of an SQL statement.

  { Updating statistics

    When Oracle is done executing an SQL statement, it updates some statistical numbers for that statement in
    → development/databases/Oracle/installed/dynamic-performance-views/sql[`v$sql`].

    For long running statements, these statistics are updated every 5 seconds.

  }
  { Status of parsing

    The → development/databases/Oracle/architecture/instance/fixed-tables[X$] table
    → development/databases/Oracle/architecture/instance/fixed-tables/k/x/s/cc[`x$kxscc`] exhibits the current status of SQL statement in the column `kxsccsta`:
code {
decode(kxsccsta ,
  0, 'CURNULL'  ,
  1, 'CURSYNTAX',
  2, 'CURPARSE' ,
  3, 'CURBOUND' ,
  4, 'CURFETCH' ,
  5, 'CURROW'   ,
     'ERROR'
)                      status…
code }

  }

}
{ Terminating (quarantining) statements

  The *Resource Manager* might terminate the execution of an SQL statement when the statement consumed too many resources.
  -
? This is referred to as quarantining the statement.

  See also the columns `AVOIDED_EXECUTIONS` and `SQL_QUARANTINE` in → development/databases/Oracle/installed/dynamic-performance-views/sql/diff-sql_sqlarea[`v$sql` and `v$sqlarea`].

}
{ Tracing SQL statement execution #ora-sql-exec-tracing

  TODO: What is the relationship between monitoring SQL statements to the SQL Tracing Facility?

  If an SQL statement runs longer than 5 seconds, or is hinted with the → development/databases/Oracle/SQL/hints[`/*+ monitor */` hint], some execution statistics are recorded in
  → development/databases/Oracle/installed/dynamic-performance-views/sql/monitor[`v$sql_monitor`]. The cumulative sum of these statistics are recorded in
  → development/databases/Oracle/installed/dynamic-performance-views/sql[`v$sql`].

  TODO
    • `→ development/databases/Oracle/installed/packages/dbms/session[dbms_session].session_trace_disable`
    • `→ development/databases/Oracle/installed/packages/dbms/session[dbms_session].session_trace_enable`
    • `→ development/databases/Oracle/installed/packages/dbms/session[dbms_session].set_sql_trace`
    • `xxx_trace_disable` and `xxx_trace_enable` procedures in → development/databases/Oracle/installed/packages/dbms/monitor[`dbms_monitor`]
    • → development/databases/Oracle/adminstration/trace-file-analyzer[Trace file analyzer], → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/suptools/tfa/release/tfa_home/bin/tfactl[`$ORACLE_HOME/suptools/tfa/release/tfa_home/bin/ftactl`]
    • → development/databases/Oracle/tools/oradebug
    • → development/databases/Oracle/architecture/database/system-files/Automatic-Diagnostic-Repository/trace-file[Trace files]

code {
select
   value
from
  → development/databases/Oracle/installed/dynamic-performance-views/diag/info[v$diag_info]
where
  name = 'Default Trace File';
code }

}


sa:

  → development/databases/Oracle/optimizer

  → development/databases/Oracle/SQL/statement/execution/parallel[Parallel SQL execution]

  The value of a limited set of → development/databases/Oracle/adminstration/init-parameters can be set for the duration of the executtion of an SQL statement with the
  → development/databases/Oracle/SQL/hints[`opt_param` hint].

  → development/databases/Oracle/installed/dynamic-performance-views/sql/plan/statistics[`v$sql_plan_statistics`] provides *actual* (not estimated as in → development/databases/Oracle/installed/dynamic-performance-views/sql/plan[`v$sql_plan`]) for every → development/databases/Oracle/SQL/statement/execution/plan/operations[SQL plan operation] of an executed SQL statement.

  → development/databases/Oracle/optimizer/adaptive[Adaptive query optimization] allows to adjust an
  → development/databases/Oracle/SQL/statement/execution/plan[SQL execution plan] at *run-time*.

  When the init parameter → development/databases/Oracle/adminstration/init-parameters/parallel/degree/policy[`parallel_degree_policy`] is set to `auto`, Oracle will queue the
  execution of SQL statements that require
  → development/databases/Oracle/SQL/statement/execution/parallel[parallel execution] if the necessary number of parallel execution servers
  is not available.

  An SQL statement being executed can be terminated with the `→ development/databases/Oracle/SQL/statement/nouns/system/alter/cancel-sql` statement.

  SQL execution can be tracked with → development/databases/Oracle/SQL/statement/execution[auditing].
