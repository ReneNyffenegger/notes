$ Oracle SQL Plan operation: HASH JOIN ANTI NA
@ HASH JOIN ANTI NA

code {
create table tq84_A (id number not null);
create table tq84_B (id number     null);
 
→ development/databases/Oracle/SQL/statement/verbs/explain for
select * from tq84_A
where
   id → development/databases/Oracle/SQL/clauses/where/subquery/in_not-in[not in] (select id from tq84_B);
  
select * from table(→ development/databases/Oracle/installed/packages/dbms/xplan/api/display(format=>'basic'));  
-- 
-- -------------------------------------
-- | Id  | Operation          | Name   |
-- -------------------------------------
-- |   0 | → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select   |        |
-- |   1 |  HASH JOIN ANTI NA |        |
-- |   2 |   → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/full[TABLE ACCESS FULL]| TQ84_A |
-- |   3 |   → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/full[TABLE ACCESS FULL]| TQ84_B |
-- -------------------------------------
code }

If the table `tq84_B` is created with `id` as `not null`, the → development/databases/Oracle/optimizer chooses `→ development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join/anti` (rather than `HASH JOIN ANTI NA`).

sa:
  → development/databases/Oracle/SQL/statement/execution/plan/operations[Plan operations]
