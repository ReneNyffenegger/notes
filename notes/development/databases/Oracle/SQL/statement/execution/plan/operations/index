$ Oracle: SQL Statement Execution Plan Operations

An → development/databases/Oracle/SQL/statement/execution/plan consists of a series of tree-like nested operations (aka row sources).

There are two types of operations:
  • Operations that retrieve data from a → development/databases/Oracle/architecture/database/files/data (for example → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/full[`TABLE ACCESS (FULL)`]), or
  • Operations that combine or otherwise manipulate the data that it receives from its child operations (for example `NESTED JOIN`).

table { llll

  ~Operation~ ☰ ~Option~ ☰ ~nof inputs~ ☰ ~Comment~
   ? AND-EQUAL ☰ ☰ ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap/and-or[BITMAP AND] ☰  ☰ 2 ☰ Compare with `BITMAP OR`
   BITMAP CONSTRUCTION ☰ ☰ ☰
   BITMAP CONVERSION ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap/conversion/rowid/to[TO ROWIDS] ☰ 1 ☰
   BITMAP CONVERSION ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap/conversion/rowid/from[FROM ROWIDS] ☰ ? ☰
   BITMAP CONVERSION ☰ COUNT ☰ ? ☰ Count bits in a bitmap index (`select count(*) from tab;`, `tab` having a bitmap index).
   → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap-index[BITMAP INDEX] ☰ FAST FULL SCAN ☰ 1 ☰ Same as `FULL SCAN`?
   BITMAP INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap-index/range-scan[RANGE SCAN] ☰ ? ☰
   BITMAP INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap-index/single-value[SINGLE VALUE] ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap/merge ☰ ☰ 1 ☰
   BITMAP KEY ITERATION ☰ ☰ ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap/and-or[BITMAP OR] ☰  ☰ 2 - n ☰ Compare with `BITMAP AND`
   BUFFER ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/buffer/sort[SORT] ☰ 1 - 2 ☰ In spite of the `SORT` in the name, this operation does not necessarily sort its input, rather it only uses the buffering functionality of a «traditional» sort to store data in the → development/databases/Oracle/architecture/instance/PGA or → development/databases/Oracle/architecture/instance/UGA to reduce full table scans. Compare with `SORT (…)`. See also → http://sadique-sadiqulislam.blogspot.com/2011/01/buffer-sort-reason-and-problems.html[Sadique's blog]
   BUFFER ☰ SORT (REUSE) ☰  ☰
   COLLECTION ITERATOR ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/collection-iterator/pickler-fetch[PICKLER FETCH] ☰ 1 ☰ Column → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/object_type[`object_type`] in → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`] often set to `PROCEDURE` and `object_owner` and `object_type` set to, for example, `dbms_xplan` and `display`.
   CONCATENATION ☰  ☰ 3 - 3 (?) ☰ The `CONCATENATION` operator is functionally equivalent to the `→ development/databases/Oracle/SQL/statement/execution/plan/operations/union-all` operator and was used in versions prior to 12c for → development/databases/Oracle/optimizer/query-transformations/or-expansion[or expansions]. See also the `→ development/databases/Oracle/SQL/hints/list/use_concat` hint.
   → development/databases/Oracle/SQL/statement/execution/plan/operations/connect-by[CONNECT BY] ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/connect-by/no-filtering-with-start-with[NO FILTERING WITH START-WITH] ☰ 1 ☰
   CONNECT BY ☰ WITH FILTERING ☰ 2 ☰
   CONNECT BY ☰ WITH FILTERING (UNIQUE) ☰ 2 ☰
   CONNECT BY ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/connect-by/without-filtering[WITHOUT FILTERING] ☰ 1 - 2 ☰
   CONNECT BY PUMP ☰  ☰ 1 ☰ Compare with `→ development/databases/Oracle/SQL/statement/execution/plan/operations/recursive-with-pump`
   → development/databases/Oracle/SQL/statement/execution/plan/operations/count[COUNT] ☰ ☰ 1 ☰ Created by `→ development/databases/Oracle/objects/tables/columns/pseudo/rownum`.
   COUNT ☰ STOPKEY ☰ 1 ☰ `rownum` plus criterion (in outer query?)
   → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/create-table ☰  ☰ 1 - (?) ☰ One of the → #ora-sql-plan-root-op[root operations].
   CREATE INDEX STATEMENT ☰ ☰ 1 ☰ One of the → #ora-sql-plan-root-op[root operations]. For non-parallel execution, the (only) child operator is `INDEX BUILD`.
   → development/databases/Oracle/SQL/statement/execution/plan/operations/data-link ☰ FULL ☰ 1 ☰ Compare with `→ development/databases/Oracle/SQL/statement/execution/plan/operations/extended-data-link/full`.
   DELETE ☰  ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/delete ☰ ☰ 1 ☰ One of the → #ora-sql-plan-root-op[root operations]. The (only) child operation is always `DELETE`.
   DOMAIN INDEX ☰ ☰ ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/expression-evaluation ☰ ☰ ☰
   EXTENDED DATA LINK ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/extended-data-link/full[FULL] ☰ 1 ☰  Compare with `DATA LINK`
   EXTERNAL TABLE ACCESS ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/external-table-access/full[FULL] ☰ ? ☰ Used to select from an → development/databases/Oracle/objects/tables/external.
   → development/databases/Oracle/SQL/statement/execution/plan/operations/fast-dual[FAST DUAL] ☰  ☰ 1 ☰ Used when selecting an expression that does not involve `DUMMY` from `DUAL`.
   → development/databases/Oracle/SQL/statement/execution/plan/operations/filter[FILTER] ☰  ☰ 1 - n ☰ Only pass on rows that match criteria. Compare with the plan operation `→ development/databases/Oracle/SQL/statement/execution/plan/operations/view` and the  → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/filter_predicates[plan table column `filter_predicates`] of the → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[`plan_table`].
   → development/databases/Oracle/SQL/statement/execution/plan/operations/first-row ☰  ☰ 1 ☰
   FIXED TABLE ☰ FIXED INDEX ☰ 1 ☰
   FIXED TABLE ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/fixed-table/full[FULL] ☰ 1 ☰
   FOR UPDATE ☰  ☰ 1 ☰
   HASH ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/hash/group-by[GROUP BY] ☰ 1 ☰
   HASH ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/hash/group-by/pivot[GROUP BY PIVOT] ☰ 1 ☰
   HASH ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/hash/unique[UNIQUE] ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join[HASH JOIN] ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join/anti[ANTI] ☰ 2 ☰
   HASH JOIN ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join/anti/na[ANTI NA] ☰ 2 ☰
   HASH JOIN ☰ ANTI SNA ☰ 2 ☰
   HASH JOIN ☰ BUFFERED ☰ 2 ☰
   HASH JOIN ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join/outer/full[FULL OUTER] ☰ 2 ☰
   HASH JOIN ☰ OUTER ☰ 2 ☰
   HASH JOIN ☰ OUTER BUFFERED ☰ 2 ☰
   HASH JOIN ☰ RIGHT ANTI ☰ 2 ☰
   HASH JOIN ☰ RIGHT ANTI NA ☰ 2 ☰
   HASH JOIN ☰ RIGHT OUTER ☰ 2 ☰
   HASH JOIN ☰ RIGHT OUTER BUFFERED ☰ 2 ☰
   HASH JOIN ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join/semi/right[RIGHT SEMI] ☰ 2 ☰
   HASH JOIN ☰ RIGHT SEMI BUFFERED ☰ 2 ☰
   HASH JOIN ☰ → development/databases/Oracle/SQL/join/semi[SEMI] ☰ 2 ☰ `→ development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join/semi` seems to be the (left) counterpart to HASH JOIN RIGHT SEMI (so there is no HASH JOIN LEFT SEMI).
   → development/databases/Oracle/SQL/statement/execution/plan/operations/hash-join[HASH JOIN] ☰  ☰ 2 - 3(?) ☰
   INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/full-scan/fast[FAST FULL SCAN] ☰ 1 ☰ Similar to → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/full[`TABLE ACCESS (FULL)`] but get requested values (attributes/columns) from an index rather than the table. Thus, the index is not used to locate rows. Compare with → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/full-scan[`INDEX FULL SCAN`].
   INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/full-scan[FULL SCAN] ☰ 1 ☰ Compare with → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/full-scan/fast[`INDEX FAST FULL SCAN`]
   INDEX ☰ FULL SCAN DESCENDING ☰ 1 ☰
   INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/full-scan/min-max[FULL SCAN (MIN/MAX)] ☰ 1 ☰
   INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/range-scan[RANGE SCAN] ☰ 1 - 2 ☰
   INDEX ☰ RANGE SCAN DESCENDING ☰ 1 ☰
   INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/range-scan/min-max[RANGE SCAN (MIN/MAX)] ☰ 1 ☰
   INDEX ☰ SAMPLE FAST FULL SCAN ☰ ? ☰
   INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/skip-scan[SKIP SCAN] ☰ 1 ☰
   INDEX ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/index_/unique-scan[UNIQUE SCAN] ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/index-maintenance[INDEX MAINTENANCE] ☰ ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/inlist-iterator[INLIST ITERATOR] ☰  ☰ 1 ☰ Iterate over each element in a `where x in (elem_1, elem_2, …, elem_n)` predicate and execute the child plan operation
   → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/insert[INSERT STATEMENT] ☰  ☰ 1 ☰ One of the → #ora-sql-plan-root-op[root operations].
   → development/databases/Oracle/SQL/DML/insert/all/execution-plan[INTO] ☰ ☰ ? ☰ Used in conjuction with the `MULTI-TABLE INSERT` operator for → development/databases/Oracle/SQL/DML/insert/all[`insert all`] (multi table insert) statements
   JOIN FILTER ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/join-filter/create[CREATE] ☰ 1 ☰ Compare with → development/databases/Oracle/SQL/statement/execution/plan/operations/part-join-filter/create[`PART JOIN FILTER (CREATE)`]
   JOIN FILTER ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/join-filter/use[USE] ☰ 1 ☰
   JSONTABLE EVALUATION ☰ ☰ ? ☰ Apparently used to execute statements with → development/databases/Oracle/SQL/functions/json/table[`json_table()`] expression. Compare with `XMLTABLE EVALUATION`
   → development/databases/Oracle/SQL/statement/execution/plan/operations/load/as-select ☰  ☰ 1 ☰
   LOAD AS SELECT ☰ (→ development/databases/Oracle/SQL/statement/execution/plan/operations/load/as-select/cursor-duration-memory[CURSOR DURATION MEMORY]) ☰ 1 - ? ☰ Always a child of `→ development/databases/Oracle/SQL/statement/execution/plan/operations/temp-table-transformation`. Related to the *star transformation* → development/databases/Oracle/optimizer#ora-optimizer-qry-tran[query transformation]?
   LOAD AS SELECT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/load/as-select/hybrid-tsm-hwmb[(HYBRID TSM/HWMB)] ☰ 1 ☰ TSM = Temp Segment Merge, HWMB = High Water Mark Brokering
   LOAD AS SELECT ☰ (TEMP SEGMENT MERGE) ☰ ? ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/load/table-conventional[LOAD TABLE CONVENTIONAL] ☰  ☰ 1 - n ☰
   MATCH RECOGNIZE ☰ BUFFER DETERMINISTIC FINITE AUTOMATON ☰ ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/match-recognize[MATCH RECOGNIZE] ☰ SORT DETERMINISTIC FINITE AUTOMATON ☰ ☰
   MAT_VIEW ACCESS ☰ FULL ☰ ☰ 
   MAT_VIEW ACCESS ☰ BY INDEX ROWID ☰ ☰ 
   MAT_VIEW ACCESS ☰ BY INDEX ROWID BATCHED ☰ ☰ 
   MAT_VIEW ACCESS ☰ BY USER ROWID ☰ ☰ 
   MAT_VIEW ACCESS ☰ FULL ☰ ☰ 
   MAT_VIEW REWRITE ACCESS FULL ☰  ☰ 1 ☰ See Connor McDonald's youtube video → https://www.youtube.com/watch?v=qSL6HE_Ow0w[Become a Materialized View *Super Hero*!]
   MERGE ☰  ☰ 1 ☰
   MERGE JOIN ☰ ANTI ☰ 2 ☰
   MERGE JOIN ☰ ANTI NA ☰ 2 ☰
   MERGE JOIN ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/merge-join/cartesian[CARTESIAN] ☰ 2 ☰
   MERGE JOIN ☰ OUTER ☰ 2 ☰
   MERGE JOIN ☰ → development/databases/Oracle/SQL/join/semi[SEMI] ☰ 2 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/merge-join[MERGE JOIN] ☰  ☰ 2 ☰
   MERGE STATEMENT ☰  ☰ 1 ☰ One of the → #ora-sql-plan-root-op[root operations]. For non-parallel execution, the only child operator is `MERGE`.
   → development/databases/Oracle/SQL/statement/execution/plan/operations/minus[MINUS] ☰  ☰ 2 ☰
   → development/databases/Oracle/SQL/DML/insert/all/execution-plan[MULTI-TABLE INSERT] ☰ ☰ ? ☰ Used in conjuction with the `INTO` operator for → development/databases/Oracle/SQL/DML/insert/all[`insert all`] (multi table insert) statements
   → development/databases/Oracle/SQL/statement/execution/plan/operations/nested-loops[NESTED LOOPS] ☰ ANTI ☰ 2 ☰
   NESTED LOOPS ☰ ANTI SNA ☰ 2 ☰
   NESTED LOOPS ☰ OUTER ☰ 2 ☰
   NESTED LOOPS ☰ → development/databases/Oracle/SQL/join/semi[SEMI] ☰ 2 ☰
   NESTED LOOPS ☰  ☰ 1 - 3(?) ☰
   → development/databases/Oracle/optimizer/statistics/gathering/online/optimizer-statistics-gathering[OPTIMIZER STATISTICS GATHERING] ☰  ☰ 1 ☰ See → development/databases/Oracle/optimizer/statistics/gathering/online[Online statistics gathering]. Compare with `→ development/databases/Oracle/SQL/statement/execution/plan/operations/statistics-collector`
   PARTITION COMBINED ☰ ITERATOR ☰ ? ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/partition/list[PARTITION LIST] ☰ ALL ☰ 1 ☰
   PARTITION LIST ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/partition/list/inlist[INLIST] ☰ ? ☰
   PARTITION LIST ☰ ITERATOR ☰ ? ☰
   PARTITION LIST ☰ SINGLE ☰ 1 ☰ Access *one* partition only, see → development/databases/Oracle/objects/tables/partitions/distribution-techniques/list#ora-list-part-single[this example].
   → development/databases/Oracle/SQL/statement/execution/plan/operations/partition/range[PARTITION RANGE] ☰ ALL ☰ 1 ☰
   PARTITION RANGE ☰ EMPTY ☰ 1 (?) ☰
   PARTITION RANGE ☰ INLIST ☰ 1 ☰
   PARTITION RANGE ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/partition/range/iterator[ITERATOR] ☰ 1 ☰
   PARTITION RANGE ☰ JOIN-FILTER ☰ 1 ☰
   PARTITION RANGE ☰ OR ☰ 1 ☰
   PARTITION RANGE ☰ SINGLE ☰ 1 ☰
   PARTITION REFERENCE ☰ ALL ☰ 1 ☰
   PARTITION REFERENCE ☰ INLIST ☰ 1 ☰
   PART JOIN FILTER ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/part-join-filter/create[CREATE] ☰ 1 ☰ Compare with the `JOIN FILTER CREATE` row source.
   → development/databases/Oracle/SQL/statement/execution/plan/operations/px/block[PX BLOCK] ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/px/block/iterator[ITERATOR] ☰ 1 ☰
   PX BLOCK ☰ ITERATOR ADAPTIVE ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/px/coordinator[PX COORDINATOR] ☰  ☰ 1 ☰
   PX COORDINATOR ☰ FORCED SERIAL ☰ ? ☰ Statement execution was started parallel, but Oracle then detected during optimization phase that the statement cannot be executed in parallel (for example because of involving a → development/databases/Oracle/PL-SQL/function-procedure[PL/SQL function] that is not → development/databases/Oracle/PL-SQL/function-procedure/parallel[parallel enabled]).
   PX PARTITION LIST ☰ ALL ☰ 1 ☰
   PX PARTITION RANGE ☰ ☰ ☰ 
   PX PARTITION RANGE ☰ ALL  ☰ 1 ☰
   PX PARTITION RANGE ☰ ITERATOR ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/px/receive[PX RECEIVE] ☰  ☰ 1 ☰
   PX SELECTOR ☰  ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/px/send[PX SEND] ☰ 1 SLAVE ☰ 1 ☰
   PX SEND ☰ BROADCAST ☰ 1 ☰
   PX SEND ☰ HASH ☰ 1 ☰
   PX SEND ☰ HASH (BLOCK ADDRESS) ☰ 1 ☰
   PX SEND ☰ HASH (NULL RANDOM) ☰ 1 ☰
   PX SEND ☰ HASH (RANDOM) ☰ 1 ☰
   PX SEND ☰ HYBRID (ROWID PKEY) ☰ 1 ☰
   PX SEND ☰ HYBRID HASH ☰ 1 ☰
   PX SEND ☰ HYBRID HASH (SKEW) ☰ 1 ☰
   PX SEND ☰ QC (ORDER) ☰ 1 ☰
   PX SEND ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/px/send/qc/random[QC (RANDOM)] ☰ 1 ☰
   PX SEND ☰ RANDOM LOCAL ☰ 1 ☰
   PX SEND ☰ RANGE ☰ 1 ☰
   PX SEND ☰ ROUND-ROBIN ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/recursive-with-pump ☰ ? ☰ ? ☰ Compare with `CONNECT BY PUMP`
   → development/databases/Oracle/SQL/statement/execution/plan/operations/remote ☰ ? ☰ ? ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/result-cache ☰  ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select ☰  ☰ 1 - n ☰ One of the → #ora-sql-plan-root-op[root operations].
   SELECT STATEMENT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select/remote[`REMOTE`] ☰ ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/sequence ☰  ☰ 1 ☰
   SORT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/aggregate[AGGREGATE] ☰ 1 - 2 ☰ Used when → development/databases/Oracle/SQL/select/aggregate[aggregate functions] are applied to an entire table/subquery without → development/databases/Oracle/SQL/select/group-by[`group by`]. Compare with → development/databases/Oracle/SQL/statement/execution/plan/operations/buffer/sort[`BUFFER (SORT)`].
   SORT ☰ AGGREGATE APPROX ☰ 1 ☰ `AGGREGATE APPROX` is used, for example, in → development/databases/Oracle/SQL/functions/approx/count/distinct[`approx_count_distinct`].
   SORT ☰ CREATE INDEX ☰ ? ☰
   SORT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/group-by[GROUP BY] ☰ 1 ☰
   SORT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/group-by-nosort[GROUP BY NOSORT] ☰ 1 ☰
   SORT ☰ GROUP BY PIVOT ☰ 1 ☰
   SORT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/join[JOIN] ☰ 1 ☰ Sort this operation's input before passing it to a → development/databases/Oracle/SQL/statement/execution/plan/operations/merge-join[`MERGE JOIN`] operation. 
   SORT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/order-by[ORDER BY] ☰ 1 ☰
   SORT ☰ ORDER BY STOPKEY ☰ 1 ☰
   SORT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/unique[UNIQUE] ☰ 1 ☰
   SORT ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sort/unique/nosort[UNIQUE NOSORT] ☰ 1 ☰ Removes duplicates from a sorted «stream of data».
   SQL MODEL ☰ ORDERED ☰  ☰
   SQL MODEL ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/sql-model/ordered/fast[ORDERED FAST] ☰  ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/statistics-collector ☰  ☰ 1 ☰ Used in conjunction with → development/databases/Oracle/optimizer/adaptive[adaptive query optimization] when the → development/databases/Oracle/optimizer creates an → development/databases/Oracle/SQL/statement/execution/plan/adaptive[adaptive plan]. Compare with `OPTIMIZER STATISTICS GATHERING`
   → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access[TABLE ACCESS] ☰ BY GLOBAL INDEX ROWID BATCHED ☰ 1 ☰ 
   TABLE ACCESS ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/by-index#ora-table-access-by-index[BY INDEX ROWID] ☰ 1 - 2 ☰
   TABLE ACCESS ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/by-index#ora-table-access-by-index-rowid-batched[BY INDEX ROWID BATCHED] ☰ 1 - 2 ☰ *BATCHED* indicates that the step retrieves a few → development/databases/Oracle/SQL/data-types/rowid[rowids] from an → development/databases/Oracle/objects/indexes[index] and then tries to access the corresponding rows in order of the → development/databases/Oracle/architecture/database/logical-structures/data-block[blocks] so that the number of times that a block is read is minimized.
   TABLE ACCESS ☰ BY LOCAL INDEX ROWID ☰ 1 ☰
   TABLE ACCESS ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/by-index/global-local#local-batched[BY LOCAL INDEX ROWID BATCHED] ☰ 1 ☰
   TABLE ACCESS ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/by-user-rowid[BY USER ROWID] ☰ 1 ☰
   TABLE ACCESS ☰ CLUSTER ☰ 1 ☰
   TABLE ACCESS ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/full[FULL] ☰ 1 ☰
   TABLE ACCESS ☰ HASH ☰ 1(?) ☰
   TABLE ACCESS ☰ → development/databases/Oracle/SQL/select/sample#ora-select-sample-exec-plan[SAMPLE] ☰ 1 ☰ → development/databases/Oracle/SQL/select/sample[`SAMPLE`] `select` statement.
   TABLE ACCESS ☰ SAMPLE BY ROWID RANGE ☰ 1 ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/temp-table-transformation ☰  ☰ 3 ☰ Indicates that a «cursor-duration» temp table was used to execute a query
   TRANSPOSE ☰ ☰ n ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/union-all ☰  ☰ 1 - n ☰
   UNION ALL ☰ PARTITION ☰ ☰
   UNION ALL (RECURSIVE WITH) ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/union-all/recursive-with/breadth-first[BREADTH FIRST] ☰ ? ☰
   UNION ALL PUSHED PREDICATE ☰  ☰ 2(?) - n ☰
   → development/databases/Oracle/SQL/select/pivot/un/execution-plan[UNPIVOT] ☰ ☰ ☰
   UPDATE ☰  ☰ 1 - n ☰
   → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/update ☰  ☰ 1 ☰ One of the → #ora-sql-plan-root-op[root operations]. For non-parallel execution, the only child operator is `UPDATE`.
   → development/databases/Oracle/SQL/statement/execution/plan/operations/view ☰  ☰ 1 ☰ A passive operation: it passes its resultset to the parent operation. → https://www.red-gate.com/simple-talk/databases/oracle-databases/execution-plans-part-7-query-blocks-and-inline-views/[Jonathan Lewis] says the VIEW operator identifies a separately optimized → development/databases/Oracle/SQL/statement/query-block (in a possibly transformed SQL statement) whose result set might be completely built in memory before passing it to the parent operators. Compare with the plan operation → development/databases/Oracle/SQL/statement/execution/plan/operations/filter[`FILTER`].
   → development/databases/Oracle/SQL/statement/execution/plan/operations/view-pushed-predicate[VIEW PUSHED PREDICATE] ☰  ☰ 1 ☰ Compare with with `→ development/databases/Oracle/SQL/statement/execution/plan/operations/view`
   → development/databases/Oracle/SQL/statement/execution/plan/operations/window[WINDOW] ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/window/buffer[BUFFER] ☰ 1 ☰ Used in `over()` clauses in an → development/databases/Oracle/SQL/select/analytic[analytic function] when the clause *does not* contain a `partition by` or `order by`.
   WINDOW ☰ CHILD PUSHED RANK ☰ ☰
   WINDOW ☰ NOSORT ☰ ? ☰
   WINDOW ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/window/nosort/stopkey[NOSORT STOPKEY] ☰ ? ☰
   WINDOW ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/window/sort[SORT] ☰ 1 ☰ Used in `over()` in an → development/databases/Oracle/SQL/select/analytic[analytic function] clauses when the clause contains a `partition by` or `order by`.
   WINDOW ☰ → development/databases/Oracle/SQL/statement/execution/plan/operations/window/sort/pushed-rank[SORT PUSHED RANK] ☰ 1 ☰
   WINDOW CONSOLIDATOR ☰ BUFFER ☰ ? ☰
   WINDOW (IN SQL MODEL) ☰ ORDERED ☰ ☰
   XMLTABLE EVALUATION ☰  ☰ 1 ☰ Related to the SQL function → development/databases/Oracle/SQL/functions/XML/Table[`XMLTable`]? Compare with `JSONTABLE EVALUATION`.
   XPATH EVALUATION ☰ ☰ ☰

table }

This table was produced with raw data that was selected with the following → development/databases/Oracle/SQL/select[select] statement:
code {
with sp as (
   select
      p.operation  p_operation,
      p.options    p_options,
      c.operation  c_operation,
      c.options    c_options,
      p.id         p_id,
      p.sql_id,
      p.child_number,
      c.sql_id c_sql_id, c.child_number c_child_number, c.parent_id c_parent_id, 
      rank() over (partition by c.sql_id, c.child_number, c.parent_id order by c.position) r_child
   from
      v$sql_plan p                                           left join
      v$sql_plan c   on p.sql_id       = c.sql_id       and
                        p.child_number = c.child_number and
                        p.id           = c.parent_id
   /*                     
   where
     not (
        ( p.operation = 'FILTER'                     and p.options is null) or
        ( p.operation = 'UNION-ALL'                  and p.options is null) or
        ( p.operation = 'UNION ALL PUSHED PREDICATE' and p.options is null) or
        ( p.operation = 'SELECT STATEMENT'           and p.options is null) or
        ( p.operation = 'LOAD AS SELECT'             and p.options = '(CURSOR DURATION MEMORY)') or
        ( p.operation = 'LOAD TABLE CONVENTIONAL'    and p.options is null) or
        ( p.operation = 'CREATE TABLE STATEMENT'     and p.options is null)
     )
   */
),
gr as (
   select
      p_operation,
      p_options,
   -- p_id,
   -- sql_id,
      child_number,
      max(r_child) max_r_child
   from
      sp
   group by
      p_operation,
      p_options,
      p_id,
      sql_id,
      child_number
)
select
   count(*) over (partition by p_operation, p_options) cnt,
   p_operation,
   p_options,
   max_r_child
from
   gr
group by
   p_operation,
   p_options,
   max_r_child
order by
   p_operation,
   p_options;
code }

{ Root operators #ora-sql-plan-root-op

  There are seven root operators for execution plans
    •  `→ development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select`
    •  `→ development/databases/Oracle/SQL/statement/execution/plan/operations/statement/insert`
    •  `→ development/databases/Oracle/SQL/statement/execution/plan/operations/statement/delete`
    •  `→ development/databases/Oracle/SQL/statement/execution/plan/operations/statement/update`
    •  `MERGE STATEMENT`
    •  `→ development/databases/Oracle/SQL/statement/execution/plan/operations/statement/create-table`
    •  `CREATE INDEX STATEMENT`

  Usually, these operators have no options (but see also `→ development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select/remote`).

}
{ Matrix Operation/Object type #ora-sql-plan-op-obj-type-matrix

  The following matrix show which → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/object_type[object types] are accessed by which plan operations.

  table { lllllllllllllll

     ☰ ☰  ~TABLE~ ☰ ~CLUSTER~ ☰ ~TABLE~ (~TEMP~) ☰ ~INDEX~ (~CLUSTER~) ☰ ~INDEX~ ☰ ~INDEX~ (~UNIQUE~) ☰ ~INDEX~ (~BITMAP~) ☰ ~VIEW~ ☰ ~VIEW~ (~FIXED~) ☰ ~PROCEDURE~ ☰ ~TABLE~ (~FIXED~) ☰ ~SEQUENCE~ ☰ ~REMOTE~

     TABLE ACCESS           ☰ FULL                          ☰ X ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ BY GLOBAL INDEX ROWID         ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ BY GLOBAL INDEX ROWID BATCHED ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰  
     TABLE ACCESS           ☰ BY INDEX ROWID                ☰ X ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ BY INDEX ROWID BATCHED        ☰ X ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ BY LOCAL INDEX ROWID          ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ BY LOCAL INDEX ROWID BATCHED  ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ BY USER ROWID                 ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ SAMPLE                        ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ SAMPLE BY ROWID RANGE         ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     TABLE ACCESS           ☰ CLUSTER                       ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ FAST FULL SCAN                ☰   ☰   ☰   ☰   ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ FULL SCAN                     ☰   ☰   ☰   ☰ X ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ FULL SCAN (MIN/MAX)           ☰   ☰   ☰   ☰   ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ FULL SCAN DESCENDING          ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ RANGE SCAN                    ☰   ☰   ☰   ☰ X ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ RANGE SCAN (MIN/MAX)          ☰   ☰   ☰   ☰   ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ RANGE SCAN DESCENDING         ☰   ☰   ☰   ☰   ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ SAMPLE FAST FULL SCAN         ☰   ☰   ☰   ☰   ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ SKIP SCAN                     ☰   ☰   ☰   ☰ X ☰ X ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     INDEX                  ☰ UNIQUE SCAN                   ☰   ☰   ☰   ☰ X ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰   ☰ 
     BITMAP INDEX           ☰ FAST FULL SCAN                ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰ 
     BITMAP INDEX           ☰ FULL SCAN                     ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰ 
     BITMAP INDEX           ☰ RANGE SCAN                    ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰ 
     BITMAP INDEX           ☰ SAMPLE FAST FULL SCAN         ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰ 
     BITMAP INDEX           ☰ SINGLE VALUE                  ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰   ☰   ☰   ☰  
     VIEW PUSHED PREDICATE  ☰                               ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰   ☰   ☰ 
     VIEW                   ☰                               ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰ X ☰   ☰   ☰   ☰ 
     COLLECTION ITERATOR    ☰ PICKLER FETCH                 ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰   ☰ 
     FIXED TABLE            ☰ FIXED INDEX                   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰ 
     FIXED TABLE            ☰ FULL                          ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰   ☰ 
     REMOTE                 ☰                               ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ X
     SEQUENCE               ☰                               ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰   ☰ X ☰ 
   table }

  This matrix was created on a Oracle version 19.22 database with the following statement: 
code {
select * from (
    select
       case when count(*) > 0 then 'X' end flg,
       p.operation,
       p.options,  
       p.object_type
    from
       ( select operation, options, object_type from  dba_hist_sql_plan union all
         select operation, options, object_type from         v$sql_plan
       ) p
    where
       p.object_type is not null
    group by
       p.operation,
       p.options,  
       p.object_type
)  
pivot (
    any_value(flg) flg    for
    object_type in (
       'TABLE'           as "TABLE",
       'CLUSTER'         as "CLUSTER",
       'TABLE (TEMP)'    as "TABLE (TEMP)",
       'INDEX (CLUSTER)' as "INDEX (CLUSTER)",
       'INDEX'           as "INDEX",
       'INDEX (UNIQUE)'  as "INDEX (UNIQUE)",
       'INDEX (BITMAP)'  as "INDEX (BITMAP)",
       'VIEW'            as "VIEW",
       'VIEW (FIXED)'    as "VIEW (FIXED)",
       'PROCEDURE'       as "PROCEDURE",
       'TABLE (FIXED)'   as "TABLE (FIXED)",
       'SEQUENCE'        as "SEQUENCE",
       'REMOTE'          as "REMOTE"
    )
)
order by
   case when operation = 'TABLE ACCESS' then
        case when options = 'FULL'      then    '01'
             when options = 'CLUSTER'   then    '03'
        else                                    '02'
        end
        when operation = 'INDEX'        then    '10'
        when operation = 'BITMAP INDEX' then    '20'
        when operation like 'VIEW%'     then    '30'
   else operation end,
   options;
code } 

}

{ Find parent child operation relations

  From `v$sql_plan`:
code {
select
   count(*) cnt,
   p .operation, p .options,
   c1.operation, c1.options,
   c2.operation, c2.options,
   c3.operation, c3.options
from
   v$sql_plan    p                                                                                                           left join
   v$sql_plan    c1 on p.sql_id = c1.sql_id and p.child_number = c1.child_number and p.id = c1.parent_id and c1.position = 1 left join
   v$sql_plan    c2 on p.sql_id = c2.sql_id and p.child_number = c2.child_number and p.id = c2.parent_id and c2.position = 2 left join
   v$sql_plan    c3 on p.sql_id = c3.sql_id and p.child_number = c3.child_number and p.id = c3.parent_id and c3.position = 3
where
   p.operation = 'PX BLOCK'
group by
   p .operation, p .options,
   c1.operation, c1.options,
   c2.operation, c2.options,
   c3.operation, c3.options
order by
   p .operation, p .options,
   c1.operation, c1.options,
   c2.operation, c2.options,
   c3.operation, c3.options
;
code }

  Same idea, but from `dba_hist_sql_plan`:
code {
select
   count(*) cnt,
   p .operation, p .options,
   c1.operation, c1.options,
   c2.operation, c2.options,
   c3.operation, c3.options
from
   dba_hist_sql_plan    p                                                                                                                                      left join
   dba_hist_sql_plan    c1 on p.dbid = c1.dbid and p.plan_hash_value = c1.plan_hash_value and p.sql_id = c1.sql_id and p.id = c1.parent_id and c1.position = 1 left join
   dba_hist_sql_plan    c2 on p.dbid = c2.dbid and p.plan_hash_value = c2.plan_hash_value and p.sql_id = c2.sql_id and p.id = c2.parent_id and c2.position = 2 left join
   dba_hist_sql_plan    c3 on p.dbid = c3.dbid and p.plan_hash_value = c3.plan_hash_value and p.sql_id = c3.sql_id and p.id = c3.parent_id and c3.position = 3
where
   p.operation = 'SELECT STATEMENT'  -- and p.options = 'BY INDEX ROWID BATCHED'
group by
   p .operation, p .options,
   c1.operation, c1.options,
   c2.operation, c2.options,
   c3.operation, c3.options
order by
   p .operation, p .options,
   c1.operation, c1.options,
   c2.operation, c2.options,
   c3.operation, c3.options
;
code }

}
{ Find entire plans where a given operation is present

code {
with s as (
   select distinct
      sql_id,
      child_number
   from
      v$sql_plan
   where
      operation = 'VIEW'
)
select
    lpad(' ', 2*p.depth) || p.operation || ' ' || p.options,
    p.object_name,
    p.object_alias,
    p.object_type,
    t.sql_text,
    count(*) over (partition by s.sql_id, s.child_number) cnt
from
    s                                                 join
    v$sql_plan p on s.sql_id       = p.sql_id and
                    s.child_number = p.child_number  join
    v$sqlarea  t on t.sql_id       = p.sql_id
order by
    cnt,
    s.sql_id,
    s.child_number,
    p.id;
code }

}

sa:

  → development/databases/Oracle/installed/dynamic-performance-views/sql/plan/statistics[`v$sql_plan_statistics`] provides *actual* (not estimated as in → development/databases/Oracle/installed/dynamic-performance-views/sql/plan[`v$sql_plan`])
  statistics for every plan operation of an → development/databases/Oracle/SQL/statement/execution[executed SQL statement].
  -
  → development/databases/Oracle/installed/dynamic-performance-views/sql/plan/monitor[`v$sql_plan_monitor`] reports those actual data even broken down to a single
  → development/databases/Oracle/SQL/statement/execution[execution of an SQL statement].

 `→ development/databases/Oracle/installed/dynamic-performance-views/sql/workarea` shows some information about plan operators, for example how much memory the
  needed (→ development/databases/Oracle/architecture/instance/PGA/SQL-work-areas[work area]).

  → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/matrix-plan-operations[This SQL statement] creates a matrix of plan operations and
  columns in `→ development/databases/Oracle/SQL/statement/verbs/explain/plan_table` and can be used to which operators fill which column.

  → development/databases/Oracle/SQL/statement/execution/plan[SQL statement execution plan]

  → development/databases/Oracle/SQL/statement/execution/plan/operations/_statistics[Row source statistics]

? An execution plan operator may send multiple rows at once to its parent. In order to force the plan operators to send *one* row at at a time to their parents, the
  → development/databases/Oracle/adminstration/init-parameters/rowsets/enabled[init parameter `_rowsets_enabled`] can be set to `false`.
