$ Oracle: SQL statement
@ SQL statement

{ Identifiying SQL Statements

  { sql_id #ora-sql-stmt-ident-sqlid

    An SQL statement (or more accurately its text) is identified by an *SQL ID* which is a base 32 representation of the last 8 bytes of `kglnahsv` in
    → development/databases/Oracle/architecture/instance/fixed-tables/k/g/l/ob[`x$kglob`]. The *hash value* is just another
    → https://tanelpoder.com/2009/02/22/sql_id-is-just-a-fancy-representation-of-hash-value[fancy representation of the SQL ID].

   These values are used to find SQL statements in several places, for example in → development/databases/Oracle/installed/dynamic-performance-views/sql[`v$sql`].

code {
declare
   sql_md5    raw(16);
   hash_      raw(16);
   
   subtype dword is raw(4);

   sqlid_num number;
   sqlid     varchar2(13);

   type  dword_4 is varray(4) of dword;
   parts dword_4 := dword_4();

   sql_hash  varchar2(100);

begin

   sql_md5 := dbms_crypto.hash(
            utl_i18n.string_to_raw('select 42 from dual' || chr(0), 'AL32UTF8'),
            dbms_crypto.hash_md5
   );

   dbms_output.put_line('MD5 of SQL: ' || sql_md5);
  
   parts.extend(4);
   for i in 1 .. 4 loop
       parts(i) := utl_raw.substr(sql_md5, (i-1)*4+1, 4);
       parts(i) := utl_raw.reverse(parts(i));             -- Little/big endian?
  
   end loop;
  
   hash_ := utl_raw.concat(parts(1), parts(2), parts(3), parts(4));
  
   dbms_output.put_line('Hash: ' || hash_);

   for ob in (select * from x$kglob where kglnahsv = lower(hash_)) loop
       dbms_output.put_line(ob.kglnaobj);
   end loop;

   ------


-- declare
-- v_temp NUMBER := TO_NUMBER(RAWTOHEX(UTL_RAW.reverse(UTL_RAW.SUBSTR(v_md5, 9, 4)))|| RAWTOHEX(UTL_RAW.reverse(UTL_RAW.SUBSTR(v_md5, 13, 4))),RPAD('x', 16, 'x'));

   sqlid_num := to_number(
      rawtohex( utl_raw.concat(parts(3), parts(4) ) ),
      rpad('x', 16, 'x')
   );

   select 
      listagg(
         substr('0123456789abcdfghjkmnpqrstuvwxyz',
         mod(
           trunc(sqlid_num/power(32,level-1)),
           32 
         ) + 1 ,
         1
       ) 
   ) within group (order by level desc) into sqlid
   from dual 
   connect by level <= ceil(log(32, sqlid_num + 1));

   dbms_output.put_line('SQLID: ' || sqlid);

   for s in (select * from v$sql where v$sql.sql_id = sqlid) loop
       dbms_output.put_line(s.sql_text);
   end loop;

--
-- Convert sql_id to hash
-- Algorithm found @ Tanel's Poder website
--   https://tanelpoder.com/2009/02/22/sql_id-is-just-a-fancy-representation-of-hash-value
--   https://github.com/tanelpoder/tpt-oracle/blob/master/i2h.sql
--
   select
       trunc(mod(sum(( instr('0123456789abcdfghjkmnpqrstuvwxyz',substr(lower(trim(sqlid)),level,1))-1)*power(32,length(trim(sqlid))-level)),power(2,32))) into sql_hash
   from
       dual
   connect by
       level <= length(trim(sqlid));

   dbms_output.put_line('Hash: ' || sql_hash);

   for s in (select * from v$sql where v$sql.hash_value = sql_hash) loop
       dbms_output.put_line(s.sql_text);
   end loop;

   dbms_output.put_line('dbms_utility.sqlid_to_sqlhash(): ' || → development/databases/Oracle/installed/packages/dbms/utility/api/sqlid_to_sqlhash[dbms_utility.sqlid_to_sqlhash](sqlid));

end;
/
code }

    Of course, an sql id can be calculated much easier with → development/databases/Oracle/installed/packages/dbms/sql_translator/api/sql_id[`dbms_sql_translator.sql_id`].

    See also the → development/databases/Oracle/SQL-Plus[SQL*Plus] predefined variable `_sql_id` and the
    SQL*Plus command → development/databases/Oracle/SQL-Plus/set/feedback#sql-plus-feedback-sql-id[`set feedback on sql_id`].

    { sql_exec_id

      …

    }

  }
  { force_matching_signature / exact_matching_signature #ora-sql-stmt-ident-matching_signature

    An SQL statement's *signature* is calculated by hashing the text of the SQL statement after changing its keywords to uppercase and removing whitespace.
    
    Thus, a signature, identifies statements that execute equally. Multiple SQL IDs map to the same signature.

code {
select
   count(*) over (partition by force_matching_signature) cnt,
   force_matching_signature,
   sql_id,
   sql_fulltext
from
   v$sqlarea
where
   force_matching_signature <> 0
order by
   cnt desc;
code }

code {
select
   → development/databases/Oracle/installed/packages/dbms/sqltune[dbms_sqltune.sqltext_to_signature]('select  count(abc) from def where ghi = 9 and bitand(flags, 128) = 0', force_match=>1) sig_1,
   → development/databases/Oracle/installed/packages/dbms/sqltune[dbms_sqltune.sqltext_to_signature]('select count( abc) from def where ghi = 7 and bitand(flags,  65) = 1', force_match=>1) sig_2
from
   dual;
code }

  }

}
{ Statement-level atomicity

  In Oracle, an SQL statement runs with so called «statement-level atomicity» which means that the statement either completely succeeds or completely fails.

  If the statement fails, only the effects of the statement are rolled back.

}
{ Comments #ora-sql-comments

  { ORA-01756: quoted string not properly terminated

    The following two «comments» cause a → development/databases/Oracle/errors/ORA-01756_quoted-string-not-properly-terminated
code {
begin
    → development/databases/Oracle/installed/packages/dbms/output/api/put_line[dbms_output.put_line]('foo');
/*
    → development/databases/Oracle/installed/packages/dbms/output/api/put_line[dbms_output.put_line]('*/');
*/
end;
/
code }

code {
begin
   → development/databases/Oracle/installed/packages/dbms/output/api/put_line[dbms_output.put_line]('two
lines');
-- → development/databases/Oracle/installed/packages/dbms/output/api/put_line[dbms_output.put_line]('two
lines');

end;
/
code }

  }

}
{ TODO

  ? Internally, Oracle uses the functions `rpisplu()`, `kprbprs()`, `opiprs()` and `OCIStmtPrepare()` to parse SQL Statements.

}

sa:

  When Oracle is requested to → development/databases/Oracle/SQL/statement/execution[execute] an SQL statement,
  the → development/databases/Oracle/optimizer tries to determine the most efficient way to to so, resulting in a so-called
  → development/databases/Oracle/SQL/statement/execution/plan[execution plan].

  Execute *dynamic SQL Statements* in → development/databases/Oracle/PL-SQL with
    • `→ development/databases/Oracle/PL-SQL/execute-immediate`
    • `→ development/databases/Oracle/installed/packages/dbms/sql`

  → development/databases/Oracle/installed/packages/utl/xml/parse[Semantically parse SQL statements with `utl_xml.parseQuery`]

  The *maximum length of a query* is recorded in `→ development/databases/Oracle/installed/data-dictionary/high_ater_mark_statistics`.

  The PL/SQL package → development/databases/Oracle/PL-SQL/libs/personal/sql_stmt[`sql_stmt`].

  → development/databases/Oracle/installed/data-dictionary/statements[`dba_statements`] lists SQL statements that are found in
  PL/SQL objects.

  The init parameter → development/databases/Oracle/adminstration/init-parameters/plscope_settings[`plscope_settings`].

 `→ development/databases/Oracle/installed/packages/dbms/utility/api/expand_sql_text` translates an SQL statement into a semantically equivalent one which does not reference any
  → development/databases/Oracle/objects/views[views] or
  → development/databases/Oracle/objects/synonyms[synonyms] (only references
  → development/databases/Oracle/objects/tables[tables]).

  The two → development/databases/Oracle/PL-SQL/block/exception-handler[PL/SQL exception] related functions
  → development/databases/Oracle/PL-SQL/block/exception-handler/sqlerrm-sqlcode[`sqlerrm` and `sqlcode`] cannot be used in an SQL statement.
  
  Using → development/databases/Oracle/objects/triggers#ora-trigger-erroneous-sql[`servererror` triggers] to catch erroneous
  SQL statements.

  In → development/Software/Oracle-SQL-Developer, the text of an SQL statement can be formatted by pressing the
  → development/Software/Oracle-SQL-Developer#sql-developer-keyboard-shortcuts[keyboard shortcut] `ctrl+F7`.

  Starting with → development/databases/Oracle/Releases-and-versions/23c, the last 52 (or so…) executed SQL statements can be queried from `→ development/databases/Oracle/installed/dynamic-performance-views/sql/history`.

  → development/databases/Oracle/SQL/statement/bind-variables
