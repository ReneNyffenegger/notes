$ Oracle: GRAPH_TABLE
@ graph_table

`GRAPH_TABLE` is an operator that can be used as a *table expression* in a `→ development/databases/Oracle/SQL/select/from` clause.
  -
The operator requires three clauses between its parantheses:
code {
graph_table( graph_reference , graph_pattern , graph_table_shape )
code }

table { ll
  `graph_reference` ☰  The name of the graph that was previously created with the `create property graph` statement.
  `graph_pattern` ☰ Vertex and edge patterns, and search conditions. The pattern determines the set of solutions from the graph.
  `graph_table_shape` ☰ The final `columns(…)` part projects the solutions to columns (i. e. produces a tabular format suitable for the enclosing `→ development/databases/Oracle/SQL/select` statement).
table }


{ Graph pattern

  The *graph pattern* starts with the keyword `match` and is followed by
      • a list of (comma separated) path patterns and
      • an optional (graph pattern) `where` clause

  { Path pattern

    A *path pattern* matches a «path» through vertices and edges.

    table { ll
      `( … )` ☰ Parantheses match a vertex
      `[ … ]` ☰ Square brackets match an edge
    table }

    The elements of the path patterns are not required to alternate between vertices and edges.
    -
    The following semantics apply:
      • Two consecutive vertex patterns are only allowed if one of the vertex patterns is contained in a parenthesized path pattern while the other one is not. In this case, the vertex patterns bind to the same vertex.
      • Two consecutive edge patterns conceptually have an implicit vertex pattern between them.



  }

}

sa:
  → development/databases/Oracle/SQL/PGQ
