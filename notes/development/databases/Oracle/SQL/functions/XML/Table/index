$ Oracle SQL functions: XMLTable
@ XMLTable

`XMLTable`: create a relational table (rows/columns) from  an → development/XML/XQuery expression.
-
The function is likely to occur in the `→ development/databases/Oracle/SQL/select/from` clause.

gh|oracle-patterns|/SQL/functions/xml/xmltable/select.xmltype.dual.sql||

{ Turning an inline-XML document into a table

code {
select
   t.*
from
   xmlTable(
     '/nums/num'
      passing → development/databases/Oracle/installed/types/XMLType[XMLType] (
          '<nums>
             <num><n>1</n><t>one</t></num>
             <num><n>1</n><t>one</t></num>
             <num><n>2</n><t>two</t></num>
             <num><n>3</n><t>three</t></num>
             <num><n>5</n><t>five</t></num>
             <num><n>8</n><t>eight</t></num>
          </nums>
      ')
      columns
         n   number       path  'n',
         t   varchar(10)  path  't'
   ) t;
code }

}
{ Generate a sequence of numbers

code {
select
   → development/databases/Oracle/objects/tables/columns/pseudo/rownum
from
   xmlTable('1 to 42');
code }


  Interestingly, the following statement throws an error:
code {
create table tq84_xt as
select
   column_value val
from
   xmlTable('1 to 42');
--
-- ORA-64464: XML event error
-- ORA-19202: Error occurred in XML processing
-- In line 1 of orastream:
-- LPX-00210: expected '<' instead of '1'
code }

  See also → development/databases/Oracle/SQL/_examples/generate-rows#ora-gen-data-rownum[generating a given amount of records] with the `xmlTable` function.

}

{ SQL Plan Operation


  `xmlTable` creates a the → development/databases/Oracle/SQL/statement/execution/plan/operations[plan operation]
  `→ development/databases/Oracle/SQL/statement/execution/plan/operations/collection-iterator/pickler-fetch`.

code {
→ development/databases/Oracle/SQL/statement/verbs/explain for
select
   *
from
   xmltable('1 to 42');

select * from table(dbms_xplan.display(format=>'basic'));
--
-- -------------------------------------------------------------------
-- | Id  | Operation                         | Name                  |
-- -------------------------------------------------------------------
-- |   0 | → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select                  |                       |
-- |   1 |  → development/databases/Oracle/SQL/statement/execution/plan/operations/collection-iterator/pickler-fetch[COLLECTION ITERATOR PICKLER FETCH]| XQSEQUENCEFROMXMLTYPE |
-- -------------------------------------------------------------------
code }

}
{ Split comma separated values (CSV) to columns

 `xmltable` can be used to to turn comma separated values into columns.

  The values need to be preprocessed so that each value is enclosed in apostrophes.
  -
  For example, `foo,bar,baz` needs to be converted to `"foo","bar","baz"` which can be achieved with `'"' || replace(val, ',', '"') || '"'`.

  Most basic query:
code {
select * from xmltable('"foo","bar","baz"');
--
-- Result Sequence
-- ---------------
-- foo
-- bar
-- baz
code }

  Using `trim` to get varchar2 values and a column alias `val`:
code {
select trim(column_value) va from xmltable('"foo","bar","baz"');
-- VAL
-- ---
-- foo
-- bar
-- baz
code }

  Using `replace` to embed values in apostrophes:
code {
select trim(column_value) val from xmltable(( -- Note the double parantheses!
  '"' ||                                      -- With single parantheses, error message is thrown: ORA-02000: missing COLUMNS keyword
  replace('foo,bar,baz', ',', '","') ||
  '"'
));
code }

}

sa:
  → development/databases/Oracle/SQL/functions/XML

  Using `xmlTable` to → development/databases/Oracle/installed/data-dictionary/optstat/operations#dba_optstat_operations-notes[parse the `notes` column] of `→ development/databases/Oracle/installed/data-dictionary/optstat/operations`.

 `→ development/databases/Oracle/SQL/functions/json/table`
