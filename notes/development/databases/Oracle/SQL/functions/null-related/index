$ NULL related Oracle functions

Some → development/databases/Oracle/SQL/functions[Oracle functions] that are related to `→ development/databases/Oracle/SQL/null`.


{ NVL #nvl

 `nvl` is lazily evaluated:
  gh|Oracle-Patterns|/SQL/functions/null_related/nvl_not_lazy_evaluated.sql||

  SQL Server's equivalent of `nvl` is → development/databases/SQL-Server/T-SQL/functions/isNull[`isNull`].

}
{ NVL2 #nvl2

code {
nvl2(tested_value, 'value if not null', 'value if null')
code }

  gh|Oracle-Patterns|/SQL/functions/null_related/nvl2.sql||

}
{ LNNVL #lnnvl

`lnnvl` is equivalent to the → misc/ISO/9075[SQL standard's] `is not true` predicate (compare → misc/ISO/9075/features[feature] F571).

 Assuming that `A` and `B` are expressions that evalute to a non-null value, the following is the result table of `lnnvl`:
 table { ll
   `lnnvl(   A =    A)` ☰ `false`
   `lnnvl(   A =    B)` ☰ `true`
   `lnnvl(   A = null)` ☰ `true`
   `lnnvl(null = null)` ☰ `true`
 table }

 `lnnvl` can only be used in `where` clauses.

  gh|Oracle-Patterns|/SQL/functions/null_related/lnnvl.sql||

}
{ NULLIF #nullif

 `nullif(a, b)` evaluates to `null` if `a` is equal to `b`.

  gh|Oracle-Patterns|/SQL/functions/null_related/nullif.sql||

 `nullif` is especially useful to prevent → development/databases/Oracle/errors/ORA-01476_divisor-is-equal-to-zero errors.


}
sa:

 `→ development/databases/Oracle/SQL/functions/null-related/sys_op_map_nonnull` allows to compare two values, even if they're `null`.

  → development/databases/Oracle/SQL/functions
