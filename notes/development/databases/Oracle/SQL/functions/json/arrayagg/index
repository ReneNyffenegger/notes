$ Oracle: JSON_ARRAYAGG
@ json_arrayagg

`json_arrayagg` aggregates JSON values from multiple records into a JSON array. Thus, it lends itself to be used to turn SQL results into a an array of arrays:
code {
select json_arrayagg(
   → development/databases/Oracle/SQL/functions/json/array[json_array](object_name, object_type)
   returning clob
)
from
   user_objects;
code }

Alternatively, aggregating values returned by `json_object` rather than `json_array` returns an array of objects:
code {
select json_arrayagg(
   → development/databases/Oracle/SQL/functions/json/object[json_object](key 'name' value object_name,
               key 'type' value object_type)
   returning clob
)
from
   user_objects;  
code }

{ RETURNING CLOB clause

  By default, `json_arrayagg` returns a → development/databases/Oracle/SQL/data-types/varchar2[`varchar2`] whose maximum length is limited.
  -
  If the length of the returned JSON fragment exceeds this length limitation, the error
  → development/databases/Oracle/errors/ORA-40478_output-value-too-large_maximum will be thrown.

  The `returning clob` clause returns the JSON fragment as a → development/databases/Oracle/SQL/data-types/lob[`clob`] which does not have such a length limit:
code {
json_arrayagg (
   …
   RETURNING CLOB
)
code }

}
{ ORDER BY

  When ordering the elements that `json_arrayagg` produces, the `→ development/databases/Oracle/SQL/select/order-by` clause must be placed *within* the `json_arrayagg` function:
code {
select json_arrayagg(
   json_array(
      object_name,
      object_type,
      created
   )
   ORDER BY               -- <== ORDER BY is here
      object_name
   returning clob
)
from
   user_objects
;
code }

  Note, the following statement does not throw an error (at least on 19c) - but the `order by` clause seems to have no influence on the result set:
code {
select json_arrayagg(
   json_array(
      object_name,
      object_type,
      created
   )
   returning clob
)
from
   user_objects
order by
   object_name   
;
code }

}
{ GROUP BY

code {
select
   owner,
   json_arrayagg(json_array(
      obj.object_name,
      obj.object_type,
      obj.created
   )
   returning clob)
from
   dba_objects obj
where
   obj.owner not in ('SYS', 'SYSTEM')
group by
   owner;
code }

}
{ NULL ON NULL clause

  The `null on null` clause controls if aggregated `→ development/databases/Oracle/SQL/null` values will be added to the resulting array.

code {
with t as (
   select 'foo' x from dual union all
   select 'bar' x from dual union all
   select  null x from dual union all
   select 'baz' x from dual
)
select
   json_arrayagg(x               ) x,
   json_arrayagg(x null   on null) xnn,
   json_arrayagg(x absent on null) xan -- absent on null is default
from
   t;

X                    XNN                       XAN
-------------------  ------------------------  -------------------
["foo","bar","baz"]  ["foo","bar",null,"baz"]  ["foo","bar","baz"]  
code }

}
{ Returning an empty array

  Unfortunately, it doesn't seem possible to force `json_arrayagg` to return `[]` if the aggregated set is empty. Instead, it simply returns `→ development/databases/Oracle/SQL/null`.
 
  The following statement returns `["*"]`:
code {
select json_arrayagg('*' returning clob)  from → development/databases/Oracle/SQL/dual where 1 = 1;
code }

  The following statement returns `null` (At least sometimes, I wished it returned `[]`):
code {
select json_arrayagg('*' returning clob)  from → development/databases/Oracle/SQL/dual where 1 = 0;
code }


}
