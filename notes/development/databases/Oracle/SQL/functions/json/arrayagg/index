$ Oracle: JSON_ARRAYAGG

`json_arrayagg` aggregates JSON values from multiple records into a JSON array. Thus, it lends itself to be used to turn SQL results into a an array of arrays:
code {
select json_arrayagg(
   → development/databases/Oracle/SQL/functions/json/array[json_array](object_name, object_type)
   returning clob
)
from
   user_objects;
code }

Alternatively, aggregating values returned by `json_object` rather than `json_array` returns an array of objects:
code {
select json_arrayagg(
   → development/databases/Oracle/SQL/functions/json/object[json_object](key 'name' value object_name,
               key 'type' value object_type)
   returning clob
)
from
   user_objects;  
code }

{ ORDER BY

  When ordering the elements that `json_arrayagg` produces, the `development/databases/Oracle/SQL/select/order-by` clause must be placed *within* the `json_arrayagg` function:
code {
select json_arrayagg(
   json_array(
      object_name,
      object_type,
      created
   )
   ORDER BY
      object_name
   returning clob
)
from
   user_objects
;
code }

  Note, the following statement does not throw an error (at least on 19c) - but the `order by` clause seems to have no influence on the result set:
code {
select json_arrayagg(
   json_array(
      object_name,
      object_type,
      created
   )
   returning clob
)
from
   user_objects
order by
   object_name   
;
code }

}
