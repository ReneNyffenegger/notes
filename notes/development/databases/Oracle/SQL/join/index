$ Oracle: Join
@ join

In an → development/databases/Oracle/SQL/statement, a *join* is part of the `from` clause. A join is needed to combines rows/records from multiple tables.
-
The *join condition* specifies how records from one table are related to the records of the other table.

Joins are typically used to query *master-detail table* relationships.

An essential task of the → development/databases/Oracle/optimizer is to find an → development/databases/Oracle/SQL/statement/execution/plan[execution plan] that executes the joins in an order and with *join-methods* to
reduce the database resources and time needed to execute the statement.
-
This order can be influenced with the → development/databases/Oracle/SQL/hints[`leading` (and somewhat also the `ordered` hint].

{ TODO

  Partial partition wise joins.

}

sa:
  → development/databases/Oracle/SQL/join/equi[Equijoins],
  → development/databases/Oracle/SQL/join/hash[hash joins],
  → development/databases/Oracle/SQL/join/semi[semi joins],
  → development/databases/Oracle/SQL/join/anti[anti joins],
  → development/databases/Oracle/SQL/join/outer[outer joins] and
  self joins.

  Bitmap join indices

  The `→ development/databases/Oracle/SQL/hints/list/leading` hint allows to specify the order in which tables are accessed when joining them.

  → development/databases/Oracle/SQL/join/apply/cross[`cross apply`]
