$ SQL*Plus: START
@ start

`start script.sql` runs (executes) the → development/databases/Oracle/SQL[SQL statements] recorded in `script.sql`.

SQL*Plus searches for the indicated file in the current directory first and then in the directories that are pointed at by
→ development/databases/Oracle/SQL-Plus/sqlpath[`$SQLPATH`].

{ Using @ when starting SQL*Plus

  The `@` can also be used on the → development/databases/Oracle/SQL-Plus/start/run-SQL-script-from-command-line[command line when SQL*Plus is invoked] to start a script file:
code {
sqlplus rene/xxxx@db  @do-stuff.sql
code }

}

{ test depth limit

  gh|Oracle-Patterns|/SQLPlus/start/test_depth_limit.sql||

}
{ Question mark

  The question mark is replaced with the value of → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n[`ORACLE_HOME`] which makes installing scripts (notably those found under
  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin[`$ORACLE_HOME/rdmbs/amdin`]) a bit easier:
code {
rene@ora19> @?/→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/utlsampl_sql[rdbms/admin/utlsqmpl]
code }

}
{ Enter value for xyz

  Sometimes, when executing an SQL script in SQL*Plus, the message `Enter value for xyz` show up:
code {
SQL> @update-customers.sql
Enter value for xyz:
code }

  The cause for this message is (probably) that the script contains substitution variables and SQL*Plus prompts for the value that should be assigned to such a variable.

  In order to turn off this message, use
code {
set define off
code }

}

sa:

  With 19c, SQL*Plus still does not allow to read lines that are → development/databases/Oracle/SQL-Plus/_errors/SP2-0027_Input-is-too-long_4999-characters_line-ignored[longer than 4999 characters]!

  The `echo` → development/databases/Oracle/SQL-Plus/set[setting]

  → development/databases/Oracle/SQL-Plus
