$ Oracle SQL*Plus
@ SQL*Plus

Oracle supports the → misc/ISO/9075[SQL standard] feature *B021* («direct SQL») with SQL*Plus

{ Start SQL*Plus #sql-plus-start

code {
SQLPLUS  [ [options]  [logon|/NOLOG]  [@sql-script  [arg-1, [arg-2…]]   ] ]
code }

  { Values for option #sql-plus-start-options

    table { ll
      `-help` ☰
      `-version` ☰
      `-c` or `-compatibility` ☰
      `-f` or `-fast` ☰ Using `-fast` is intended to improve genral performance. It changes the default values for → development/databases/Oracle/SQL-Plus/set/arraysize[`arraysize`], → development/databases/Oracle/SQL-Plus/set/lobprefetch[`lobprefetch`], → development/databases/Oracle/SQL-Plus/set/pagesize[`pagesize`], → development/databases/Oracle/SQL-Plus/set/rowprefetch[`rowprefetch`] and → development/databases/Oracle/SQL-Plus/set/statementcache[`statementcache`].
      `-l` or `-logon` ☰
      `-m` or `-markup` ☰ to set *markup options* (csv or html options).
      `-nologontime` ☰
      → development/databases/Oracle/SQL-Plus/_command-line/options/restrict[`-r` or `-restrict`] ☰ To set the restriction level (1, 2 or 3).
      `-silent` ☰ 
    table }

  }
  { Syntax of logon

code {
  username[/password][@connect_identifier]  | /
[ AS {SYSASM|SYSBACKUP|SYSDBA|SYSDG|SYSOPER|SYSRAC|SYSKM}]
[ edition=value ]
code }

rem {
    If connecting with a slash (`/`) instead of `username/password`, SQL*Plus tries to connect the user using his
rem }

    Note that the at symbol (`@`) is also used for `@sql-script`.

  }
  { @sql-script

    If `@sql-script` is specified, SQL*Plus will execute it. The symbol is probably borrowed from the alias of the
    → development/databases/Oracle/SQL-Plus/start[`start`] command.

    The value of `sql-script` can either be an → development/web/URI-URL-URN-IRI-URC#url[URL] or a local filename.

    Note that the at symbol (`@`) also has a meaning in the logon part.

  }
  { Profiles

    When SQL*Plus is started, it executes the *site profile*
   (→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/sqlplus/admin/glogin_sql[glogin.sql]) and the
   *user profile* (→ development/databases/Oracle/SQL-Plus/sqlpath/login[login.sql]), but see also the
    → development/databases/Oracle/SQL-Plus/_command-line/options/restrict[`-restrict` option].

  }
  { Using a net service name

    Assuming the *net service name* is `nsn`:
code {
sqlplus user/password@nsn
code }

    Net service names can be looked up in several places, for example *Oracle Names*.

  }
  { With easy connection identifier

    Connect to Oracle service named `serviceName` on machine/server named `machineName` on port number `port`:
code {
sqlplus user/password@machineName:port/serviceName
code }

    Starting with Oracle 19, there is an improved variant named *easy connection plus*

  }
  { «Long» connection string
    
code {
sqlplus user/password@"(description=(address=(protocol=tcp)(host=192.168.0.227)(port=1521))(connect_data=(sid=ora19)))"
code }

  }
  { Omitting password

    The → development/security/password[password] (after the first slash (`/`)) can be omited in which case SQL*Plus asks for the password.

  }
  { Client side wallet

    It's also possible to store credentials in a * client side wallet* in which case the password does not need to be supplied at all. In such a scenario, the user connects to the database using
    a simple slash:
code {
sqlplus /@DB
code }

  }
  { Preliminary connections

    A preliminary connection allows to create a *very* light connection to at least restart a database or execute `oradebug` commands if the instance seems to be hanging or
    the maximum number of processes has been reached (ORA-00020 maximum number of processes exceeded):
code {
$ sqlplus -prelim / as sysdba
SQL> oradebug …
SQL> shutdown …
code }

code {
$ sqlplus /nolog
SQL> set _prelim on
SQL> connect / as sysdba
code }

  }
}
{ cmd.exe / Character set (UTF8) #sqlplus-char-set

  When working with → development/Unicode/UTF-8 encoded files and → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] or → Windows/PowerShell on Windows,
  the → development/environment-variable[environment variable] → development/databases/Oracle/adminstration/init-parameters/nls#ora-nls_lang[`NLS_LANG`] should be set to `.AL32UTF8` and the → Windows/development/code-page[code page] set to 65001:
code {
C:\> → Windows/dirs/Windows/System32/cmd_exe/commands/set NLS_LANG=.AL32UTF8
C:\> → Windows/dirs/Windows/System32/chcp_com[chcp] 65001
C:\> sqlplus rene/theUglySecret@ora19
…
code }


}
{ Colors when started in cmd.exe #sql-plus-colors

  Colored output (using → Linux/shell/ANSI-escape-sequences[ANSI Escape Codes]) in SQL*Plus, when started from → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`], can be enabled with the
  following simple invocation of → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[`powershell.exe`] (See also
  → development/languages/VBScript/examples/colored-output[writing colored output to the console with VBScript]):
code {
host → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[powershell.exe] -noProfile -executionPolicy bypass -c "exit"
code }

  After enabling colors, they can be used like so:
code {
begin
   dbms_output.put_line(chr(27) || '[93m' || 'Warning: ...'); -- Print something in yellow
   dbms_output.put_line(chr(27) || '[91m' || 'Error  : ...'); -- Print something in red
   dbms_output.put_line(chr(27) || '[0m'  || 'Normal text '); -- Reset color
end;
/
code }

}

{ Some commands

  table { ll

    → development/databases/Oracle/SQL-Plus/attribute[`attribute`] ☰
   `→ development/databases/Oracle/SQL-Plus/accept` ☰
    → development/databases/Oracle/SQL-Plus/break[`break`] ☰
    → development/databases/Oracle/SQL-Plus/column[`column`] ☰
    → development/databases/Oracle/SQL-Plus/connect[`connect`] ☰
    → development/databases/Oracle/SQL-Plus/define[`define`] ☰
   `→ development/databases/Oracle/SQL-Plus/describe` ☰ Shows basic(!) characteristics of tables, views, object types or PL/SQL objects.
    → development/databases/Oracle/SQL-Plus/edit[`edit`] ☰
    → development/databases/Oracle/SQL-Plus/execute[`execute`] ☰ Execute a single PL/SQL statement.
    → development/databases/Oracle/SQL-Plus/exit[`exit`] ☰ terminates an SQL*Plus session
   `→ development/databases/Oracle/SQL-Plus/host` ☰ executes a shell (or, on Windows, a cmd.exe) command without leaving or terminating SQL*Plus
    → development/databases/Oracle/SQL-Plus/new_value[`new_value`] ☰
    → development/databases/Oracle/SQL-Plus/password[`password`] ☰
   `→ development/databases/Oracle/SQL-Plus/print` ☰
    → development/databases/Oracle/SQL-Plus/recover[`recover`] ☰
    → development/databases/Oracle/SQL-Plus/set[`set`] ☰
    → development/databases/Oracle/SQL-Plus/shutdown[`shutdown`] ☰
    → development/databases/Oracle/SQL-Plus/show[`show`]  ☰ ? → development/databases/Oracle/SQL-Plus/show/parameters-spparameters[`show parameters` and `show spparameters`]
    → development/databases/Oracle/SQL-Plus/spool[`spool`] ☰ starts writing output to a file.
    → development/databases/Oracle/SQL-Plus/start[`start` (or `@`)] ☰  runs (executes) → development/databases/Oracle/SQL[SQL statements] in an SQL file (script).
    → development/databases/Oracle/SQL-Plus/store[`store`] ☰ Store attributes of the current SQL*Plus session in a script.
    → development/databases/Oracle/SQL-Plus/timing[`timing`] ☰ measure elapsed time for sections in SQL Scripts
    → development/databases/Oracle/SQL-Plus/whenever/sqlerror[`whenever sqlerror`] ☰
   `→ development/databases/Oracle/SQL-Plus/variable` ☰ Define a bind → development/databases/Oracle/SQL-Plus/variable[variable]

   table }

}

rem {

  { Commands

table { llll
  ~command~ ☰ SQL Plus ☰ → development/databases/Oracle/SQLcl ☰ → development/Software/Oracle-SQL-Developer/GUI/SQL-Worksheet[SQL Dev. Worksh.]
  `@` ☰ ? ☰ ? ☰ ✓
  `@@` ☰ ? ☰ ? ☰ ✓
  `/` ☰ ? ☰ ? ☰ ✓
  `acc[ept]` ☰ ? ☰ ? ☰ ✓
  `apex` ☰ ? ☰ ? ☰ ✓
  `a[ppend]` ☰ ? ☰ ? ☰ ✓
  `archive_log` ☰ ? ☰ ? ☰ ✓
  `bre[ak]` ☰ ? ☰ ? ☰ ✓
  `bti[tle]` ☰ ? ☰ ? ☰ ✓
  `cd` ☰ ? ☰ ? ☰ ✓
  `c[hange]` ☰ ? ☰ ? ☰ ✓
  `clear` ☰ ? ☰ ? ☰ ✓
  `comp[ute]` ☰ ? ☰ ? ☰ ✓
  `conn[ect]` ☰ ? ☰ ? ☰ ✓
  `copy` ☰ ? ☰ ? ☰ ✓
  `ctas` ☰ ? ☰ ? ☰ ✓
  `def[ine]` ☰ ? ☰ ? ☰ ✓
  `del` ☰ ? ☰ ? ☰ ✓
  `desc[ribe]` ☰ ? ☰ ? ☰ ✓
  `disc[onnect]` ☰ ? ☰ ? ☰ ✓
  `exit` ☰ ? ☰ ? ☰ ✓
  `find` ☰ ? ☰ ? ☰ ✓
  `format` ☰ ? ☰ ? ☰ ✓
  `get` ☰ ? ☰ ? ☰ ✓
  `help` ☰ ? ☰ ? ☰ ✓
  `information` ☰ ? ☰ ? ☰ ✓
  `i[nput]` ☰ ? ☰ ? ☰ ✓
  `l[ist]` ☰ ? ☰ ? ☰ ✓
  `load` ☰ ? ☰ ? ☰ ✓
  `oerr` ☰ ? ☰ ? ☰ ✓
  `ho[st]` ☰ ? ☰ ? ☰ ✓
  `passw[ord]` ☰ ? ☰ ? ☰ ✓
  `pau[se]` ☰ ? ☰ ? ☰ ✓
  `print` ☰ ? ☰ ? ☰ ✓
  `quit` ☰ ? ☰ ? ☰ ✓
  `rem[ark]` ☰ ? ☰ ? ☰ ✓
  `reserved_words` ☰ ? ☰ ? ☰ ✓
  `r[un]` ☰ ? ☰ ? ☰ ✓
  `sav[e]` ☰ ? ☰ ? ☰ ✓
  `set` (valid SET options corresponding to options in SHOW ALL output) ☰ ? ☰ ? ☰ ✓
  `seterrorl` ☰ ? ☰ ? ☰ ✓
  `show` (SHOW ALL and individual options shown in SHOW ALL output) ☰ ? ☰ ? ☰ ✓
  `shu[tdown]` ☰ ? ☰ ? ☰ ✓
  `spo[ol]` {filename[.ext] | OFF} ☰ ? ☰ ? ☰ ✓
  `sta[rt]` ☰ ? ☰ ? ☰ ✓
  `startup` ☰ ? ☰ ? ☰ ✓
  `timi[ng]` ☰ ? ☰ ? ☰ ✓
  `tti[tle]` ☰ ? ☰ ? ☰ ✓
  `undef[ine]` ☰ ? ☰ ? ☰ ✓
  `var[iable]` ☰ ? ☰ ? ☰ ✓
  `whenever` ☰ ? ☰ ? ☰ ✓
  `xquery` ☰ ? ☰ ? ☰ ✓
table }


  }

rem }

{ TODO


  The `standby` keyword for → development/databases/Oracle/High-Availability/Data-Guard[Data Guard] → development/databases/Oracle/High-Availability/Data-Guard#dg-standby-db[standby databases].

}

sa:

  In order to see the output of → development/databases/Oracle/installed/packages/dbms/output[`dbms_output`], it must be enabled with
  → development/databases/Oracle/SQL-Plus/set/serveroutput[`set serveroutput on`].

  Using → development/databases/Oracle/SQL-Plus/_variables[variables] in SQL*Plus.

  → development/databases/Oracle/SQLcl[SQLcl]

  → development/databases/Oracle/tools

  In order to use SQL*Plus features in → development/Software/Oracle-SQL-Developer, → development/Software/Oracle-SQL-Developer#sql-developer-f5-vs-f9[F5] rather than F9 should be used.

  → development/databases/SQL-Server/tools-utilities/sqlcmd might be → development/databases/SQL-Server[SQL Server's] counterpart to SQL*Plus.

  → development/databases/Oracle/SQL-Plus/sqlpath[Scripts to be stored under `$SQLPATH`]

  The error messages
    • → development/databases/Oracle/SQL-Plus/_errors/SP2-0027_Input-is-too-long_4999-characters_line-ignored and
    • → development/databases/Oracle/SQL-Plus/_errors/SP2-0341_line-overflow-during-variable-substitution

  The `PRODUCT_USER_PROFILE` tables (which are installed by → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/sqlplus/admin/pupbld_sql[`$ORACLE_HOME/sqlplus/admin/pupbld.sql`])
  allow to disable commands per user.
  -
  Starting with Oracle 19c, this table is desupported.

  The executable of SQL*Plus is → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin/sqlplus[`$ORACLE_HOME/bin/sqlplus`].

  The → development/Data/open/Wikidata entity → https://opendata.renenyffenegger.ch/Wikimedia/Wikidata/entity/Q2575010[Q2575010].

  The → development/databases/Oracle/objects/jobs type *SQL script* allows to schedule and execute an SQL script in or by SQL*Plus.
