$ Oracle: Enabling PL/SQL functions for parallel execution

code {
create or replace package tq84_pkg
    authid definer
as
    function f_non_parallel (p number)    return number;
    
    function f_parallel     (p number)    return number
                                          PARALLEL_ENABLE;
end tq84_pkg;
/
code }

code {
select
   procedure_name,
   parallel
from
   → development/databases/Oracle/installed/data-dictionary/procedures[user_procedures]
where
   object_name = 'TQ84_PKG' and
   procedure_name is not null;
code }

{ Execution plan

  The influence of PL/SQL functions that are enabled for parallel executions on the → development/databases/Oracle/SQL/statement/execution/plan[execution plan] is demonstrated below.

  First, we need  a table to select from. The table has the *parallel attribute*:
code {
create table tq84_px_t (
  id  number,
  val varchar2(10)
) parallel 4;
code }

  The following package specification has two functions: `non_px_f` is an ordinary function, `px_f` is enabled for parallel execution:
code {
create or replace package tq84_px_p
   authid definer
as

   function  non_px_f(v varchar2) return number;
   function      px_f(v varchar2) return number parallel_enable;

end tq84_px_p;
/
code }

  The package's body:
code {
create or replace package body tq84_px_p as

   function  non_px_f(v varchar2) return number is begin
      return case when v = 'xyz' then 1 else 0 end;
   end non_px_f;

   function  px_f(v varchar2) return number is begin
      return case when v = 'xyz' then 1 else 0 end;
   end px_f;

end tq84_px_p;
/
code }

  Show the execution plan when using the non parallel function:
code {
explain plan for
   select * from tq84_px_t
   where
      tq84_px_p.non_px_f(val) = 1;

select * from table(dbms_xplan.display(format => 'basic'));
--
-- ---------------------------------------
-- | Id  | Operation         | Name      |
-- ---------------------------------------
-- |   0 | → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select  |           |
-- |   1 |  → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/full[TABLE ACCESS FULL]| TQ84_PX_T |
-- ---------------------------------------
code }

  With the parallel enabled function, the statement will be executed in parallel:
code {
explain plan for
   select  * from tq84_px_t
   where
      tq84_px_p.px_f(val) = 1;

select * from table(dbms_xplan.display(format => 'basic'));
--
-- -----------------------------------------
-- | Id  | Operation            | Name      |
-- ------------------------------------------
-- |   0 | → development/databases/Oracle/SQL/statement/execution/plan/operations/statement/select     |           |
-- |   1 |  → development/databases/Oracle/SQL/statement/execution/plan/operations/px/coordinator[PX COORDINATOR]      |           |
-- |   2 |   → development/databases/Oracle/SQL/statement/execution/plan/operations/px/send/qc/random[PX SEND QC (RANDOM)]| :TQ10000  |
-- |   3 |    → development/databases/Oracle/SQL/statement/execution/plan/operations/px/block/iterator |           |
-- |   4 |     → development/databases/Oracle/SQL/statement/execution/plan/operations/table-access/full[TABLE ACCESS FULL]| TQ84_PX_T |
-- -----------------------------------------
code }

  Cleaning up:
code {
drop table   tq84_px_t;
drop package tq84_px_p;
code }

}

{ TODO

 *PDML disabled because function is not pure and not declared parallel enabled*

}

sa:

  The → development/databases/Oracle/SQL/statement/execution/plan/operations[SQL plan operator] `PX COORDINATOR FORCED SERIAL`.

  → development/databases/Oracle/PL-SQL/function-procedure[PL/SQL functions and procedures]

  → development/databases/Oracle/SQL/statement/execution/parallel[Parallel SQL execution]

  The (deprecated) pragma → development/databases/Oracle/PL-SQL/pragma/restrict_references[`restrict_references`].
