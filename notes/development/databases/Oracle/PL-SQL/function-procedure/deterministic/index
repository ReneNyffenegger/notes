$ Oracle PL/SQL: Deterministic functions

code {
CREATE FUNCTION func_name … RETURN number DETERMINISTIC
AS
  ….
code }

A → development/databases/Oracle/PL-SQL/function-procedure[PL/SQL function] that is declared deterministic asserts that a given combination of input-parameter values
always returns the same value. However, Oracle does not verify this assertion.

The purpose of the deterministic function is ot help the → development/databases/Oracle/optimizer *avoid redundant* function calls.
-
A function is required to be deterministic if it used for a
  • function-based index
  • → development/databases/Oracle/objects/tables/columns/virtual[virtual column] definition
  • from a query of a materialized view that is marked `refresh fast` or `eanble query rewrite`

Deterministic functions are especially useful when used in
  • → development/databases/Oracle/SQL/clauses/where[`where` clauses]
  • → development/databases/Oracle/SQL/select/order-by[`order by` clauses]
  • → development/databases/Oracle/SQL/select/group-by[`group by` clauses]
  • `map` or `order` methods of an SQL type
  • selection/criteria functions
  

{ Impact when used in WHERE clause

  The following example tries to demonstrate the impact of a deterministic function when used in a `where` clause of a → development/databases/Oracle/SQL/select[select statement].

  The → development/databases/Oracle/PL-SQL package contains two functions of which one is deterministic and the other is not. These functions produce the same result: they multiply the
  passed number by two.
  -
  A special feature of these functions is that they call → development/databases/Oracle/installed/packages/dbms/lock/sleep[`dbms_lock.sleep`] to artificially prolongate the time spent in these functions.
  This will allow to roughly estimate how many times the function was called.
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/where-clause/pkg.sql||

  This is the table on which we're going to query a record:
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/where-clause/tab.sql||

  Finally the select statements.
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/where-clause/select.sql||

  The first select statement takes approximately three seconds because the table is queried in a full table scan and the non-deterministic function is called for each record during the scan.
  -
  However, the second select statement takes approximately one second because the function, by virtue of its determinacy, is called only once.

}
{ Caching of result

  The result of deterministic functions for a given combination of parameter values is cached within one *fetch* in a select statement. In each individual fetch, the result for a parameter-value
  combination is cached again and thus entails another function call.
  -
  This behaviour is demonstrated with the following PL/SQL and SQL snippets:

  We need a log table to record each call of the deterministic function.
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/cache-result/log-table.sql||

  The deterministic function itself.
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/cache-result/func.sql||

  Calling the function from an SQL statement.
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/cache-result/select.sql||

  After executing the previous select statement in SQL*Plus, the log table contains 187 (=11 Fetches with 17 calls to the function) records. (For a reason that I don't understand, when doing the same
  test in SQL Developer, I get 186 records only).
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/cache-result/select-count-from-log-table.sql||

  
  Cleaning up
  gh|oracle-patterns|/PL-SQL/function-procedure/deterministic/cache-result/clean-up.sql||

}

sa:

  → development/databases/Oracle/PL-SQL/function-procedure[PL/SQL functions and procedures]

  → development/databases/Oracle/PL-SQL/function-procedure/overhead-in-SQL

  → development/databases/Oracle/SQL/clauses/where/plsql-function[Using a PL/SQL function] in a `where` clause.

  The (deprecated) pragma → development/databases/Oracle/PL-SQL/pragma/restrict_references[`restrict_references`].

  → development/databases/Oracle/errors/ORA-54002_only-pure-functions-can-be-specified-in-a-virtual-column-expression
