$ Oracle PL/SQL: AUTHID CURRENT_USER | DEFINER
@ authid

The same table or view name can be used in different schemas. Hence, if not qualified, they refer to different physical tables.
-
When a → development/databases/Oracle/PL-SQL stored procedure looks up unqualified table names, it does so either in the context and the privileges of the caller or
in the context and with the privilges of the procedure's owner.

The optional `AUTHID` clause specifies the behavior the stored procedure uses. It can be set to
  • `AUTHID CURRENT_USER` (procedure runs in context of caller)
  • `AUTHID DEFINER` (procedure runs in context of owner)

If not explicitely specified, the default is `AUTHID DEFINER`.

A source of confusion might be that looking up names of stored procedure is not affected by the `authid` clause: they are always found in the context of the procedure owner.

{ Location of the AUTHID clause 

  The `AUTHID` clause immediately follows the `CREATE PROCEDURE`, `CREATE FUNCTION`, `CREATE PACKAGE` or
 `CREATE TYPE` statements, as shown in the following:
  -
 `AUTHID` as used in a package declaration …
code {
create package pkg
   AUTHID CURRENT_USER
as
   … 
end pkg;
/
code }
 
  … in a function and procedure definition …
code {
create function f return number
   AUTHID CURRENT_USER
as begin
   …
end f;
/

create procedure p
  AUTHID CURRENT_USER
as begin
  null;
end p_authid_cu;
/
code }

  … and a type definition:
code {
create type t
   AUTHID CURRENT_USER
as object (
   …
);
code }

}
{ Effects on roles

  A procedure with `authid definer` disables all → http://www.adp-gmbh.ch/ora/misc/users_roles_privs.html#roles[roles] that are granted to the caller. This can lead to
  → http://www.adp-gmbh.ch/ora/err/ora_00942.html[ORA-00942] errors.

  If the procedure is created with `authid current_user`, the roles of the caller are enabled when the procedure is executed. However, in order to compile the procedures, the privileges still need to be granted directly.
}
{ Keyword DEFINER

  An object name can be prefixed with the keyword `definer` (for example `definer.tab_name`) which will then reference the object of the procedure's owner rather than executor
  in procedures declared as `authid current_user`.

}
{ Application allowed on schema levels only

  The application of the `authid` clause is allowed on schema levels only, that is, the clause cannot be applied to individual procedures or functions of a
  PL/SQL package or type.
  -
  Trying to do so results in a → development/databases/Oracle/adminstration/init-parameters/plsql_warnings/PLS-0157_Only-schema-level-programs-allow-AUTHID error.

}
{ Examples

  { Example from adp-gmbh.ch

    This is an example that I copied from my old web site → http://www.adp-gmbh.ch[adp-gmbh.ch] and updated on *2020-12-16* (added logging procedure).

    First, two users are created, one named `PROC_OWNER` and the other named `PROC_USER`. They're given the required → development/databases/Oracle/security/privileges[privileges] for this example:
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/create-users.sql||

    Now, user `PROC_OWNER` creates two tables, named `T` and `U` and fills them with `This is pkg_owner's table`.

   `PROC_USER` is then allowed to read `T`, but not `U`.
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/proc-owner-tables.sql||

   `PROC_OWNER` creates a simple logging procedure:
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/proc-owner-log_msg.sql||

   `PROC_OWNER` also creates the procedure `READ_T_CURRENT_USER` with `AUTHID CURRENT_USER`. This procedure simply selects the content of `T` and calls `log_msg` with the values found in `T`:
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/proc-owner-read_t_current_user.sql||

   `PROC_OWNER` then creates another procedure, `READ_U_DEFINER`, that reads from table `U`. This procedure runs under `AUTHID DEFINER`:
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/proc-owner-read_u_definer.sql||

    User `PROC_USER` is granted the → development/databases/Oracle/security/privileges[privilege] to execute both procedures:
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/grant-execute-to-proc-user.sql||

    Now, user `PROC_USER` comes into play. This user also creates two tables, again named `T` and `U` and fills them with `this is proc_user's table`:

   `PROC_USER` executes the procedure `READ_T_CURRENT_USER`:
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/exec-read_t_current_user.sql||
    The execution prints.
code {
PROC_OWNER: This is proc_user's table
code }

   *Note*: this procedure evaluates table names in the context of the *current user* (i.e. `PROC_USER`) but procedures (such as `LOG_MSG`) in the context of the owner of the package.

   `PROC_USER` also executes the procedure `READ_U_DEFINER`:
    gh|Oracle-Patterns|/PL-SQL/authid/example-01/exec-read_t_current_user.sql||

   This time, the output is:
code {
PROC_OWNER: This is proc_owner's table
code }

  }
  { EXECUTE IMMEDIATE #authod-exec-immediate

    The following example tries to demonstrate that → development/databases/Oracle/PL-SQL/execute-immediate[`execute immediate`] is executed in the context of the user that invokes a procedure
    that is defined with `authid current_user`:

    gh|Oracle-Patterns|/PL-SQL/authid/create_object.sql||

  }
  { Another example

    Another example that I should describe, eventually…

    gh|Oracle-Patterns|/PL-SQL/authid/example_01.sql||

  }

}
sa:
  → development/databases/Oracle/SQL/session-system-control/alter-session/current_schema[`alter session set current_schema = …`] also causes to find object names in the specified schema.

  The procedure `usr` of the → development/databases/Oracle/PL-SQL/libs/personal/assert[`assert` PL/SQL package].

  The → development/databases/Oracle/PL-SQL/errors-warnings#some-plsql-warnings[PL/SQL warning] *PLW-05018: unit … omitted optional AUTHID clause; default value DEFINER used*

  The column `authid` of → development/databases/Oracle/installed/data-dictionary/procedures[`dba_procedures`].

  The `PLW-05018: unit … omitted optional AUTHID clause; default value DEFINER used`  → development/databases/Oracle/PL-SQL/errors-warnings[PL/SQL warning].

  Unlike PL/SQL units, Java class schema objects run with the privileges of their invoker by default, not with definer's rights.
  -
  However, the `→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin/loadjava` tool has a `-definer` option to change this behavior.
