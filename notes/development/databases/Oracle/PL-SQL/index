$ Oracle PL/SQL
@ PL/SQL

PL/SQL is → development/databases/Oracle[Oracle's] implementation of the → misc/ISO/9075/features[SQL standard feature] B128 (Routine language SQL).

→ development/databases/Oracle/PL-SQL/collection-types

→ development/databases/Oracle/PL-SQL/execute-immediate[`execute immediate 'sql text'`] allows to execute *dynamic* → development/databases/Oracle/SQL/statement[SQL statements] from PL/SQL.

→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/utlrp_sql[`$ORACLE_HOME/rdbms/admin/utlrp.sql`] recompiles all existing PL/SQL modules that were previously in an INVALID state, such as packages, procedures, and types.

{ Compile all PL/SQL objects in a given schema #compile-plsql-objs
  
  The following anonymous block compiles PL/SQL objects in a given schema. It is intended to used with a selection critera in order to limit the objects that will be compiled.

  A variant of this code snippet can also be used because calling → development/databases/Oracle/installed/packages/dbms/utility/api/compile_schema[`dbms_utility.compile_schema`] from a PL/SQL object in the schema
  that should be compiled will block.

code {
begin
   for obj in (select object_name name, object_type type from user_objects where object_type in ('TYPE', 'PACKAGE', 'PROCEDURE', 'FUNCTION')) loop
       begin
       
       execute immediate 'alter ' || obj.type || ' ' || obj.name || ' compile';
       exception when others then
           if sqlcode in (
              - 2311, -- cannot alter with COMPILE option a valid type with type or table dependents
              - 6545, -- PL/SQL: compilation error - compilation aborted
              -24344  -- success with compilation error
           ) then
              null;
           else
              dbms_output.put_line(sqlerrm);
              dbms_output.put_line('alter ' || obj.type || ' ' || obj.name || ' compile');
           end if;
       end;
   end loop;
end;
/
code }

}

{ TODO

  As per a comment in `dbmspbt.sql` and → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/tracetab_sql[`tracetab.sql`], an *ICD* is a «call to an internal PL/SQL routine».
  -
  See also `stdspec.sql`.

 `→ development/databases/Oracle/installed/packages/dbms/session[dbms_session].reset_package` frees the memory being used for caching the execution state of all packages used in current → development/databases/Oracle/architecture/session.


}

sa:
  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/dplsql_bsq[`$ORACLE_HOME/rdbms/admin/dplsql.bsq`] creates PL/SQL related dynamic performance tables such as
 `procedure$`, `source$`, `idl_char$`, `idl_ub2$`, …

  → development/databases/Oracle/PL-SQL/statements/loop[Loop statements]

  → development/databases/Oracle/PL-SQL/inline

  → development/databases/Oracle/installed/packages/dbms/describe[`dbms_describe`] provides information about a PL/SQL object.

  → development/databases/Oracle/PL-SQL/compilation/conditional[Conditional compilation]

  The source code of PL/SQL objects can be queried from → development/databases/Oracle/installed/data-dictionary/source[`all_source`]. Errors
  from → development/databases/Oracle/installed/data-dictionary/errors[`all_errors`]. See also → development/databases/Oracle/PL-SQL/errors-warnings[errors and warnings] in PL/SQL.

  → development/databases/Oracle/PL-SQL/PL-Scope collects information about *identifiers* and SQL statements in PL/SQL source code.

  It's possible to declare PL/SQL procedures and functions for the scope of an → development/databases/Oracle/SQL/statement with the
  → development/databases/Oracle/SQL/clauses/with.

  PL/SQL code can be obfuscated with → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin/wrap[`$ORACLE_HOME/bin/wrap`].

 `→ development/databases/Oracle/installed/data-dictionary/objects/size` lists sizes of PL/SQL objects.

  → development/databases/Oracle/PL-SQL/ut

  → development/databases/Oracle/adminstration/init-parameters/event/list[Events] 10928 and 10938.
