$ PL/SQL: Conditional Compilation

The PL/SQL preprocessor directives `$if … $then`, `$else` and `$end` allow to selectively exclude (or include, for that matter) portions of PL/SQL when compiling it.
-
*NOTE*: its `$end`, not `$end if` and `$end` is not followed by a semicolon.

Variables («inquiry directives») which are evaluated in the `$if … $then` part of the preprocessor directive start with two dollor symbols.

{ Simple example

  When the following simple procedure is compiled and run, it will print `true`.

code {
create or replace procedure tq84_pp
   authid definer
as
begin
   $if true $then
       dbms_output.put_line('true' );
   $else
       dbms_output.put_line('false');
   $end
end;
/
code }

}
{ ErrorDirective

  gh|Oracle-Patterns|/PL-SQL/compilation/conditional/ErrorDirective.plsql||

}
{ reuse_settings

  gh|Oracle-Patterns|/PL-SQL/compilation/conditional/reuse_settings.plsql||

}
{ show_settings

  The options with which a PL/SQL object was compiled can be queried
  from → development/databases/Oracle/installed/data-dictionary/plsql/object_settings[`dba_plsql_object_settings`]:

  gh|Oracle-Patterns|/PL-SQL/compilation/conditional/show_settings.plsql||

}
{ test 1

  gh|Oracle-Patterns|/PL-SQL/compilation/conditional/test_01.sql||

}

sa:

  Using constants of `→ development/databases/Oracle/installed/packages/dbms/db_version` to make sure that a procedure is
  → development/databases/Oracle/installed/packages/dbms/db_version#dbms_db_version-cond-comp[running with a given Oracle version].

  → development/databases/Oracle/PL-SQL/errors-warnings/PLS-00174_a-static-boolean-expression-must-be-used

  → development/databases/Oracle/adminstration/init-parameters/plsql/ccflags[`plsql_ccflags`]

  → development/databases/Oracle/installed/packages/dbms/preprocessor[`dbms_preprocessor`]

 `→ development/databases/Oracle/installed/packages/utl/ident`

  → development/databases/Oracle/PL-SQL
