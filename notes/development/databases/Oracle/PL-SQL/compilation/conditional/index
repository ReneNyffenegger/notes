$ PL/SQL: Conditional Compilation

The PL/SQL preprocessor directives `$if … $then`, `$else` and `$end` allow to selectively exclude (or include, for that matter) portions of PL/SQL when compiling it.

*NOTE*: it's `$end`, not `$end if` and `$end` is not followed by a semicolon.

Variables («→ #plsql-inquiry-directives[inquiry directives]») which are evaluated in the `$if … $then` part of the preprocessor directive start with two dollar symbols.

{ Simple example

  When the following simple procedure is compiled and run, it will print `true`.

code {
create or replace procedure tq84_pp
   authid definer
as
begin
   $if true $then
       dbms_output.put_line('true' );
   $else
       dbms_output.put_line('false');
   $end
end;
/
code }

}
{ Different functionality on Development, UAT and Production environments

  Conditional compilation can be used to implement different functionalities depending on an environment (such as dev, uat or prod) the package is run:

  { Env package

    The «environment» package is created in three versions: one where `prod` is true, one where `uat` is true and one where `dev` is true and then (ideally only once) deployed to the respective destination:
code {
create or replace package tq84_env authid definer as

   prod constant boolean := false;
   uat  constant boolean := true;
   dev  constant boolean := false;

end tq84_env;
/
code }

  }
  { Functionality packages

    The conditional if's in the functionality package(s) then implement differing functionality according to the values of the defined constants in the environment packages:
code {
create or replace package body tq84_func as
   procedure go is
   begin
      dbms_output.put('Environment is ');
      $if tq84_env.prod $then
          dbms_output.put_line('PROD');
      $elsif tq84_env.uat $then
          dbms_output.put_line('UAT');
      $elsif tq84_env.def $then
          dbms_output.put_line('DEV');
      $else 
          dbms_output.put_line('undefined');
      $end
   end go;
end tq84_func;
/
code }

  }
  { Test

code {
→ development/databases/Oracle/SQL-Plus/set/serveroutput on

begin
   tq84_func.go;
end;
/
code }
  }

}
{ Conditionally throw an error when compiling ($ERROR directive)

  gh|Oracle-Patterns|/PL-SQL/compilation/conditional/ErrorDirective.plsql||

}
{ ALTER PACKGE … COMPILE REUSE SETTINGS

  gh|Oracle-Patterns|/PL-SQL/compilation/conditional/reuse_settings.plsql||

}
{ Show used settings

  The options with which a PL/SQL object was compiled can be queried
  from `→ development/databases/Oracle/installed/data-dictionary/plsql/object_settings`.

  gh|Oracle-Patterns|/PL-SQL/compilation/conditional/show_settings.plsql||

}
{ Inquire directives #plsql-inquiry-directives

  {

    gh|Oracle-Patterns|/PL-SQL/compilation/conditional/test_01.sql||

  } 
  { Predefined inquiry directives

    Predefined inquiry directives are:
      • `$$plsql_line`
      • `$$plsql_unit`
      • `$$plsql_unit_owner`
      • `$$plsql_unit_type`
      •  plsql compilation parameter (`$$plscope_settings` etc, and `$$nls_length_semantics`. `$$permit_92_wrap_format` does not seem to be defined anymore (19.10))

  }
}

sa:

  Using constants of `→ development/databases/Oracle/installed/packages/dbms/db_version` to make sure that a procedure is
  → development/databases/Oracle/installed/packages/dbms/db_version#dbms_db_version-cond-comp[running with a given Oracle version].

  → development/databases/Oracle/PL-SQL/errors-warnings/PLS-00174_a-static-boolean-expression-must-be-used

  → development/databases/Oracle/adminstration/init-parameters/plsql/ccflags[`plsql_ccflags`]

  The → development/databases/Oracle/PL-SQL/errors-warnings[compiler warning] `→ development/databases/Oracle/PL-SQL/errors-warnings/PLW-06003_unknown-inquiry-directive`.

  → development/databases/Oracle/installed/packages/dbms/preprocessor[`dbms_preprocessor`]

 `→ development/databases/Oracle/installed/packages/utl/ident`

  `$if` … `$then` blocks → development/databases/Oracle/PL-SQL/compilation/conditional/nested[can be nested].
  
  A preprocessor directive → development/databases/Oracle/PL-SQL/compilation/conditional/within-string[within a string has no effect].

  → development/databases/Oracle/PL-SQL
