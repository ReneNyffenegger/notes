$ Oracle PL/SQL: EXECUTE IMMEDIATE
@ execute immediate

`execute immediate` can be used to dynamically execute an → development/databases/Oracle/SQL/statement[SQL statement] or
→ development/databases/Oracle/PL-SQL/block[PL/SQL block] that is stored in a variable or a string.


{ INTO clause

  The `into` clause → development/databases/Oracle/SQL/select[selects] values *into* variables:

  gh|Oracle-Patterns|/PL-SQL/execute_immediate/into.plsql||

  { INTO ROWTYPE

    Instead of listing each individual variable separately, the → development/databases/Oracle/PL-SQL/record#ora-record-rowtype[`%rowtype`] idiom can be used to select all values of a row:

    gh|Oracle-Patterns|/PL-SQL/execute_immediate/into_rowtype.plsql||

  }
}
{ USING OUT clause

 `using out` transfers data that is evaluated in an `execute immediate` statement out to variables:

  Example 1:
  gh|Oracle-Patterns|/PL-SQL/execute_immediate/using_out.plsql||

  Example 2:
  gh|Oracle-Patterns|/PL-SQL/execute_immediate/using_out_2.plsql||

}
{ USING IN OUT clause

  With `using in out`, it is possible to transfer values into and out from an `execute immediate` statement. Thus, it combines `into` and `using out`.

  gh|Oracle-Patterns|/PL-SQL/execute_immediate/using_in_out.plsql||

  { USING OUT into a nested type #exec-immediate-nested-table

    The following example fills and returns a → development/databases/Oracle/PL-SQL/collection-types/nested-table[nested table].

    gh|Oracle-Patterns|/PL-SQL/execute_immediate/using_out_nested_type.plsql||

  }
  { Filling a nested table (using .extend)

    When using → development/databases/Oracle/PL-SQL/collection-types#plsql-coll-types-methods[collection methods] such as `.extend`, the `.extend` must be separated by a space
    from the → development/databases/Oracle/SQL/statement/bind-variables:

    gh|Oracle-Patterns|/PL-SQL/execute_immediate/using_in_out_nested_type_extend.plsql||

  }

}
{ Insert statement returning values

  The following example creates a → development/databases/Oracle/objects/tables with an → development/databases/Oracle/objects/tables/columns/identity[identity column] and then
  inserts a record with `execute immedate` using the `out` clause to return the generated value of the identity column and the → development/databases/Oracle/SQL/data-types/rowid
  of the inserted record into two variables:
  gh|Oracle-Patterns|/PL-SQL/execute_immediate/select-returning-values.plsql||

}
{ BULK COLLECT #exec-immediate-bulk_collect

  The following example combines `execute immedidate` with → development/databases/Oracle/PL-SQL/collection-types/return-table-from-function#ora-ret-tab-bulk-collect[`bulk collect`].

  First we need an object and table type into which we select («bulk collect») the data:
code {
create or replace type varchar_number as object (
   v varchar2(10),
   i number
)
/

create or replace type t_varchar_number as table of varchar_number
/
code }

  We also need some data to select:
code {
create table vn (
   v varchar2(10),
   i number
);

insert into vn values ('uno',1);
insert into vn values ('due',2);
insert into vn values ('tre',3);

commit;
code }

  The function that executes an SQL text and bulk collects its result into the table-type:
code {
create or replace function fct_t return t_varchar_number as
   ret t_varchar_number;
begin
   execute immediate
     'select varchar_number(v,i) from vn'
   bulk collect into ret;

   return ret;
end;
/
code }

   Finally: use the function:
code {
set serveroutput on size 10000

declare
   x t_varchar_number;
begin
   x := fct_t;

   for r in (select * from table(cast(x as t_varchar_number))) loop
     dbms_output.put_line(r.v || ', ' || r.i);
   end loop;

end;
/
code }

}
{ Select statements

  In order for a → development/databases/Oracle/SQL/select[`select`] statement to be executed with `execute immediate`, at least one of the *into clause* or *bulk collect into clause* must be specified.

  Thus, the following statement does not increase the sequence `tq84_seq` because the select statement is not executed:
code {
begin
   execute immediate 'select → development/databases/Oracle/objects/sequences[tq84_seq].nextval from dual';
end;
/
code }

}
{ Strings / apostrophes

  If the text to be executed contains apostrophes (the string delimiters), they need to be escaped by doubling them:
code {
execute immedate 'create or replace view tq84_v as
select
   to_char(dt, ''yyyy-mm-dd'') dt
from
   tab';
code }

  Of course, this makes it rather tedious to copy paste such statements for debugging purposes. In order to make that easier, q-strings (`q'[…]'`) should be used:
code {
execute immedate q'[
create or replace view tq84_v as
select
   to_char(dt, ''yyyy-mm-dd'') dt
from
   tab'
]';
code }

}
{ Iterate over result (21c)

  In 21c, it's possible to iterate over the result set produced by `execute immediate` with a `record` type and the `in values of` clause:
code {
set serveroutput on

declare

   stmt varchar2(4000);

   type obj_count is record (
      cnt   number,
      owner varchar2(128)
   );

begin

   stmt := 'select count(*) cnt, owner from → development/databases/Oracle/installed/data-dictionary/objects group by owner';

   for rec obj_count IN VALUES OF (
       execute immediate stmt
   ) loop
       dbms_output.put_line(rec.owner || ': ' || rec.cnt);
   end loop;

end;
/
code }

  { Object type instead ofa record type

    When I mistakenly created an `object type` instead of using a `record` type, Oracle threw the error message PLS-00801: internal error [*** ASSERT at file pdw4.c, line 1006; Cannot coerce from type 25 to type 32; Xanon__0x68e2a910__AB[7, 25]]:
code {
create or replace type obj_count as object (
   cnt   number,
   owner varchar2(30)
);
/

declare
   stmt varchar2(4000);
begin

   stmt := 'select count(*) cnt, owner from → development/databases/Oracle/installed/data-dictionary/objects group by owner';

   for rec obj_count in values of (
       execute immediate stmt
   ) loop
       dbms_output.put_line(rec.owner || ': ' || rec.cnt);
   end loop;

end;
/
code }

  }
  { Similar functionality in versions prior to 21c

    The `values of` clause is syntactic sugar which makes it a bit easier to write the code that essentially does the same thing in versions prior to 21c:
code {
declare

   stmt varchar2(4000);
   cur  sys_refcursor;

   type obj_count is record (
      cnt   number,
      owner varchar2(128)
   );

   rec obj_count;
begin

   stmt := 'select count(*) cnt, owner from dba_objects group by owner';

   open cur for stmt;

   loop
       fetch cur into rec;
       exit when cur%notfound;

       dbms_output.put_line(rec.owner || ': ' || rec.cnt);
   end loop;

end;
/
code }

  }

}

sa:

  In a stored procedure that is defined with `→ development/databases/Oracle/PL-SQL/authid definer`, executing an
  → development/databases/Oracle/SQL/session-system-control/alter-session/current_schema[`alter session set current_schema = …`] with `execute immediate`
  does not affect the scope in which `execute immediate` is executed, but it does if the procedure is defined with `authid current_schema`,
  see → development/databases/Oracle/PL-SQL/authid#authod-exec-immediate[this example] and → development/databases/Oracle/SQL/statement/nouns/session/alter/set/current_schema/execute-immediate[this research]).

  The → development/databases/Oracle/installed/packages/dbms/sql[`DBMS_SQL` package].

  → development/databases/Oracle/PL-SQL

  The → development/databases/SQL-Server[SQL Server] equivalent of `execute immediate` is → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_executesql[`sp_executesql`].

 `→ development/databases/Oracle/installed/packages/dbms/utility/api/exec_ddl_statement`

  Using `execute immediate` might result in a → development/databases/Oracle/errors/ORA-24344_success-with-compilation-error which indicates that the
  statement executed by `execute immediate` was syntactically correct, but logically invalid (for example because a table is missing).
  -
  If a statement being executed with `execute immediate` throws such → development/databases/Oracle/errors/ORA-24344_success-with-compilation-error error message in Oracle 19 (tested on Version 19.21), the PL/SQL block displays an
  → development/databases/Oracle/errors/ORA-24344_success-with-compilation-error#ora-24344-exec-imm[interesting behavior].

  Trying to use `execute immediate` with an → development/databases/Oracle/SQL/statement that has a trailing semicolon might end up throwing an
  → development/databases/Oracle/errors/ORA-00922_missing-or-invalid-option error.

