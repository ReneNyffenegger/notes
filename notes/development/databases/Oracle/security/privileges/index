$ Oracle privileges

A *privilege* gives a → development/databases/Oracle/users-roles[user] or a → development/databases/Oracle/security/roles[role] the right to access an
→ development/databases/Oracle/objects[object] or perform an activity. Thus, privileges play an important role
for → development/databases/Oracle/security[security].

There are two kinds of privileges:
  • → development/databases/Oracle/security/privileges/system[System privileges] (needed, for example, to execute `create user`, `create session` etc.)
  • → development/databases/Oracle/security/privileges/object[Object privileges]

Privileges can be given and taken away with the → development/databases/Oracle/SQL/DCL[DCL] statements
→ development/databases/Oracle/SQL/DCL/grant[`grant`] and
→ development/databases/Oracle/SQL/DCL/revoke[`revoke`].

{ Enabled privileges

  When a new → development/databases/Oracle/architecture/session is started, the initial privileges to the connecting user are the combination of
    • those that are directly granted to the user and
    • those that are in the user's → development/databases/Oracle/security/roles/default[default roles]

  When connected, the user can change the enabled roles (and thus the enabled privilages) with the `set role` statement.

}
{ Data dictionary views

  The → development/databases/Oracle/installed/data-dictionary[data dictionary views] that start with `ALL_` show
  → development/databases/Oracle/objects[objects] on which the querying user has privileges.

  In addition, the data dictionary also features the following views which list privileges that a user has
  table { ll
    → development/databases/Oracle/installed/data-dictionary/role/privs[`dba_role_privs`] ☰ Shows granted roles to other roles and users
    → development/databases/Oracle/installed/data-dictionary/tab/privs[`dba_tab_privs`] ☰ Lists which *object privileges* (such as `select` etc on tables or `execute` on packages) are granted to users and roles.
    → development/databases/Oracle/installed/data-dictionary/col/privs[`dba_col_privs`] ☰ Lists privileges on → development/databases/Oracle/objects/tables/columns[columns].
    → development/databases/Oracle/installed/data-dictionary/sys_privs[`dba_sys_privs`] ☰ Lists which *system privileges* (such as `create table`) are granted to users and roles.
    → development/databases/Oracle/installed/data-dictionary/role/role_privs[`role_role_privs`] ☰ Lists the roles that are granted to other roles (only roles to which the user has access are listed).
    → development/databases/Oracle/installed/data-dictionary/role/sys_privs[`role_sys_privs`] ☰
    → development/databases/Oracle/installed/data-dictionary/role/tab_privs[`role_tab_privs`] ☰
    `system_privilege_map` ☰
  table }

}
{ Query select privileges hierarchically

  The following query hierarchically selects, depending on what lines are commented, a → development/databases/Oracle/users-roles[user's] system or objects privileges:
code {
with roles_of_user (
   user_or_role,
   lvl
)as (
   select
     'RENE'  user_or_role,
      0              lvl
   from
      dual
union all
    select
       drp.granted_role,
       rou.lvl+1
    from
       roles_of_user    rou                                         join
       dba_role_privs   drp on rou.user_or_role = drp.grantee     
)
search depth first by user_or_role set order_by 
select
   case when nvl( LAG( rou.order_by ) over (order by rou.order_by),  -1 ) <>  rou.order_by then  lpad(' ', rou.lvl*3) || user_or_role end user_or_role,
   prv.owner, prv.table_name, prv.privilege, prv.type, prv.grantor, prv.grantable
-- sys.privilege, sys.admin_option-- , sys.common, sys.inherited
from
   roles_of_user rou                                                left  join
   dba_tab_privs prv on rou.user_or_role = prv.grantee
-- dba_sys_privs sys on rou.user_or_role = sys.grantee
order by
   rou.order_by
;
code }

}

sa:

  If a user tries to execute an SQL statement for which the necessary privileges are missing, the error
  → development/databases/Oracle/errors/ORA-01031_insufficient-privileges is thrown.

 `→ development/databases/Oracle/installed/data-dictionary/connect_role_grantees`

  → development/databases/Oracle/security/privileges

  The package `dbms_privilege_capture` allows to analyse the usage of privileges granted to users. Such an analysis allows to revoke privileges that were not exercised.
