$ Oracle 23c
@ 23c

Stored procedures can be written in JavaScript:
code {
create mle module tq84_js language javascript as

    export function f(p1, p2) { return p1+p2; }
   
    …

create function f (p1 number, p2 number) return number as mle module tq84_js signature f(number, number);

select f(20, 22) /* Ha: no more dual :-) */;
code }

Useful for ORA-00955:
code {
drop   table IF     EXIST tq84_t1;
create table IF NOT EXIST tq84_t2 (num number, txt varchar2(10));
code }

`group by` can use aliases for expressions:
code {
select
   count(*),
   f(a, b) xyz
from
   t
group by
   xyz; 
having
   xyz > 100;
code }

Tables can be updated with a condition specified in a join:
code {
udpate    dest d
   set    d.xxx = …
  from    src  s
 where    d.abc = s.def;
code }


*JSON schema* allows to validate JSON documents:
code {
create table tq84_json_schema_test (
   obj json validate '
     {
         "num": number,
         … 
     }
   '
);
code }

Insert multiple records at once:
code {
insert into t1 values
  (1, 'first record' ),
  (2, 'second record'),
  (3, 'third record' ),
  (4, 'fourth record');
code }

Similarly:
code {
select * from (
  values
    (1, 'first record' ),
    (2, 'second record'),
    (3, 'third record' ),
    (4, 'fourth record')
)
tmp (num, txt);
code }

Granting privileges to entire schemas:
code {
grant
   select any table
on
   schema sales  
to
   rene;
code }

SQL domains:
code {
create domain month_year
   constraint month_fmt check (regexp_like(year_month, '^\d\d-\d\d\d\d$')
   display 'Year: ' || substr(year_month, 4, 4) || ', Month: ' || substr(year_month, 1, 2)
   order substr(year_month, 4, 4) || substr(year_month, 1, 2);
code }

New functions `domain_display` and `domain_order` to get a domain's definition of display and order functions.

A special developer role to facilitate developers's jobs.
code {
begin
   dbms_developer_admin.grant_privs('rene');
end;
/
code }

Up to 4096 columns per table (requires `max_columns` to be set to `extended` and `compatibility` to be set to `23.0.0`).

Key value pair annotations for tables provide metadata for data and schema.
code {
create table t_foo ( … )
annotations (
   expected_release 'R4.2',
   test_coverage    'no'
);
code }

Annotations are supported for tables, views, materialized views, columns, indexes and domains.j


? Improved error messages: *ORA-00979: not a GROUP BY expression* -> *ORA-00979: "RENE.C1": does not match a GROUP BY expression*.


? BOOLEAN data type in SQL:
code {
create table tq84_bool_test (val varchar2(10), flg boolean);
insert into tq84_bool_test values ('true'  , true );
insert into tq84_bool_test values ('false' , false);
insert into tq84_bool_test values ('null'  , null );
insert into tq84_bool_test values ('t'     ,'t'   );
insert into tq84_bool_test values ('f'     ,'f'   );
insert into tq84_bool_test values ('0'     , 0    );

select val from tq84_bool_test where     flg;
select val from tq84_bool_test where not flg;
code }

? `DUAL` table not needed anymore (if `_past_dual_enabled` is set to `true`?):
code {
select
  'Hello world'     as txt,
   7 * 6            as num
   sysdate          as now;
code }

? Improved `returning` clause for `merge` and `update` statements.k

Beta program (estimated from October 2022 through February 2023): → https://bit.ly/OracleBetaTesting
