$ Oracle 23c: New features
@ 23c

rem {
https://twitter.com/ChrisRSaxon/status/1582811221958328320
rem }

Oracle claims, that 23c has 300+ new features and enhancements compared to → development/databases/Oracle/Releases-and-versions/21c.

{ BOOLEAN data type in SQL

  Oracle 23c introduces the `boolean` → development/databases/Oracle/SQL/data-types[datatype].

code {
create table tq84_bool_test (val varchar2(10), flg boolean);
insert into tq84_bool_test values ('true'  , true );
insert into tq84_bool_test values ('false' , false);
insert into tq84_bool_test values ('null'  , null );
insert into tq84_bool_test values ('t'     ,'t'   );
insert into tq84_bool_test values ('yes'   ,'yes' );
insert into tq84_bool_test values ('true'  ,'true');
insert into tq84_bool_test values ('f'     ,'f'   );
insert into tq84_bool_test values ('0'     , 0    );

select val from tq84_bool_test where     flg;
select val from tq84_bool_test where not flg;
code }

}
{ Selecting an expression without FROM DUAL

  The → development/databases/Oracle/SQL/dual[`DUAL` table] is not needed anymore to select one or more expressions:
rem {
 (if `_past_dual_enabled` is set to `true`?):
rem }
code {
select
  'Hello world'     as txt,
   7 * 6            as num
   sysdate          as now;
code }

}
{ JavaScript Stored procedures

  Stored procedures can be written in → development/languages/JavaScript:
code {
create mle module tq84_js language javascript as

    export function f(p1, p2) { return p1+p2; }
   
    …

  create function f (p1 number, p2 number) return number as mle module tq84_js signature f(number, number);

  select f(20, 22) /* Ha: no more dual :-) */;
code }

}
{ DROP/CREATE TABLE IF [NOT] EXIST

  The `if [not] exist` clause auf the `create table` and `drop table` statements are useful to prevent the → development/databases/Oracle/errors/ORA-00942_table-or-view-does-not-exist and *ORA-00955: name is already used by an existing object* errors:

code {
drop   table IF     EXIST tq84_t1;
create table IF NOT EXIST tq84_t2 (num number, txt varchar2(10));
code }

}
{ GROUP BY on expression aliases

 `→ development/databases/Oracle/SQL/select/group-by` can use aliases for expressions:
code {
select
   count(*),
   f(a, b) xyz
from
   t
group by
   xyz; 
having
   xyz > 100;
code }

}
{ Updating tables

  Tables can be updated with a condition specified in a («direct») → development/databases/Oracle/SQL/join:

code {
udpate    dest d
   set    d.xxx = …
  from    src  s
 where    d.abc = s.def;
code }

}
{ JSON

  { JSON Schema

    A *JSON schema* allows to validate → development/languages/JavaScript/JSON documents:

code {
create table tq84_json_schema_test (
   obj json validate '
     {
         "num": number,
         … 
     }
   '
);
code }
  }
  { JSON relational duality views

?   A *JSON relational duality view* declares a mapping between relational tables and
    a JSON representation of the data to be stored in these tables.

?   The converion is between these two worlds is triggered in/with *GraphQL*.

code {
create or replace JSON DUALITY VIEW
from tq84_root_tab                   -- The name table sitting at the top of the hierarchy
as   tq84_rel_dual_test
{
   num      :   col_num,             -- Mapping between JSON property names and table column names
   txt      :   col_txt
   children : tq84_child_tab {       -- Nesting objects
     …

   }
}
code }

    See also → https://twitter.com/ChrisRSaxon/status/1582808508973473793[Chris Saxon's tweet].

  }

}
{ Table value constructors

  Insert multiple records at once (going by the name of «table value constructor»):
code {
insert into t1 values
  (1, 'first record' ),
  (2, 'second record'),
  (3, 'third record' ),
  (4, 'fourth record');
code }

  Similarly in a `select` statement:
code {
select * from (
  values
    (1, 'first record' ),
    (2, 'second record'),
    (3, 'third record' ),
    (4, 'fourth record')
)
tmp (num, txt);
code }

}
{ Schema Level Privileges

  → development/databases/Oracle/security/privileges[Privileges] can be granted on entire schemas:
code {
→ development/databases/Oracle/SQL/DCL/grant
   select any table
on
   schema sales  
to
   rene;
code }

}
{ SQL domains

code {
create domain month_year
   constraint month_fmt check (regexp_like(year_month, '^\d\d-\d\d\d\d$')
   display 'Year: ' || substr(year_month, 4, 4) || ', Month: ' || substr(year_month, 1, 2)
   order substr(year_month, 4, 4) || substr(year_month, 1, 2);
code }


  Particularities about domains can be quried with the new functions `domain_display` and `domain_order`. These get a domain's definition of display and order functions.

}
{ Developer role

  A special developer role to facilitate developers's jobs.
code {
begin
   dbms_developer_admin.grant_privs('rene');
end;
/
code }

}
{ Up to 4096 columns per table

  Up to 4096 → development/databases/Oracle/objects/tables/columns[columns] per → development/databases/Oracle/objects/tables (requires `max_columns` to be set to `extended` and `compatibility` to be set to `23.0.0`).

}
{ Object and schema annotations 

  Key value pair annotations for (some) → development/databases/Oracle/objects[objects] provide metadata for data and schema.

code {
create table t_foo ( … )
annotations (
   expected_release 'R4.2',
   test_coverage    'no'
);
code }

  Annotations are supported for tables, views, materialized views, columns, indexes and domains.

}
{ Misc


  Further improvements might (or do?) include:
  • Improved error messages: *ORA-00979: not a GROUP BY expression* -> *ORA-00979: "RENE.C1": does not match a GROUP BY expression*.
  • Improved `returning` clause for `merge` and `update` statements (See → https://db-oriented.com/2017/10/07/returning-into-enhancement-suggestion/[this enhancment suggestion] and → https://community.oracle.com/tech/apps-infra/discussion/4396106/returning-into-support-both-pre-update-and-post-update-values[this Oracle community discussion]).
  • → development/databases/Oracle/SQL/select/aggregate[Aggregation] over `interval` data types
  • Enhancements for blockchain tables
  • SQL <-> PL/SQL transpiler
  • 1024 byte passwords
  • OJM allows HTTP and TCP access while other OS calls are disabled
  • Sagas for microservices / Lock-free reservations
  • Transparent application continuity
  • Ubiquitous search with `dbms_search`
  • Asynchronous programming
  • `default on null` for `update` statements
  • True Cache
  • Real-time SQL Plan Management
  • Read-only Per-PDB Standby
  • In-database SQL firewall
  • OKafka
  • Oracle text indexes with automatic maintenance
  • Transportable binary → development/XML
  • OAuth 2.0 integration
  • Support for Unicode Ideographic Variation Sequences (IVS)

  Beta program (estimated from October 2022 through February 2023): → https://bit.ly/OracleBetaTesting

}

links:
  Philipp Salvisberg's → https://twitter.com/phsalvisberg/status/1572885995070300160[Twitterthread] summarizes some impressions from new 23c features presented at the DOAG 2022 Conference.
