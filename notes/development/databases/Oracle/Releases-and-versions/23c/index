$ Oracle 23c: New features
@ 23c

Oracle claims that 23c has 300+ new features and enhancements compared to → development/databases/Oracle/Releases-and-versions/21c. This page summarizes the features that are of particular interest to me.

{ BOOLEAN data type in SQL

  Oracle 23c introduces the `→ development/databases/Oracle/SQL/data-types/boolean` → development/databases/Oracle/SQL/data-types[datatype] for
  → development/databases/Oracle/SQL[SQL] (after it having been in → development/databases/Oracle/PL-SQL[PL/SQL] for quite some time).
  -

  Some textual values such as `true`, `false`, `y`, `yes` will be converted to a boolean value, any numerical value that is not 0 will be converted to `true`, 0 values to `false`.

code {
create table tq84_bool_test (val varchar2(10), flg boolean);
insert into tq84_bool_test values ('true'  , true );
insert into tq84_bool_test values ('false' , false);
insert into tq84_bool_test values ('null'  , null );
insert into tq84_bool_test values ('t'     ,'t'   );
insert into tq84_bool_test values ('yes'   ,'yes' );
insert into tq84_bool_test values ('true'  ,'true');
insert into tq84_bool_test values ('f'     ,'f'   );
insert into tq84_bool_test values ('0'     , 0    );

select val from tq84_bool_test where     flg;
select val from tq84_bool_test where not flg;
code }

  The new datatype comes with the function `to_boolean(…)`.

  The introduction of the `boolean` data type is rather unexpected: Some 20 years ago, Tom Kyte asserted that → https://asktom.oracle.com/pls/apex/f?p=100:11:0::::P11_QUESTION_ID:6263249199595[a `boolean` datatype is not needed]
  "
    since

    flag char(1) check (flag in ( 'Y', 'N' ))

    serves the same purpose, requires the same amount of space and does the same thing.
  "


  Oracle clients earlier than 23c will display `true` values as `1` and `false` values as `0`:
code {
SQL> select true, false;
--
-- TRUE FALSE
-- ---- -----
--    1     0
code }

  Trying to use a `boolean` in a release earlier than 23c would result in a → development/databases/Oracle/errors/ORA-00902_invalid-datatype#ora-00902-boolean[ORA-00902: invalid datatype] error message.

}
{ Selecting an expression without FROM DUAL

  The → development/databases/Oracle/SQL/dual[`DUAL` table] is → development/databases/Oracle/SQL/select#ora23-select-no-dual[not needed anymore] to select one or more expressions:
rem {
 (if `_past_dual_enabled` is set to `true`?):
rem }
code {
→ development/databases/Oracle/SQL/select#ora23-select-no-dual[select]
  'Hello world'     as txt,
   7 * 6            as num,
   sysdate          as now;
code }

}
{ JavaScript Stored procedures

  Stored procedures can be written in → development/languages/JavaScript:
code {
create mle module tq84_js language javascript as

    export function f(p1, p2) { return p1+p2; }
   
    …

  create function f (p1 number, p2 number) return number as mle module tq84_js signature f(number, number);

  select f(20, 22) /* Ha: no more dual :-) */;
code }

  See also → development/databases/Oracle/objects/mle/module[MLE modules].

}
{ DROP/CREATE TABLE IF [NOT] EXISTS

  The → development/databases/Oracle/SQL/statement/if-exists[`if exists` and `if not exists`] clauses of the `create table` and
 `→ development/databases/Oracle/SQL/statement/nouns/table/drop` statements are useful to prevent the
  → development/databases/Oracle/errors/ORA-00942_table-or-view-does-not-exist and → development/databases/Oracle/errors/ORA-0955_name-is-already-used-by-an-existing-object errors:

code {
drop   table IF     EXIST tq84_t1;
create table IF NOT EXIST tq84_t2 (num number, txt varchar2(10));
code }

}
{ GROUP BY on expression aliases/position number

 `→ development/databases/Oracle/SQL/select/group-by` can use aliases for expressions (such as the result of a PL/SQL function):
code {
select
   count(*),
   fnc(a, b) xyz
from
   t
group by
   xyz
having
   xyz > 100
;
code }

  Prior to Oracle 23, the previous statement would have thrown a → development/databases/Oracle/errors/ORA-00904_invalid-identifier error message.

  If the `group_by_position_enabled` → development/databases/Oracle/adminstration/init-parameters[init parameter] is set to `true`, it's also possible to group by a position number 
  In order to group on a position *number* (rather than an expression alias):
code {
→ development/databases/Oracle/SQL/statement/nouns/session/set/init-param[alter session] set group_by_position_enabled = true;

select
   category_id,
   sum(val)
from
   t
group by
   1;
code }

}
{ Updating tables

  Tables can be updated with a condition specified in a («direct») → development/databases/Oracle/SQL/join: (i.e. with a → development/databases/Oracle/SQL/DML/update/from[`from` clause after the `set` clause]).

code {
udpate    dest d
   set    d.xxx = …
  from    src  s
 where    d.abc = s.def;
code }

}
{ JSON

  { JSON Schema

    A *JSON schema* allows to validate → development/languages/JavaScript/JSON documents:

code {
create table tq84_json_schema_test (
   obj json validate '
     {
         "num": number,
         … 
     }
   '
);
code }
  }
  { JSON Relational Duality

   → development/databases/Oracle/Releases-and-versions/23c/JSON-Relational-Duality-Views provide a mapping between
      • the way an application consumes and represents data (i. e. JSON documents) and
      • the paradigm in which a *relational* database stores the data (i. e. rows).

?   The conversion is between these two worlds is triggered in/with *GraphQL*.

code {
create or replace JSON DUALITY VIEW
from tq84_root_tab                   -- The name table sitting at the top of the hierarchy
as
   tq84_rel_dual_test
   @update @insert @delete
{
   num      :   col_num,             -- Mapping between JSON property names and table column names
   txt      :   col_txt
   children : tq84_child_tab {       -- Nesting objects
     …

   }
}
code }
    { Accessing duality views

      A duality view can be accessed with
        • SQL
        • traditional → development/web/HTTP[HTTP]/→ development/web/service/REST[REST] operations, i. e. GET, PUT and POST → development/web/HTTP/request-methods[HTTP requests]. (see *concurrent reading/writing access* below)
        • Simple Oracle Document API (SODA)
        • Oracle Database API for MongoDB
        • ORDS

    }
    { Concurrent reading/writing access

      → development/web/service/REST[REST] GET and REST PUT are stateless operations. Thus, a writing operation might overwrite the modification of another writing request («mid-air collision» problem).

      In order to avoid this problem, Oracle has adapted the concept of the *ETag* response and *If-Match* request → development/web/HTTP/header[HTTP header] (see also the function `→ development/databases/Oracle/SQL/functions/sys/row_etag`).

    }
    { Advantages over ORM

      Some advantages of duality views over Object Relational Mappings (ORMs) are
        • They're language independent
        • They're optimized by the database

    }
    { Describing a duality view's schema

      `dbms_json_schema.describe('tq84_rel_dual_test')`

code {
$dbHost=…
$schemaName=rene
→ tools/cURL[curl] -X GET http://$dbHost/ords/$schemaName/metadata-catalog/tq84_rel_dual_test
code }

    }
    { Links

      See also → https://twitter.com/ChrisRSaxon/status/1582808508973473793[Chris Saxon's tweet].

    }
  }
}
{ Table value constructors

  Insert multiple records at once (going by the name of «table value constructor»):
code {
insert into t1 values
  (1, 'first record' ),
  (2, 'second record'),
  (3, 'third record' ),
  (4, 'fourth record');
code }

  Similarly in a `select` statement:
code {
select * from (
  values
    (1, 'first record' ),
    (2, 'second record'),
    (3, 'third record' ),
    (4, 'fourth record')
)
tmp (num, txt);
code }

}
{ Schema Level Privileges

  → development/databases/Oracle/security/privileges[Privileges] can be granted on entire schemas:
code {
→ development/databases/Oracle/SQL/DCL/grant
   select any table
on
   schema sales  
to
   rene;
code }

}
{ SQL domains

  SQL domains can optionally specify a
    • data constraint
    • display format
    • a collation

code {
create domain email_addr as varchar2(99);

create domain month_year as varchar2(7)
   constraint month_fmt check (regexp_like(month_year, '^\d\d-\d\d\d\d$'))
   display 'Year: ' || substr(month_year, 4, 4) || ', Month: ' || substr(month_year, 1, 2)
   order substr(month_year, 4, 4) || substr(month_year, 1, 2)
;

create table financial_report (
   id             integer    primary key,
   corrections_to email_addr,
   rep_period     month_year,
   pdf            blob
);

insert into financial_report values
( 1, 'fred@xyz.ab', '03-2023', null ),
( 2, 'fred@xyz.ab', '08-2023', null ),
( 3, 'maya@xyz.ab', '02-2023', null ),
( 4, 'joey@xyz.ab', '06-2023', null );
code }

  The `order` clause of the `month_year` domains influences the sort order of `order by` so that it is sorted logically rather than by the by the displayed value:
code {
select
   rep_period,
   corrections_to,
   id
from
   financial_report
order by
   rep_period;
--
-- REP_PER CORRECTIONS_TO         ID
-- ------- -------------- ----------
-- 02-2023 maya@xyz.ab             3
-- 03-2023 fred@xyz.ab             1
-- 06-2023 joey@xyz.ab             4
-- 08-2023 fred@xyz.ab             2
code }

 `domain_display(…)` applies the display rules when selecting values from a domain:
code {
select
   domain_display(rep_period) repper,
   corrections_to
from
   financial_report
order by
   rep_period;

-- REPPER                CORRECTIONS_TO                                                                                     
-- --------------------- ---------------------------------------------------------------------------------------------------
-- Year: 2023, Month: 02 maya@xyz.ab                                                                                        
-- Year: 2023, Month: 03 fred@xyz.ab                                                                                        
-- Year: 2023, Month: 06 joey@xyz.ab                                                                                        
-- Year: 2023, Month: 08 fred@xyz.ab                                                                                        
code }

  Domains are stored in the data dictionary in `dba_domains` etc.

  → development/databases/Oracle/SQL/functions[SQL functions] related to domains include
   • `domain_display`
   • `domain_order` 
   • `domain_name`  
   • `domain_check`

}
{ Developer role

  A special developer role (named `db_developer_role`) can be granted to facilitate developers's jobs.
code {
begin
   dbms_developer_admin.grant_privs('rene');
end;
/
code }
  *2023-04-10*: Apparently, `dbms_developer_admin` is not present in (at least the) Oracle 23c Free edition.

code {
SQL> → development/databases/Oracle/SQL/DCL/grant db_developer_role to rene identified by renesSecretPassword;
grant succeeded.

SQL> connect rene/renesSecretPassword@ora23c;
connected.

SQL> → development/databases/Oracle/SQL/select * from → development/databases/Oracle/installed/data-dictionary/session/privs order by privilege;
PRIVILEGE
------------------------------
CREATE ANALYTIC VIEW
CREATE ATTRIBUTE DIMENSION
CREATE CUBE
CREATE CUBE BUILD PROCESS
CREATE CUBE DIMENSION
CREATE DIMENSION
CREATE DOMAIN
CREATE HIERARCHY
CREATE JOB
CREATE MATERIALIZED VIEW
CREATE MINING MODEL
CREATE MLE
CREATE PROCEDURE
CREATE SEQUENCE
CREATE SESSION
CREATE SYNONYM
CREATE TABLE
CREATE TRIGGER
CREATE TYPE
CREATE VIEW
DEBUG CONNECT SESSION
EXECUTE DYNAMIC MLE
FORCE TRANSACTION
ON COMMIT REFRESH

24 rows selected.
code }

  The `db_developer_role` is created in `→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/catdevrol_sql` (in which script also the corresponding
  → development/databases/Oracle/security/privileges[privileges] are granted).

}
{ Up to 4096 columns per table

  Up to 4096 → development/databases/Oracle/objects/tables/columns[columns] per → development/databases/Oracle/objects/tables (requires `→ development/databases/Oracle/adminstration/init-parameters/max/columns` to be set to `extended` and
  `→ development/databases/Oracle/adminstration/init-parameters/compatible` to be set to `23.0.0`).

}
{ Object and schema annotations 

  Key value pair annotations for (some) → development/databases/Oracle/objects[objects] provide metadata for data and schema.

code {
create table t_foo ( … )
annotations (
   expected_release 'R4.2',
   test_coverage    'no'
);
code }

  Annotations are supported for tables, views, materialized views, columns, indexes and domains.

  Annotations can be queried in the data dictionary:
code {
select * from user_annotations;
select * from user_annotation_values;
select * from user_annotations_usage;
code }

}
{ «Asynchronous» transactions (lock-free reservations) #ora23c-lock-free-reservations

  A *numeric* column that is marked → development/databases/Oracle/objects/tables/columns/reservable[reservable] allows multiple → development/databases/Oracle/architecture/transaction[transactions] to concurrently update the value.

  The following example creates such a table and inserts some test data:
code {
create table tq84_async (
    id    integer     primary key,
    val   number(5,2) RESERVABLE
);

insert into tq84_async values
(  13,   18.22 ),
(  19,    7.83 ),
(  42,  100.00 ),
(  99,   68.54 );

commit;
code }

  A session updates a record in this table and then queries the value (which does not seem to change, i.e. is still 100):
code {
SES 1> update tq84_async set val = val + 10 where id = 42;
SES 1> select * from tq84_async where id = 42;
--
--         ID        VAL
-- ---------- ----------
--         42        100
code }


  Another session also updates `val` (while the first session has not commited the update). This session also sees the value of 100:
code {
SES 2> update tq84_async set val = val +  1 where id = 42;
SES 2> select * from tq84_async where id = 42;
--
--         ID        VAL
-- ---------- ----------
--         42        100
code }

   The first session then commits its transaction. It now sees its modification:
code {
SES 1> commit;
SES 1> select * from tq84_async where id = 42;
--
--         ID        VAL
-- ---------- ----------
--         42        110
code }

  The second session also sees the update of the first session but still not its own update:
code {
SES 2> select * from tq84_async where id = 42;
--
--         ID        VAL
-- ---------- ----------
--         42        110
code }

  Only when the 2nd session commits its transaction, its modification becomes visible also:
code {
SES 2> commit;
SES 2> select * from tq84_async where id = 42;
--
--         ID        VAL
-- ---------- ----------
--         42        111
code }

  After the commit in the second session, the first session commits also and then selects the updated record:
code {
SES 1> commit;
SES 1> select * from tq84_tab;
       ID        VAL
---------  ---------
       42        111
code }

  A table with a reservable column cannot be dropped (error message *ORA-55764: Cannot DROP or MOVE tables with reservable columns*). Thus, the column must be first set to `not reservable`:
code {
alter table tq84_async modify val not reservable;
drop  table tq84_async;
code }

  { See also

    See also *Connor McDonald's* → https://twitter.com/connor_mc_d/status/1588432563638796288[tweet] and the follow up on
    → https://www.youtube.com/watch?v=oO3yrdU7w18[YouTube].

  }
}
{ Improved error messages #ora-23c-err

  A program of Oracle (that is not strictly related to 23c only) tries to improve → development/databases/Oracle/errors[error messages]:
code {
ORA21> select sum(val), gr_1, gr_2 from T group by gr_1;
→ development/databases/Oracle/errors/ORA-00979_not-a-GROUP-BY-expression

ORA21> → development/databases/Oracle/SQL-Plus/connect …@ORA23

ORA23> select sum(val), gr_1, gr_2 from T group by gr_1;
ORA-00979: "GR_2": must appear in the GROUP BY clause or
                   be used in an aggregate function
code }

  Some of the messages that seem to have changed include
    • → development/databases/Oracle/errors/ORA-00932_inconsistent-datatypes[ORA-00932] from *ORA-00932: inconsistent datatypes: expected … got …* to *ORA-00932: expression is of data type …, which is incompatible with expected data type …*.
    • → development/databases/Oracle/errors/ORA-30926_unable-to-get-a-stable-set-of-rows-in-the-source-table[ORA-30926] from *unable to get a stable set of rows in the source tables* to *The operation attempted to update the same row (rowid: …) twice.*
    • → development/databases/Oracle/errors/ORA-06509_Interface-call-failed-between-the-PL_SQL-package-and-a-binary-executable[ORA-06509] from *PL/SQL: ICD vector missing for this package* to *PL/SQL: Interface call failed between the PL/SQL package and a binary executable.*
    • → development/databases/Oracle/errors/ORA-03048_SQL-reserved-word_is-not-syntactically-valid-following instead of → development/databases/Oracle/errors/00933_SQL-command-not-properly-ended

}
{ Misc

  → https://juliandontcheff.wordpress.com/2023/05/16/the-3-new-pl-sql-packages-in-oracle-database-23c/[Three new PL/SQL packages]:
     • Ubiquitous search with `→ development/databases/Oracle/installed/packages/dbms/search`
     • `dbms_hcheck`
     • `dbms_sql_firewall`

  → development/databases/Oracle/adminstration/init-parameters[Initialization parameters]:
  table {lll
   `allow_legacy_reco_protocol` ☰ Should the database allow the legacy RECO protocol ☰
   `allow_weak_crypto` ☰ Allow weak crypto usage in DBMS_CRYPTO ☰ Undocumented? Already in 21c?
   `auto_start_pdb_services` ☰ Automatically start all PDB services on PDB Open ☰
   `blockchain_table_retention_threshold` ☰ maximum retention without TABLE RETENTION privilege ☰
   `client_prefetch_rows` ☰ Client prefetch rows value ☰ Undocumented? Already in 21c?
   `db_flashback_log_dest` ☰ Separate creation directory for flashback database logs ☰
   `db_flashback_log_dest_size` ☰ Size limit of separate creation directory for flashback database logs ☰
   `default_credential` ☰ default credential session parameter ☰ Undocumented? Already in 21c?
   `drcp_connection_limit` ☰ DRCP connection limit ☰ Undocumented? Already in 21c?
   `group_by_position_enabled` ☰ enable/disable group by position ☰
   `hybrid_read_only` ☰ Hybrid read only mode allows CDB common user to patch the PDB ☰ Undocumented? Already in 21c?
   `inmemory_graph_algorithm_execution` ☰ Controls the fall-back action of graph algorithm execution if in-memory execution is not possible ☰ Undocumented? Already in 21c?
   `iorm_limit_policy` ☰ Policy used to compute Exadata IORM limit ☰ Undocumented? Already in 21c?
   `ipddb_enable` ☰ Enable IPD/DB data collection ☰ Undocumented? Already in 21c?
   `json_behavior_flags` ☰ control json behaviors ☰ Undocumented? Already in 21c?
   `json_expression_check` ☰ enable/disable JSON query statement check ☰
   `kafka_config_file` ☰ KSR pub/sub external message bus(KGMPS) CONFIGuration file ☰ Undocumented? Already in 21c?
   `load_without_compile` ☰ Load PL/SQL or Database objects without compilation ☰ Undocumented? Already in 21c?
   `main_workload_type` ☰ Main workload type ☰ Undocumented? Already in 21c?
   `→ development/databases/Oracle/adminstration/init-parameters/max/columns` ☰ maximum number of → development/databases/Oracle/objects/tables/columns[columns][columns] allowed in a → development/databases/Oracle/objects/tables or view ☰ Value can be `standard` (= 1000 columns) or `extended` (= 4096 columns). In order to set to `extended`, `compatible` must be set to `23.0.0.0.0` or higher.
   `max_saga_duration` ☰ default value for max saga duration ☰
   `memoptimize_write_area_size` ☰ changes memoptimize write area size ☰ Undocumented? Already in 21c?
   `memoptimize_writes` ☰ write data to IGA without memoptimize_write hint ☰ Undocumented? Already in 21c?
   `memory_max_size` ☰ Maximum memory size ☰ Undocumented? Already in 21c?
   `memory_size` ☰ Target memory size ☰ Undocumented? Already in 21c?
   `multilingual_engine` ☰ Enable or disable *Multilingual Engine* (MLE) ☰
   `native_blockchain_features` ☰ Native block chain enable/disable ☰
   `optimizer_cross_shard_resiliency` ☰ enables resilient execution of cross shard queries ☰
   `pdc_file_size` ☰ size (in bytes) of the pmem direct commit file ☰ Undocumented? Already in 21c?
   `pkcs11_library_location` ☰ PKCS#11 library location for Transparent Data Encryption ☰ Undocumented? Already in 21c?
   `plsql_implicit_conversion_bool` ☰ PL/SQL: Implicit conversion for boolean ☰
   `read_only` ☰ Restrict WRITE operations in user session ☰ Undocumented? Already in 21c?
   `resource_manager_cpu_scope` ☰ scope of CPU resource management ☰ Undocumented? Already in 21c?
   `result_cache_auto_blocklist` ☰ whether to run the auto blocklisting algorithm ☰
   `result_cache_integrity` ☰ result cache deterministic PLSQL functions ☰ Undocumented? Already in 21c?
   `saga_hist_retention` ☰ default value for retention of completed sagas ☰
   `session_exit_on_package_state_error` ☰ Request client to exit when PL/SQL package state is discarded ☰ Undocumented? Already in 21c?
   `shard_enable_raft_follower_read` ☰ enable read from follower replications units in a shard ☰ Undocumented? Already in 21c?
   `shard_queries_restricted_by_key` ☰ add shard key predicates to the query ☰ Undocumented? Already in 21c?
   `soda_behavior_flags` ☰ control soda behaviors ☰ Undocumented? Already in 21c?
   `sql_error_mitigation` ☰ enables automatic error mitigation ☰
   `→ development/databases/Oracle/adminstration/init-parameters/sql/history/enabled` ☰ Determines if SQL history (exposed in `→ development/databases/Oracle/installed/dynamic-performance-views/sql/history`) is enabled (`true` or `false`) ☰ 
   `sql_transpiler` ☰ Enable SQL transpiler ☰
   `statement_redirect_service` ☰ statement redirect service ☰ Undocumented? Already in 21c?
   `sysdate_at_dbtimezone` ☰ use DB timezone while computing sysdate and systimestamp value ☰ Undocumented? Already in 21c?
   `time_at_dbtimezone` ☰ use DB timezone when computing current time ☰
   `timezone_version_upgrade_online` ☰ enable/disable time zone version upgrade online ☰
   `tracefile_content_classification` ☰ enable output of trace record security label prefix ☰ Undocumented? Already in 21c?
   `true_cache` ☰ Enable True Cache ☰ Undocumented? Already in 21c?
   `txn_auto_rollback_high_priority_wait_target` ☰ Auto abort wait for high pri txns ☰
   `txn_auto_rollback_medium_priority_wait_target` ☰ Auto abort wait for medium pri txns ☰
   `txn_auto_rollback_mode` ☰ Modes for Auto Transaction Rollback feature ☰
   `txn_priority` ☰ Priority of a transaction in a session ☰
   `xml_client_side_decoding` ☰ enable/disable xml client-side decoding ☰ Undocumented? Already in 21c?
   `xml_handling_of_invalid_chars` ☰ Handle invalid chars during xmlelement ☰ Undocumented? Already in 21c?
  table }
  

   Static → development/databases/Oracle/installed/data-dictionary that are new in 23c possibly include:
   table { ll

rem {
    `dba_addm_pending_autotasks` ☰ ?
    `dba_advisor_message_groups` ☰ ?
    `dba_aim_perf_features` ☰ ?
    `dba_analytic_view_aggr_dims` ☰ ?
    `dba_analytic_view_aggr_fns` ☰ ?
    `dba_analytic_view_aggr_fns_ae` ☰ ?
    `dba_analytic_view_agr_dims` ☰ ?
    `dba_analytic_view_agr_dims_ae` ☰ ?
    `dba_analytic_view_dim_atrs` ☰ ?
    `dba_analytic_view_dim_atrs_ae` ☰ ?
    `dba_analytic_view_dim_attrs` ☰ ?
    `dba_analytic_view_fact_cols` ☰ ?
    `dba_analytic_view_fct_cols` ☰ ?
    `dba_analytic_view_fct_cols_ae` ☰ ?
rem }

    `dba_annotations` ☰ Annotations
    `dba_annotations_usage` ☰ Usage information for annotation
    `dba_annotation_values` ☰ Values for annotations

rem {
    `dba_atsk_async_oper_request` ☰ ?
    `dba_autosqlset_attrname` ☰
    `dba_autosqlset_optenv` ☰
    `dba_autosqlset_snapshot` ☰
    `dba_autosqlset_snapshot_error` ☰
    `dba_autosqlset_sqlplan` ☰
    `dba_autosqlset_sqlstat` ☰
    `dba_autosqlset_sqltext` ☰
rem }

rem {
    `dba_auto_clustering_config` ☰
    `dba_auto_clustering_recommendations` ☰
rem }

rem {
    `dba_aw_obj` ☰
    `dba_aw_prop` ☰
rem }

    `dba_blockchain_row_version_cols` ☰ Row versioned columns in all *blockchain tables*.
    `dba_blockchain_row_version_history` ☰
    `dba_blockchain_table_chains` ☰
    `dba_blockchain_table_epochs` ☰
    `dba_blockchain_table_hash_col_order` ☰

rem {
    `dba_check_missing_dep_stub` ☰
    `dba_check_missing_parent` ☰
    `dba_check_nonexistent` ☰
    `dba_check_source` ☰
    `dba_check_timestamps` ☰
    `dba_consensus_config_changes` ☰
    `dba_consensus_logs` ☰
    `dba_consensus_peers` ☰
    `dba_data_tbs_usage_metrics` ☰
rem }

    `dba_ddl_regs` ☰ DDL notification registrations in the database.
    `dba_domains` ☰ SQL domains
    `dba_domain_cols` ☰
    `dba_domain_constraints` ☰ Constraint definitions on SQL domains

rem {
    `dba_dv_status` ☰
    `dba_hist_cell_exc_storagepool_stat` ☰
    `dba_hist_interconnect_ping_histogram` ☰
rem }

    `dba_hist_optimizer_env_details` ☰ Optimizer environments that have been captured in the Workload Repository.

rem {
    `dba_hist_redo_transport_issues` ☰
rem }

    `dba_hist_sagas` ☰ History of all completed sagas in the database.

rem {
    `dba_hist_sess_network` ☰
    `dba_hist_snapshot_details` ☰
rem }

    `dba_immutable_row_version_cols` ☰ Row versioned columns in all immutable tables in the database
    `dba_immutable_row_version_history` ☰
    `dba_immutable_table_columns` ☰
    `dba_immutable_table_epochs` ☰

    `dba_incomplete_sagas` ☰

rem {
    `dba_installed_workloads` ☰
rem }

rem {
    `dba_java_arguments` ☰
    `dba_java_classes` ☰ Class level information about all stored Java classes in the database.
    `dba_java_compiler_options` ☰ Information about all native compiler options in the database
    `dba_java_derivations` ☰
    `dba_java_fields` ☰
    `dba_java_implements` ☰
    `dba_java_inners` ☰
    `dba_java_layouts` ☰
    `dba_java_methods` ☰
    `dba_java_ncomps` ☰
    `dba_java_policy` ☰
    `dba_java_resolvers` ☰
    `dba_java_throws` ☰
rem }

    `dba_json_duality_views` ☰ JSON relation duality views
    `dba_json_duality_view_links` ☰ Links associated with all JSON-relational duality views in the database
    `dba_json_duality_view_tabs` ☰
    `dba_json_duality_view_tab_cols` ☰

rem {
    `dba_json_indexes` ☰
rem }

    `dba_json_schema_columns` ☰

    `dba_kafka_applications` ☰ Oracle SQL Access to Kafka (OSAK) applications
    `dba_kafka_clusters` ☰ OSAK Clusters for which any database user has READ access.
    `dba_kafka_load_metrics` ☰ Metrics for `dbms_kafka`
    `dba_kafka_ops` ☰ Operations for all OSAK views 
    `dba_kafka_ops_results` ☰ Results of OSAK operations
    `dba_kafka_partitions` ☰ Partitions for Kafka topics associated with SQL access

    `→ development/databases/Oracle/installed/data-dictionary/mle/envs` ☰
    `dba_mle_env_imports` ☰ 
    `→ development/databases/Oracle/installed/data-dictionary/mle/modules` ☰
    `dba_mle_procedures` ☰
rem {
    `dba_mview_detail_logical_partition` ☰ !23c 
    `dba_objects_ce` ☰
rem }


    `dba_pg_edge_relationships` ☰ Property graph relationships
    `dba_pg_elements` ☰ Property graph element tables
    `dba_pg_element_labels` ☰ 
    `dba_pg_keys` ☰
    `dba_pg_labels` ☰
    `dba_pg_label_properties` ☰
    `→ development/databases/Oracle/installed/data-dictionary/pg/prop_definitions` ☰
    `→ development/databases/Oracle/installed/data-dictionary/property_graphs` ☰ List of defined *property graphs* in the database.

rem {
    `dba_queue_shards` ☰
    `dba_replay_upgrade_errors` ☰
    `dba_replay_upgrade_statements` ☰
    `dba_replay_workloads` ☰
rem }


rem {
    `dba_router_entries` ☰
rem }
    `dba_sagas` ☰ Active sagas
    `dba_saga_details` ☰ Saga details
    `dba_saga_errors` ☰
    `dba_saga_finalization` ☰ Pending finalization actions
    `dba_saga_participants` ☰ 
    `dba_saga_pending` ☰ Sagas that were initialized in the current PDB.

rem {
    `dba_scheduler_in_memory_trace` ☰
rem }

    `dba_schema_privs` ☰
rem {
    `dba_shared_capture` ☰
    `dba_shared_capture_change_tables` ☰
    `dba_shared_capture_pdbs` ☰
rem }
    `dba_sql_error_mitigations` ☰ Automatic error mitigations for SQL statements.

rem {
    `dba_sql_firewall_allowed_ip_addr` ☰
    `dba_sql_firewall_allowed_os_prog` ☰
    `dba_sql_firewall_allowed_os_user` ☰
    `dba_sql_firewall_allowed_sql` ☰
    `dba_sql_firewall_allow_lists` ☰
    `dba_sql_firewall_captures` ☰
    `dba_sql_firewall_capture_logs` ☰
    `dba_sql_firewall_session_logs` ☰
    `dba_sql_firewall_sql_logs` ☰
    `dba_sql_firewall_status` ☰
    `dba_sql_firewall_violations` ☰
    `dba_sys_privs_all` ☰
    `dba_table_access_stats` ☰
    `dba_table_virtual_columns` ☰
    `dba_tab_col_stat_models` ☰ !23c
    `dba_temp_tbs_usage_metrics` ☰
rem }

    `dba_txeventq_migration_status` ☰ Information about all migrations from AQ classic queues to Transactional Event Queues (TxEventQs).

rem {
    `dba_umf_atsk_hist` ☰
    `dba_umf_eventlog` ☰
rem }

rem {
    `dba_undo_tbs_usage_metrics` ☰
rem }
    `dba_unused_schema_privs` ☰ Schema privileges (without privilege grant paths) that are not used for the privilege analysis policies reported by the `dbms_privilege_capture.generate_result` procedure. Compare with `dba_used_schema_privs`
    `dba_unused_schema_privs_path` ☰ Compare with `dba_used_schema_privs_path`
rem {
    `dba_upgrade_errors` ☰
rem }
    `dba_used_schema_privs` ☰ Schema privileges (without privilege grant paths) that are used for the privilege analysis policies reported by the `dbms_privilege_capture.generate_result` procedure. Compare with `dba_unused_schema_privs_path`
    `dba_used_schema_privs_path` ☰ Compare with `dba_unused_schema_privs_path`
rem {
    `dba_workload_replay_ifsla` ☰
rem }
  table }

  DBMS_* packages
  table { ll
  rem {
    `dbms_adat_report` ☰
    `dbms_adbtask_admin` ☰
    `dbms_application` ☰
  rem }

    `dbms_aqmigtool` ☰

  rem {
    `dbms_aqmigtool_sys` ☰

    `dbms_aq_ind_mon` ☰
    `dbms_aq_sub` ☰
    `dbms_audit_mgmt_support` ☰
    `dbms_autoim` ☰
    `dbms_autoim_internal` ☰
    `dbms_auto_clustering` ☰
    `dbms_auto_clustering_internal` ☰
    `dbms_auto_sqlset` ☰
    `dbms_auto_zonemap_internal` ☰
    `dbms_avtune_util` ☰
    `dbms_awrhub` ☰
    `dbms_awrhub_server` ☰
    `dbms_awrhub_source` ☰
    `dbms_awr_analytics` ☰
    `dbms_aw_xml` ☰
    `dbms_blockchain_utl` ☰
    `dbms_cube_advise_sec` ☰
    `dbms_cube_exp` ☰
    `dbms_cube_prvtexp` ☰
    `dbms_cube_util` ☰
    `dbms_data_guard` ☰
    `dbms_data_guard_internal` ☰
    `dbms_dgpdb` ☰
    `dbms_dlm` ☰
    `dbms_gsm_curuser` ☰
    `dbms_gsm_ddl` ☰
    `dbms_gsm_gsmuser` ☰
    `dbms_gsm_sec` ☰
    `dbms_gsm_shdusr` ☰
    `dbms_gsm_vpd` ☰
    `dbms_hadoop_internal` ☰

  rem }


  rem {
    `dbms_hcs_log` ☰
  rem }

    `dbms_json_duality` ☰ ?
    `dbms_json_schema` ☰ ?

    `dbms_kafka` ☰

  rem {
    `dbms_kafka_adm` ☰
    `dbms_kafka_int` ☰
    `dbms_kafka_md` ☰
    `dbms_kafka_utl` ☰
    `dbms_macadm` ☰
    `dbms_macaud` ☰
    `dbms_macols` ☰
    `dbms_macols_session` ☰
    `dbms_macout` ☰
    `dbms_macsec` ☰
    `dbms_macsec_function` ☰
    `dbms_macsec_roles` ☰
    `dbms_macsec_rules` ☰
    `dbms_macutl` ☰
    `dbms_maintplan` ☰
    `dbms_management_diagnostics` ☰
    `dbms_max_string_size` ☰
    `dbms_mdx_util` ☰
    `dbms_notifications` ☰
    `dbms_optim_bundle` ☰
    `dbms_part_internal` ☰
    `dbms_pqdiag` ☰
    `dbms_redactor` ☰
    `dbms_replayhub` ☰
    `dbms_router_admin` ☰
    `dbms_row_change_tracking` ☰
    `dbms_row_change_tracking_int` ☰

  rem }

    `dbms_saga` ☰
    `dbms_saga_adm` ☰
  rem {
    `dbms_saga_adm_sys` ☰
    `dbms_saga_connect_int` ☰
    `dbms_saga_sys` ☰
  rem }

    `dbms_search` ☰
  rem {
    `dbms_search_def` ☰
    `dbms_sensitive_data` ☰
    `dbms_sharding_directory` ☰
    `dbms_shared_capture_adm` ☰
    `dbms_shared_capture_internal` ☰
    `dbms_shared_capture_ivk` ☰
    `dbms_sqlhist` ☰
  rem }

    `dbms_sql_firewall` ☰
  rem {
    `dbms_swat` ☰
    `dbms_swat_arm_internal` ☰
    `dbms_swat_internal` ☰
    `dbms_swat_mm_internal` ☰
    `dbms_swat_mm_utils` ☰
    `dbms_swat_ver_internal` ☰
    `dbms_swat_xml` ☰
    `dbms_sys_mle` ☰
  rem }
  rem {
    `dbms_table_func` ☰
    `dbms_teqk` ☰
    `dbms_tsdp_protect_int` ☰
    `dbms_upg_json` ☰
    `dbms_upg_json0` ☰
    `dbms_upg_json_int` ☰
  rem }
    `dbms_userdiag` ☰
  rem {
    `dbms_xdbt` ☰
    `dbms_xmlschema_util` ☰
  rem }
  table }

  V$VIEWS:
  table { ll

rem {
    `v$all_sql_bind_capture` ☰
    `v$app_ignorable_errors` ☰
    `v$aq_dequeue_sessions` ☰
    `v$auto_im_decision` ☰
    `v$auto_im_features` ☰
    `v$auto_im_repop_status` ☰
    `v$av_btt_cache` ☰
    `v$av_btt_schema_cache` ☰
    `v$bcapply_stats` ☰
    `v$build_info` ☰
    `v$channel_queues` ☰
    `v$client_errors` ☰
    `v$cloud_link_access_stats` ☰
    `v$compatibility_requirement` ☰

    `v$connection_broker` ☰
    `v$consensus_clients` ☰
    `v$consensus_logs` ☰
    `v$consensus_stats` ☰
    `v$container_topology` ☰

    `v$con_waitclassmetric` ☰
    `v$con_waitclassmetric_history` ☰
    `v$current_session_fix_control` ☰
    `v$datapump_processwait_info` ☰
    `v$datapump_process_info` ☰
rem }

    `v$datapump_sessionwait_info` ☰

rem {
    `v$data_access_url_stats` ☰
    `v$data_share_access_stats` ☰
    `v$dg_broker_property` ☰
    `v$dg_broker_property_int` ☰
    `v$dg_broker_role_change` ☰

    `v$diag_incident_file_contents` ☰
    `v$diag_sess_user_trace_records` ☰
    `v$diag_user_trace_records` ☰
rem }

    `v$enabledschemaprivs` ☰
    `v$eq_dequeue_sessions` ☰

rem {
    `v$eq_subscr_registration_stats` ☰

    `v$exa_file` ☰
    `v$exa_template` ☰
    `v$exa_vault` ☰
rem }

    `v$fast_start_failover_config` ☰
    `v$flashback_log_dest` ☰

rem {
    `v$foreign_datafile_copy` ☰
    `v$fs_lag_histogram` ☰
    `v$gcs_lock_state_resolution_history` ☰

    `v$im_edge_index` ☰
    `v$im_edge_index_population_task` ☰
    `v$im_gd_instance_map` ☰
    `v$im_graph_element` ☰
    `v$im_graph_topology` ☰
    `v$im_graph_topology_edge_index` ☰
    `v$im_graph_topology_element` ☰
    `v$im_overhead` ☰
    `v$im_table_edge_index_mapping` ☰

    `v$inmemory_object_advice` ☰
    `v$inmemory_object_advice_pdb` ☰
    `v$inmemory_size_advice` ☰
    `v$inmemory_size_advice_pdb` ☰

    `v$listener_health` ☰
    `v$lreg_update_history` ☰
    `v$lreg_updstat` ☰
    `v$mdx_cursors` ☰
    `v$mdx_cursor_dependency` ☰
rem }

    `v$ofs_threads` ☰ Oracle file system (OFS) threads.

rem {
    `v$pq_grandist` ☰
    `v$pq_grangen` ☰
rem }

    `v$px_process_detail` ☰
    `v$px_server` ☰

rem {
    `v$quarantined_transactions` ☰
    `v$query_block_origin` ☰
    `v$rac_two_stage_rolling_updates` ☰
    `v$scheduler_in_memory_trace` ☰
    `v$securefile_shrink` ☰

    `v$shard_ack_receiver` ☰
    `v$shard_ack_sender` ☰
    `v$shard_apply_coordinator` ☰
    `v$shard_apply_lcr_reader` ☰
    `v$shard_apply_reader` ☰
    `v$shard_apply_server` ☰
    `v$shard_lcr_persister` ☰
    `v$shard_lcr_producer` ☰
    `v$shard_message_tracking` ☰
    `v$shard_network_receiver` ☰
    `v$shard_network_sender` ☰
    `v$shard_replication_unit` ☰
    `v$shard_transaction` ☰
    `v$shared_capture_pdb_stats` ☰
    `v$shared_capture_worker` ☰
    `v$snr_replication_units` ☰

rem }

    `v$sql_history` ☰ See also `→ development/databases/Oracle/adminstration/init-parameters/sql/history/enabled`

rem {
    `v$sql_history_stats` ☰

    `v$sub_segments` ☰
    `v$table_access_stats` ☰
rem }
    `v$tdm_stats` ☰ Statistics for Oracle Connection Manager in Traffic Director Mode (CMAN-TDM).
    `v$text_waiting_events` ☰ Oracle Text index maintenance events that have been delayed due to errors or contentions.
rem {
    `v$transaction_block` ☰
rem }
  table }

  Further improvements might (or do?) include:
  • → https://docs.oracle.com/en/database/oracle/oracle-database/23/dwhsg/advanced-query-rewrite-materialized-views.html#GUID-0C582A5C-77BA-4CE1-B435-D32F5222ABD0[Semi-Join Materialized View Rewrite]
  • Improved `returning` clause for `merge` and `update` statements (See → https://db-oriented.com/2017/10/07/returning-into-enhancement-suggestion/[this enhancment suggestion] and → https://community.oracle.com/tech/apps-infra/discussion/4396106/returning-into-support-both-pre-update-and-post-update-values[this Oracle community discussion]).
  • Parameter → development/databases/Oracle/installed/types/json/methods/stringify#ora-json-types-stringify-pretty[`pretty`] in method → development/databases/Oracle/installed/types/json/methods/stringify[`json_element_t.stringify`]
  • → development/databases/Oracle/SQL/statement/nouns/system/alter#ora-alter-system-end-session[`alter system kill session … FORCE`]
  • → development/databases/Oracle/SQL/select/aggregate[Aggregation] over `interval` data types
  • Enhancements for blockchain tables
  • SQL <-> PL/SQL transpiler
  • Globally distributed database *Raft* repliation: a *consensus-based* commit protocol, enabling *declarative* replication which does not need Golden Gate or Data Guard.
  • OJM allows HTTP and TCP access while other OS calls are disabled
  • Sagas for microservices / Lock-free reservations
  • → development/databases/Oracle/SQL/statement/nouns/system/alter#ora-alter-system-end-session[`alter system kill session … FORCE`] to terminate a session more immediatly than using `alter system kill session … immediate`.
  • The → development/Data/quality[data quality] operators → https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/data-quality-operators.html#GUID-C13A179C-1F82-4522-98AA-E21C6504755E[`fuzzy_match()`] and → https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/data-quality-operators.html#GUID-4D870366-C06F-4E63-BE15-609C1F2A96D3[`phonic_encode()`] (?)
  • → development/databases/Oracle/sample-schemas[Sample schemas] for 23c (→ https://github.com/oracle-samples/db-sample-schemas/releases/tag/v23.1[on Github])
  • Transparent application continuity
  • Asynchronous programming
  • → development/databases/Oracle/SQL/PGQ[SQL Property Graph Query Language] (ISO SQL/PQL standard)
  • `default on null` for `update` statements
  • New system privilege `table retention`.
  • True Cache
  • Real-time SQL Plan Management
  • Read-only Per-PDB Standby
  • In-database SQL firewall
  • OKafka
  • Oracle text indexes with automatic maintenance
  • Transportable binary → development/XML
  • OAuth 2.0 integration
  • On OCI: Oracle Database Zero Data Loss Autonomous Recovery Service (with which Oracle hopes to address the challenges of ransomware, outages and human errors)
  • On OCI: Oracle Full Stack Disaster Recovery Service (Configuration, monitoring and management of the disaster recovery process for the *full stack* of technologies, including middleware, databases, networks, storage)
  • Support for Unicode Ideographic Variation Sequences (IVS)

}
{ Docker image

  There is a docker image for the free edition of Oracle 23c:
code {
docker pull container-registry.oracle.com/database/free
code }

  However, this image is poorly (if at all) documented, thus I had to make a few dabbles in the dark to get it running usefully.

  If the container named `ora23c` was previously started (and stopped), it must be removed:
code {
$ docker rm ora23c
code }

  Start a new container:
code {

→ development/tools/Docker/commands/run  → development/tools/Docker/commands/run#docker-run-name[--name] ora23c -d -p 1521:1521 container-registry.oracle.com/database/free
code }

  Check the status of the container until it changes from *Up … seconds (health: starting)* to *Up 2 minutes (healthy)*:
code {
docker ps
code }

  When it was running, I changed the password of `sys`: opened a shell in the container:
code {
$ → development/tools/Docker/commands/exec ora23c sh -c "echo 'alter user sys identified by IamTheDBA;' | sqlplus -S / as sysdba"

User altered.
code }

  It's also possible to open a shell in the container and run SQLPlus interactively:
code {
$ docker exec -it ora23c bash
bash-4.4$ sqlplus / as sysdba
…
SQL>
code }

  With this password, I could then connect to the instance from → development/Software/Oracle-SQL-Developer[SQL Developer] using the service names *FREE* and *FREEPDB1*
 (see `→ Linux/fhs/opt/[/opt]/oracle/product/23c/dbhomeFree/network/admin/tnsnames.ora`)

  It should be noted that all changes to the database disappear when the docker container is stopped.

rem {
SYS_PW=IAmTheDBA
ORA_USER=rene
ORA_PW=IAmTheUser
docker run -d -p 1521:1521 -e ORACLE_PASSWORD=$SYS_PW -e APP_USER=$ORA_USER -e APP_USER_PASSWORD=$ORA_PW                                      container-registry.oracle.com/database/free # gvenzl/oracle-free
docker run -d -p 1521:1521 -e ORACLE_PASSWORD=$SYS_PW -e APP_USER=$ORA_USER -e APP_USER_PASSWORD=$ORA_PW -v oracle-volume:/opt/oracle/oradata container-registry.oracle.com/database/free # gvenzl/oracle-free
rem }

}
rem {
{ Oracle Database 23c Umbrella Beta Program

  The *Oracle Database 23c Umbrella Beta Program* gives its participants (i.e. beta testes) access to these new features before they are released.

  Companies wanting to participate must meet the following minimal criterias:  
    • If applying as an Oracle Customer, the company holds an active license or subscription for the product being offered for beta testing.
    • If applying as an Oracle Partner, the company is an active member of the Oracle PartnerNetwork and is enrolled in the appropriate track
    • The Company has achieved the appropriate expertise level in the product available for beta testing.
    • From the Oracle ACE Program, only ACE Directors are eligible to participate in beta programs.
    • Authors must have a book contract with an Oracle Publisher Program member.

  This beta program is estimated to last from October 2022 through February 2023 and can be  → https://bit.ly/OracleBetaTesting[signed up here].

}
rem }

links:

  Philipp Salvisberg's → https://twitter.com/phsalvisberg/status/1572885995070300160[Twitterthread] summarizes some impressions from new 23c features presented at the DOAG 2022 Conference.

  That Jeff Smith's → https://threadreaderapp.com/scrolly/1582788029269168128[notes]
