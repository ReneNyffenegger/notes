$ Oracle internals: functions

{ Some module names

  table { ll
     KCB ☰ Kernel Cache Buffer (Get, change, and release buffers)
     KCBL ☰ Kernel Cache Buffer Load (Direct I/O routines)
  table }

}
{ Some functions

  table { lll
   `kcbgcur` ☰ Kernel Cache Buffer Get Current Read ☰ When event 10046 is enabled and this function is called, the value of `cu=` is incremented. Compare with `kcbget`
   `kcbget` ☰ Kernel Cache Buffer Get Buffer ☰ → https://alexanderanokhin.com/2012/03/19/dtrace-lio-new-features/[Alexander Anokhin] observed, this function is the analog of `kcbgcur` for index branch and leaf blocks.
   `kcbgtcr` ☰ Kernel Cache Buffer Get Consistent Read ☰ The entry point for a *consistent read*. When event 10046 is enabled, callig this function increments the value of `cr=`. → https://nenadnoveljic.com/blog/data-loss-after-plugging-a-pdb/[This function] receives the pointer to the structure containing a 64-bit variable that stores the object_id in the 32 most significant bits and the block address in the least 32 significant bits (… tested on Oracle 19.13 and 19.14).
   `kcbispnd` ☰ Kernel Cache Buffer Is Pinned  ☰ checks is a buffer pinned yet or not. This function increments statistic either *buffer is pinned count* or *buffer is not pinned count*.
   `kcbldrget` ☰ Kernel Cache Buffer Load Direct-Read Get ☰ This function performs a → development/databases/Oracle/installed/dynamic-performance-views/event_name/list/direct-path/read. → https://alexanderanokhin.com/2012/03/19/dtrace-lio-new-features/[Apparently], the function `kcbldrget` is called from `kcbgtcr` See also event 10357, level 8.
   `kcbrls` ☰ Kernel Cache Buffer Release Pin ☰
   `ksudss` ☰ ☰ Dumps a systemstate. Can be called from `gdb` or `dbx`: `print ksudss(256)`, which seems to correspond to `oradebug dump systemstate 256`. See also MOS notes 121779.1 and 273324.1. Compare with `ksudps` and `ksdhng`.
   `ksudps` ☰ ☰ Dumps a processsate. Can be called from `gdb` or `dbx`: `print ksudps(10)`, which seems to correspond to `oradebug dump processstate 10`.
   `ksdsel` ☰ ☰ Sets an event(?). Can be called from `gdb` or `dbx`: `print ksdsel(10046,12) equivalent to attached process set 10046 event level 12`, which seems to be equivalent to *set event 10046 level 12*.
   `skdxipc` ☰ ☰ Can be called from `gdb` or `dbx` and seems to be equivalent to `oradebug ipc`
   `skdxprst` ☰ ☰ Can be called from `gdb` or `dbx` and seems to be equivalent to `oradebug procstat`
 
  table }

}
{ Waiting for input from a client over TCP

  The callstack of an Oracle User process (thread) when waiting for the next command from the client via TCP (Oracle 19c on Windows):

  table { ll

  `ntdll!NtWaitForMultipleObjects+0x14` ☰
  `KERNELBASE!WaitForMultipleObjectsEx+0xf0` ☰
  `orantcp19!snttclose+0x37d4` ☰
  `orantcp19!nttini+0x28642` ☰
  `oran19!nsbrecv+0x29a` ☰
  `oran19!nioqrc+0x1d4` (`opikndf2()+1116`?) ☰
  `opitsk()+1292` ☰
  `opiino()+1142` ☰
  `opiodr()+1614` ☰
  `opidrv()+816` ☰
  `sou2o()+110` ☰
  `opimai_real()+174` ☰
  `opimai()+268` ☰
  `OracleThreadStart()+643` ☰
   ??? ☰
  `KERNEL32!BaseThreadInitThunk+0x14` ☰ 
  `ntdll!RtlUserThreadStart+0x21` ☰
  
  table }

}
{ erroep

 `erroep` throws an exception/error. It's unclear to me how many parameters the function expects nor what they're supposed to mean.

code {
SQL> → development/databases/Oracle/tools/oradebug/call[oradebug] call erroep 0 1477 0 0
ORA-01477: user data area descriptor is too large
SQL> oradebug call erroep 1555
ORA-01555: snapshot too old: rollback segment number  with name "" too small
code }

}
{ Wait interface: kslwtbctx / kslwtectx

  As per → https://fritshoogland.files.wordpress.com/2014/04/using-gdb-for-oracle-tracing-deep-dive.pdf[Frits Hoogland], `kslwtbctx` and `kslwtectx` are the entry points for the *wait interface*
  (Kernel service layer wait begin / end context) and the *wait number* is passed in the function `kskthewt` (register `RSI`).

  The wait time is passed by calling the function `kslwtrk_enter_wait_int` (register `r13`).


}
{ Tracing function calls

  Function calls can be traced:
code {
SQL> oradebug setospid 14820
SQL> oradebug event sql_trace {callstack: fname opifch2} callstack(3)
SQL> oradebug tracefile_name
code }

  Then, in other session:
code {
select …
code }

}

sa:
  A way to find function names and the amount of parameters is using
  → development/databases/Oracle/tools/oradebug/dump/errorstack[`oradebug dump errorstack`].

  Memory addresses (in the `.text` segment of the executable of Oracle) can be translated to function names
  with → development/databases/Oracle/tools/oradebug/translate_addr[`oradebug translate_addr`].

links:
  Alexander Anokhin: → https://alexanderanokhin.com/2012/03/19/dtrace-lio-new-features/[Dynamic tracing of Oracle logical I/O: part 2. Dtrace LIO v2 is released.]
