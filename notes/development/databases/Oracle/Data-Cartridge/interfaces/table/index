$ Oracle Data Cartridge Interface example: Multiplication table

This is a simple example of how the → development/databases/Oracle/Data-Cartridge[Oracle Data Cartridge] table → development/databases/Oracle/Data-Cartridge/interfaces[interface] can be implemented.

The pipelined table `tq84_odci.multiplication_table(r, c)` returns a dynamic multiplication table with `r+1` rows and `c+1` columns:
gh|Oracle-patterns|/misc/ODCI/table/multiplication/img/result.png||

{ spec.plsql

 `spec.plsql` creates the `tq84_odci` type:
  gh|Oracle-patterns|/misc/ODCI/table/multiplication/spec.plsql||

}
{ body.plsql

 `body.plsql` creates the type's body:
  gh|Oracle-patterns|/misc/ODCI/table/multiplication/body.plsql||

}
{ Not working if CURSOR_SHARING is set to FORCE

  Update *2020-11-20*: it turns out that this example does not work if → development/databases/Oracle/adminstration/init-parameters/cursor_sharing[`cursor_sharing`] is set to `force`: it throws the
  → development/databases/Oracle/errors[error message] *ORA-29913: error in executing ODCITABLEDESCRIBE callout*.
  -
  This is because with this setting, Oracle calls the function with → development/databases/Oracle/SQL/statement/bind-variables[bind variables] and `odciTableDescribe` receives `→ development/databases/Oracle/SQL/null` for the parameters `r` and `c`.

  Therefore, in such an environment, the session must be altered in order to make the example run:
code {
→ development/databases/Oracle/SQL/statement/nouns/session/set/init-param[alter session set] cursor_sharing = exact;
code }

}
