$ ORADEBUG
@ oradebug

`oradebug` is a debugging tool that (among others) allows to inspect and change memory in the → development/databases/Oracle/architecture/instance.

The commands of this tool are executed from within → development/databases/Oracle/SQL-Plus by prepending the commands with `oradebug`. The SQL*Plus session needs to run with the
→ development/databases/Oracle/security/privileges/system/sys/dba[SYSDBA] system privilege (otherwise, the error → development/databases/Oracle/errors/ORA-01031_insufficient-privileges is thrown).

table { lll
  ~Command~        ☰~arguments~                                                             ☰ ~Description~
  → development/databases/Oracle/tools/oradebug/help[`HELP`]  ☰ [command]                   ☰ Describe one or all commands
  → development/databases/Oracle/tools/oradebug/setmypid[`SETMYPID`] ☰                      ☰ Debug current → development/databases/Oracle/architecture/processes/server[process]
  → development/databases/Oracle/tools/oradebug/setospid[`SETOSPID`] ☰ <ospid>              ☰ Set OS pid of process to debug
  → development/databases/Oracle/tools/oradebug/setorapid[`SETORAPID`] ☰ <orapid> ['force'] ☰ Set Oracle pid of process to debug
  `SETORAPNAME`    ☰ <orapname>                                                             ☰ Set Oracle process name to debug
  → development/databases/Oracle/tools/oradebug/short_stack[`SHORT_STACK`] ☰                ☰ Get abridged OS stack
  → development/databases/Oracle/tools/oradebug/current_sql[`CURRENT_SQL`]    ☰             ☰ Get current SQL
  → development/databases/Oracle/tools/oradebug/dump[`DUMP`] ☰ <dump_name> <lvl> [addr]     ☰ Invoke named dump
  `PDUMP`          ☰ [interval=<interval>]      [ndumps=<count>]  <dump_name> <lvl> [addr]  ☰ Invoke named dump periodically
  → development/databases/Oracle/tools/oradebug/dumpsga[`DUMPSGA`] ☰ [bytes]                                                                ☰ Dump → development/databases/Oracle/architecture/instance/SGA/fixed
  → development/databases/Oracle/tools/oradebug/dumplist[`DUMPLIST`] ☰                      ☰ Print a list of available dumps
  → development/databases/Oracle/tools/oradebug/event[`EVENT`]  ☰ <text>                    ☰ Set trace event in process
  → development/databases/Oracle/tools/oradebug/eventdump[`EVENTDUMP`]  ☰ `session | system | process |… ?` ☰ Not found using → development/databases/Oracle/tools/oradebug/help[`oradebug help`], but see → development/databases/Oracle/tools/oradebug/doc/event/action/eventdump[`oradebug doc event action eventdump`].
  `SESSION_EVENT`  ☰ <text>                                                                 ☰ Set trace event in session
  → development/databases/Oracle/tools/oradebug/dumpvar[`DUMPVAR`] ☰ <→ development/databases/Oracle/architecture/instance/PGA[pga] | → development/databases/Oracle/architecture/instance/UGA[uga] | → development/databases/Oracle/architecture/instance/SGA[sga]> <name> [level] ☰ Print/dump a fixed PGA/SGA/UGA variable
  → development/databases/Oracle/tools/oradebug/dumptype[`DUMPTYPE`] ☰ <address> <type> <count> ☰ Print/dump an address with type info
  `SETVAR`         ☰ <p|s|uga> <name> <value>                                               ☰ Modify a fixed PGA/SGA/UGA variable
  → development/databases/Oracle/tools/oradebug/peek[`PEEK`] ☰ `<addr> <len> [level]`       ☰ Print/Dump memory
  `POKE`           ☰ <addr> <len> <value>                                                   ☰ Modify memory
  → development/databases/Oracle/tools/oradebug/wakeup[`WAKEUP`]  ☰ <orapid>                ☰ Wake up Oracle process
  → development/databases/Oracle/tools/oradebug/suspend[`SUSPEND`]        ☰                 ☰ Suspends the execution of a → development/databases/Oracle/architecture/session, see also `resume` (and `wakeup`?)
  `RESUME`         ☰                                                                        ☰ Resume the exection of a session that was stopped with `suspend`.
  `FLUSH`          ☰                                                                        ☰ Flush pending writes to trace file
  `CLOSE_TRACE`    ☰                                                                        ☰ Close trace file
  → development/databases/Oracle/tools/oradebug/tracefile_name[`TRACEFILE_NAME`] ☰ ☰ Get name of trace file
  `SETTRACEFILEID` ☰ <identifier name>                                                      ☰ Set tracefile identifier
  `LKDEBUG`        ☰                                                                        ☰ Invoke global enqueue service debugger
  `NSDBX -G`       ☰ <Inst-List | def | all |                                               ☰ cluster > Nodes involved
  `NSDBX -R`       ☰ <Inst-List | def | all |                                               ☰ cluster > Nodes involved (return output)
  `SETINST`        ☰ <instance# .. | all>                                                   ☰ Set instance list in double quotes
  `SGATOFILE`      ☰ <SGA dump dir>                                                         ☰ Dump SGA to file; dirname in double quotes
  `DMPCOWSGA`      ☰ <SGA dump dir>                                                         ☰ Dump & map SGA as COW; dirname in double quotes
  `MAPCOWSGA`      ☰ <SGA dump dir>                                                         ☰ Map SGA as COW; dirname in double quotes
  → development/databases/Oracle/tools/oradebug/hanganalyze[`HANGANALYZE`] ☰ [level] [syslevel] ☰ Analyze system hang
  → development/databases/Oracle/tools/oradebug/ffbegin[`FFBEGIN`]  ☰                       ☰ Flash Freeze the Instance
  `FFDEREGISTER`   ☰                                                                        ☰ FF deregister instance from cluster
  `FFTERMINST`     ☰                                                                        ☰ Call exit and terminate instance
  `FFRESUMEINST`   ☰                                                                        ☰ Resume the flash frozen instance
  `FFSTATUS`       ☰                                                                        ☰ Flash freeze status of instance
  → development/databases/Oracle/tools/oradebug/skdsttpcs[`SKDSTTPCS`] ☰ <ifname>  <ofname> ☰ Helps translate PCs (= proc calls?) to names
  `WATCH`          ☰ <addr> <len> <self|exist|all|target> [hw [write|rw|exec]]              ☰ Watch a region of memory
  `DELETE`         ☰ <local|global|target> watchpoint <id>                                  ☰ Delete a watchpoint
  `SHOW`           ☰ <local|global|target> watchpoints                                      ☰ Show  watchpoints
  → development/databases/Oracle/tools/oradebug/direct_access[`DIRECT_ACCESS`] ☰ <set/enable/disable command | select query> ☰ → development/databases/Oracle/architecture/instance/fixed-tables[Fixed table] access
  → development/databases/Oracle/tools/oradebug/ipc[`IPC`] ☰                                ☰ Dump ipc information
  `IPC_TRACE`      ☰ <module> <trace_flags> <trace_level>                                   ☰ Modify IPC trace flags
  `IPC_CHECKSUM`   ☰ <light/medium/full>                                                    ☰ Enable/Disable IPC Checksumming
  → development/databases/Oracle/tools/oradebug/unlimit[`UNLIMIT`] ☰ ☰ Unlimit the size of the → development/databases/Oracle/architecture/database/system-files/Automatic-Diagnostic-Repository/trace-file[trace file]
  → development/databases/Oracle/tools/oradebug/call[`CALL`] ☰ [-t count] <func> [arg1]...[argn] ☰ Invoke function with arguments
  → development/databases/Oracle/tools/oradebug/translate_addr[`TRANSLATE_ADDR`] ☰ <address> … ☰ Translate memory-addresses to symbol names
  `CORE`           ☰                                                                        ☰ Dump core without crashing process
  `PROCSTAT`       ☰                                                                        ☰ Dump process statistics
  `DOC`            ☰ → development/databases/Oracle/tools/oradebug/doc/event[event] [name|scope|filter|action]         ☰ Help on events (syntax, event list, …)
  `DOC`            ☰ → development/databases/Oracle/tools/oradebug/doc/component[component] [<comp_name>] ☰ List all components or describe <comp_name>
  `MEMANOTDUMP`   ☰ `<shared|private> level` ☰ An undocumented command (see also the parameters `_mem_annotation_pr_lev`, `_mem_annotation_scale`, `_mem_annotation_sh_lev`, `_mem_annotation_store`
  `MEMANOTEND`     ☰ `<shared|private>` ☰ An undocumented command
  → development/databases/Oracle/tools/oradebug/unit_test[`UNIT_TEST`] ☰ ☰
  `PATCH` ☰ `[list|install|remove|disable|enable] <patch>` ☰
  → development/databases/Oracle/tools/oradebug/dyn_gcr[`DYN_GCR`] ☰ ☰
table }

? On Unix, oradebug sends a SIGUSR2 → Linux/kernel/process/signal to the inspected → development/databases/Oracle/architecture/processes[process].

{ Init parameters

  → development/databases/Oracle/adminstration/init-parameters[Init parameters] that are related to `oradebug` can be queried like so
code {
select
   ksppinm,
   ksppdesc
from
   → development/databases/Oracle/architecture/instance/fixed-tables/k/s/p/pi
where
   lower(ksppinm ) like '%oradebug%' or
   lower(ksppdesc) like '%oradebug%'
order by
   ksppinm;
--
--   KSPPINM                               KSPPDESC
--   ------------------------------------  -------------------------------------------------------------
--   _disable_oradebug_commands            disable execution of certain categories of oradebug commands
--   _hm_analysis_oradebug_sys_dump_level  the oradebug system state level for hang manager hang analysis
--   _ksdx_charset_ratio                   ratio between the system and oradebug character set
--   _ksdxdocmd_default_timeout_ms         default timeout for internal oradebug commands
--   _oradebug_cmds_at_startup             oradebug commands to execute at → development/databases/Oracle/architecture/instance/startup-shutdown[instance startup]
--   _oradebug_force                       force target processes to execute oradebug commands?
code }

  Note that the default value of `_disable_oradebug_commands` → https://jonathanlewis.wordpress.com/2024/03/12/disable-oradebug/[changed from `none` to `restricted` in 21.3 and 23.3] which explains
  why certain commands «suddenly» don't work any more (*ORA-32519: insufficient privileges to execute ORADEBUG command: execution of ORADEBUG commands is disabled for this instance*).

}

{ TODO

code {
select *
from
   sys.unified_misc_audited_actions
where
   name like '%ORADEBUG%';

select * from ku$_dummy_dv_oradebug_v;

desc ku$_dummy_dv_oradebug_t;
code }


}

sa:

  → development/databases/Oracle/tools/oradebug/help[`oradebug help`]

  → development/databases/Oracle/SQL/statement/execution#ora-sql-exec-tracing

  MOS note 28863.1 seems to indicate that oradebug is superseded by `oradbx` (supposedly located under `→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/lib`).
