
`oradebug` is a debugging tool that (among others) allows to inspect and change memory in the → development/databases/Oracle/architecture/instance.

The commands of this tool are executed from within → development/databases/Oracle/SQL-Plus by prepending the commands with `oradebug`. The SQL*Plus session needs to run with the
→ development/databases/Oracle/security/privileges/system/sys/dba[SYSDBA] system privilege (otherwise, the error *ORA-01031: insufficient privileges* is thrown).

table { lll
  ~Command~        ☰~arguments~                                                             ☰ ~Description~
  → development/databases/Oracle/tools/oradebug/help[`HELP`]  ☰ [command]                   ☰ Describe one or all commands
  → development/databases/Oracle/tools/oradebug/setmypid[`SETMYPID`] ☰                      ☰ Debug current → development/databases/Oracle/architecture/processes/server[process]
  → development/databases/Oracle/tools/oradebug/setospid[`SETOSPID`] ☰ <ospid>              ☰ Set OS pid of process to debug
  `SETORAPID`      ☰ <orapid> ['force']                                                     ☰ Set Oracle pid of process to debug
  `SETORAPNAME`    ☰ <orapname>                                                             ☰ Set Oracle process name to debug
  `SHORT_STACK`    ☰                                                                        ☰ Get abridged OS stack
  → development/databases/Oracle/tools/oradebug/current_sql[`CURRENT_SQL`]    ☰             ☰ Get current SQL
  → development/databases/Oracle/tools/oradebug/dump[`DUMP`] ☰ <dump_name> <lvl> [addr]     ☰ Invoke named dump
  `PDUMP`          ☰ [interval=<interval>]      [ndumps=<count>]  <dump_name> <lvl> [addr]  ☰ Invoke named dump periodically
  → development/databases/Oracle/tools/oradebug/dumpsga[`DUMPSGA`] ☰ [bytes]                                                                ☰ Dump → development/databases/Oracle/architecture/instance/SGA/fixed
  → development/databases/Oracle/tools/oradebug/dumplist[`DUMPLIST`] ☰                      ☰ Print a list of available dumps
  → development/databases/Oracle/tools/oradebug/event[`EVENT`]  ☰ <text>                    ☰ Set trace event in process
  `SESSION_EVENT`  ☰ <text>                                                                 ☰ Set trace event in session
  → development/databases/Oracle/tools/oradebug/dumpvar[`DUMPVAR`] ☰ <→ development/databases/Oracle/architecture/instance/PGA[pga] | → development/databases/Oracle/architecture/instance/UGA[uga] | → development/databases/Oracle/architecture/instance/SGA[sga]> <name> [level] ☰ Print/dump a fixed PGA/SGA/UGA variable
  → development/databases/Oracle/tools/oradebug/dumptype[`DUMPTYPE`] ☰ <address> <type> <count> ☰ Print/dump an address with type info
  `SETVAR`         ☰ <p|s|uga> <name> <value>                                               ☰ Modify a fixed PGA/SGA/UGA variable
  `PEEK`           ☰ <addr> <len> [level]                                                   ☰ Print/Dump memory
  `POKE`           ☰ <addr> <len> <value>                                                   ☰ Modify memory
  `WAKEUP`         ☰ <orapid>                                                               ☰ Wake up Oracle process
  `SUSPEND`        ☰                                                                        ☰ Suspend execution
  `RESUME`         ☰                                                                        ☰ Resume execution
  `FLUSH`          ☰                                                                        ☰ Flush pending writes to trace file
  `CLOSE_TRACE`    ☰                                                                        ☰ Close trace file
  → development/databases/Oracle/tools/oradebug/tracefile_name[`TRACEFILE_NAME`] ☰ ☰ Get name of trace file
  `SETTRACEFILEID` ☰ <identifier name>                                                      ☰ Set tracefile identifier
  `LKDEBUG`        ☰                                                                        ☰ Invoke global enqueue service debugger
  `NSDBX -G`       ☰ <Inst-List | def | all |                                               ☰ cluster > Nodes involved
  `NSDBX -R`       ☰ <Inst-List | def | all |                                               ☰ cluster > Nodes involved (return output)
  `SETINST`        ☰ <instance# .. | all>                                                   ☰ Set instance list in double quotes
  `SGATOFILE`      ☰ <SGA dump dir>                                                         ☰ Dump SGA to file; dirname in double quotes
  `DMPCOWSGA`      ☰ <SGA dump dir>                                                         ☰ Dump & map SGA as COW; dirname in double quotes
  `MAPCOWSGA`      ☰ <SGA dump dir>                                                         ☰ Map SGA as COW; dirname in double quotes
  `HANGANALYZE`    ☰ [level] [syslevel]                                                     ☰ Analyze system hang
  `FFBEGIN`        ☰                                                                        ☰ Flash Freeze the Instance
  `FFDEREGISTER`   ☰                                                                        ☰ FF deregister instance from cluster
  `FFTERMINST`     ☰                                                                        ☰ Call exit and terminate instance
  `FFRESUMEINST`   ☰                                                                        ☰ Resume the flash frozen instance
  `FFSTATUS`       ☰                                                                        ☰ Flash freeze status of instance
  → development/databases/Oracle/tools/oradebug/skdsttpcs[`SKDSTTPCS`] ☰ <ifname>  <ofname> ☰ Helps translate PCs (= proc calls?) to names
  `WATCH`          ☰ <addr> <len> <self|exist|all|target> [hw [write|rw|exec]]              ☰ Watch a region of memory
  `DELETE`         ☰ <local|global|target> watchpoint <id>                                  ☰ Delete a watchpoint
  `SHOW`           ☰ <local|global|target> watchpoints                                      ☰ Show  watchpoints
  `DIRECT_ACCESS`  ☰ <set/enable/disable command | select query>                            ☰ Fixed table access
  → development/databases/Oracle/tools/oradebug/ipc[`IPC`] ☰                                ☰ Dump ipc information
  `IPC_TRACE`      ☰ <module> <trace_flags> <trace_level>                                   ☰ Modify IPC trace flags
  `IPC_CHECKSUM`   ☰ <light/medium/full>                                                    ☰ Enable/Disable IPC Checksumming
  `UNLIMIT`        ☰                                                                        ☰ Unlimit the size of the trace file
  → development/databases/Oracle/tools/oradebug/call[`CALL`] ☰ [-t count] <func> [arg1]...[argn] ☰ Invoke function with arguments
  → development/databases/Oracle/tools/oradebug/translate_addr[`TRANSLATE_ADDR`] ☰ <address> … ☰ Translate memory-addresses to symbol names
  `CORE`           ☰                                                                        ☰ Dump core without crashing process
  `PROCSTAT`       ☰                                                                        ☰ Dump process statistics
  `DOC`            ☰ → development/databases/Oracle/tools/oradebug/doc/event[event] [name|scope|filter|action]         ☰ Help on events (syntax, event list, …)
  `DOC`            ☰ → development/databases/Oracle/tools/oradebug/doc/component[component] [<comp_name>] ☰ List all components or describe <comp_name>
table }

? On Unix, oradebug sends a SIGUSR2 → Linux/kernel/process/signal to the inspected → development/databases/Oracle/architecture/processes[process].

sa:

  → development/databases/Oracle/tools/oradebug/help[`oradebug help`]

  → development/databases/Oracle/SQL/statement/execution#ora-sql-exec-tracing
