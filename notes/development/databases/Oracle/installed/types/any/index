$ Oracle: anyType, anyData and anyDataSet

{ sys.anyType #sys-anyType

 `anyType` allows to create generic (aka transient) object-types at *runtime*. Such a creation is started with `beginCreate` and ended with `endCreate`.

  An instance of an `anyType` can also be created from a *persistent type* (that created using the ordinary `create type` statement) with the global function `sys.getAnyTypeFromPersistent(schemaName, typeName)`.

  The OCI type that corresponds to `anyType` is `OCIType`.

  Methods:
  table { ll

    `beginCreate` ☰
    `endCreate` ☰
    `setInfo` ☰ create additional information required for construction a *collection* or built-in types
    `getInfo` ☰
    `addAttr` ☰ adds an attribute to an `anyType` whose type code is `→ development/databases/Oracle/installed/packages/dbms/types[dbms_types].typecode_object`
    `getAttrElemInfo` ☰ Gets type information for an attribute of the type (if `dbms_type.typecode_object`)
    `getPersistent` ☰ desupported, use `getANYTypeFromPersistent()`

  table } 


}
{ sys.anyData #sys-anyData

  An instance of `sys.anyData` can be created with the following two ways
    • `convertXYZ` (`XYZ` being a data type such as `number`, `date` etc. or
    • `beginCreate` … `endCreate()` (after creating a transient type using `anyType`).

  The OCI type that corresponds to `anyData` is `OCIAnyData`.

  table { ll
    `beginCreate` ☰ start creating a new `anyData` object whose type corresponds to a `anyType` that was previously created.
    `endCreate` ☰
    `pieceWise` ☰ must be called to iterate over the elements of an *object* in order to `get*` or `set*` their values. Unfortunately, it does not seem possible to get or set a value by either the element's name or position.
    `setXXX` ☰ `XXX` is a → development/databases/Oracle/SQL/data-types/index[data type] such as `number`, `date` etc.
    `getXXX` ☰
    `convertXXX` ☰
    `accessXXX` ☰ `XXX` corresponds to the data type of the returned value. If the `anyData` on which this method is called has another «underlying» data type, `accessXXX` returns → development/databases/Oracle/SQL/null[`null`].
    `getTypeName` ☰ Returns something like `SYS.VARCHAR2`, `USR.MY_TYPE`. If callled on a transient type, the function returns `null`.
    → development/databases/Oracle/installed/types/any/data/api/getType[`getType`] ☰

  table }

}
{ sys.anyDataSet #sys-anyDataSet

 `anyDataSet` is a generic → development/databases/Oracle/PL-SQL/collection-types[collection type].

  table { ll
    `beginCreate` ☰
    `endCreate` ☰
    `addInstance` ☰ 
    `pieceWise` ☰
    `getCount` ☰ returns the number of data instances in the `anyDataSet`
    `getTypeName` ☰
    `getType` ☰
    `setXXX` ☰
    `getXXX` ☰
    `getInstance` ☰
    `setXXX` ☰
  table }

  The OCI type that corresponds to `anyData` is `OCIAnyDataSet`.

}
{ getTvoid()

  TODO…

}
{ Example

  gh|Oracle-patterns|/Installed/types/any/passAnyObject/types.sql||

  gh|Oracle-patterns|/Installed/types/any/passAnyObject/passAnyObject.sql||

  gh|Oracle-patterns|/Installed/types/any/passAnyObject/run.sql||

}

sa:
  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/dbmsany_sql[`$ORACLE_HOME/rdbms/admin/dbmsany.sql`]
