
{ sys.anyType #sys-anyType

  Methods:
  table { ll

    `beginCreate` ☰
    `endCreate` ☰
    `setInfo` ☰ create additional information required for construction a *collection* or built-in types
    `getInfo` ☰
    `addAttr` ☰ adds an attribute to an `anyType` whose type code is `→ development/databases/Oracle/installed/packages/dbms/types[dbms_types].typecode_object`]
    `getAttrElemInfo` ☰ Gets type information for an attribute of the type (if `dbms_type.typecode_object`)
    `getPersistent` ☰ desupported, use `getANYTypeFromPersistent()`

  table } 

}
{ sys.anyData #sys-anyData

  An instance of `sys.anyData` can be created with the following two ways
    • `convertXYZ` (`XYZ` being a data type such as `number`, `date` etc. or
    • `beginCreate` … `endCreate()`

  table { ll
    `beginCreate` ☰ start creating a new `anyData` object whose type corresponds to a `anyType` that was previously created.
    `endCreate` ☰
    `pieceWise` ☰
    `setXXX` ☰ `XXX` is a data type such as `number`, `date` etc.
    `getXXX` ☰
    `convertXXX` ☰
    `accessXXX` ☰
    `getTypeName` ☰
    `getType` ☰

  table }

}
{ sys.anyDataSet #sys-anyDataSet

 `anyDataSet` is a generic collection type.

  table { ll
    `beginCreate` ☰
    `endCreate` ☰
    `addInstance` ☰ 
    `pieceWise` ☰
    `getCount` ☰ returns the number of data instances in the `anyDataSet`
    `getTypeName` ☰
    `getType` ☰
    `setXXX` ☰
    `getXXX` ☰
    `getInstance` ☰
    `setXXX` ☰
  table }

}
{ GetANYTypeFromPersistent()

 `getANYTypeFromPersistent(schemaName, typeName)` returns an `anyType` object that corresponds
  to an «ordinary» type that was created with `create type …`.

}
{ getTvoid()

  TODO…

}
