$ DBMS_REDEFINITION example: Rename columns and change data types

Create a table for this example …
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/create-table.sql||

… and insert some values:
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/insert-data.sql||


Check if table can be redefined:
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/can_redef_table.sql||

Create an (interim) table with the correct → development/databases/Oracle/objects/tables/columns[column] definitions.
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/create-table-int.sql||

Start the redifinition:
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/start_redef_table.sql||

If something goes wrong, the started redefintion can be aborted. This step is hopefully not needed.
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/abort_redef_table.sql||

Clone dependent → development/databases/Oracle/objects[objects] like grants, triggers,
→ development/databases/Oracle/objects/tables/constraints[constraints] and → development/databases/Oracle/security/privileges[privileges]
from the table being redefined to the interim table (which represents the post-redefinition table).
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/copy_table_dependents.sql||

gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/sync_interim_table.sql||

gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/finish_redef_table.sql||

Select from the two tables. Their column definitions have exchanged with each other.
gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/select.sql||

gh|Oracle-patterns|/Installed/dbms/redefinition/rename-column_change-datatype/drop-tables.sql||

sa:
  → development/databases/Oracle/installed/packages/dbms/redefinition[`dbms_redefinition`]
