$ Oracle: DBMS_SQL
@ dbms_sql

`dbms_sql` allows to execute dynamic → development/databases/Oracle/SQL/statement[SQL statements] in → development/databases/Oracle/PL-SQL. Compare with
→ development/databases/Oracle/PL-SQL/execute-immediate[`execute immediate`].

{ Methods

  table { ll

    → development/databases/Oracle/installed/packages/dbms/sql/open_cursor[`open_cursor`] ☰ Create a cursor for an → development/databases/Oracle/SQL/statement[SQL statement] and returns an `integer` which is needed in subsequent calls to `dbms_sql` related to this cursor. After opening the cursor, the text of an SQL statement will be associated with the cursor by calling → development/databases/Oracle/installed/packages/dbms/sql/parse[`parse`]. The cursor must (should) be closed with `close_cursor` when no longer used.
    → development/databases/Oracle/installed/packages/dbms/sql/parse[`parse`] ☰ Parses the text of an SQL text. If it is a → development/databases/Oracle/SQL/DDL[DDL] statement, it is executed right away.
    → development/databases/Oracle/installed/packages/dbms/sql/describe_columns[`describe_columns`] ☰ Used to get information about the returned columns in a → development/databases/Oracle/SQL/select[`select` statement].
    → development/databases/Oracle/installed/packages/dbms/sql/api/bind_variable[`bind_variable`] ☰ Associates a → development/databases/Oracle/SQL/statement/bind-variables with a value with which an SQL statement will be executed.
    `bind_array` ☰
    → development/databases/Oracle/installed/packages/dbms/sql/api/define_array[`define_array`] ☰ Associates a column of a `select` statement with one of the `dbms_sql.xxx_table` types in order to fetch the result set in batches of multiple records.
    → development/databases/Oracle/installed/packages/dbms/sql/api/define_column[`define_columns`] ☰ Needed in queries (`select` statements) for each selected column. (Use → development/databases/Oracle/installed/packages/dbms/sql/describe_columns[`describe_columns`] to determine column names and their → development/databases/Oracle/SQL/data-types[datatypes]).
    `execute` ☰ Execute the parsed statement.
    → development/databases/Oracle/installed/packages/dbms/sql/api/fetch_rows[`fetch_rows`] ☰ Called repeatedly to fetch all rows from a select statement. The return value corresponds to the number of records fetched (multiple records are fetched if development/databases/Oracle/installed/packages/dbms/sql/api/define_array[`define_array`] was used). When no more rows can be fetched, the function returns 0.
    `column_value` ☰ Used after calling `fetch_rows` to get the values of the columns in of the records that were fetched.
    `variable_value` ☰ Gets the value of an `out` parameters in a PL/SQL block. (Is `variable_value` also used in `select` statements?)
    `close_cursor` ☰ Close cursor that was opened with `open_cursor`
    `execute_and_fetch` ☰
    `last_row_count` ☰
    `last_row_id` ☰
    `is_open` ☰
    → development/databases/Oracle/installed/packages/dbms/sql/api/last_error_position[`last_error_position`] ☰
    → development/databases/Oracle/installed/packages/dbms/sql/last_sql_function_code[`last_sql_function_code`] ☰ returns an `integer` that identifies the type («function» or «command code») of the SQL statement (`select`, `drop package` etc), see → https://docs.oracle.com/en/database/oracle/oracle-database/21/lnoci/handle-and-descriptor-attributes.html#GUID-A251CF91-EB9F-4DBC-8BB8-FB5EA92C20DE__CACEIFFF[this table].
    `return_result` ☰
    `get_next_result` ☰
    `to_cursor_number` ☰
    `to_refcursor` ☰

  table }

}
{ Example: Select statement

code {
declare
   cur   number;
   obj_nam  varchar2(128);
   last_ddl date;
   obj_id   number;
   dummy    integer;

begin

   cur := dbms_sql.open_cursor;

   dbms_sql.parse(cur, q'{
      select
         object_name,
         last_ddl_time,
         object_id
      from
         all_objects
      where
         object_name like :nam and
         object_type    = :typ
      }',
      dbms_sql.native
   );

   dbms_sql.bind_variable(cur, ':nam', '%TQ84%');
   dbms_sql.bind_variable(cur, ':typ', 'TABLE' );

   dbms_sql.define_column(cur, 1, obj_nam , 128);
   dbms_sql.define_column(cur, 2, last_ddl     );
   dbms_sql.define_column(cur, 3, obj_id       );

--
-- The return value of dbms_sql.execute is undefined for
-- select statements. Therefor, we assign it to a variable
-- named dummy:
--
   dummy := dbms_sql.execute(cur);

   while dbms_sql.fetch_rows(cur) > 0 loop
         dbms_sql.column_value(cur, 1, obj_nam );
         dbms_sql.column_value(cur, 2, last_ddl);
         dbms_sql.column_value(cur, 3, obj_id  );
         dbms_output.put_line(
              rpad(obj_nam, 50) ||
              to_char(last_ddl, 'yyyy-mm-dd') || '  ' ||
              to_char(obj_id  , '9999999999')
         );
   end loop;

   dbms_sql.close_cursor (cur);
end;
/
code }

}
{ TODO

  { parse_gt_32k.plsql

    gh|Oracle-Patterns|/Installed/dbms/sql/parse_gt_32k.plsql||

  }
  { plsql_block_with_out_parameters.plsql

    gh|Oracle-Patterns|/Installed/dbms/sql/plsql_block_with_out_parameters.plsql||

  }
  { return_result.sql

    gh|Oracle-Patterns|/Installed/dbms/sql/return_result.sql||

  }
  { select_from_table.sql

    gh|Oracle-Patterns|/Installed/dbms/sql/select_from_table.sql||

  }

}

sa:

  → development/databases/Oracle/installed/packages/dbms/sql/describe_columns[`dmbs_sql.describe_columns`]

  → development/databases/Oracle/SQL/data-types[Data types in Oracle] and the list of
  → development/databases/Oracle/SQL/data-types#ora-data-type-codes[`*_type` codes].

  → development/databases/Oracle/errors/ORA-29471_DBMS_SQL-access-denied

  → development/databases/Oracle/installed/packages/dbms

  → development/databases/Oracle/SQL-Plus/sqlpath/table-dumper[`table-dumper.sql`] is an SQL script that uses `dbms_sql` to create nicely aligned, tabular ASCII results from a select statement.
