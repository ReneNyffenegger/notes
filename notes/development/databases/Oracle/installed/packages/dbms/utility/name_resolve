$ DBMS_UTILITY.NAME_RESOLVE

`dbms_utility.name_resolve` allows to find out what → development/databases/Oracle/objects[object] is behind a given identifier.

Metalink document 1008700.6 states that the procedure supports only procedures, functions, and packages, not tables. Constraints also seem not to work.

{ Simple example

code {
create table TQ84_T (a number);

create        synonym TQ84_S_1     for TQ84_T;
create public synonym TQ84_S_PUB   for TQ84_S_1;

declare
     schema        varchar2(128);
     part1         varchar2(128);
     part2         varchar2(128);
     dblink        varchar2(128);
     part1_type    number;
     object_number number;
begin

   dbms_utility.name_resolve (
      'TQ84_S_PUB'  ,
       0            ,
    -- -------------,
    -- Out Parameters:
       schema       ,
       part1        ,
       part2        ,
       dblink       ,
       part1_type   ,
       object_number
   );

   dbms_output.put_line('');
   dbms_output.put_line('  Schema:     ' || schema);
   dbms_output.put_line('  part1:      ' || part1 );

   if part2 is not null then
      dbms_output.put_line('  part2:      ' || part2 );
   end if;
   dbms_output.put_line('  part1 type: ' || part1_type);

exception when others then
   if sqlcode = -4047 then -- object specified is incompatible with the flag specified
      null;
   end if;
end;
/
code }

}
{ Somewhat complexer example

  gh|Oracle-Patterns|/Installed/dbms/utility/name_resolve.sql||

}

sa:

 `→ development/databases/Oracle/installed/packages/dbms/utility[dbms_utility].name_tokenize`

  → development/databases/Oracle/SQL-Plus/sqlpath/resolve-name[`resolve-name.sql`]

  → development/databases/Oracle/installed/packages/dbms/utility[`dbms_utility`]
