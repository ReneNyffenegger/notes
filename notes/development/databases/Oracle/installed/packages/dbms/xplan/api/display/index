$ Oracle: DBMS_XPLAN.DISPLAY
@ dbms_xplan.display

code {
→ development/databases/Oracle/SQL/statement/verbs/explain for → development/databases/Oracle/SQL/statement[<sql statement>];

select * from → development/databases/Oracle/installed/packages/dbms/xplan[dbms_xplan].display();
select * from table(→ development/databases/Oracle/installed/packages/dbms/xplan[dbms_xplan].display);
code }

{ Parameters

  All parameters are optional
  table { lll
    ~Name~ ☰ ~Comment~ ☰ ~Default value~
    `table_name` ☰ Name of the → development/databases/Oracle/SQL/statement/verbs/explain/plan_table[plan table] where the plan is stored ☰ `'PLAN_TABLE'`
    `statement_id` ☰ The → development/databases/Oracle/SQL/statement/verbs/explain/statement-id[statement id] that was used in the → development/databases/Oracle/SQL/statement/verbs/explain[`explain plan`] statement ☰ `→ development/databases/Oracle/SQL/null`
    `format` ☰ Level of information displayed ☰ `'TYPICAL'`
    `filter_preds` ☰ The predicate that is applied to the records selected from the plan table. ☰ `→ development/databases/Oracle/SQL/null`
  table }

}

{ Parameter FORMAT

  The value that is passed with the parameter `format` determines the level of information that
  is shown by `dbms_xplan.display` and can be set to one of
    • `basic`
    • `typical`
    • `all`
    • `advanced` (undocumented)
    • `serial`

  The default value is `typical`

code {
--
-- Minimal information: operation id, operation name, operation options
--
select * from dbms_xplan.display(format=>'basic');

--
-- Add #rows, #bytes, optimizer costs and, if applicable, pruning
-- parallel and predicate information
--
select * from dbms_xplan.display(format=>'typical');

--
-- Add projection, alias and, if a distributed query is displayed,
-- information about the remote SQL statement.
--
select * from dbms_xplan.display(format=>'all');

-- Don't show «parallel information», even if if the plan were
-- for a parallel execution. Otherwise the same as 'typical'
--
select * from dbms_xplan.display(format=>'serial');
code }

  More control on the displayed result set can be added with `+xxx` where `xxx` is
  table { ll
    `alias` ☰ → development/databases/Oracle/SQL/statement/query-block[Query block] name / Object alias section
    `bytes` ☰  number of bytes estimated by the → development/databases/Oracle/optimizer
    `cost`      ☰ → development/databases/Oracle/optimizer cost information
    `note` ☰ note section
    `outline` ☰
    `partition` ☰ partition pruning information (shows values of `→ development/databases/Oracle/SQL/statement/verbs/explain/plan_table` columns → development/databases/Oracle/SQL/statement/verbs/explain/plan_table/columns/partition_start-stop[`partition_start` and `partition_stop`]).
    `parallel`  ☰ → development/databases/Oracle/SQL/statement/execution/parallel#ora-parallel-px[PX] information (distribution method and table queue information)
    `predicate` ☰ predicate section
    `projection` ☰ projection section
    `qbregistry` ☰ Query block registry
    `remote` ☰ information for distributed query (e.g. remote from serial distribution and remote SQL)
    `rows` ☰ number of rows estimated by the → development/databases/Oracle/optimizer
  table } 

  The plus sign is optional, thus the following two statements are equivalent:

code {
select * from dbms_xplan.display(format=>'basic +note');
select * from dbms_xplan.display(format=>'basic  note');
code }

  Multiple options can be seperated with a comma or by introducing each one with a plus (`+`):
code {
select * from dbms_xplan.display(format=>'basic +cost +bytes');
select * from dbms_xplan.display(format=>'basic +cost, bytes');
code }

  Options can be turned off with a minus sign. Each option that is to be turned off must
  be prepended with a minus, otherwise, it's interpreted as a plus:
code {
select * from dbms_xplan.display(format => 'typical -cost,-rows');
code }

}

rem {

{ Misc

  I've also encountered `dbms_xplan.display_cursor(format=>'ALLSTATS LAST')` in the wild. I am not sure how much sense this makes for a plan table that is filled with
  → development/databases/Oracle/SQL/statement/verbs/explain/index[`explain plan`].

}

rem }

sa:
 `→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/utlxpls_sql` and
 `→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/utlxplp_sql`
