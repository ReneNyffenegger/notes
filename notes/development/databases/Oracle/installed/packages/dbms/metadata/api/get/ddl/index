$ DBMS_METADATA.GET_DDL

`→ development/databases/Oracle/installed/packages/dbms/metadata[DBMS_METADATA].GET_DDL` returns the definition of a *single → development/databases/Oracle/objects[object]*
as → development/databases/Oracle/SQL/DDL[DDL statement].

This function is meant for *casual browsing*. For more detailed object access, the `open`, `fetch_*`, `close` interface should be used.

code {
FUNCTION get_ddl (
              object_type     IN  VARCHAR2,
              name            IN  VARCHAR2,
              schema          IN  VARCHAR2 DEFAULT  NULL,
              version         IN  VARCHAR2 DEFAULT 'COMPATIBLE',
              model           IN  VARCHAR2 DEFAULT 'ORACLE',
              transform       IN  VARCHAR2 DEFAULT 'DDL')
      RETURN CLOB;
code }

code {
begin
   dbms_metadata.set_transform_param(dbms_metadata.session_transform, 'PRETTY'            , true );
   dbms_metadata.set_transform_param(dbms_metadata.session_transform, 'CONSTRAINTS'       , true );
   dbms_metadata.set_transform_param(dbms_metadata.session_transform, 'STORAGE'           , false);
   dbms_metadata.set_transform_param(dbms_metadata.session_transform, 'SEGMENT_ATTRIBUTES', false);
end;
/

select
   dbms_metadata.get_ddl('TABLE', 'TQ84_TAB', user)
from
   dual;
code }

{ TODO

  SQL*Plus:
code {
set long          10000000
set longchunksize 10000000
set lines            32767
code }

}

sa:

 → development/databases/Oracle/installed/packages/dbms/metadata/api/get/dependent/ddl[`DBMS_METADATA.GET_DEPENDENT_DDL`] returns the meta data for objects that are dependent on a *base object*.

→ development/databases/Oracle/objects/tables/constraints/foreign-key#ora-fk-metadata[Using `dbms_metadata.get_ddl`] to extract (existing)
→ development/databases/Oracle/objects/tables/constraints/foreign-key[foreign keys].
