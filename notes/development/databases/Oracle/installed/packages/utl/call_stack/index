$ Oracle: UTL_CALL_STACK
@ utl_call_stack

`utl_call_stack` provides functions to determine the *current call stack* in an executing → development/databases/Oracle/PL-SQL program.

The functionality of `utl_call_stack` is complemented by that of → development/databases/Oracle/installed/packages/dbms/utility#dbms_utility-format_call_stack[`dbms_utility.format_call_stack`].

{ Backtrace structure

  The *backtrace structure* is not a stack. It is a list that is operated on on both sides.

  { Exception

    When an exception occurs, the backtrace structure is emptied.
    Then the location (unit and line number) of the exception is pushed onto the *backtrace stack*.

  }
  { Leaving a body of a function or procedure

    When the *body* of a function or procedure is left, *and* an exception is «active», the location of the call stack with the lowest index is put on the side of the backtrace structure
    with the highest index.

    The *body* of the function/procedure is left either
      • if execution is returned to the caller or the function, or
      • if the execution enters into the (optional) *exception handler* of the function/procedure)

  }
  { RAISE statement

    The raise statement is special because it operates on the «other» end of the backtrace structure.

    In particular, it puts the location that contains the `raise` statement ot the side of the backtrace structure with the lowest index.

  }
}
{ Error stack

  If the third parameter of → development/databases/Oracle/PL-SQL/exception/raise_application_error[`raise_application_error`] is `true`, the error message is put on top of the
  error stack, if `false`, the error stack is replaced with the new error message.

  The error stack can also be gotten as a string of up to 2000 bytes with → development/databases/Oracle/installed/packages/dbms/utility/format[`dbms_utility.format_error_stack`]

}

{ Functions that return depths

  There are three functions that return a `pls_integer` that correspond to different «depths»:

  table { ll
    `dynamic_depth` ☰ The *dynamic depth* is incresed when a subprogram (function or procedure) is called and decreased again when the subprogram returns to the caller.
    `backtrace_depth` ☰ starts with `0`. Is increased by an exception, a `raise` statement (in an exception handler) or by leaving a procedure/function without handling the exception.
    `error_depth` ☰ Often the same value as `backtrace_depth`. Might have a different value for «multi-line» exceptions such as demonstrated in → development/databases/Oracle/PL-SQL/block/exception-handler/sqlerrm-sqlcode/nested[this example].
  table }

}

{ Procedures that take dynamic_depth as argument

  table { ll
   `lexical_depth` ☰ 1 for non-nested sub-programs, increses by one for each nesting level
   `subprogram` ☰ returns a → development/databases/Oracle/PL-SQL/collection-types/types/varray[`varray`] that contains the *lexical* parents of a subprogram. This varray can then be converted into a `varchar2` with `concatenate_subprogram`
   `owner` ☰
   `unit_line` ☰
   `unit_type` ☰
   `actual_edition` ☰
   `current_edition` ☰ *deprecated*
  table }

}
{ Procedures that take error_depth as argument

  table { ll
    `error_number` ☰
    `error_msg` ☰
  table }

}
{ Procedures that take a backtrace_depth as argument

  table { ll
    `backtrace_unit` ☰
    `backtrace_line` ☰
  table }
}
{ Other functions

  table { ll
   `concatenate_subprogram` ☰ see `subprogram`
  table }


}
{ Simple example

  gh|Oracle-Patterns|/Installed/utl/call_stack/example-01.sql||

}
{ Slightly more complicated example

  gh|Oracle-Patterns|/Installed/utl/call_stack/nested.sql||

  When executed in → development/databases/Oracle/SQL-Plus, this script prints
code {
Current stack for  SQL*Plus
  dynamic depth:   2
  error depth:     0
  backtrace depth: 0

  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                13 UTL_CALL_STACK_TEST.SHOWSTACK
  0 ANONYMOUS BLOCK                __anonymous_block                   1 __anonymous_block

Current stack for  run
  dynamic depth:   3
  error depth:     0
  backtrace depth: 0

  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                13 UTL_CALL_STACK_TEST.SHOWSTACK
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                70 UTL_CALL_STACK_TEST.RUN
  0 ANONYMOUS BLOCK                __anonymous_block                   1 __anonymous_block

Current stack for  PROC
  dynamic depth:   4
  error depth:     0
  backtrace depth: 0

  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                13 UTL_CALL_STACK_TEST.SHOWSTACK
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                65 UTL_CALL_STACK_TEST.PROC
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                71 UTL_CALL_STACK_TEST.RUN
  0 ANONYMOUS BLOCK                __anonymous_block                   1 __anonymous_block

Current stack for  NESTED_PPROC
  dynamic depth:   5
  error depth:     0
  backtrace depth: 0

  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                13 UTL_CALL_STACK_TEST.SHOWSTACK
  2 PACKAGE BODY                   UTL_CALL_STACK_TEST                56 UTL_CALL_STACK_TEST.PROC.NESTED_PROC
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                66 UTL_CALL_STACK_TEST.PROC
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                71 UTL_CALL_STACK_TEST.RUN
  0 ANONYMOUS BLOCK                __anonymous_block                   1 __anonymous_block

Current stack for  Exception PROC
  dynamic depth:   5
  error depth:     1
  backtrace depth: 1

  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                13 UTL_CALL_STACK_TEST.SHOWSTACK
  2 PACKAGE BODY                   UTL_CALL_STACK_TEST                61 UTL_CALL_STACK_TEST.PROC.NESTED_PROC
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                66 UTL_CALL_STACK_TEST.PROC
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                71 UTL_CALL_STACK_TEST.RUN
  0 ANONYMOUS BLOCK                __anonymous_block                   1 __anonymous_block

   divisor is equal to zero                                                                               1476

   DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST                            58

Current stack for  exception run
  dynamic depth:   3
  error depth:     4
  backtrace depth: 4

  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                13 UTL_CALL_STACK_TEST.SHOWSTACK
  1 PACKAGE BODY                   UTL_CALL_STACK_TEST                73 UTL_CALL_STACK_TEST.RUN
  0 ANONYMOUS BLOCK                __anonymous_block                   1 __anonymous_block

   divisor is equal to zero                                                                               1476
   at "DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST", line 62                                                   6512
   at "DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST", line 58                                                   6512
   at "DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST", line 66                                                   6512

   DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST                            62
   DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST                            58
   DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST                            66
   DWH_DM_RISKFINANCE.UTL_CALL_STACK_TEST                            71
code }

}

sa:

  → development/databases/Oracle/installed/packages/utl
