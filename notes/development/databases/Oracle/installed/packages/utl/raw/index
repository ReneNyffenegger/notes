$ Oracle: UTL_RAW
@ utl_raw

{ Functions

  table { ll

    `bit_and` ☰ Compare with the → development/databases/Oracle/SQL/functions/binary/bitand[SQL function `bitand`].
    `bit_complement` ☰
    `bit_or` ☰
    `bit_xor` ☰
    `cast_from_<datatype>` ☰ `<datatype>` is one of `binary_double` `binary_float`, `binary_integer` or `number`
    `cast_to_binary_double` ☰ `<datatype>` is one of `binary_double`, `binary_float`, `binary_integer`, `number`, `nvarchar2`, `raw` or `varchar2`
    `compare` ☰
    `concat` ☰
    → development/databases/Oracle/installed/packages/utl/raw/api/convert[`convert`] ☰ Interprets a `raw` as a string encoded in a given → development/Unicode/character-set and converts this string to a `raw` encoded in a different character set. Compare with → development/databases/Oracle/installed/packages/utl/i18n/api/string_to_raw[`utl_i18n.string_to_raw`].
    `copies` ☰
    `length` ☰
    `overlay` ☰
    `reverse` ☰
    `substr` ☰
    `translate` ☰
    `transliterate` ☰
    → development/databases/Oracle/installed/packages/utl/raw/api/xrange[`xrange`] ☰

  table }

}
{ Access bytes in a raw

code {
declare
   bytes raw(10);

begin

   bytes := utl_i18n.string_to_raw('AZ' || chr(0) || chr(7), 'we8mswin1252'); 

   for b in 1 .. utl_raw.length(bytes) loop
       dbms_output.put_line(
          b || ': ' ||
          utl_raw.cast_to_binary_integer( 
            utl_raw.substr(bytes, b, 1)
         )
       );
   end loop;

end;
/
code }

}

sa:

  The → development/databases/Oracle/SQL/data-types/raw[`RAW` data type].

  → development/databases/Oracle/installed/packages/utl
