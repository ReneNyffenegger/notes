$ Oracle: DBA_TAB_COLS
@ dba_tab_cols

`dba_tab_cols` lists the → development/databases/Oracle/objects/tables/columns[columns] of → development/databases/Oracle/objects/tables[tables],
→ development/databases/Oracle/objects/views[views] and → development/databases/Oracle/objects/clusters[clusters].

This view comes in three variants: `user_tab_cols`, `all_tab_cols` and `dba_tab_cols`.

{ Columns related to statistics #dba_tab_cols-stat-cols

  The following query selects the columns that store statistical values for → development/databases/Oracle/objects/tables/columns data.

  Because the columns minimum and maximum values are stored as → development/databases/Oracle/SQL/data-types/raw[`raw`],
  → development/databases/Oracle/installed/packages/dbms/stats/api/convert_raw/value[`dbms_stats.convert_raw_value`] is used to convert some of these
  → development/databases/Oracle/SQL/data-types[data types] back to their original data type and value.
  -
  `dbms_stats.convert_raw_value` is a procedure rather than a function and therefore needed to be ptu into a → development/databases/Oracle/SQL/clauses/with#ora-with-func[local function] in a
  → development/databases/Oracle/SQL/clauses/with[with clause].

code {
with
--
--     Define a few functions to convert the raw values of low_value and high_value
--     to a humanly readable text.
--
   function rawToDate (r in raw) return varchar2 as
      dt date;
   begin
       dbms_stats.convert_raw_value(r, dt);
       return to_char(dt, 'yyyy-mm-dd hh24:mi:ss');
   end rawToDate;

   function rawToBinaryFloat (r in raw) return varchar2 as
       flt binary_float;
   begin
       dbms_stats.convert_raw_value(r, flt);
       return to_char(flt);
   end rawToBinaryFloat;

   function rawToBinaryDouble (r in raw) return varchar2 as
       dbl binary_double;
   begin
       dbms_stats.convert_raw_value(r, dbl);
       return to_char(dbl);
   end rawToBinaryDouble;      

select
   case col.data_type
        when 'NUMBER'        then to_char(utl_raw.cast_to_number  (col.low_value))
        when 'VARCHAR2'      then utl_raw.cast_to_varchar2        (col.low_value)
        when 'DATE'          then rawToDate                       (col.low_value)
        when 'CLOB'          then utl_raw.cast_to_varchar2        (col.low_value)     -- Does not seem to work!
        when 'BINARY_FLOAT'  then rawToBinaryFloat                (col.low_Value)
        when 'BINARY_DOUBLE' then rawToBinaryDouble               (col.low_Value)
        else                 rawtohex(col.low_value)
   end                                                                                   lowValue,
   --
   case col.data_type
        when 'NUMBER'        then to_char(utl_raw.cast_to_number  (col.high_value))
        when 'VARCHAR2'      then utl_raw.cast_to_varchar2        (col.high_value)
        when 'DATE'          then rawToDate                       (col.high_value)
        when 'CLOB'          then utl_raw.cast_to_varchar2        (col.high_value)     -- Does not seem to work!
        when 'BINARY_FLOAT'  then rawToBinaryFloat                (col.high_value)
        when 'BINARY_DOUBLE' then rawToBinaryDouble               (col.high_value)
        else                 rawtohex(col.low_value)
   end                                                                                   highValue,   
   --
   col.low_value,
   col.high_value,
   col.sample_size,
   col.num_distinct,
   col.num_buckets,
   col.avg_col_len,
   col.density,
   col.histogram,
   col.global_stats,
   col.user_stats,
   col.*
from
   dba_tab_columns        col
where
   col.owner      = 'RENE' and
   col.table_name = 'TQ84_T';
code }

  { Test data

code {
drop table tq84_t;
create table tq84_t (
   id    number,
   txt   varchar2(10),
   dt    date,
   flt   binary_float,
   dbl   binary_double,
   ch    char(10),
   clb   clob
);
code }

code {
insert into tq84_t values (  42, 'forty-two', '2021-08-28 22:23:24', 9.9, -7.7, 'xyz', 'the lob'    );
insert into tq84_t values (  17, 'seventeen', '2017-08-28 22:23:24',-9.9,  7.7, 'abc', 'another lob');
code }

code {
begin
    dbms_stats.gather_table_stats(user, 'TQ84_T', method_opt=>'for all columns');
end;
/
code }


  }
  { Using DBMS_STATS.CONV_RAW

    It turns out, that it is easier to use → development/databases/Oracle/installed/packages/dbms/stats/api/conv_raw[`dmbs_stats.conv_raw`] for converting raw values…

  }

}

sa:

 `→ development/databases/Oracle/installed/data-dictionary/tab/columns` is related to `dba_tab_cols`, the difference being that `dba_tab_columns` only shows columns that are
  not generated, see → development/databases/Oracle/installed/data-dictionary/tab/columns/diff-tab_cols[differences between `dba_tab_columns` and `dba_tab_cols`].

  → development/databases/Oracle/installed/data-dictionary
