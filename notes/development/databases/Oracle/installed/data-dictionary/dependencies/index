$ Oracle: DBA_DEPENDENCIES
@ dba_dependencies

The `*_dependencies` comes in all three variations (`dba_dependencies`, `all_dependencies`, `user_dependencies`) and shows dependencies between → development/databases/Oracle/objects[objects] in the database.
-
Referential dependencies (→ development/databases/Oracle/objects/tables/constraints/primary-key[primary]-→ development/databases/Oracle/objects/tables/constraints/foreign-key[foreign key] relationships) are
not represented in `XXX_dependencies`).

{ Simple example

  gh|Oracle-Patterns|/Installed/data-dictionary/dependencies/example-01.sql||

}
{ Recursively querying dependencies #oracle-dependencies-cte

  The `*_dependencies` views only return the immediate dependencies of an object. In order to select all dependencies, a recursive
  select statement is required.

  { Objects that a given object depends on

    The following → development/databases/Oracle/SQL/select/hierarchical-queries/common-table-expressions[recursive common table expression (CTE)] queries
    all objects on which `all_file_group_files` depends.

    gh|Oracle-Patterns|/Installed/data-dictionary/dependencies/recursive.sql||

  }

  { Objects that are dependent on a given object

    The following SQL statement goes the other route. It recursively shows which objects are dependent on a given object (here: → development/databases/Oracle/architecture/instance/fixed-tables/k/g/l/ob[`x$kglob`]).
code {
with cur(owner, name, type, lvl) as (
  select
     'SYS'       owner,
     'X$KGLOB'   name ,
     'TABLE'     type ,
      0          lvl
  from
     dual
                                  union all
  select
     nxt.owner,
     nxt.name ,
     nxt.type ,
     cur.lvl +1
  from
     cur                                                            join
     dba_dependencies nxt on nxt.referenced_owner = cur.owner and
                             nxt.referenced_name  = cur.name  and
                             nxt.referenced_type  = cur.type
)
search depth first by owner, name, type set order_by
select
   lpad(' ', lvl*2) || owner || '.' || name || ' (' || type || ')' as x
from
   cur
order by
   order_by
;
code }
  }

}
{ Cleaning a schema

  The following script tries to clean a schema by repeatedly iterating over the objects on which no other object is depending and then dropping
  the respective objects. The script terminates when it does not find any object anymore.

  I once needed this script in a project where I as not allowed to `drop … cascade` a schema.

  gh|Oracle-Patterns|/Installed/data-dictionary/dependencies/clean-schema.sql||

}

sa:
  → development/databases/Oracle/installed/data-dictionary

  The → development/databases/SQL-Server[SQL Server] equivalent for these views seems to be
  → development/databases/SQL-Server/administration/schemas/sys/objects/views/sql_expression_dependencies[`sys.sql_expression_dependencies`].

  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/utldtree_sql[`$ORACLE_HOME/rdbms/admin/utldtree.sql`] creates tables and views that show dependencies between objects.

  → development/databases/Oracle/architecture/instance/fixed-tables/k/g/l/dp[`x$kgldp`]

code {
select * from public_dependency;
code }

  → development/databases/Oracle/installed/data-dictionary/base-tables/dependency[`dependency$`]

  The (deprecated) procedure `→ development/databases/Oracle/installed/packages/dbms/utility[dbms_utility].get_dependency`
