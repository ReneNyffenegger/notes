$ Oracle: NLS related init parameters
@ NLS related init parameters

code {
select * from → development/databases/Oracle/installed/data-dictionary/nls#nls_session_parameters[nls_session_parameters] order by parameter;

NLS_CALENDAR              GREGORIAN
→ #ora-nls_comp[NLS_COMP]                  BINARY
NLS_CURRENCY              SFr.
→ development/databases/Oracle/adminstration/init-parameters/nls/format/date[NLS_DATE_FORMAT]           yyyy-mm-dd hh24:mi:ss
NLS_DATE_LANGUAGE         ENGLISH
NLS_DUAL_CURRENCY         SF
NLS_ISO_CURRENCY          SWITZERLAND
→ #ora-nls_language[NLS_LANGUAGE]              ENGLISH
NLS_LENGTH_SEMANTICS      BYTE
NLS_NCHAR_CONV_EXCP       FALSE
NLS_NUMERIC_CHARACTERS    .'
→ #ora-nls_sort[NLS_SORT]                  BINARY
NLS_TERRITORY             SWITZERLAND
→ #nls_timestamp_format_[NLS_TIMESTAMP_FORMAT]      yyyy-mm-dd hh24:mi:ssXff
→ #nls_timestamp_format_[NLS_TIMESTAMP_TZ_FORMAT]   yyyy-mm-dd hh24:mi:ssXff tzr
NLS_TIME_FORMAT           HH24:MI:SSXFF                      -- Used for internal purposes only
NLS_TIME_TZ_FORMAT        HH24:MI:SSXFF TZR                  -- Used for internal purposes only
code }

{ NLS_CHARACTERSET #ora-nls_characterset

  The value of `nls_characterset` defines the → development/Unicode/character-set for the `→ development/databases/Oracle/SQL/data-types/char`,
 `→ development/databases/Oracle/SQL/data-types/varchar2`, → development/databases/Oracle/SQL/data-types/lob[`clob`] and `→ development/databases/Oracle/SQL/data-types/long` data types.

 `→ development/databases/Oracle/installed/packages/utl/file` assumes the files it reads or writes are to be in the → development/Unicode/character-set specified with `nls_characterset`.

  A list of valid values for `nls_characterset` can be obtained with
code {
select
   value,
   isdeprecated
from
   → development/databases/Oracle/installed/dynamic-performance-views/nls/valid_values
where
   parameter = 'CHARACTERSET'
order by
   value;
code }

  Compare with `nls_nchar_characterset`

}
{ NLS_COMP #ora-nls_comp

 `NLS_COMP` can be set to one of
   • `BINARY`
   • `LINGUISTIC` (Behvavior of comparison is specified with → #ora-nls_sort[`nls_sort`])
   • `ANSI` (supported for backward compatibility, `LINGUISTIC` is preferred)

  When `nls_comp` is set to `binary`, the the value of `nls_sort` is essentially ignored for *comparison operators* (but not for `order by`!).

  If `NLS_COMP` is not set in the → development/databases/Oracle/adminstration/init-parameters, its value shows up as
  → development/databases/Oracle/SQL/null[`null`] in `V$PARAMETER`, `V$SYSTEM_PARAMETER`, `V$PARAMETER2`, `V$SYSTEM_PARAMETER2` and
  `NLS_INSTANCE_PARAMETERS`, but behaves as though it was set to `BINARY`.

}
{ NLS_DATE_FORMAT

  Gone → development/databases/Oracle/adminstration/init-parameters/nls/format/date[here].

}
{ NLS_LANG #ora-nls_lang

  The purpose of `NLS_LANG` is to specify the character set of the client so that Oracle can correctly convert between the client's encoding (`nls_lang`) and the database's encoding (`nls_characterset`, `nls_nchar_characterset`).

  The value of `NLS_LANG` sets the language and territory of both, the session running on the Server, and the client.
  -
  Do not confuse `NLS_LANG` with → #ora-nls_language[`NLS_LANGUAGE`] (`NLS_LANG`, unlike `NLS_LANGUAGE`, is *not* an → development/databases/Oracle/adminstration/init-parameters[init parameter] that can be set in `init.ora` or an spfile).

 `NLS_LANG` has three components, all of which are optional.
  table { ll
    language ☰ Controls the language of day and month names and → development/databases/Oracle/errors[error messages], and sorting.
    territory ☰ Specifies the default format for dates, numbers and monetary values.
    character set ☰ Specifies the → development/Unicode/character-set with which a user works. Each language has a default character set assosiated with it (which seems to be used when character set is not explicitly specified)
  table }

  These components are separated
    • with an underscore between the language and the territory and
    • with a dot between the territory and character set

  An example of an `NLS_LANG` value is `FRENCH_CANADA.WE8ISO8859P1`.

  The language specifies the value of `NLS_LANGUAGE`, the value of territory the value of → #ora-nls_territory[`NLS_TERRITORY`].

  The value of `NLS_LANG` should correspond to that of the client's operating system.


  { Determining the value of NLS_LANG

code {
select
   any_value(client_charset) nls_lang
from
   → development/databases/Oracle/installed/dynamic-performance-views/session/connect_info
where
   sid = sys_context('userenv', 'sid');
code }

   In → development/databases/Oracle/SQL-Plus, when running in Windows, the value of `NLS_LANG` can be determined with the following esoteric command (→ development/databases/Oracle/SQL-Plus#sqlplus-nls_lang-windows[see here]):
code {
SQL> @[%NLS_LANG%]
code }

  }
  { TODO

    → development/databases/Oracle/SQL-Plus#sqlplus-char-set[Setting the environment variable `NLS_LANG`] prior to starting
    → development/databases/Oracle/SQL-Plus.

  }
  { See also

     → development/databases/Oracle/errors/ORA-12705_Cannot-access-NLS-data-files-or-invalid-environment-specified

     → development/databases/Oracle/SQLcl apparently does not take the value of `nls_lang` into account. Instead, → development/databases/Oracle/SQLcl/commands/set/encoding[`set encoding`] should be used.

     MOS note 137127.1: Character Sets, Code Pages, Fonts and the NLS_LANG Value 

  }

}
{ NLS_LANGUAGE #ora-nls_language

  Do not confuse `NLS_LANGUAGE` with → #ora-nls_lang[`NLS_LANG`]: The language part of `NLS_LANG` sets the (default) value for `NLS_LANGUAGE`.

  The value of `nls_language` determines the default value of #ora-nls_sort[`nls_sort`].

}
{ NLS_LENGTH_SEMANTICS #ora-nls_length_semantics

  The value of `NLS_LENGTH_SEMANTICS` can be set to `BYTE` (default value) or `CHAR`.
  -
  For database objects creted in the current → development/databases/Oracle/architecture/session, this value specifies, 
  the *default length semantics* to use for
    • → development/databases/Oracle/SQL/data-types/varchar2[`VARCHAR2`] and → development/databases/Oracle/SQL/data-types/char[`CHAR`] table columns,
    • user-defined object attributes and
    • → development/databases/Oracle/PL-SQL variables.

  While the value of `NLS_LENGTH_SEMANTICS` affects the use of `VARCHAR2` and `CHAR`, the `NCHAR`, `NVARCHAR2`, → development/databases/Oracle/SQL/data-types/lob[`CLOB`] and `NCLOB` are
  always character-based.

  See also → development/databases/Oracle/SQL/data-types/varchar2/byte-vs-char[`VARCHAR2`: `BYTE` vs `CHAR`].

}
{ NLS_NCHAR_CHARACTERSET

 `nls_nchar_characterset` defines the character set in which `nchar`, `nvarchar2` and `nclob` data is stored.

  Only two values (both of which are Unicode character sets) are allowed for `nls_nchar_characterset`:
    • `UTF8`, or
    • `AL16UTF16` (which is the default)

  See also `nls_characterset`, MOS Note 276914.1

}
{ NLS_NUMERIC_CHARACTERS #nls_numeric_characters

  The value of `nls_numeric_characters` consists of two characters:
    • The first specifies the *decimal separator* (with which a `D` is replaced in `→ development/databases/Oracle/SQL/functions/type-conversion/to/char[to_char]`, see → development/databases/Oracle/SQL/functions/type-conversion/format-models#ora-fmt-number[format model for numbers])
    • The second specifes the *group separator* (thousands separator, with which a `G` is replaced in `→ development/databases/Oracle/SQL/functions/type-conversion/to/char[to_char]`, see → development/databases/Oracle/SQL/functions/type-conversion/format-models#ora-fmt-number[format model for numbers])

  See also the → development/databases/Oracle/errors/ORA-01481_invalid-number-format-model error message.

}
{ NLS_SORT #ora-nls_sort

  The value of `NLS_SORT` specifies the → development/Unicode/collation[collating] sequence for character value comparison. Thus, this value influences the
  outcome of
    • → development/databases/Oracle/SQL/select/order-by[`order by`] (even if `nls_comp` is `binary`, see MOS Note 227335.1).
    • → development/databases/Oracle/SQL/select/group-by[`group by`]
    • Comparison operators (such as `<`, `>`, `<=`, `>=` and even `=` or `<>`).
    • The `in` operator
    • `like`, `instr`
    • `min`, `max`, `greatest`, `least`
    • `nls_initcap`, `nls_lower`, `nls_upper`
    • `regexp_instr`, `regexp_like`, `regexp_replace`, `regexp_substr`
    • `→ development/databases/Oracle/SQL/functions/text/nlssort`
    • → development/databases/Oracle/SQL/statement/execution/plan[Execution plans] where → development/databases/Oracle/objects/indexes[indexes] are involved (compare with the `→ development/databases/Oracle/SQL/functions/text/nlssort` function)

  ? The exact operators and query clauses that obey the `NLS_SORT` parameter depend on the value of the `NLS_COMP` parameter.
  If an operator or clause does not obey the `NLS_SORT` value, as determined by `NLS_COMP`, the collation used is `BINARY`.

  Setting the value of `nls_sort` to `binary` causes the values to be sorted according to the byte value of the compared value.

  If `_CI` is appended to the value of `NLS_SORT`, the values are compared case-insensitively (see for example → development/databases/Oracle/SQL/clauses/where#ora-where-ci[selecting case insensitively in a `where` clause]).
  -
  Appending `_AI` causes the values to be also sorted accent-insensitively.
  -
  There is no predefined case-insenstive but accent-sensitive sort definition (MOS Note 296556.1).

  When `_M_CI` or `_M_AI` is appended, punctuation characters are → development/databases/Oracle/adminstration/init-parameters/nls/sort-comp/multilingual-case-insensitive[ignored when comparing strings for sorting].

  The value of `NLS_SORT` can also be set using the environment variable `NLS_SORT`.

  The current value of `NLS_SORT` is returned by `→ development/databases/Oracle/SQL/functions/sys_context[sys_context]('userenv', 'nls_sort')`.

  The value of `NLS_SORT` influences the behavior of comparison operations (for example in the `where` clause) if `NLS_COMP` is set to linguistics;

  If not specifically set, the value of `nls_sort` is determined by the value of → #ora-nls_language[`nls_language`].

  If `nls_sort` is set to → development/databases/Oracle/adminstration/init-parameters/nls/sort-comp/generic_baseletter[`generic_baseletter`], accents are not taken into accounts when comparing strings.
 
}
{ NLS_TERRITORY #ora-nls_territory

  The value of `nls_territory` determines the value of the following init parameters if they're not explicitly altered:
    • `nls_date_format`
    • `nls_numeric_characters`
    • `nls_currency`
    • `nls_iso_currency`

  The value also influences the day of week (→ development/databases/Oracle/SQL/functions/type-conversion/format-models#ora-format-day-of-week[`to_char(…, 'D')`]).

  The default value of `NLS_TERRITORY` is set by → #ora-nls_lang[`NLS_LANG`]

}
{ NLS_TIMESTAMP_FORMAT, NLS_TIME_TZ_FORMAT #nls_timestamp_format_

code {
alter session set nls_timestamp_format    = 'yyyy-mm-dd hh24:mi:ssxFF';
alter session set nls_timestamp_tz_format = 'yyyy-mm-dd hh24:mi:ssxFF TZR';
code }

  Compare with `→ development/databases/Oracle/adminstration/init-parameters/nls/format/date`.

}

sa:

  How the value of `NLS_SORT` and `NLS_COMP` influences → development/databases/Oracle/adminstration/init-parameters/nls/sort-comp/eq[testing of string-equality].

  → development/databases/Oracle/SQL/functions/sys_context[`sys_context('userenv', 'nls…')`]

  → development/databases/Oracle/SQL-Plus/sqlpath/nls[`nls.sql`] shows session, database and instance NLS-values.

  → development/databases/Oracle/adminstration/init-parameters

  The functions `get_nls_parameter` and `set_nls_parameter` in → development/databases/Oracle/installed/packages/dbms/debug_jdwp[`dbms_debug_jdwp`].

  → development/databases/Oracle/installed/dynamic-performance-views/nls/valid_values[`v$nls_valid_values`],
  → development/databases/Oracle/installed/dynamic-performance-views/nls/parameters[`v$nls_parameters`].

  → development/databases/Oracle/adminstration/init-parameters/nls/temporarily-change-NLS-setting-in-session[Temporarily change an NLS setting in a session]

  → development/databases/Oracle/installed/data-dictionary/nls[NLS related data dictionary views]

  → development/databases/Oracle/SQL/functions/type-conversion/to/char#ora-to_char-nls[Specifying nls parameter values] when using `→ development/databases/Oracle/SQL/functions/type-conversion/to/char`

  → development/databases/Oracle/SQL/functions/nls[Globalization (NLS)] related SQL functions
