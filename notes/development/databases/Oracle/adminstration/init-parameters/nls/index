$ Oracle: NLS related init parameters

code {
select * from nls_session_parameters order by parameter;

NLS_CALENDAR              GREGORIAN
NLS_COMP                  BINARY
NLS_CURRENCY              SFr.
NLS_DATE_FORMAT           yyyy-mm-dd hh24:mi:ss
NLS_DATE_LANGUAGE         ENGLISH
NLS_DUAL_CURRENCY         SF
NLS_ISO_CURRENCY          SWITZERLAND
NLS_LANGUAGE              ENGLISH
NLS_LENGTH_SEMANTICS      BYTE
NLS_NCHAR_CONV_EXCP       FALSE
NLS_NUMERIC_CHARACTERS    .'
NLS_SORT                  BINARY
NLS_TERRITORY             SWITZERLAND
NLS_TIMESTAMP_FORMAT      yyyy-mm-dd hh24:mi:ssXff
NLS_TIMESTAMP_TZ_FORMAT   yyyy-mm-dd hh24:mi:ssXff tzr
NLS_TIME_FORMAT           HH24:MI:SSXFF
NLS_TIME_TZ_FORMAT        HH24:MI:SSXFF TZR
code }

{ NLS_COMP

 `NLS_COMP` can be set to one of
   • `BINARY`
   • `LINGUISTIC`
   • `ANSI` (supported for backward compatibility, `LINGUISTIC` is preferred)

  If `NLS_COMP` is not set in the → development/databases/Oracle/adminstration/init-parameters, its value shows up as
  → development/databases/Oracle/SQL/null[`null`] in `V$PARAMETER`, `V$SYSTEM_PARAMETER`, `V$PARAMETER2`, `V$SYSTEM_PARAMETER2` and
  `NLS_INSTANCE_PARAMETERS`, but behaves as though it was set to `BINARY`.

}
{ NLS_DATE_FORMAT #ora-nls_date_format

  The value of `nls_date_format` is used as default date format in
  → development/databases/Oracle/SQL/functions/type-conversion/to/char[`to_char`] and
  → development/databases/Oracle/SQL/functions/type-conversion/to_date[`to_date`].

  If not explicitely defined, the value for `nls_date_format` is defined by `nls_territory`, not by `nls_date_language`.

  See also the error message
  → development/databases/Oracle/errors/ORA-01830_date-format-ends-before-converting-entire-input-string.

}
{ NLS_LANG #ora-nls_lang

  The value of `NLS_LANG` sets the language and territory of both, the session running on the Server, and the client.

 `NLS_LANG` has three components, all of which are optional.
  table { ll
    language ☰ Controls the language of day and month names and → development/databases/Oracle/errors[error messages], and sorting.
    territory ☰ Specifies the default format for dates, numbers and monetary values.
    character set ☰ Specifies the character set with which a user works. Each language has a default character set assosiated with it (which seems to be used when character set is not explicitely specified)
  table }

  These components are separated between the language and the territory with an underscore and between the territory and character set with a dot (for example `FRENCH.CANADA.WE8ISO8859P1`)

  The value of `NLS_LANG` should correspond to that of the client's operating system.

  TODO: → development/databases/Oracle/SQL-Plus#sqlplus-char-set[Setting the environment variable `NLS_LANG`] prior to starting
  → development/databases/Oracle/SQL-Plus.

}
{ NLS_LENGTH_SEMANTICS #ora-nls_length_semantics

  The value of `NLS_LENGTH_SEMANTICS` can be set to `BYTE` (default value) or `CHAR`.
  -
  For database objects creted in the current → development/databases/Oracle/architecture/session, this value specifies, 
  the *default length semantics* to use for
    • → development/databases/Oracle/SQL/data-types/varchar2[`VARCHAR2`] and → development/databases/Oracle/SQL/data-types/char[`CHAR`] table columns,
    • user-defined object attributes and
    • → development/databases/Oracle/PL-SQL variables.

  While the value of `NLS_LENGTH_SEMANTICS` affects the use of `VARCHAR2` and `CHAR`, the `NCHAR`, `NVARCHAR2`, → development/databases/Oracle/SQL/data-types/lob[`CLOB`] and `NCLOB` are
  always character-based.

  See also → development/databases/Oracle/SQL/data-types/varchar2/byte-vs-char[`VARCHAR2`: `BYTE` vs `CHAR`].

}
{ NLS_NUMERIC_CHARACTERS #nls_numeric_characters

  The value of `nls_numeric_characters` consists of two characters:
    • The first specifies the *decimal separator* (with which a `D` is replaced in `→ development/databases/Oracle/SQL/functions/type-conversion/to/char[to_char]`, see → development/databases/Oracle/SQL/functions/type-conversion/format-models#ora-fmt-number[format model for numbers])
    • The second specifes the *group separator* (thousands separator, with which a `G` is replaced in `→ development/databases/Oracle/SQL/functions/type-conversion/to/char[to_char]`, see → development/databases/Oracle/SQL/functions/type-conversion/format-models#ora-fmt-number[format model for numbers])

  See also the → development/databases/Oracle/errors/ORA-01481_invalid-number-format-model error message.

}
{ NLS_SORT #ora-nls_sort

  The value of `NLS_SORT` specifies the → development/Unicode/collation[collating] sequence for character value comparison. Thus, this value influences the
  outcome of
    • → development/databases/Oracle/SQL/select/order-by[`order by`]
    • → development/databases/Oracle/SQL/select/group-by[`group by`]
    • Comparison operators (such as `<`, `>`, `<=`, `>=` and even `=` or `<>`).
    • The `in` operator
    • `like`, `instr`
    • `min`, `max`, `greatest`, `least`
    • → development/databases/Oracle/SQL/statement/execution/plan[Execution plans] where → development/databases/Oracle/objects/indexes[indexes] are involved (compare with the `nlssort()` function)

  ? The exact operators and query clauses that obey the `NLS_SORT` parameter depend on the value of the `NLS_COMP` parameter.
  If an operator or clause does not obey the `NLS_SORT` value, as determined by `NLS_COMP`, the collation used is `BINARY`.

  Setting the value of `nls_sort` to `binary` causes the values to be sorted according to the byte value of the compared value.

  If `_CI` is appended to the value of `NLS_SORT`, the values are compared case-insensitively.
  -
  Appending `_AI` causes the values to be sorted accent-insensively.

  The value of `NLS_SORT` can also be set using the environment variable `NLS_SORT`.

  The current value of `NLS_SORT` is returned by `→ development/databases/Oracle/SQL/functions/sys_context[sys_context]('userenv', 'nls_sort')`.

}
{ NLS_TERRITORY #ora-nls_territory

  The value of `nls_territory` determines the value of the following init parameters if they're not explicitely altered:
    • `nls_date_format`
    • `nls_numeric_characters`
    • `nls_currency`
    • `nls_iso_currency`

  The value also influences the day of week (→ development/databases/Oracle/SQL/functions/type-conversion/format-models#ora-format-day-of-week[`to_char(…, 'D')`]).

}

sa:

  How the value of `NLS_SORT` and `NLS_COMP` influences → development/databases/Oracle/adminstration/init-parameters/nls/sort-comp/eq[testing of string-equality].

  → development/databases/Oracle/SQL/functions/sys_context[`sys_context('userenv', 'nls…')`]

  → development/databases/Oracle/SQL-Plus/sqlpath/nls[`nls.sql`] shows session, database and instance NLS-values.

  → development/databases/Oracle/adminstration/init-parameters

  The functions `get_nls_parameter` and `set_nls_parameter` in → development/databases/Oracle/installed/packages/dbms/debug_jdwp[`dbms_debug_jdwp`].

  → development/databases/Oracle/installed/dynamic-performance-views/nls/valid_values[`v$nls_valid_values`],
  → development/databases/Oracle/installed/dynamic-performance-views/nls/parameters[`v$nls_parameters`].

  → development/databases/Oracle/adminstration/init-parameters/nls/temporarily-change-NLS-setting-in-session[Temporarily change an NLS setting in a session]

  → development/databases/Oracle/installed/data-dictionary/nls[NLS related data dictionary views]

  → development/databases/Oracle/SQL/functions/type-conversion/to/char#ora-to_char-nls[Specyfing nls parameter values] when using → development/databases/Oracle/SQL/functions/type-conversion/to/char[`to_char`].
