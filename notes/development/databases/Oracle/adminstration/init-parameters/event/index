$ Oracle: init parameter EVENT
@ event

Purposes of *diagnostic events* include
  • Get additional diagnostics
  • Change the behavior of the Oracle server, like events 10235 (check memory manager internal structures) or 10262 (do not check for memory leaks)
  • Eabling undocumented features or enabling workaround for known problems
  • Enable collection of trace or debug information (10046, 10053)
  • Enable additional error checking
  • Immediate dump events (→ development/databases/Oracle/tools/oradebug/dump/systemstate[`systemstate`], → development/databases/Oracle/tools/oradebug/dump/pga_detail_get[`pga_detail_get`], `errorstack`, `controlf`, `file_hdrs`, `rdohdr`…)
  • Dump «something» when a given error (`ORA-…`) occurs (for example, to trace ORA-00942: `942 trace name errorstack level 3`).

{ Numeric events

Format:
code {
NNNNN trace name context forever, level L
code }
`NNNNN` and `L` are numbers.

Multiple events can be separated by a colon:
code {
alter system set event='10325 trace name context forever, level 10:10015 trace name context forever, level 1' scope=spfile;
code }

}
{ Named events

  Named events have a different format.

code {
alter session set events 'immediate trace name controlf level 2' ;
alter system  set events '942 trace name errorstack level 3';
code }

  Note the plural `events` vs the singular `event` and the missing `,` before the `level`.

}
{ Setting events

  When setting events in the init.ora file, they should be grouped together on subsequent lines, otherwise, only the last event will found will have an effect.
code {
event="ddddd trace name context forever, level …"
event="eeeee trace name context forever, level …"
event="fffff trace name context forever, level …"
code }

  Events can also be set with SQL statements.
code {
alter session set events='…';
alter system  set events='…';
code }

  An `alter system…` will not affect existing connections.

  In addition, events can also for another, specific sessions with a *debug tool* (`oradebug`).

}
{ Duration of events

  Events that are set with `conext forever, level …` are normally active until the session or instance terminates.

  Events can explicitely turned off, however, by replacing `forever` with `off`:
code {
alter session set events '… context off';
code }


}
{ Remove all events

code {
alter system reset event scope=spfile sid='*' ;
code }

  The asterisk (`*`) does not work for → development/databases/Oracle/Options/real-application-clusters[RACs], instead, the *instance name* is required.

}
{ TODO

  ? Oracle uses `ksdpec()` to check if aspecific event is turned on for tracing (*if* at least one event is set).

  ? `ss_wrtf()` seems to be related to writing trace files.
 
}

sa:

  Find SQL statements that cause → development/databases/Oracle/errors/ORA-01722_invalid-number
code {
→ development/databases/Oracle/SQL/statement/nouns/session/set/init-param[alter session set] events '1722 trace name errorstack level 1';
code }

  → development/databases/Oracle/adminstration/init-parameters

  MOS Note 218105.1
