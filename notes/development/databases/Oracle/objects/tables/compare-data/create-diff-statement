$ Oracle: Create an SQL statement to compare the content of two tables

The result of the → development/databases/Oracle/SQL/statement presented here is *another* SQL statement which then can be used to
→ development/databases/Oracle/objects/tables/compare-data[compare the data of two tables].

When using this statement, the → development/databases/Oracle/users-roles/users[owners] and → development/databases/Oracle/objects/tables[table] names of the two tables that
are to be compared need to be changed in the → development/databases/Oracle/SQL/clauses/with[`with` clause] named `tabs`.

The value of `condition` that is specified in the `with` clause named `where_` allows to specify a `where` condition which is applied to both tables when their data is compared.
The value of this condition must be changed, possibly to a `null` condion, like so:
code {
where_ as (
   select
      q'{}' condition
   …
code }

{ Statement

code {
with tabs as (
   select  user ownr_a, 'TQ84_A' name_a,
           user ownr_b, 'TQ84_B' name_b
   from
      dual
),
where_ as (
   select
      q'{num = 42 and txt = 'hello world'}' condition
   from
      dual
),
col as (
   select
        → development/databases/Oracle/SQL/select/aggregate/listagg[listagg](a.column_name, ',') within group (order by b.column_id) as umns
   from
       tabs                                                  join
       → development/databases/Oracle/installed/data-dictionary/tab/columns[all_tab_columns] a on a.owner      = tabs.ownr_a and
                            a.table_name = tabs.name_a       join
       → development/databases/Oracle/installed/data-dictionary/tab/columns[all_tab_columns] b on b.owner      = tabs.ownr_b and
                            b.table_name = tabs.name_b
   where                           
       a.column_name = b.column_name
)
select 
   q'[select 'only A' where_, only_a.* from (select ]' || col.umns || ' from ' || tabs.ownr_a || '.' || tabs.name_a || case when where_.condition is not null then ' where ' || where_.condition end || ' minus ' ||
                                             'select ' || col.umns || ' from ' || tabs.ownr_b || '.' || tabs.name_b || case when where_.condition is not null then ' where ' || where_.condition end || ') only_a union all' || chr(10) ||
   q'[select 'only B' where_, only_b.* from (select ]' || col.umns || ' from ' || tabs.ownr_b || '.' || tabs.name_b || case when where_.condition is not null then ' where ' || where_.condition end || ' minus ' ||
                                             'select ' || col.umns || ' from ' || tabs.ownr_a || '.' || tabs.name_a || case when where_.condition is not null then ' where ' || where_.condition end || ') only_b'
from
   tabs   cross join
   where_ cross join
   col;
code }

}
{ Example

  With the following two tables …
code {
create table tq84_A (num  number, txt varchar2(10));
create table tq84_B (num  number, txt varchar2(10));
code }

  … the result of the select statement is the following SQL statement:
code {
select 'only A' where_, only_a.* from (select NUM,TXT from RENE.TQ84_A minus select NUM,TXT from RENE.TQ84_B) only_a union all
select 'only B' where_, only_b.* from (select NUM,TXT from RENE.TQ84_B minus select NUM,TXT from RENE.TQ84_A) only_b
code }

}



sa:
  → development/databases/Oracle/objects/tables/compare-data[Compare the data of two tables]
