$ Oracle: DEFAULT clause for columns

code {
create table T (
   …
   col_name varchar2(10) DEFAULT [ON NULL] expr,
   …
);
code }

A → development/databases/Oracle/objects/tables/columns can be assigned an expression which provides the column's default value with which the column is filled in an `insert` statement if no explicit value is stated.

The expression can be a → development/databases/Oracle/SQL/functions[SQL function] (with some limitations),
non-constant values such as → development/databases/Oracle/SQL/functions/date/sysdate[`sysdate`], `systimestamp` or → development/databases/Oracle/objects/sequences[sequence] related pseudo columns (`currval` and `nextval`).
-
The expression *cannot* be a → development/databases/Oracle/SQL/select/subquery/scalar or the result of a user defined → development/databases/Oracle/PL-SQL/function-procedure[PL/SQL function].

In order to be able to *query* (rather than insert) non-constant values, → development/databases/Oracle/objects/tables/columns/virtual[virtual columns] must be used.

{ Generate value from a sequence

  gh|Oracle-Patterns|/DatabaseObjects/Tables/columns/default/sequence.sql||

}
{ Altering an existing table

  In an existing table, a column can be altered to have a default value like so:
code {
alter table log_entry modify time_entered  default systimestamp;
code }

}
{ Querying the data dictionary

  The following → development/databases/Oracle/SQL/select[`select` statement] queries the → development/databases/Oracle/installed/data-dictionary for columns with default values.

  This query also finds columns that were not created with a `default` clause but as → development/databases/Oracle/objects/tables/columns/identity[identity columns].
code {
select
   table_name,
   column_name,
   data_type,
   data_default,
   identity_column
from
   → development/databases/Oracle/installed/data-dictionary/tab/cols[user_tab_cols]
where
-- table_name like '%' and
   data_default is not null;
code }
}

