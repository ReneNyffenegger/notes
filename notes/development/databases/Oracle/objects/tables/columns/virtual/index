$ Oracle: Virtual columns
@ virtual column

A *virtual column* is essentially an expression that provides a value at query time (which thus → development/databases/Oracle/objects/tables/columns/virtual/vs-default-values[differs from a `default` value] which provides a value at
`insert` time).
-
Because the value is computed, it does not take disk space.

In many respects, virtual columns can be treated like ordinary → development/databases/Oracle/objects/tables/columns[columns], notably, they
  • can be used for → development/databases/Oracle/objects/indexes[indexes] (which is equivalent to a function based index) and
  • → development/databases/Oracle/optimizer/statistics[statistics] can be gathered.

Virtual columns are only allowed in «traditional» *heap organized* tables.

{ Definition of a virtual column

  In a `→ development/databases/Oracle/SQL/statement/nouns/table/create` statement, a virtual column is defined like so:
code {
colName [→ development/databases/Oracle/SQL/data-types[datatype]] [GENERATED ALWAYS] AS ( expr ) [VIRTUAL]
code }

  Thus, a virtual column can be created minimally with
code {
colName AS ( expr )
code }

  If the data type is omitted, it will be inferred from `expr`.

  The optional clause `GENERATED ALWAYS` clarifies that the value is not stored with the table abut is evaluated at query time.
  -
  But comare with the `GENERATED ALWAYS AS IDENTITY` clause which creates an → development/databases/Oracle/objects/tables/columns/identity[identity column] whose value *is* stored on disk.

}
{ Updating and inserting values of virtual columns

code {
create table tq84_virt (
   num number,
   dbl as (2*num)
);
code }
 
  Trying to insert a value into a column with a virtual column results in → development/databases/Oracle/errors/ORA-54013_INSERT-operation-disallowed-on-virtual-columns.
code {
insert into tq84_virt values (4, 8);
code }
 
   It is possible to use the keyword `default` where the value of a virtual column is specified. The following statement inserts a record into `tq84_virt`:
code {
insert into tq84_virt values (4, default);
code }
 
  Updating a virtual value results in *ORA-54017: UPDATE operation disallowed on virtual columns*:
code {
update tq84_virt
set
  num =  5,
  dbl = 10;
code }
 
  Unlike with `insert` statements, the `default` keyword does not solve the problem when used in the update's `set` clause, the following statement
  also throws an *ORA-54017* error message.
code {
update tq84_virt
set
  num =  5,
  dbl = default;
code }
 
  Cleaning up:
code {
drop table tq84_virt;
code }

}
{ Non deterministic functions/expressions are not allowed

  The expression used for the virtual column must be → development/databases/Oracle/PL-SQL/function-procedure/deterministic[deterministic] («pure»), otherwise, Oracle throws
  → development/databases/Oracle/errors/ORA-54002_only-pure-functions-can-be-specified-in-a-virtual-column-expression

}

{ Modifying virtual columns

  gh|Oracle-Patterns|/DatabaseObjects/Tables/columns/virtual/modify.sql||

}
{ Virtual columns cannot reference other virtual columns

  gh|Oracle-Patterns|/DatabaseObjects/Tables/columns/virtual/virt-cols-referencing-virt-cols.sql||

}
{ SQL error at query time

  Create a table implementing the four basic arithmetic operations as virtual columns:
code {
create table tq84_virtual_test (
       c1        number,
       c2        number,
       ------------
       addition       as (c1+c2),
       substraction   as (c1-c2),
       multiplication as (c1*c2),
       division       as (c1/c2)
);
code }

  Fill a few values:
code {
begin
   insert into tq84_virtual_test          values (18, 13, default, default, default, default);
   insert into tq84_virtual_test (c1, c2) values ( 2,   42);
   insert into tq84_virtual_test (c1, c2) values (13, null);
   insert into tq84_virtual_test (c1, c2) values (14,    0);
   commit;
end;
/
code }

  The following `select` statements run ok:
code {
select c1, c2, addition, substraction, multiplication           from tq84_virtual_test;

select c1, c2, addition, substraction, multiplication, division from tq84_virtual_test where c2 is null or c2 != 0;
code }

  However, this one throws → development/databases/Oracle/errors/ORA-01476_divisor-is-equal-to-zero:
code {
select * from tq84_virtual_test;
code }

  This query runs ok, again:
code {
select
   c1, c2,
   addition,
   substraction,
   multiplication,
   case when c2 = 0 then null else division end division
from
   tq84_virtual_test;
code }

  Cleaning up:
code {
drop table tq84_virtual_test;
code }

}
{ Deterministic tests

code {
create or replace package tq84_virtual_test_pck as

          function f_non_deterministic (c1_ in number) return number;
          function f_deterministic     (c1_ in number) return number deterministic;

end tq84_virtual_test_pck;
/

create or replace package body tq84_virtual_test_pck as

          function f_non_deterministic (c1_ in number) return number as
          begin
              return dbms_random.value(0, c1_);
          end f_non_deterministic;

          function f_deterministic (c1_ in number) return number deterministic as
          begin
              return c1_ * 42;
          end f_deterministic;

end tq84_virtual_test_pck;
/

code }


  gh|Oracle-Patterns|/DatabaseObjects/Tables/columns/virtual/test_02.sql||

  gh|Oracle-Patterns|/DatabaseObjects/Tables/columns/virtual/test_03.sql||

  gh|Oracle-Patterns|/DatabaseObjects/Tables/columns/virtual/test_04.sql||

}


sa:

  Functions that are used to calculate the value of a virtual column must be → development/databases/Oracle/PL-SQL/function-procedure/deterministic[deterministic].

  → development/databases/Oracle/objects/tables/columns

  → development/databases/SQL-Server/sql/create/table/columns/computed/division-by-zero[Computed columns in SQL Server]

  Error messages
    • → development/databases/Oracle/errors/ORA-01733_virtual-column-not-allowed-here
    • → development/databases/Oracle/errors/ORA-54004_resultant-data-type-of-virtual-column-is-not-supported
    • → development/databases/Oracle/errors/ORA-54013_INSERT-operation-disallowed-on-virtual-columns in → development/databases/Oracle/SQL/DML/insert/select#ora-insert-select-errors[`insert into … select * from …`] statements.

  → development/databases/Oracle/objects/tables/columns/virtual/identify-in-data-dictionary

? Oracle → development/databases/Oracle/Releases-and-versions/23c[23.7] apparently has *materialized* virtual columns where the value is calculated *and stored* at insert time.
