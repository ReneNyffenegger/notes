$ Oracle table columns
@ column

{ Modifying the table structures

code {
create table tq84_col_test (
   col_one   number
);
code }

  Add *one* new column
code {
alter table tq84_col_test add col_two varchar2(10);
code }

  Add *muliple* columns at once
code {
alter table tq84_col_test add (
   col_three   date,
   col_four    number not null
);
code }

  Change a column nullability:
code {
alter table tq84_col_test modify col_three not null;
code }

  A column that contains null values only can be → development/databases/Oracle/SQL/data-types/_change[converted to another data type].
  -
  If the column already has data, Oracle will throw error *ORA-01439: column to be modified must be empty to change datatype*.
code {
alter table tq84_col_test modify col_four varchar2(10);
code }

  Modifying multiple columns at once:
code {
alter table tq84_col_test modify (
   col_one    number(10, 2),
   col_two    varchar2(20)  
);
code }

  Renaming a column
code {
alter table tq84_col_test rename column col_four to col_text;
code }

  Dropping a column:
code {
alter table tq84_col_test drop column col_two;
code }

  In order to drop multiple columns at once, the column names need to be enclosed in parantheses and the keyword `column` omitted:
code {
ater table tq84_xyz drop (col_one, col_two, col_three,…);
code }

  Before dropping a column, it might be considered, especially on large tables, to first mark it as *unused* (which is way faster then dropping it directly) and *later* drop it «physically», when
  the database is not heavily used:
code {
alter table tq84_col_test set unused (col_three);

select * from user_tab_cols
where
   table_name    = 'TQ84_COL_TEST' and
   hidden_column = 'YES';

// … later …:

alter table tq84_col_test drop unused columns;
code }


}
{ Find columns that might be nullable

  After (fully) analyzing a table with → development/databases/Oracle/installed/packages/dbms/stats/api/gather/table_stats[`dbms_stats.gather_table_stats`], it is possible to find columns
  that are nullable but have no → development/databases/Oracle/SQL/null[`null`] values in them:
code {
select
   col.column_name
from
    user_tab_columns col
where
   col.table_name = 'DATA' and
   col.nullable   = 'Y'    and
   col.num_nulls  =  0;
code }

   The following statement generates an `alter table` statement with which all such columns can be changed to `not null`:
code {
select
  'alter table ' || col.table_name || ' modify (' || 
   → development/databases/Oracle/SQL/select/aggregate/listagg[listagg](col.column_name || ' not null', ', ')  ||
  ')'  stmt
from
    user_tab_columns col
where
   col.table_name = 'DATA' and
   col.nullable   = 'Y'    and
   col.num_nulls  =  0
group by
   col.table_name;
code }

}
{ Invisible columns #ora-invisible-cols

  Gone → development/databases/Oracle/objects/tables/columns/invisible[here]
 
}
{ Commenting columns

  It's possible to add a comment for a column (for example to document its intended purpose):
code {
comment on column rene.tab_xyz.col_1  is '…';
code }

  These comments are stored in the → development/databases/Oracle/installed/data-dictionary and can be queried from either `→ development/databases/Oracle/installed/data-dictionary/col/comments`, `all_col_comments` or `user_col_comments`.

}
{ Maximum number of columns #oracle-max-table-columns

  As of → development/databases/Oracle/Releases-and-versions/21c, the maximum number of columns in a → development/databases/Oracle/objects/tables[table] or
  → development/databases/Oracle/objects/views[view] is 1000.
  -
  In → development/databases/Oracle/Releases-and-versions/23c[23c], this limit was upped to 4096.

  However, a → development/databases/Oracle/SQL/select[`select` statement] can return up to 8160 columns after which the error message *ORA-00913: too many columns* is thrown.

  The maximum number of columns that can be stored in a → development/databases/Oracle/architecture/database/logical-structures/data-block is 255.

}
sa:

  → development/databases/Oracle/objects/tables/columns/virtual[Virtual columns],
  → development/databases/Oracle/objects/tables/columns/identity[identity columns],
  → development/databases/Oracle/objects/tables/columns/default[default columns] and
  → development/databases/Oracle/objects/tables/columns/sensitive[sensitive columns]

  Renaming column names with → development/databases/Oracle/SQL/statement/nouns/table#ora-sql-alter-table-rename-column[`alter table … rename column …`].

  → development/databases/Oracle/objects/tables/columns/diff-structure[Simple way to determine the difference between two table structures]

 `→ development/databases/Oracle/installed/data-dictionary/tab/columns`,
 `→ development/databases/Oracle/installed/data-dictionary/tab/cols`.

  An SQL statement to → development/databases/Oracle/objects/tables/columns/find-table-with-given-column-names[find tables with a given set of column names].

  An SQL statement to → development/databases/Oracle/objects/tables/columns/create-select-statement-with-tables-column-names[create `select` statements with all column names of a table].

  Create a text that applies a given expression to all columns of a table.

  → development/databases/Oracle/objects/tables/columns/grant

  → development/databases/Oracle/objects/tables/columns/pseudo[Pseudo columns]

 `→ development/databases/Oracle/installed/data-dictionary/base-tables/col`


  Error messages:
    • → development/databases/Oracle/errors/ORA-00918_column-ambiguously-defined
    • → development/databases/Oracle/errors/ORA-00957_duplicate-column-name
    • → development/databases/Oracle/errors/ORA-00998_must-name-this-expression-with-a-column-alias
