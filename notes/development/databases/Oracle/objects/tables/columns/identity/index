$ Oracle: Identity columns (auto increment)

A column can be declared as *identity column*. Each identity column is associated with a *sequence generator*. This generator supplies an increasing or decreasing integer value to the column if necessary.

code {
CREATE TABLE tab (
   …
   col  number  GENERATED [ ALWAYS | BY DEFAULT [ ON NULL ] ] AS IDENTITY [ → #ora-ident-col-opts[identity options] ]
   …
);
code }

If the sequence generator generates a value depends on the characteristics of the identity column. There are three main characteristics:
table { ll
  `generated always` ☰ Oracle always provides a value. Value cannot be overridden or set in `value(…)` clause.
  `generated by default` ☰ Value is supplied if not explicitly overridden.
  `generated by default on null` ☰ Value only supplied if inserted value is → development/databases/Oracle/SQL/null[`null`] or omitted.
table }



Note that the sequence generator does not guarantee that the values in the destination columns are unique.
These values can be updated or sometimes overridden in the `insert` statement.

It should also be kept in mind that an identity column does not automatically create a → development/databases/Oracle/objects/tables/constraints/primary-key[primary key].

{ Options #ora-ident-col-opts

  Identity options include
    • `START WITH n`
    • `START WITH LIMIT VALUE`
    • `INCREMENT BY n`
    • `MAXVALUE n`, `NOMAXVALUE`
    • `MINVALUE n`, `NOMINVALUE n`
    • `CYCLE`, `NO CYCLE`
    • `CACHE n`, `NOCACHE`
    • `ORDER`, `NOORDER`

}
{ Data Dictionary

  The → development/databases/Oracle/installed/data-dictionary views that lists information about identity columns
  are → development/databases/Oracle/installed/data-dictionary/tab/identity_cols[`user_tab_identity_cols`, `all_tab_identity_cols` and `dba_tab_identity_cols`].

  Some (limited) information about identity columns can also be found in → development/databases/Oracle/installed/data-dictionary/tab/columns[`dba_tab_columns`].
code {
select
   table_name,
   column_name,
   default_on_null,
   data_default      -- typically something like "RENE"."ISEQ$$_2235365".nextval
from
   user_tab_columns
where
   identity_column = 'YES' and
   table_name like 'T_ID_%'
order by
   table_name;
code }

}
{ Simple test

  The following simple test creates three tables each of which has an identity column to cover the possible three characteristics.

  The example then inserts several records, sometimes using `null`, sometimes using a value for the identity column.
  
  Finally, it selects from all three table in order to check which values are found in the identity columns.

  gh|Oracle-Patterns|/DatabaseObjects/Tables/columns/identity/intro.sql||

}
{ ORA-01031: insufficient privileges

  In order to create tables with identity columns, the `create sequence` → development/databases/Oracle/security/privileges[privilege] is required. Without that privilege, the error message
  → development/databases/Oracle/errors/ORA-01031_insufficient-privileges error is thrown.

}

sa:

  The → development/databases/Oracle/objects/tables/columns/identity/returning-into[`returning into` clause] can be used in
  → development/databases/Oracle/PL-SQL/block[PL/SQL blocks] to return the generated value into a variable.

  → development/databases/Oracle/objects/sequences#ora-default-sequence-for-pk[Using sequences to generate auto-incrementing numbers]

  → development/databases/SQL-Server/sql/create/table/columns/identity[Identity columns] in → development/databases/SQL-Server[SQL Server].

  Error *ORA-32795: cannot insert into a generated always identity column* in
  → development/databases/Oracle/SQL/DML/insert/select#ora-insert-select-errors[`insert into … select * from …`] statements.
