$ Oracle: Partitioned tables

{ Partition techniques

  Each record in a partitioned → development/databases/Oracle/objects/tables is assigned to an unambiguous partition.

  There are three distribution techniques to determine the partition into which a record falls:
    • → development/databases/Oracle/objects/tables/partitions/distribution-techniques/range[Range]
    • → development/databases/Oracle/objects/tables/partitions/distribution-techniques/hash[Hash]
    • → development/databases/Oracle/objects/tables/partitions/distribution-techniques/list[List]

  A variant of the *range partioning* is → development/databases/Oracle/objects/tables/partitions/distribution-techniques/range/interval[interval partitioning]: Oracle will automatically create the new partitions when an inserted (or updated?) value requires it.

  { Composite partitioned

    With *composite partioning*, two partition techniques are combined so that there are two levels: partition and sub-partition.

    The top level allows all four partitioning types. The second level does not allow interval partitioning. Thus, the total combinations
    of composite partitions is 12 (=4*3), for example:
      • → development/databases/Oracle/objects/tables/partitions/distribution-techniques/composite#ora-comp-part-range-list[range - list],
      • → development/databases/Oracle/objects/tables/partitions/distribution-techniques/composite#ora-comp-part-range-range[range - range],
      • → development/databases/Oracle/objects/tables/partitions/distribution-techniques/composite#ora-comp-part-list-hash[list - hash] or
      • → development/databases/Oracle/objects/tables/partitions/distribution-techniques/composite#ora-comp-part-interval-list[interval - list]

  }
}
{ Data dictionary

  Available characteristics and other data pertaining to partitions tables can be queried in the
  → development/databases/Oracle/installed/data-dictionary from `→ development/databases/Oracle/installed/data-dictionary/tab/partitions` and `→ development/databases/Oracle/installed/data-dictionary/tab/subpartitions`.
  -
  The views pertaining to partioned → development/databases/Oracle/objects/indexes[indexes] are
 `all_ind_partitions` and `all_ind_subpartitions`.

  A partitioned table is marked with `YES` in the column `partitioned` of `dba_tables`:
code {
select
   partitioned,   -- 'YES'
   num_rows,
   blocks
from
   dba_tables
where
   owner      = 'RENE' and
   table_name = 'HIST_ABC';
code }

   The individual partitions that belong to a partitioned table are found in `→ development/databases/Oracle/installed/data-dictionary/tab/partitions`:
code {
select
   composite,
   partition_position,
   partition_name,
   subpartition_count,
   high_value,
   num_rows,
   blocks
   high_value_length
from
   → development/databases/Oracle/installed/data-dictionary/tab/partitions
where
   table_owner  = 'RENE'                and
   table_name   = 'HIST_ABC';
code }

   If the table is also sub-partitioned, the sub-partitions can be queried from `→ development/databases/Oracle/installed/data-dictionary/tab/subpartitions`:
code {
select
   subpar.partition_name,
   subpar.subpartition_name,
   tabpar.high_value             tabpar_high_value,
   subpar.high_value             subpar_high_value,
   subpar.num_rows               subpar_num_rows,
   subpar.blocks                 subpar_blocks,
   tabpar.high_value_length      tabpar_high_value_length,
   subpar.high_value_length      subpar_high_value_length,
   subpar.partition_position,
   subpar.subpartition_position
from
   → development/databases/Oracle/installed/data-dictionary/tab/partitions    tabpar     left join
   → development/databases/Oracle/installed/data-dictionary/tab/subpartitions subpar on
       tabpar.table_owner    = subpar.table_owner     and
       tabpar.table_name     = subpar.table_name      and
       tabpar.partition_name = subpar.partition_name
where
   subpar.table_owner = 'RENE' and
   subpar.table_name  = 'HIST_ABC'
order by
   subpar.partition_position,
   subpar.subpartition_position;
code }

  { Partitioning columns

    The → development/databases/Oracle/objects/tables/columns[columns] on whose values a table is partitioned:
code {
select
   column_name
from
   all_part_key_columns
where
   owner  = 'RENE'                 and
   name   = 'HIST_ABC'
order by
   column_position;
code }

    The → development/databases/Oracle/objects/tables/columns[columns] on whose values a sub-partitioned table is partitioned:
code {
select
   column_name
from
   all_subpart_key_columns
where
   owner = 'RENE' and
   name  = 'HIST_ABC';
code }

    Combining the two queries:
code {
select
   tab.owner,
   tab.table_name,
   tab.num_rows,
   tap.partitioning_type,
   tap.subpartitioning_type,
   pkc.column_name              col_part_nam,
   pkc.column_position          col_part_pos,
   tap.interval,
   psc.column_name              col_subpart_nam,
   psc.column_position          col_subpart_pos,
   tap.interval_subpartition,
   tap.autolist,
   tap.autolist_subpartition,
   tap.partitioning_key_count,
   tap.subpartitioning_key_count,
   tap.partition_count,
   tap.def_subpartition_count
from
   dba_tables                tab                                                 left join
   dba_part_tables           tap on tab.owner           = tap.owner       and
                                    tab.table_name      = tap.table_name         left join
   dba_part_key_columns      pkc on tab.owner           = pkc.owner       and
                                    tab.table_name      = pkc.name               left join
   dba_subpart_key_columns   psc on tab.owner           = psc.owner       and
                                    tab.table_name      = psc.name          
where
-- tab.owner not in ('SYS', 'SYSTEM', 'OUTLN', 'DBSNMP', 'CTXSYS', 'APPQOSSYS', 'WMSYS', 'XDB')
   tab.owner = user
order by
   tap.def_subpartition_count desc nulls last
;
code }

  }
  { Partition type

    A table's partition type can be queried from `→ development/databases/Oracle/installed/data-dictionary/part/tables`.

  }
}
{ Dropping a partition

  gh|Oracle-Patterns|/DatabaseObjects/Tables/Partitions/drop_partition.sql||

}
{ Truncating a partition

  gh|Oracle-Patterns|/DatabaseObjects/Tables/Partitions/truncate-partition.sql||

}
{ Local partitioned index

  gh|Oracle-Patterns|/DatabaseObjects/Tables/Partitions/local_partitioned_index.sql||

}
{ Misc

  gh|Oracle-Patterns|/DatabaseObjects/Tables/Partitions/local_prefixed_vs_non_prefixed_index.sql||

}

sa:
  → development/databases/Oracle/objects/tables

  → development/databases/Oracle/objects/tables/partitions/drop[Dropping partitions]

  Using → development/databases/Oracle/installed/packages/dbms/rowid#dbms_rowid-record-partition[dbms_rowid.rowid_partition] to determine where
  in which partition a record is stored.

  → development/databases/Oracle/objects/indexes/partitioned/local[Local partitioned indexes]

 `dbms_auto_partition`

  The *Partition Advisor*, which is part of the *SQL Access Advisor*, will recommend a partitioning strategy for a table based on workload of
  → development/databases/Oracle/SQL/statement[SQL statements].

  → development/databases/Oracle/objects/tables/partitions/ora-01841

  The → development/databases/Oracle/objects/tables/partitions/extension-clause[partition extension clause] allows to select from one partition as though
  it were an entire table.

  → development/databases/Oracle/objects/tables/partitions/pruning[Partition pruning]

  → development/databases/Oracle/errors/ORA-14402_updating-partition-key-column-would-cause-a-partition-change
  -
  → development/databases/Oracle/errors/ORA-14020_this-physical-attribute-may-not-be-specified-for-a-table-partition

  → development/databases/Oracle/SQL/statement/nouns/table/alter/exchange-partition[`alter table … exchange partition … with table …`]
