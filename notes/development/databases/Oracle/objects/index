$ Oracle Objects
@ objects

{ Object types #ora-obj-types

  There is quite a list of available *object types*. The list of object types can be queried by first expanding the SQL statement text of
 `→ development/databases/Oracle/installed/data-dictionary/objects` …
code {
declare
   c clob;
begin
   → development/databases/Oracle/installed/packages/dbms/utility/api/expand_sql_text[dbms_utility.expand_sql_text]('select*from"DBA_OBJECTS"', c);
   dbms_output.put_line(c);
end;
code }
  … and then finding the relevant `decode` statement:
code {
decode("A14"."TYPE#",
  0, 'NEXT OBJECT',
  1, 'INDEX'      ,
  2, 'TABLE'
  …
)
code }

  This gives me the list of possible object types (19c):
table { rll

  152 ☰ ANALYTIC VIEW ☰
   61 ☰ APPLY ☰
   87 ☰ ASSEMBLY ☰
  151 ☰ ATTRIBUTE DIMENSION ☰
   60 ☰ CAPTURE ☰
   79 ☰ CHAIN ☰
    3 ☰ → development/databases/Oracle/objects/clusters[CLUSTER] ☰ A is an object that stores data from one or more → development/databases/Oracle/objects/tables[tables]
   48 ☰ CONSUMER GROUP ☰
  111 ☰ CONTAINER ☰
   44 ☰ → development/databases/Oracle/objects/contexts[CONTEXT] ☰
   90 ☰ CREDENTIAL ☰
   95 ☰ CUBE BUILD PROCESS ☰
   93 ☰ CUBE ☰
   92 ☰ CUBE DIMENSION ☰
  101 ☰ DESTINATION ☰
   43 ☰ DIMENSION ☰
   23 ☰ DIRECTORY ☰ A *Directory* is an abstraction for a directory/folder on the file system where the Oracle Instance is running. Such directories can be used for example in conjunction with the *BFILE* → development/databases/Oracle/SQL/data-types[data type].
   57 ☰ EDITION ☰
   62 ☰ EVALUATION CONTEXT ☰
   81 ☰ FILE GROUP ☰
  100 ☰ FILE WATCHER ☰
    8 ☰ FUNCTION ☰ An editionable type.
  150 ☰ HIERARCHY ☰
    1 ☰ → development/databases/Oracle/objects/indexes[INDEX] ☰
   35 ☰ INDEX SUBPARTITION ☰
   20 ☰ INDEX PARTITION ☰
   32 ☰ INDEXTYPE ☰
   56 ☰ JAVA DATA ☰
   30 ☰ JAVA RESOURCE ☰
   28 ☰ JAVA SOURCE ☰
   29 ☰ JAVA CLASS ☰
   66 ☰ JOB ☰
   68 ☰ JOB CLASS ☰
   22 ☰ LIBRARY ☰ An editionable type.
   41 ☰ LOB SUBPARTITION ☰
   40 ☰ LOB PARTITION ☰
   21 ☰ LOB ☰
   52 ☰ LOCATION ☰
  148 ☰ LOCKDOWN PROFILE ☰
   42 ☰ → development/databases/Oracle/objects/views/materialized[MATERIALIZED VIEW], REWRITE EQUIVALENCE or MATERIALIZED ZONEMAP ☰ Object type further determined based on value of `xpflags` in joined table → development/databases/Oracle/installed/data-dictionary/base-tables/sum[`sys.sum$`]. A Materialized View stores the result of an SQL query. Associated with a → development/databases/Oracle/objects/views/materialized[Materialized View] is the *Materialized View Log*.
   94 ☰ MEASURE FOLDER ☰
   82 ☰ MINING MODEL ☰
  144 ☰ MINING MODEL PARTITION ☰
    0 ☰ NEXT OBJECT ☰
   33 ☰ OPERATOR ☰
   11 ☰ PACKAGE BODY ☰ An editionable type.
    9 ☰ PACKAGE ☰ An editionable type.
    7 ☰ PROCEDURE ☰ An editionable type.
   67 ☰ PROGRAM ☰
   24 ☰ QUEUE ☰ A *Queue* enqueues and dequeues messages and is managed by Oracle Streams Advanced Queueing (AQ).  These messages are stored in *Queue Tables*.
   47 ☰ RESOURCE PLAN ☰
   46 ☰ RULE SET ☰
   59 ☰ RULE ☰
   74 ☰ SCHEDULE ☰
   72 ☰ SCHEDULER GROUP ☰
    6 ☰ → development/databases/Oracle/objects/sequences[SEQUENCE] ☰
  114 ☰ SQL TRANSLATION PROFILE ☰ AN *SQL Translator* converts a non-Oracle SQL dialect to SQL Statements that are understood by Oracle. An editionable type.
   51 ☰ SUBSCRIPTION ☰
    5 ☰ SYNONYM ☰ An editionable type. 
    2 ☰ → development/databases/Oracle/objects/tables[TABLE] ☰
   19 ☰ → development/databases/Oracle/objects/tables/partitions[TABLE PARTITION] ☰
   34 ☰ TABLE SUBPARTITION ☰
   12 ☰ → development/databases/Oracle/objects/triggers[TRIGGER] ☰ An editionable type.
   14 ☰ TYPE BODY ☰ An editionable type.
   13 ☰ TYPE ☰ An editionable type.
  115 ☰ UNIFIED AUDIT POLICY ☰
    4 ☰ → development/databases/Oracle/objects/views[VIEW] ☰ An editionable type.
   69 ☰ WINDOW ☰
   55 ☰ XML SCHEMA ☰

table }

  I thought a  *Database Link* is an object type as well, but apparently is not so.
  -
  A Database Link allows to access objects that are stored in other databases. If the other database is not an Oracle database system, they must be accessed with *Oracle Heterogeneous Services*.

  The set of types that are *editionable* depends on the value of the
  → development/databases/Oracle/adminstration/init-parameters/compatible[the init parameter `compatible`] and can be queried from `→ development/databases/Oracle/installed/data-dictionary/editionable_types`.

}
{ Data dictionary

  Oracle stores information about database objects in the → development/databases/Oracle/installed/data-dictionary.

  A list of all objects is found in → development/databases/Oracle/installed/data-dictionary/objects[`dba_objects`].
  -
  Invalid objects are listed in → development/databases/Oracle/installed/data-dictionary/invalid_objects[`dba_invalid_objects`]

  { OBJ$
  
    Internally, «under the hood», Oracle stores basic object information in → development/databases/Oracle/installed/data-dictionary/base-tables/obj[`sys.obj$`].
  
  }

}
{ Privileges

  In order for users to be able to access an Object, they must be → development/databases/Oracle/SQL/DCL/grant[granted] the respective privileges.

  The matrix of grants and objects can be queried through the → development/databases/Oracle/installed/data-dictionary[data dictionary] views
  → development/databases/Oracle/installed/data-dictionary/tab/privs[`dba_tab_privs`, `all_tab_privs` and `user_tab_privs`].

}
{ Object names #ora-obj-name

  Every object has a name.

  All names must be unique within an → development/databases/Oracle/objects/_namespace[object namespace].

  The maximum length of the name is 128 bytes if `→ development/databases/Oracle/adminstration/init-parameters/compatible` is set to at least `12.2.0` and 30 bytes otherwise.

  If names are unquoted, they are silently converted to uppercase. Thus, the following two statements are considered equal:
code {
SELECT col_a, col_b from TAB;
SELECT COL_A, COL_B from TAB;
code }

  Names can be quoted with double-apostrophes. Quoted names are case sensitive and allow for funny characters:
code {
create table "The bad & the ugly!" ("x/y" number, "20% rule" varchar2(10));
code }

  Object names should not start with either `SYS_` or `ORA_` because `SYS_*` is used objects implicitely created by Oracle and `ORA_` is used for Oracle supplied objects.

  An object (except a → development/databases/Oracle/objects/tables/types/temporary/private[private temporary table]) whose name starts with the prefix which is specified for
  → development/databases/Oracle/objects/tables/types/temporary/private[private temporary tables] (i. e. the value of the init
  parameter `→ development/databases/Oracle/adminstration/init-parameters/private_temp_table_prefix`) results in the error message
  → development/databases/Oracle/errors/ORA-32463_cannot-create-an-object-with-a-name-matching-private-temporary-table-prefix.

}
sa:

  Definitions of an object can be extracted as → development/databases/Oracle/SQL/DDL[DDL statements] or → development/XML/DOM/nodes/document[XML documents] using the
  → development/databases/Oracle/installed/packages/dbms/metadata[`dbms_metadata`] package.
  -
  Metadata of Oracle objects can be described in → development/databases/Oracle/installed/packages/dbms/metadata_diff#dbms_metadata_diff-SXML[SXML].

  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/utldtree_sql[`$ORACLE_HOME/rdbms/admin/utldtree.sql`] creates tables and views that show dependencies between objects.

  Renaming objects (tables, views, sequences and private → development/databases/Oracle/objects/synonyms[synonyms]) with the → development/databases/Oracle/SQL/statement/verbs/rename[SQL verb `rename`].

  The → development/databases/Oracle/SQL/DDL[DDL statement] to (re-)create an object can be obtained with
  → development/databases/Oracle/installed/packages/dbms/metadata/api/get/ddl[`dbms_metadata.get_ddl`].

  → development/databases/Oracle/installed/packages/dbms/utility/name_resolve[`dbms_utility.name_resolve`]

  → development/databases/Oracle/installed/data-dictionary/ind/columns/columns-of-index[Show columns of an index]

  → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client/OracleCommand/ExecuteNonQuery#odac-OracleCommand-ExecuteNonQuery-install-db-obj[Installing database objects] with
  → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client/OracleCommand/ExecuteNonQuery[`ExecuteNonQuery()`] of
  → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client/OracleCommand[`Oracle.DataAccess.Client.OracleCommand`].
  
  Manipulation of Objects can be tracked with
  SQL execution can be tracked with → development/databases/Oracle/SQL/statement/execution[auditing].
