$ Oracle: MLE Modules
@ MLE module

An MLE module persists a JavaScript module in the database (and is thus different from the dynamic execution of a transient piece of code executed with
`→ development/databases/Oracle/installed/packages/dbms/mle`).

{ Creating an MLE module

  Create a MLE module with a JavaScript function (`js_proc`) and export the function:
code {
create or replace mle module tq84_mle_module
  language javascript
as

  function js_proc() {
     console.log('js_proc was called');
  }

  export {
     js_proc
  }

/
code }

Add a → development/databases/Oracle/PL-SQL interface to the exported JavaScript function:
code {
create or replace procedure plsql_proc
   → development/databases/Oracle/PL-SQL/authid definer
as
   mle module tq84_mle_module
   signature 'js_proc()';
/
code }

Call the PL/SQL procedure. When executed in → development/databases/Oracle/SQL-Plus or → development/Software/Oracle-SQL-Developer, the → development/databases/Oracle/SQL-Plus/set/serveroutput[`serveroutput`] SQL*Plus option must be on to see the output (as
apparently, under the hood, `console.log` is routed to `→ development/databases/Oracle/installed/packages/dbms/output`).
code {
set serveroutput on

begin
   plsql_proc;
end;
/
code }

If the attempt to execute `plsql_proc` throws the error message → development/databases/Oracle/errors/ORA-01031_insufficient-privileges, the executing user might lack the `execute`
→ development/databases/Oracle/security/privileges[privelege] on `javascript`. This privilege can be by someone with the necessary rights like so:
code {
grant execute on javascript to rene;
code }

Querying the → development/databases/Oracle/installed/data-dictionary for information peratinging the newly created MLE module…
code {
select *
from
   → development/databases/Oracle/installed/data-dictionary/mle/modules[user_mle_modules]
where
   module_name = 'TQ84_MLE_MODULE';
code }

… and the JavaScript source code …
code {
select *
from
   → development/databases/Oracle/installed/data-dictionary/source[user_source]
where
   type = 'MLE MODULE' and
   name = 'TQ84_MLE_MODULE';
code }

… and the information about the PL/SQL interface:
code {
select *
from
   user_mle_procedures
where
   object_name = 'PLSQL_PROC';
code }



}
{ Executing SQL with mle-js-oracledb

  It's possible to execute → development/databases/Oracle/SQL/statement[SQL statements] from JavaScript by importhing the `mle-js-oracledb` module: 
code {
create or replace mle module tq84_sql_example language javascript as

import oracledb from "mle-js-oracledb";

function print_objs_of_type_js(obj_type) {

   if (obj_type === undefined) {
      throw "obj_type is undefined";
   }

   try {
     let connection = oracledb.defaultConnection();

     const result = connection.execute(`
        select
           object_name,
           created
        from
           → development/databases/Oracle/installed/data-dictionary/objects[user_objects]
        where
           lower(object_type) = lower(:t)`,
        [ obj_type ],
        { outFormat: oracledb.OUT_FORMAT_OBJECT }
     );

     for (let row of result.rows) {
         console.log(`${row.OBJECT_NAME} (${row.CREATED})`);
     }

   }
   catch (e) {
      console.error(`an error occurred while processing the query: ${e.message}`);
   }
}

export { print_objs_of_type_js };
/
code }

  Note, the previous code block might show the *Enter Binds* dialog when executed with `ctrl+enter` in → development/Software/Oracle-SQL-Developer because the
  → development/databases/Oracle/SQL/statement/bind-variables `:t` does not occur in a PL/SQL string and SQL developer wants to privide a value for the variable.
  -
  Therefore, in this case, the code should be executed with `F5`.

  The PL/SQL wrapper for the JavaSCript code:
code {
create or replace procedure print_objs_of_type(obj_type varchar2)
   authid definer
as
   mle module tq84_sql_example
   signature 'print_objs_of_type_js(string)';
/
code }

  Calling the wrapper:
code {
begin
    print_objs_of_type('procedure');
end;
/
code }

  See also → https://oracle-samples.github.io/mle-modules/docs/mle-js-oracledb/23c/[MLE SQL Driver (mle-js-oracledb)]


}
{ Required privileges

  In order to execute `plsql_proc`, the following privilege must be granted, otherwise, Oracle throws → development/databases/Oracle/errors/ORA-01031_insufficient-privileges:
code {
grant execute on javavascript to … ;
code }

}

sa:
  An → development/databases/Oracle/objects/mle/environments stores metadata that complements an MLE module.
