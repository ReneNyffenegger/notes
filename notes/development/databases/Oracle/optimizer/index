$ Oracle Optimizer
@ optimizer

When an → development/databases/Oracle/SQL/statement[SQL statement] is submitted to Oracle, the optimizer evaluates different plans how this SQL statement might be executed.
For each plan, the optimizer estimates how much resources it needs to execute the statement. This resource estimation
is called *cost* of the plan. The optimizer then chooses the plan with the lowest cost.

An essential part of such a query optimization is to determine the order and methods with which → development/databases/Oracle/SQL/join[joins] are executed.
-
The → development/databases/Oracle/SQL/hints[`leading` hint] can be used to influence the chosen order.

In order to estimate the costs, the optimizer needs → development/databases/Oracle/optimizer/statistics[optimizer statistics].

The optimizer is sometimes also referred to by (its legacy name) *cost based optimizer* (CBO) to distinguish it from the *rule based optimizer* (RBO).


{ Influencing and supporting the optimizer

  The optimizer is influenced by
    • → development/databases/Oracle/adminstration/init-parameters/index[Initialization parameters]
    • Table and index → development/databases/Oracle/optimizer/statistics/gathering[statistics gathered] by → development/databases/Oracle/installed/packages/dbms/stats[`dbms_stats`]
    • SQL profiles
    • → development/databases/Oracle/SQL/statement/execution/plan/management[SQL plan management] / stored outlines
    • → development/databases/Oracle/SQL/hints[SQL hints]

? If the optimizer generates questionable plans, using one of the following tools might help improve it:
    • SQL Performance Analyzer
    • SQL Tuning Advisor

}
{ Query transformations #ora-optimizer-qry-tran

  For achieving better → development/databases/Oracle/SQL/statement/execution/plan[execution plans], the optimizer might choose to *transform* a query.

  Available transformation techniques include
  table { ll
    OR-expansion ☰ `where tab.col_1 = 'foo' or tab.col_2 = 'bar'`  -> `where tab.col_1 = 'foo' … UNION ALL … where tab.col_2 = 'bar'`
    Simple view merging ☰ Merging *select-project-join* views
    Complex view merging ☰ Merging views that contain `group by` and `distinct` clauses
    Predicate pushing ☰ Push a predicate that is formulated on the outer query into the inner query.
    → development/databases/Oracle/optimizer/features/subquery/unnesting[Subquery unnesting] ☰ Transform a → development/databases/Oracle/SQL/select/subquery into a → development/databases/Oracle/SQL/join operation.
    Query rewriting ☰ Use a → development/databases/Oracle/objects/views/materialized to improve performance of a query
    Star tranformation ☰ Avoid full table scans of fact tables in a star schema.
    In-memory aggregation (vector group by) ☰
    Cursor duration temporary tables ☰ Temporarily store result of a query blocks that are used multiple times. See also the → development/databases/Oracle/SQL/clauses/with[`with` clause]. 
    Table expansion ☰ See also the `expand_table` → development/databases/Oracle/SQL/hints[hint]
    Join factorization ☰  Factorize common computations from branches of a → development/databases/Oracle/SQL/select/set-operators/union/all[`union all`] query.
  table }


}
{ Features #ora-optimizer-features

  The value of `→ development/databases/Oracle/adminstration/init-parameters/optimizer/features_enable` (which corresponds to a relase) determines which features are enabled
  table { ll
    ☰ Release
    Adaptive cursor sharing ☰ 11.1.0.6
    Join predicate pushdown ☰ 11.1.0.6
    Use extended statistics to estimate selectivity ☰ 11.1.0.6
    Use native implementation for full outer joins ☰ 11.1.0.6
    Partition pruning using join filtering ☰ 11.1.0.6
    Group by placement optimization ☰ 11.1.0.6
    Null aware antijoins ☰ 11.1.0.6
    Join predicate pushdown ☰ 11.1.0.6
    Join Factorization ☰ 11.2.0.1
    Cardinality Feedback ☰ 11.2.0.1
    → development/databases/Oracle/optimizer/features/subquery/unnesting[Subquery Unnesting] ☰ 11.2.0.1
    Subquery Coalescing ☰ 11.2.0.1
    Table Expansion ☰ 11.2.0.1
    Filtering Join Elimination ☰ 11.2.0.1
    Dynamic statistics enhancements ☰ 11.2.0.4
    → development/databases/Oracle/optimizer/adaptive[Adaptive Query Optimization] ☰ 12.1.0.1
    Online statistics gathering for bulk loads ☰ 12.1.0.1
    Session level statistics for Global Temporary Tables ☰ 12.1.0.1
    Multi-table left outer joins ☰ 12.1.0.1
    Lateral views ☰ 12.1.0.1
    Batch table access by rowid ☰ 12.1.0.1
    Null accepting semi joins ☰ 12.1.0.1
    Scalar subquery unnesting ☰ 12.1.0.1
    Conversion of joins that produce unnecessary duplicates to semi-joins ☰ 12.1.0.1
    Parallel Union and Parallel Union All operations ☰ 12.1.0.1
    Enhance Auto DOP ☰ 12.1.0.1
    Approximate count distinct ☰ 12.1.0.2
    Support for Oracle Database In-Memory ☰ 12.1.0.2
    Group-by and aggregation elimination ☰ 12.1.0.2
    Query rewrite for approximate query processing ☰ 12.2.0.1
    Statistics advisor ☰ 12.2.0.1
    Support for sharded databases ☰ 12.2.0.1
    Expression tracking ☰ 12.2.0.1
    Space-saving algorithm for partition synopses ☰ 12.2.0.1
    Oracle In-Memory Database statistics ☰ 12.2.0.1
    Support for sharding ☰ 12.2.0.1
    Cost-based OR expansion ☰ 12.2.0.1
    Sub-query elimination ☰ 12.2.0.1
    Multi-column key join elimination ☰ 12.2.0.1
    SQL Quarantine ☰ 19c
    Gathering and use of real-time statistics ☰ 19c
    Use of automatic indexes ☰ 19c
    WITH clause filter predicate pushdown ☰ 21c
    Number of distinct value (NDV) modeling for real time statistics ☰ 21c
  table }

}
{ Misc

  The optimizer knows that `sys.dual` is a single-row table.

}

sa:
  `→ development/databases/Oracle/SQL-Plus/set/autotrace[set autotrace] on explain` in → development/databases/Oracle/SQL-Plus.

  → development/databases/Oracle/optimizer/trace[Tracing the optimizer], for example with
   → development/databases/Oracle/adminstration/init-parameters/event/list[events] 10053 and 10054:
code {
alter session set events '10053 trace name context forever';
code }

  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/catost_sql[`$ORACLE_HOME/rdbms/admin/catost.sql`]

  Some auxiliarey *system statistics* are stored in → development/databases/Oracle/installed/data-dictionary/base-tables/aux_stats[`aux_stats$`],
  compare with → development/databases/Oracle/installed/packages/dbms/stats/api/nouns/stats/system/gather[`dbms_stats.gather_system_stats`].
