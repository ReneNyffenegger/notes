$ Oracle optimizer
@ optimizer

When an → development/databases/Oracle/SQL/statement[SQL statement] is submitted to Oracle, the optimizer evaluates different plans how this SQL statement might be executed.
For each plan, the optimizer estimates how much resources it needs to execute the statement. This resource estimation
is called *cost* of the plan. The optimizer then chooses the plan with the lowest cost.

In order to estimate the costs, the optimizer needs → development/databases/Oracle/optimizer/statistics[optimizer statistics].

The optimizer is influenced by
  • → development/databases/Oracle/adminstration/init-parameters/index[Initialization parameters]
  • Table and index statistics gathered by → development/databases/Oracle/installed/packages/dbms/stats[`dbms_stats`]
  • SQL profiles
  • SQL plan management / stored outlines
  • → development/databases/Oracle/SQL/hints[SQL hints]

The optimizer is sometimes also referred to by (its legacye name) *cost based optimizer* (CBO) to distinguish it from the *rule based optimizer* (RBO).

{ Features # ora-optimizer-features

  table { ll
    Adaptive cursor sharing ☰
    Join predicate pushdown ☰
    Use extended statistics to estimate selectivity ☰
    Use native implementation for full outer joins ☰
    Partition pruning using join filtering ☰
    Group by placement optimization ☰
    Null aware antijoins ☰
    Join predicate pushdown ☰
    Join Factorization ☰
    Cardinality Feedback ☰
    Subquery Unnesting ☰
    Subquery Coalescing ☰
    Table Expansion ☰
    Filtering Join Elimination ☰
    Dynamic statistics enhancements ☰
    All optimizer features listed in Table 2-6 ☰
    Adaptive Query Optimization ☰
    Online statistics gathering for bulk loads ☰
    Session level statistics for Global Temporary Tables ☰
    Multi-table left outer joins ☰
    Lateral views ☰
    Batch table access by rowid ☰
    Null accepting semi joins ☰
    Scalar subquery unnesting ☰
    Conversion of joins that produce unnecessary duplicates to semi-joins ☰
    Parallel Union and Parallel Union All operations ☰
    Enhance Auto DOP ☰
    Approximate count distinct ☰
    Support for Oracle Database In-Memory ☰
    Group-by and aggregation elimination ☰
    Query rewrite for approximate query processing ☰
    Statistics advisor ☰
    Support for sharded databases ☰
    Expression tracking ☰
    Space-saving algorithm for partition synopses ☰
    Oracle In-Memory Database statistics ☰
    Support for sharding ☰
    Cost-based OR expansion ☰
    Sub-query elimination ☰
    Multi-column key join elimination ☰
    SQL Quarantine ☰
    Gathering and use of real-time statistics ☰
    Use of automatic indexes ☰
    WITH clause filter predicate pushdown ☰
    Number of distinct value (NDV) modeling for real time statistics ☰
  table }

}

sa:
  `→ development/databases/Oracle/SQL-Plus/set/autotrace[set autotrace] on explain` in → development/databases/Oracle/SQL-Plus.

   → development/databases/Oracle/adminstration/init-parameters/event/list[Events] 10053 and 10054:
code {
alter session set events '10053 trace name context forever';
code }

  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/rdbms/admin/catost_sql[`$ORACLE_HOME/rdbms/admin/catost.sql`]
