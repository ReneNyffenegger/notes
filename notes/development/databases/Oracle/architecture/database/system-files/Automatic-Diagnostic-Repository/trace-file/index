$ Oracle: trace file

{ Enabling/disabling trace files

code {
→ development/databases/Oracle/SQL/statement/nouns/system/alter[alter system]  set → development/databases/Oracle/adminstration/init-parameters/event[event] = '…' /* set init-parameter named 'event'          */ ;
→ development/databases/Oracle/SQL/statement/nouns/system/alter[alter system]  set events '…'  /* Note the plural and 'missing' equal sign  */ ;
alter session set events '…'                                                  ;

exec dbms_system.set_ev(…);

exec → development/databases/Oracle/installed/packages/dbms/monitor/session_trace_[dbms_monitor.session_trace_enable]
exec dbms_monitor.session_trace_disable
code }

code {
SQL>  → development/databases/Oracle/tools/oradebug/event[oradebug event]
code }
}

{ Abbreviations

  table { lll

    ad       ☰        ☰ Address of cursor
    c        ☰        ☰ Elapsed time for call in μs (± 10,000 μs)
    card     ☰ `STAT` ☰ Number of records that a *row source* is expected to produce (cardinality). Compare with actual real produced number in `cnt`.
    cr       ☰        ☰ Number of → development/databases/Oracle/architecture/database/logical-structures/data-block[blocks] read from → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache[buffer cache] using *consisten read* (aka consistent mode?)
    cnt      ☰ `STAT` ☰ Number of records produced by a *row source*. Compare with `card`.
    cu       ☰        ☰ number of blocks read using *current mode*
    dep      ☰        ☰ if > 0: child (dependent) SQL
    e        ☰        ☰ elapsed time in μs (± 1 μs)
    ela      ☰ `WAIT` ☰ elapsed time
    hv       ☰        ☰ hash-value of SQL statement
    len      ☰        ☰
    nam      ☰ `WAIT` ☰ 
    mis      ☰        ☰ (Number of?) → development/databases/Oracle/architecture/instance/SGA/Shared-Pool/library-cache[Library cache] misses. (Always either 0 or 1?)
    oct      ☰        ☰ Oracle command type
    op       ☰        ☰ → development/databases/Oracle/optimizer[Optimizer] goal. 1: all, 2: first, 3: rule, 4: choose
    p        ☰        ☰ number of blocks read using OS call (p = physical reads)
    pr       ☰ `STAT` ☰ Physical reads
    p1,p2,p3 ☰ `WAIT` ☰ 
    plh      ☰        ☰ plan-hash
    sqlid    ☰        ☰
    tim      ☰        ☰ an ever increasing point in time (μs)
    uid      ☰        ☰ → development/databases/Oracle/users-roles/users[User] id

  table }

  { STAT #ora-trace-file-STAT

   `STAT` lines show *row source* statistics. `pid` points to a row source's consumer (parent) that is identified by `id`. Thus, the `STAT` lines allow to
    re-assemble the development/databases/Oracle/SQL/statement/execution/plan[execution plan] and to find *hot spots* in it.
    

  }
  { XCTEND

    End of a → development/databases/Oracle/architecture/transaction:
      • `rlbk=0`: commit, `rlbk=1`: rollback
      • `rd_only=0`: no transaction started, `rd_only=1`: a transaction had already begun

  }

  TODO:
   • → https://hoopercharles.wordpress.com/2010/01/26/10046-extended-sql-trace-interpretation-2/[This link (Charles Hooper)] seemed to be only one with an explanation on *FETCH* calls.
   • → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin/trcsess[`trcsess`] 
   • → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin/tkprof[`tkprof`] 

}
{ TODO: Events that might be set

  Set event 10235 to level 1.
code {
alter session set events '10235';
code }

Reveal optimizer statistics after SQL statement parsing.
code {
alter session set events '10053 trace name context forever';
alter session set events 'trace[rdbms.SQL_Optimizer.*]';
alter session set events 'trace[rdbms.SQL_Optimizer.*][sql_id:012345689abc]';
code }

code {
alter session set events 'trace[sql_execution]';
code }

code {
alter session set events '10046 level 12';
alter session set events 'sql_trace level 12';
alter session set events 'sql_trace wait=true, plan_stat=never';
alter session set events 'sql_trace [sql_id:012345689abc] wait=true, plan_stat=never';
alter session set events 'sql_trace off';
code }
See → development/databases/Oracle/tools/oradebug/doc/event/name/sql_trace[`oradebug doc event name sql_trace`] for usage.
-
Compare with the → development/databases/Oracle/adminstration/init-parameters/sql_trace[init parameter `sql_trace`].

code {
alter session set events '[SQL_COMPILER.*] disk=highest';

--  For a specific sql_id:
alter session set events '[SQL_COMPILER.012345689abc] disk=highest';
code }

Disable invoking the action after 1234 events:
code {
alter session set events '10046 trace name context level 12, lifetime 1234';
code }

Skip first 500 events:
code {
alter session set events '10046 trace name context level 12, lifetime 1234, after 500 occurrences';
code }

code {
alter session set events '60 trace name hanganalyze level 4';
code }

code {
alter session set events q'{60 trace           -
name hanganalyze_global level   4, forever;    -
name systemstate        level 266, lifetime 1; -
name processstate       level   2, forever}';
code }

code {
alter session set events 'deadlock trace name hanganalyze_global';
code }

code {
alter system  set events   'immediate trace name GWM_TRACE level 7';
alter system  set event  = '10798 trace name context forever, level 7' scope=spfile;
alter system  set events   'trace[progint_appcont_rdbms]'
alter system  set events   'trace[sess_signature] disk highest';
alter session set events   'trace[rdbms.SQL_Optimizer.*]';
alter session set events   'trace[rdbms.SQL_Optimizer.*] [sql:6kdz5a5c427qd]' /* sql:6kdz5a5c427qd restricts event to SQL id */;
alter session set events   'trace[krb.*]';
code }

Force a crash after a `commit` (→ https://tanelpoder.com/posts/what-caused-this-wait-event/[Tanel Poder]):
code {
create table xyz(a number);
alter session set events 'wait_event["log file sync"] crash()';
insert into xyz values (1);
commit;
code }

code {
alter session set events 'wait_event["db file sequential read"] trace("stack is: %\n", shortstack())';
code }

  Found → https://joordsblog.vandenoord.eu/2013/05/oracle-tracing-and-events-oradebug.html[here]:
code {
alter session set events 'trace[RDBMS.SQL_Transform] [SQL: 32cqz71gd8wy3] disk=high RDBMS.query_block_dump(1) processstate(1) callstack(1)';
code }

code {
alter session set events 'wait_event[all] trace(''event="%" ela=% p1=% p2=% p3=%\n'', evargs(5), evargn(1), evargn(2), evargn(3), evargn(4))';
code }

  (Invalid) components.
code {
alter session set events 'trace [invalid_component]';
ORA-49100: Failed to process event statement [trace [invalid_component]]
ORA-48904: String [INVALID_COMPONENT] is not a valid component name
code }
  Valid components can be found using → development/databases/Oracle/tools/oradebug/doc/component[`oradebug doc component`].

  Remove (global) events:
code {
alter session set event = '…' scope spfile;
shutdown immediate
startup
show parameter event
…
alter system reset event scope = spfile sid='*';  
shutdown immediate
startup
code }

  Specify level in hexadecimal notation:
code {
alter system set events = '39089 trace name context forever, level 0x300' 
SCOPE = spfile; 
code }


  Trace *plan management*:
code {
exec dbms_spm.configure(‘spm_tracing’,1);
select parameter_name, parameter_value from sys.smb$config;
code }

Termininating the current → development/databases/Oracle/architecture/session:
code {
alter session set events 'immediate crash';
ORA-03113: end-of-file on communication channel
Process ID: 9312
Session ID: 63 Serial number: 25232
code }

  Other *immediate* actions:
code {
alter session set events 'immediate eventdump(session)';
alter session set events 'immediate eventdump(system)' ;
code }

Dump → development/databases/Oracle/architecture/database/files/control[control file]
code {
alter session set events 'immediate trace name controlf level 10';
code }

Dump file headers:
code {
alter session set events 'immediate trace name file_hdrs level 10'
code }

Dump redo log headers
code {
alter session set events 'immediate trace name redohdr level 10';
code }

Dump system state:
code {
alter session set events 'immediate trace name systemstate level 10';
code }

code {
alter session set events 'immediate trace(10046)';
code }

Specify parameters for events (for example: trace *in memory* and use *high resulution timer*):
code {
alter session set events 'trace[sql_mon.*] memory=high, get_time=highres';
code }

Use `|` to set a combination of events:
code {
alter system set events 'trace[
  sql_mon |
  sql_optimizer.*
] {
  process: pname = p000 |
  process: pname=p005
}';
code }

code {
alter session set events '10046 leve 12';
ORA-49100: Failed to process event statement [10046 leve 12]
ORA-49104: [LEVE] is not a valid argument for event [kg_event]
code }


 ???
code {
alter system set events 'sql_trace {process : pname = dw | pname = dm} level=12'
alter system set event ='sql_trace [sql:6kdz5a5c427qd] level=12' scope=spfile;
alter system set event ='sql_trace [sql:6kdz5a5c427qd] off';
code }

 { heapdump

code {
alter session set events 'immediate trace name heapdump level n';
code }

  level:
  table { lll
    Summary ☰ Detail ☰ Heap
    1 ☰ 1025 ☰ PGA
    2 ☰ 2050 ☰ SGA
    4 ☰ 4100 ☰ UGA
    8 ☰ 8200 ☰ CGA - Current call
    16 ☰ 16400 ☰ CGA - User call
    32 ☰ 32800 ☰ Large Pool
  table }

  }

  { immediate vs number

  With `immediate`, the desired event is executed immediatly:
code {
alter session set events 'immediate trace name buffers level 10'; 
code }

 However, when using an (error) number, the event is triggered when the specified error is encountered in a session:
code {
alter session set events '600 trace name buffers level 10'; 
code }
  
  }

  { Using oradebug

code {
oradebug setmypid
oradebug event 942
code }

   Show events that are traced in «my» session:
code {
oradebug eventdump session
code }

code {
→ development/databases/Oracle/tools/oradebug/doc/event[oradebug doc event]
code }

  }

}
{ Other TODOs

code {
begin
  dbms_sqldiag.dump_trace('6kdz5a5c427qd');
end;
code }

code {
expdp userid=rene schemas=rene trace=480300
code }

  Trace = `xxx` specifies a hexadecimal value which is a combination of the following flags:
  table { rl
   `10300`   ☰ SHDW: To trace the Shadow process (API) (expdp/impdp)
   `20300`   ☰ KUPV: To trace Fixed table
   `40300`   ☰ 'div' To trace Process services
   `80300`   ☰ KUPM: To trace Master Control Process (MCP,DM)
   `100300`  ☰ KUPF: To trace File Manager
   `200300`  ☰ KUPC: To trace Queue services
   `400300`  ☰ KUPW: To trace Worker process(DW)
   `800300`  ☰ KUPD: To trace Data Package
   `1000300` ☰ META: To trace Metadata Package
   `1FF0300` ☰ 'all' To trace all components(full tracing)
 table }

}

sa:

  Trace files are written to the → development/databases/Oracle/architecture/database/system-files/Automatic-Diagnostic-Repository[Automatic Diagnostic Repository (ADR)].
  -
  Trace files that are currently available in the ADR are listed in → development/databases/Oracle/installed/dynamic-performance-views/diag/trace_file[`v$diag_trace_file`]. Their content can be queried
  from → development/databases/Oracle/installed/dynamic-performance-views/diag/trace_file/contents[`v$diag_trace_file_contents`].

  → development/databases/Oracle/installed/packages/dbms/sqltune/api/select_sql_trace[`dbms_sqltune.select_sql_trace`] reads a
  → development/databases/Oracle/architecture/database/system-files/Automatic-Diagnostic-Repository/trace-file[trace file] and returns the found → development/databases/Oracle/SQL/statement[SQL statements] as an `sqlset_row`.

  → development/databases/Oracle/adminstration/trace-file-analyzer

  → development/databases/Oracle/SQL/statement/execution#ora-sql-exec-tracing

  The two sql scripts → development/databases/Oracle/SQL-Plus/sqlpath/tracefile[`tracefile.sql`] and
  → development/databases/Oracle/SQL-Plus/sqlpath/find-trace-file[`find-trace-file.sql`]

  → development/Software/Oracle-SQL-Developer allows to format a trace file with the menu → development/Software/Oracle-SQL-Developer/GUI/menu/File/Open[File -> Open]

  The → development/databases/Oracle/adminstration/init-parameters[init parameters]
    → development/databases/Oracle/adminstration/init-parameters/tracefile_identifier[`tracefile_identifier`] and
    → development/databases/Oracle/adminstration/init-parameters/sql_trace[`sql_trace`].

  → development/databases/Oracle/installed/data-dictionary/enabled/traces[`dba_enabled_traces` / `cdb_enabled_traces`]

  Using event 1722 to find an offending SQL statement that causes an → development/databases/Oracle/errors/ORA-01722_invalid-number error.

  → development/databases/Oracle/tools/oradebug/tracefile_name[`oradebug tracefile_name`]
   
  → development/databases/Oracle/architecture/instance/fixed-tables/dbg/tf/view

  The function → development/databases/Oracle/installed/packages/dbms/system/api/ksdwrt[`dbms_system.ksdwrt`] writes messages into trace files or into the *alert log*.
