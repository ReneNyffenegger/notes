$ Oracle Program Global Area
@ PGA

The PGA is (non-shared) memory that is used by → development/databases/Oracle/architecture/processes/server[server] (and
→ development/databases/Oracle/architecture/processes/background[background]?) → development/databases/Oracle/architecture/processes[processes].

{ Instance PGA

  Each process has its own PGA, the entirety of all PGAs in an instance is referred to as *instance PGA*.

  → development/databases/Oracle/adminstration/init-parameters[Initialization parameters] related to the PGA set the size of the
  instance PGA, not the size of the processes' PGA.

  Because the memory of a process' PGA is not shared between processes, there is no need to protect its data structures with → development/databases/Oracle/architecture/instance/SGA/latch[latches].

}
{ Components of a PGA

  A PGA consists of
    • Stack space (session variables, arrays …)
    • Hash area (for → development/databases/Oracle/SQL/join/hash[hash joins])
    • Bitmap merge area (to merge data from scans of multiple bitmap indexes, compare with the → development/databases/Oracle/SQL/statement/execution/plan/operations/bitmap/merge plan operation)
    • User Global Area (→ development/databases/Oracle/architecture/instance/UGA) (in dedicated server environments)
    • → development/databases/Oracle/architecture/instance/PGA/SQL-work-areas[SQL work areas],  used by → development/databases/Oracle/SQL/select/group-by[`group by`] and → development/databases/Oracle/SQL/select/order-by[`order by`]
    • → development/databases/Oracle/architecture/session[Session] memory (Logon information)
    • → development/databases/Oracle/architecture/instance/PGA/private-SQL-area[Private SQL area] (Values of → development/databases/Oracle/SQL/statement/bind-variables[bind variables], session specific information for processing etc.)
    • → development/databases/Oracle/SQL/data-types/lob#ora-lob-3-types[Temporary LOBs]

  In shared server environments (as opposed to non-dedicated server environments), the UGA moves into the → development/databases/Oracle/architecture/instance/SGA/Large-Pool because multiple clients share the
  same → development/databases/Oracle/architecture/processes/server[server process].

}
{ Queries

  { PGA statistics

code {
select
   name,
   case when unit = 'bytes' then round(value / power(1024, 2),2) else value end value,
   case unit 
        when 'bytes'   then 'MB'
        when 'percent' then '%'
        else  unit
   end unit,
   con_id
from
   → development/databases/Oracle/installed/dynamic-performance-views/pga/stat[v$pgastat]
order by
   name;
code }

  Names that are found with this query are
    • MGA allocated (under PGA)
    • PGA memory freed back to OS
    • aggregate PGA auto target
    • aggregate PGA target parameter
    • bytes processed
    • cache hit percentage
    • extra bytes read/written
    • global memory bound
    • max processes count
    • maximum MGA allocated
    • maximum PGA allocated
    • maximum PGA used for auto workareas
    • maximum PGA used for manual workareas
    • over allocation count
    • process count
    • recompute count (total)
    • total PGA allocated



  }
  { Size of PGA and UGA #size-PGA-UGA

    → development/databases/Oracle/installed/dynamic-performance-views/sesstat[`v$sesstat`] and
    `→ development/databases/Oracle/installed/dynamic-performance-views/process` allow to query (among many other values) the memory usage of the PGA:
code {
select
    s.sid,
    s.username,
    round(max(case when n.name = 'session uga memory'        then value /1024/1024 end), 1) uga_mb,
    round(max(case when n.name = 'session pga memory'        then value /1024/1024 end), 1) pga_mb,
    round(                       p.pga_used_mem                         /1024/1024     , 1) pga_used_mb,
    round(                       p.pga_alloc_mem                        /1024/1024     , 1) pga_alloc_mb,
    round(                       p.pga_freeable_mem                     /1024/1024     , 1) pga_freeable_mb,
    round(max(case when n.name = 'session uga memory max'    then value /1024/1024 end), 1) uga_mb_max,
    round(max(case when n.name = 'session pga memory max'    then value /1024/1024 end), 1) pga_mb_max,
    round(max(case when n.name = 'workarea memory allocated' then value /1024/1024 end), 1) workarea_mb
from
    v$session  s                                 join
    v$sesstat  t on s.sid        = t.sid         join
    v$statname n on t.statistic# = n.statistic#  join
    v$process  p on s.paddr      = p.addr
where
     s.type = 'USER'
     and s.username is not NULL
-- and n.name in ('session pga memory', 'session pga memory max',    'session uga memory', 'session uga memory max')
group by
   s.sid,
   s.username,
   p.pga_used_mem,
   p.pga_alloc_mem,
   p.pga_freeable_mem
;
code }

  }

  { Memory chunks

    The memory chunks of the PGA are selectable from → development/databases/Oracle/architecture/instance/fixed-tables/k/s/m/p/p[`x$ksmpp`] (which has the same structure as 
    → development/databases/Oracle/architecture/instance/fixed-tables/k/s/m/s/p[`x$ksmsp`]).
  
  }

}

sa:
  When executing cartesian joins, the → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache is bypassed and the blocks of the inner table are stored in 
  the PGA, see the → development/databases/Oracle/SQL/statement/execution/plan/operations/buffer/sort[plan operation `BUFFER SORT`].

  → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache#buffer-cache-direct-path

  → development/databases/Oracle/adminstration/memory-management

  → development/databases/Oracle/adminstration/init-parameters[init parameters]:
   • → development/databases/Oracle/adminstration/init-parameters/pga_aggregate/limit[`pga_aggregate_limit`]
   • → development/databases/Oracle/adminstration/init-parameters/pga_aggregate/target[`pga_aggregate_target`]
   • `memory_target`

  `→ development/databases/Oracle/tools/oradebug/dumpvar[oradebug dumpvar pga …]`

 `oradebug → development/databases/Oracle/tools/oradebug/dump/global_area[dump global_area] 1`

  The PGA related columns in → development/databases/Oracle/installed/dynamic-performance-views/process[`v$process`]: `PGA_USED_MEM`, `PGA_ALLOC_MEM`, `PGA_FREEABLE_MEM` and `PGA_MAX_MEM`.
  -
  → development/databases/Oracle/installed/dynamic-performance-views/process/memory/detail[`v$process_memory_detail`] shows PGA related memory information.

 In order to run → development/databases/Oracle/Application-Express[APEX], the SGA must be at least 300 MB. 

 → development/databases/Oracle/installed/dynamic-performance-views/pga/target_advice[`v$pga_target_advice`]

  → development/databases/Oracle/errors/ORA-out-of-process-memory-when-trying-to-allocate_bytes

? The init parameter `_pga_max_size` (as per unpublished note 420968.1) limits the per-process PGA size. The default value is 200 MB.
