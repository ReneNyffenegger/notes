$ Oracle Instance: Startup and shutdown

An → development/databases/Oracle/architecture/instance is started in phases:
  • shutdown (No processes running at all)
  • nomount (instance initialized)
  • mount (→ development/databases/Oracle/architecture/database/files/control opened)
  • open (→ development/databases/Oracle/architecture/database opened)

A shutdown has the same phases in reverse order.

{ Shutdown -> nomount

  The following steps are performed when an idle (shutdown) instance is broght to *nomount*:
    • A → development/databases/Oracle/architecture/database/files/server-parameter-file is searched.
    • The → development/databases/Oracle/architecture/instance/SGA is sized according to the values found in the parameter file
    • The → development/databases/Oracle/architecture/processes/background[background processes] are started
    • The → development/databases/Oracle/architecture/database/system-files/Automatic-Diagnostic-Repository/alert-log is opened

  An instance needs to be in the nomount state to
    • create a new → development/databases/Oracle/architecture/database
    • for some → development/databases/Oracle/adminstration/backup-recovery[backup and recovery] operations

code {
SQ> startup nomount

Total System Global Area 1073738560 bytes
Fixed Size                  9036608 bytes
Variable Size             788529152 bytes
Database Buffers          268435456 bytes
Redo Buffers                7737344 bytes
code }

  `v$sql` is accessible:
code {
set numformat 999999999999999
set lines 10000
set trimspool on
column sql_text format a9000
spool %temp%\sql.txt

select
   lag(to_number(address, 'xxxxxxxxxxxxxxxx')) over (order by first_load_time, address desc) - to_number(address, 'xxxxxxxxxxxxxxxx') addr_diff,
  (sysdate-to_date(first_load_time, 'yyyy-mm-dd/hh24:mi:ss'))*24*60*60 loaded_s_ago,
-- sql_id,
   substr(sql_fulltext, 1, 9000) sql_text
from
   v$sql
order by
   first_load_time,
   address desc;

spool off
code }

  `v$parameter` is also accessible:
code {
select substr(name,1,30), substr(value,1,50) from v$parameter order by name;
code }

  `v$controlfile` is empty:
code {
select * from v$controlfile;
code }

  Only *fixed tables* and *fixed views* can be queried:
code {
select count(*) from user_objects;

ERROR at line 1:
ORA-01219: database or pluggable database not open: queries allowed on fixed tables or views only


select * from → development/databases/Oracle/architecture/instance/fixed-tables/k/c/c/pe;
              *
ERROR at line 1:
ORA-01507: database not mounted
code }

  Some → development/databases/Oracle/architecture/processes/server/index[processes] are already available:
code {
SQL> select ksbdphdl, ksbdpnam, ksbdppri from x$ksbdp where ksbdpser > 0 order by ksbdpnam;

        KSBDPHDL KSBDP KSBDPPRI
---------------- ----- --------
             239 CKPT  Normal
              21 CLMN  Normal
              42 D000  Normal
               8 DBRM  Normal
              75 DBW0  Normal
              23 DIA0  Normal
               6 DIAG  Normal
             328 FENC  Normal
               1 GEN0  Normal
               2 GEN1  Normal
              30 LG00  Normal
              30 LG01  Normal
             237 LGWR  Normal
             271 LREG  Normal
              81 M000  Normal
              74 MMAN  Normal
             346 MMNL  Normal
             345 MMON  Normal
              22 PMAN  Normal
              20 PMON  Normal
              15 PSP0  Normal
             273 PXMN  Normal
             250 RECO  Normal
              41 S000  Normal
             248 SMCO  Normal
             247 SMON  Normal
              14 SVCB  Normal
             176 TMON  Normal
               9 VKRM  Normal
               0 VKTM  Time Cr
code }

  The → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache is empty:
code {
select count(*) from → development/databases/Oracle/architecture/instance/fixed-tables/bh;
0
code }

  There *is* a `dual` table, yet without synonym:
code {
none> select * from dual;

ADDR                         INDX          INST_ID           CON_ID D
---------------- ---------------- ---------------- ---------------- -
00007FF77465A43C                0                1                0 X
code }

  The following statement causes *ORA-01507: database not mounted*:
code {
select * from v$database;
code }

  The following statement returns a record:
code {
select instance_name, startup_time, status, database_status from v$instance;
code }

}
{ Nomount -> mount

  In order to mount a database, the → development/databases/Oracle/architecture/instance opens the
  → development/databases/Oracle/architecture/database/files/control as specified in the
  → development/databases/Oracle/adminstration/init-parameters#control_files[`control_files` init parameter]:
code {
select value from v$parameter where name = 'control_files';
code }

  A mounted database is closed for ordinary users. Only administrators have access to it for a restricted set of operations.

code {
alter database mount;
code }

  The control files are now opened:
code {
select count(*) from v$controlfile;
…
…
code }

  The buffer cache is still empty:
code {
select count(*) from x$bh;
code }

  The data dictionary is not available:
code {
select count(*) from user_objects;

ERROR at line 1:
ORA-01219: database or pluggable database not open: queries allowed on fixed tables or views only
code }


}
{ Mount -> open

  The control file that was opened in the previous step records the locations of the
  → development/databases/Oracle/architecture/database/files/data[data files] and
  → development/databases/Oracle/architecture/database/files/online-redo-log-files[online redo log files] that belong to a
  → development/databases/Oracle/architecture/database. This information is now needed to
  open these files.

  If the instance fails to open one of these files or if the *consistency check* is not successful, the instance will issue an error.
  In this case, → development/databases/Oracle/adminstration/backup-recovery/recovery/media[media recovery] is likely.;

  The steps to open a mounted database are:
    • The *online* data files that belong to a non-→ development/databases/Oracle/architecture/database/logical-structures/tablespace/undo are opened
    • An → development/databases/Oracle/architecture/database/logical-structures/tablespace/undo is acquired
    • The → development/databases/Oracle/architecture/database/files/online-redo-log-files[online redo log files] are opened

  Part of the mount->open process is to execute the DDL statements recorded in `→ development/databases/Oracle/installed/data-dictionary/base-tables/bootstrap`.
  -
  A 10046 → development/databases/Oracle/adminstration/init-parameters/event/list[event] can be used to show the statements executed in the *mount -> open* phase:
code {
alter session set events '10046 trace name context forever, level 12';
alter database open;
alter session set events '10046 trace name context off';
oradebug setmypid
oradebug tracefile_name
code }


  Note: It's also possible to open a database in read only mode.

  When a database is opened, the → development/databases/Oracle/architecture/database/logical-structures/tablespace/SYSTEM[`SYSTEM` tablespace] is always online.

code {
alter database open;
code }

code {
select * from dual;
D
-
X
code }

code {
select open_mode from v$database;
select database_status from v$instance;
code }

}
{ Shutdown

  { Shutdown modes

    A shutdown can be performed with the following modes
      • `shutdown abort` 
      • `shutdown immediate`
      • `shutdown transactional`
      • `shutdown normal`

    In any of these modes, no new connections are possible.
    -
    With `shutdown normal`, the instance waits for all connected users to disconnect and then shuts down.
    -
    With `shutdown transactional`, the instances waits for all active transactions to finish and then shuts down. A session is not allowed to start a new transaction.
    -
    With `shutdown immediate`, the instance terminates any executing SQL statements, rolls transactions back, disconnects users and then shuts down.
    -
    A `shutdown abort` just terminates the instance.

    All shutdown modes except `shutdown abort` perform a → development/databases/Oracle/architecture/processes/background/CKPT/checkpoint. Therefore, after a `shutdown abort`,
    → development/databases/Oracle/adminstration/backup-recovery/recovery/instance is required to startup and reopen a database.

  }

}
{ Availability on v$ views

  Not all → development/databases/Oracle/installed/dynamic-performance-views[`v$` views] are available at the different stages of the startup. For example,
    → development/databases/Oracle/installed/dynamic-performance-views/instance[`v$instance`] or
    → development/databases/Oracle/installed/dynamic-performance-views/bgprocess[`v$bgprocess`] are available when the instance is started, but
    → development/databases/Oracle/installed/dynamic-performance-views/datafile[`v$datafile`] is only available when the database is mounted.

}
sa:
  The value of `ORA_<sid>_SHUTDOWN` in the → Windows/registry/tree-structure/key[registry key] → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/ORACLE/KEY_homename[`HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE\KEY_homename`]

  The → development/databases/Oracle/errors[error messages]
    • → development/databases/Oracle/errors/ORA-01031_insufficient-privileges#ora-01031-start-instance[ORA-01031: insufficient privileges]
    • → development/databases/Oracle/errors/ORA-01034_ORACLE-not-available
    • → development/databases/Oracle/errors/ORA-01219_database-or-pluggable-database-not-open_queries-allowed-on-fixed-tables-or-views-only
    • → development/databases/Oracle/errors/ORA-32004_obsolete-or-deprecated-parameters-specified-for_instance

  The init parameter `_oradebug_cmds_at_startup` specifies which `→ development/databases/Oracle/tools/oradebug` commands are executed at instance startup.

