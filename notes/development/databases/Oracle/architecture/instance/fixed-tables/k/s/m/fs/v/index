$ Oracle: X$KSMFSV
@ x$ksmfsv

Names of variables, address of their value in the → development/databases/Oracle/architecture/instance/SGA, their datatype and size of the datatype.

? *2024-08-15*: It appears that *sys* needs to be connected to a CDB root, not a container, in order for `x$ksmfsv` to return any values.

code {
select   
-- addr addr_hex,
-- to_number(addr    , rpad('x', 16, 'x')) addr,
   ksmfsnam                                variable_name,
   to_number(ksmfsadr, rpad('x', 16, 'x')) address,
   ksmfstyp                                typ,
   ksmfssiz                                siz
from
   x$ksmfsv
order by
   variable_name
;
code }

{ Displaying the value of a variable

  The column `ksmfsadr` can be joined to the column `addr` of `→ development/databases/Oracle/architecture/instance/fixed-tables/k/s/m/mem` which allows determine the value of an SGA variable.
  -
  Note, the returned value is 8 bytes, even if the data type of the variable is different!
code {
select
   var.ksmfsnam                                     var_nam,
   mem.ksmmmval                                     val_hex,
   to_number(mem.ksmmmval, rpad('x', 16, 'x'))      val_dec
from
   x$ksmfsv   var                                   join
   x$ksmmem   mem on var.ksmfsadr = mem.addr
where
   var.ksmfsnam like '%kywmpleq1%'
code }

}
{ SCN number (kcsgscn_)

  Such a variable is for example `kcsgscn_` which stores the *current SCN number*:
code {
select
   to_number(mem.ksmmmval, rpad('x', 16, 'x'))      value,
   vdb.current_scn 
from
   x$ksmfsv   var                                   join
   x$ksmmem   mem on var.ksmfsadr = mem.addr cross  join
   v$database vdb 
where
   var.ksmfsnam = 'kcsgscn_' -- SCN Number  
;
code }

}
{ Latches #ora-ksmfsv-latches

  Many of these variables seem to store the address of *latches* which are exposed in → development/databases/Oracle/architecture/instance/fixed-tables/k/s/l/l/d[`x$kslld`] or
  → development/databases/Oracle/architecture/instance/fixed-tables/k/s/l/l/tr[`x$kslltr`].
code {
select   
-- addr addr_hex,
-- to_number(addr    , rpad('x', 16, 'x')) addr,
   ksmfsnam                                variable_name,
   lld.kslldnam                            lld_name,
   lld.ksllddsp                            lld_description,   
   llt.kslltnam                            llt_name,
   to_number(ksmfsadr, rpad('x', 16, 'x')) address,
   ksmfstyp                                typ,
   ksmfssiz                                siz
from
   x$ksmfsv        var                                    left join
   x$kslld         lld on  var.ksmfsadr = lld.kslldadr    left join
   x$kslltr        llt on  var.ksmfsadr = llt.kslltaddr
where
   coalesce(lld.kslldadr, llt.kslltaddr) is not null
;
code }

}
{ Unix Epoch

 `ksudbrmseccnt_` stores the value of the → development/date-time/Unix-time[Unix epoch] (seconds since January 1st 1970):
code {
select
   date '1970-01-01' + (1/24/60/60) * to_number(mem.ksmmmval, rpad('x', 16, 'x')) as "current time UTC"
from
   x$ksmfsv   var                                   join
   x$ksmmem   mem on var.ksmfsadr = mem.addr
where
   var.ksmfsnam = 'ksudbrmseccnt_'
;
code }
 
}
{ Dumping variable values with oradebug

  → development/databases/Oracle/tools/oradebug[ORADEBUG] allows to print the value of a variable with the → development/databases/Oracle/tools/oradebug/dumpvar[`dumpvar`] command:
code {
oradebug dumpvar kcsgscn
code }

}
{ Datatype (column ksmfstyp)

 `ksmfstyp` shows the type of the variable: Some of these types are basic memory units such as `uword`, `ub4`, `int` etc., others seem to refer to some kind of structs, such as
 `ksllt`, `ksbsa`, `kzxctok` etc. Also seen is `void *`, `size_t`, `oratext *` and many more.

  In the case of the type being `ksllt`, it can be joined to → development/databases/Oracle/architecture/instance/fixed-tables/k/s/l/l/d#kslld-join-ksmfsv[`x$kslld`] to list variables that
  are related to → development/databases/Oracle/architecture/instance/SGA/latch[latches].

}
{ Displaying the value of string variables

  First, we need to determine the addresses of string variables (i. e. where the type of the SGA variable is `oratext *`) we want to display:
code {
select   
   var.ksmfsnam                                variable_name,
   to_number(var.ksmfsadr, rpad('x', 16, 'x')) ptr_to_addr_str,
   to_number(mem.ksmmmval, rpad('x', 16, 'x')) addr_str
from
   x$ksmfsv   var                              join
   x$ksmmem   mem on var.ksmfsadr = mem.addr 
where
   var.ksmfstyp = 'oratext *' -- TODO: or simply 'text *'
order by
   var.ksmfsnam
;
--
-- VARIABLE_NAME      PTR_TO_ADDR_STR   ADDR_STR
-- ------------------ --------------- ----------
-- gwm_spare_sga4_         1611732544          0
-- gwm_spare_sga5_         1611732552          0
-- krbdbutspitr_           1611465072          0
-- ksii2tmap_              1610654608 2471616472
-- ksitypstr_              1610661888 2478881768
-- ksm_ob_path_            1610618736 2551961328
-- ksm_obc_path_           1610618752 2551961360
-- ksm_obh_path_           1610618744 2551961416
-- ksmanotshnm_            1610618664          0
-- ksmanotshnme_           1610618672          0
-- kspstrs_buf_            1610659784 2479164480
-- ksuplsb_                1610648640 2471486880
-- kzekmrsafipspath_       1611553928 2281696384
-- qmhsthdr_               1611675576 2237062784
code }

  We now determine the PID of the main Oracle process …
code {
$ → Linux/shell/commands/ps -ef | → Linux/shell/commands/grep -P "oracle$ORACLE_SID \(" | → development/languages/awk '{ print $2 }'
498
code }

  … so that we can attach to this process with → development/tools/gdb and then to examine its memory at the given string addresses:
code {
$ gdb -p 498
…
(gdb) x/s 2551961328
0x981bd6f0:     "/opt/oracle"
code }

}
{ Speculation about some variables #ora-ksmfsv-speculation

  table { lll
   `gwm_spare_sga4_` ☰ `oratext *` ☰
   `gwm_spare_sga5_` ☰ `oratext *` ☰
   `kcvdbn_` ☰ `text *` ☰ SID?
   `ksetln_` ☰ `text *` ☰ `$ORACLE_HOME/rdbms/mesg/oraus.msb`
   `ksii2tmap_` ☰ `oratext *` ☰
   `ksitypstr_` ☰ `oratext *` ☰ The string `"ABCDEFGHIJKLMNOPQRSTUVWXYZ"`
   `ksm_ob_path_` ☰ `oratext *` ☰ `/opt/oracle` on my current machine
   `ksm_obc_path_` ☰ `oratext *` ☰ Path to Oracle home (?)
   `ksm_obh_path_` ☰ `oratext *` ☰ Path to Oracle home (?)
   `ksmanotshnm_` ☰ `oratext *` ☰
   `ksmanotshnme_` ☰ `oratext *` ☰
   `kspstrs_buf_` ☰ `oratext *` ☰ The string `"_appqos_qt"`. This value is incidentally (?) the first value returned by `select ksppinm from x$ksppi`.
   `ksuplsb_` ☰ `oratext *` ☰
   `kzekmrsafipspath_` ☰ `oratext *` ☰ The path to `→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/lib`
   `qmhsthdr_` ☰ `oratext *` ☰ The string `"MS-Author-Via: DAV\r\nDAV: 1,2,<http://www.oracle.com/xdb/webdav/props>\r\n"`
   `sdalfn_` ☰ `text *` ☰ Path of the alert log file (`$ORACLE_HOME/rdbms/log/alert_FREE.log`)
   `sdscdd_` ☰ `text *` ☰ The cdump file (something like `"/opt/oracle/diag/rdbms/…/…/cdump"`)
   `sdsddd_` ☰ `text *` ☰ Trace directory? (something like `$ORACLE_HOME/rdbms/log`). Compare with `sdsudd_` 
   `sdsudd_` ☰ `text *` ☰ Trace directory? (something like `$ORACLE_HOME/rdbms/log`). Compare with `sdsddd_`

  table }

}

sa:

  → development/databases/Oracle/tools/oradebug:
     • The→ development/databases/Oracle/tools/oradebug/doc/event/action/varaddr[`varaddr`]
     • `dump sga` dumps variable names and their values

  → development/databases/Oracle/architecture/instance/fixed-tables[fixed tables]
