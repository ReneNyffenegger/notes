$ Oracle database buffer cache
@ buffer cache

The *Oracle database buffer cache* is also referred to as *buffer cache*.

The buffer cache stores copies of → development/databases/Oracle/architecture/database/logical-structures/data-block[data blocks] in memory
(the → development/databases/Oracle/architecture/instance/SGA).
These copies are stored in what is called → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache/buffer[buffers] by Oracle.
Naturally, the size of such a buffer equals the data block size.

The buffer cache is shared among all sessions that are connected to an → development/databases/Oracle/architecture/instance.

The goal is to keep frequently used data blocks in the buffer cache in order to improve I/O by having less physical reads or writes.

When a dirty buffer is not used anymore, it is written to disk by the → development/databases/Oracle/architecture/processes/background/DBWn[Database Writer background process].

{ Components of the buffer cache

  The buffer is divided into
    • → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache/default-pool[Default pool] (where blocks are normally buffered)
    • → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache/default-pool/big-table-cache[Big table cache] (optional part of the default pool; uses a temperature based algorithm instead of the LRU based one)
    • Keep pool
    • Recycle pool
    • Non-default buffer pools (One for each nonstandard block sizes of 2, 4, 16 or 32 KB)
    • Database Smart Flash Cache (flash cache)
    • Least Recently Used list (LRU)
    • Checkpoint queue
    • Flash Buffer Area

}
{ Cache hit vs cache miss

  When a database uses needs data, Oracle checks with the buffer cache if the relevant data block is already copied into the buffer cache.
  -
  If this is the case, this is referred to as a *cache hit*.
  -
  If not, this is a *cache miss*. In this case, a copy from the data block needs to be copied into the buffer cache.

}
{ Bypassing the buffer cache with direct path insert and read #buffer-cache-direct-path

  Oracle has the ability to write data into a → development/databases/Oracle/architecture/database/files/data[data file] without first writing them into the buffer cache.
  In such an operation, the data is *appended* behind the *high water mark* (HWM) of a → development/databases/Oracle/objects/tables[table].
  -
  A direct path insert can be performed with NOLOGGING to reduce the amount of → development/databases/Oracle/architecture/database/redo-data[redo] that is generated.

  Similarly, a *direct path read* reads data from a data file directly into the → development/databases/Oracle/architecture/instance/PGA, again bypassing the buffer cache.
  

}


sa:
  Compare with → development/databases/SQL-Server/architecture/memory-management/buffer-cache[SQL Server's buffer cache]

  The *buffer cache* should not be confused with the → development/databases/Oracle/architecture/instance/SGA/redo-log-buffer.

  → development/databases/Oracle/SQL-Plus/sqlpath/ratzeputz[`ratzeputz.sql`]

links:
   Craig Shallahamer's → http://blog.orapub.com/20100922/oracle-database-buffer-cache-visualization-and-tool.html[Buffer Cache Visualization Tool]
