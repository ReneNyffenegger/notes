$ Oracle: Buffer cache
@ buffer cache

The *Oracle database buffer cache* is also referred to as *buffer cache*.

The buffer cache stores copies of → development/databases/Oracle/architecture/database/logical-structures/data-block[data blocks] in memory
(the → development/databases/Oracle/architecture/instance/SGA).
These copies are stored in what is called → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache/buffer[buffers] by Oracle.
Naturally, the size of such a buffer equals the data block size.

The buffer cache is shared among all sessions that are connected to an → development/databases/Oracle/architecture/instance.
-
A notable distinction between the → development/databases/Oracle/architecture/instance/SGA/Shared-Pool (which is also shared globally) and the buffer cache is that the
shared pool primarily caches metadata while the buffer cache stores data.

The goal is to keep frequently used data blocks in the buffer cache in order to improve I/O by having less physical reads or writes.

The buffers in the cache are organized in linked chains under a hash value calculated for the buffer (DB block).
-
The linked list for a given hash is protected by a *cache buffers chains* latch.

When a dirty buffer is not used anymore, it is written to disk by the → development/databases/Oracle/architecture/processes/background/DBWn[Database Writer background process].

{ Components of the buffer cache

  The buffer is divided into
    • → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache/default-pool[Default pool] (where blocks are normally buffered)
    • → development/databases/Oracle/architecture/instance/SGA/database-buffer-cache/default-pool/big-table-cache[Big table cache] (optional part of the default pool; uses a temperature based algorithm instead of the LRU based one)
    • Keep pool
    • Recycle pool
    • Non-default buffer pools (One for each nonstandard block sizes of 2, 4, 16 or 32 KB)
    • Database Smart Flash Cache (flash cache)
    • → #ora-buffer-cache-lru[Least Recently Used list] (LRU)
    • Checkpoint queue
    • Flash Buffer Area

}
{ Least recently used (LRU) list #ora-buffer-cache-lru

  All blocks stored in the buffer cache are on a LRU list.
  -
  When a free buffer is needed, this list is scanned from the LRU end until a non-dirty buffer is found that can be freed.
  -
  When then the block is copied into the newly freed block moves other blocks down the LRU.

  When a block is accessed that is already in the buffer cache, the block is moved up in the LRU list.

  The *cache buffers lru chain* latch is used to serialize operations on the LRU list.

  A → development/databases/Oracle/objects/tables or → development/databases/Oracle/objects/views/materialized can be created with the `cache` attribute.
  -
  → development/databases/Oracle/architecture/database/logical-structures/data-block[Blocks] of «cached» objects that are read into the buffer cache as part of a full table are placed at the most recently used end of the LRU list. Thus, they tend to
  stay longer in the buffer cache. Typically, objects are attributed with `cache` if they're small and used to look up data.

  See also the `tch` (touch) counter in `→ development/databases/Oracle/architecture/instance/fixed-tables/bh`

}
{ Dirty blocks

  A dirty block is a block whose content was modified but is not yet flushed back to the datafile by DBWR.

}
{ Cache hit vs cache miss

  When a database needs data, Oracle checks with the buffer cache if the relevant data block is already copied into the buffer cache.
  -
  If this is the case, this is referred to as a *cache hit*.
  -
  If not, this is a *cache miss*. In this case, a copy from the data block needs to be copied into the buffer cache.

}
{ Bypassing the buffer cache with direct path insert and read #buffer-cache-direct-path

  Oracle has the ability to write data into a → development/databases/Oracle/architecture/database/files/data[data file] without first writing them into the buffer cache.
  In such an operation, the data is *appended* behind the *high water mark* (HWM) of a → development/databases/Oracle/objects/tables[table].
  -
  A → development/databases/Oracle/SQL/DML/insert/paths[direct path insert] can be performed with NOLOGGING to reduce the amount of → development/databases/Oracle/architecture/database/redo-data[redo] that is generated.

  Similarly, a → development/databases/Oracle/installed/dynamic-performance-views/event_name/list/direct-path/read reads data from a data file directly into the → development/databases/Oracle/architecture/instance/PGA, again bypassing the buffer cache.

  See also → development/databases/Oracle/SQL/DML/insert/paths[Conventional path vis direct path loads].

}
{ Emptying the buffer cache

  The buffer cache can be emptied with
code {
→ development/databases/Oracle/SQL/statement/nouns/system/alter#ora-alter-system-flush[alter system flush] buffer_cache;
code }

}
{ Interesting hidden init-parameters

  The values of some interesting (imho) hidden → development/databases/Oracle/adminstration/init-parameters[init parameters] that are related to the buffer cache can be queried with the following query:
code {
select
   par.ksppinm   name,
   par.ksppdesc  description,
   v.ksppstvl    value
from
   x$ksppi  par                      join 
   x$ksppsv v on par.indx = v.indx
where
-- par.ksppinm like '_db_block%'
   par.ksppinm in (
      '_db_block_buffers'               ,
      '_db_block_hash_buckets'          ,
      '_db_block_hash_latches'          ,
      '_db_block_lru_latches'           ,
      '_db_block_max_cr_dba'            ,
      '_db_block_table_scan_buffer_size',
      '_db_blocks_per_hash_latch'
    )
order by
   par.ksppinm;
code }

}
{ TODO

  MOS Note 947152.1 says that the buffer cache minum size is 4MB * num_cpus.

}


sa:
  Compare with → development/databases/SQL-Server/architecture/memory-management/buffer-cache[SQL Server's buffer cache]

  The *buffer cache* should not be confused with the → development/databases/Oracle/architecture/instance/SGA/redo-log-buffer.

  → development/databases/Oracle/SQL-Plus/sqlpath/ratzeputz[`ratzeputz.sql`]

  → development/databases/Oracle/installed/dynamic-performance-views/bh[`v$bh`] and 
  → development/databases/Oracle/architecture/instance/fixed-tables/bh[`x$bh`]

  The → development/databases/Oracle/installed/dynamic-performance-views/event_name#ora-interesting-event-names[events] that are associated with reading buffer into the buffer cache
  include (or are?)
    • `db file scattered read`
    • `db file sequential read`

  → development/databases/Oracle/tools/oradebug/dump/buffers[`oradebug dump buffers`]

  When executing cartesian joins, the buffer cache is bypassed and the blocks of the inner table are stored in 
  the → development/databases/Oracle/architecture/instance/PGA, see the → development/databases/Oracle/SQL/statement/execution/plan/operations/buffer/sort[plan operation `BUFFER SORT`].

 `v$db_cache_advice` (which is populated when the `db_cache_advice` parameter is enabled) shows the simulated miss rates for a range of potential buffer cache sizes (See *MOS Note 148511.1*)

links:
   Craig Shallahamer's → http://blog.orapub.com/20100922/oracle-database-buffer-cache-visualization-and-tool.html[Buffer Cache Visualization Tool]
