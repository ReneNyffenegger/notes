$ Oracle Architecture: Transaction
@ transaction

{ Duration of transactions

  A transaction is implicitely started by any operation that obtains a *TX lock*:
    • → development/databases/Oracle/SQL/DML[DML statements]
    • `select for update` statements
    • Executing `set → development/databases/Oracle/SQL/statement/nouns/transaction`
    • Using `→ development/databases/Oracle/installed/packages/dbms/transaction`

  The transaction is ended
    • explicitely by either executing a `→ development/databases/Oracle/SQL/TCL/commit` or a `rollback` or
    • implicitely ended by executing a → development/databases/Oracle/SQL/DDL[DDL statement]

}

{ Committing a transaction

  When a session wishes to → development/databases/Oracle/SQL/TCL/commit the changes it made, the redo log entries that belong to that transactions and that are still stored in the
  → development/databases/Oracle/architecture/instance/SGA/redo-log-buffer need to be written
  to disk so that is possible to → development/databases/Oracle/adminstration/backup-recovery/recovery[recovery] the transaction.

  This is necessary because the changes might not yet be written to the → development/databases/Oracle/architecture/database/files/data[data files].

  The redo records are written to disk by the → development/databases/Oracle/architecture/processes/background/LGWR[Log Writer process (LGWR)].

  When LGWR writes the redo entries to the → development/databases/Oracle/architecture/database/files/online-redo-log-files, it also assigns
  an → development/databases/Oracle/architecture/transaction/SCN to be able to identify them again.

  When LGWR is finished with everything, it notifies the session that the transaction is now securly safed.

  It should be noted that LGWR, in order to reduce I/O, also writes redo log entries of transactions that have not yet been committed.
  In case of a recovery, these can be rolled back.

}
{ Read-only transactions #ora-trx-read-only

  A transaction can be marked as read only when starting it with `set → development/databases/Oracle/SQL/statement/nouns/transaction[transaction] read only`.

  In a read only transaction, only the following statements are allowed:
    • `select` statements (without the *for update clause*)
    • `lock table`
    • `set role`
    • `alter session`
    • `alter system`

  A read only transaction does not see data that was modified and committed after the transaction was started. This behavior is referred to as
 *transaction-level read consistency*.

  User `SYS` cannot set its transaction to read only.

}
{ Preventing COMMIT or ROLLBACK in PL/SQL procedures

  It is possible to prevent a → development/databases/Oracle/PL-SQL procedure from executing a → development/databases/Oracle/SQL/TCL/commit[`commit`] 
  or → development/databases/Oracle/SQL/TCL/rollback[`rollback`] statement:
code {
→ development/databases/Oracle/SQL/statement/nouns/session#ora-noun-session-enable-disable[alter session disable] → development/databases/Oracle/SQL/statement/nouns/session/alter/disable-enable/commit-in-procedure[commit in procedure];
code }

}
{ Transaction ID #ora-trx-id

  The first → development/databases/Oracle/SQL/DML[DML statement] in a transaction allocates a *transaction ID* which uniquely identifies the transaction.
  -
  The transaction id consists of
    • the undo segment number
    • a (transaction table?) slot
    • a sequence number

  These three numbers can be queried from → development/databases/Oracle/installed/dynamic-performance-views/transaction#ora-vStransaction[`v$transaction`]:
  attributes `xidusn`, `xidslot` and `xidsqn`. The value of `xid` combines these numbers.

  The function `→ development/databases/Oracle/installed/packages/dbms/transaction/api/local_transaction_id` returns these three values separated by a dot.

}


sa:

  In → development/databases/Oracle/PL-SQL, a (non-nested) → development/databases/Oracle/PL-SQL/block[block] can be given the
  → development/databases/Oracle/PL-SQL/pragma/autonomous_transaction[`pragma autonomous_transaction`] which causes this block to
  be executed in its own transaction.

  A → development/databases/Oracle/SQL/DDL[DDL statement] commits the current transaction (but the
  → development/databases/Oracle/objects/tables/types/temporary/private#ora-ptt-no-commit[creation of a Private Temporary Table does not]).

  The → development/databases/Oracle/SQL-Plus configuration setting → development/databases/Oracle/SQL-Plus/set/exitcommit[`exitcommit`].

  The `set → development/databases/Oracle/SQL/statement/nouns/constraints[constraints]` and
 `set → development/databases/Oracle/SQL/statement/nouns/transaction[transaction]` statements.
  
  → development/databases/Oracle/SQL/TCL

  The error message → development/databases/Oracle/errors/02091_transaction-rolled-back
