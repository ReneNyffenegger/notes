$ ORA-00932: inconsistent datatypes

{ CHAR / NUMBER

 { ORA-00932: inconsistent datatypes: expected CHAR got NUMBER

code {
select
   case '1'
      when  2  then 'two'
      when '1' then 'one'
   end
from
   dual;
code }

 }
 { ORA-00932: inconsistent datatypes: expected NUMBER got CHAR

code {
select
   case  1
      when  2 then 'two'
      when '1' then 'one'
   end
from
   dual;
code }

  }

}
{ ORA-00932: inconsistent datatypes: expected CHAR got LONG #ora-00932-exp-char-got-long

  The → development/databases/Oracle/SQL/data-types[data type] of the column
  `data_default` in the → development/databases/Oracle/installed/data-dictionary[data dictionary] view
  → development/databases/Oracle/installed/data-dictionary/tab/columns[`user_tab_columns`] is
  → development/databases/Oracle/SQL/data-types/long[`long`] which essentially makes it impossible
  to formulate a query-condition on that column when selecting from `user_tab_columns`:
code {
select *
from
   user_tab_columns
where
   data_default like '%sysdate%';
code }

  See also → development/databases/Oracle/errors/ORA-00932_inconsistent-datatypes/expected-CHAR-got-LONG[this link] which shows how
 `→ development/databases/Oracle/installed/packages/dbms/duma_internal` can be used to somewhat relax this problem.

}
{ ORA-00932: inconsistent datatypes: expected - got CLOB

  It's not possible to execute a `group by` on a `clob` (or `blob`) value. The following `select` statement raises a *ORA-00932: inconsistent datatypes: expected - got CLOB* error:
code {
create table tq84_ora_00932_group_by (
    val number,
    txt clob
);

select
   txt,
   max(val) max_val
from
   tq84_ora_00932_group_by
group by
   txt;
   
drop table tq84_ora_00932_group_by;
code }

}
{ ORA-00932: inconsistent datatypes: expected NUMBER got DATE

 `ceil` cannot be applied on a → development/databases/Oracle/SQL/data-types/date[`date`] datatype:
code {
select ceil(sysdate) from dual;
code }

}

sa:

  → development/databases/Oracle/errors/ORA-01722_invalid-number

  → development/databases/Oracle/SQL/functions/type-conversion/validate_conversion[`validate_conversion()`]

  → development/databases/Oracle/SQL/data-types
