
SQLcl is a new Java-based command-line interface for Oracle Database. It supports everything that already → development/databases/Oracle/SQL-Plus[SQL*Plus] had, but comes also with
  • SQL history
  • Code assistance (pressing `tab` completes table, view and column names)
  • New commands such as `cd`,`ctas`, `ddl`, `repeat`
  • → development/databases/Oracle/SQLcl/script[Scripting] with → development/languages/JavaScript.

{ Only JRE required

  SQLcl only needs a JRE.

  Apparently, it can be very picky if it doesn't find the version it expects.

}
{ Download/Installing

  { Downloading the zip file
  
    The download link for SQLcl can be found from → https://oracle.com/sqlcl[oracle.com/sqlcl]:
code {
$ → tools/wget https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip -O /tmp/sqlcl.zip
code }

    Extract the zip file to `~/bin/sqlcl` (all files in the zip file are located under `sqlcl`):
code {
$ → Linux/shell/commands/unzip -d ~/bin /tmp/sqlcl.zip
code }

    Verify that `java` is installed (otherwise, it needs to be installed).
code {
$ java --version
code }

    Assuming, sqlcl is installed under `~/bin/sqlcl`, it can be started like so:
code {
$ ~/bin/sqlcl/bin/sql rene/rene@localhost/freepdb1
code }

    Alternatively, a symbolic link can be created from a directory in the `$PATH` variable to the executable:
code {
mv ~/bin/sqlcl ~/bin/sqlcl_
ln -s ~/bin/sqlcl_/bin/sql ~/bin/sqlcl
code }

  }
  { Using an installer

  In an OCI environment, SQLcl can be installed with → Linux/package-managers/YUM:
code {
yum install sqlcl
code }

  On a Mac, the installation is:
code {
brew install sqlcl
code }

  }

  { Connor McDonnald's download script

    Connor McDonnald's → https://github.com/connormcd/misc-scripts/blob/master/getsqlcl.sh[`getsqlcl.sh`] seems to download and install SQLcl (I've not tested it).

  }
 
}
{ Scripting

  SQLcl (as well as → development/Software/Oracle-SQL-Developer[SQL Developer]) comes with → development/languages/JavaScript based → development/databases/Oracle/SQLcl/script[scripting].
  
  A script is started with the keyword `script` and ended (like also an anonymous → development/databases/Oracle/PL-SQL block) with a slash (`/`)

  { Write some text

   `ctx.write` prints text. The new line `"\n"` is necessary for the text to be flushed:
code {
script
ctx.write("hello world\n");
/
code }

    Text can also be written with `print(…)` in which case the new line is not required.
code {
script
print('The number is 42');
/
code }

  `print()` writes to a different output stream than `ctx.write()`. It seems that when using such scripts in → development/Software/Oracle-SQL-Developer[SQL Developer], the stream that `print()` writes to
   cannot be captured (that is: if it is possible, I don't know how).

  } 
  { Executing stored scripts

`script` can also execute the content of a  script file. The file's suffix `.js` can be omitted:
code {
script some_file_with_javascript
code }

  }
  { Run dynamic SQL statements

    It is possible to create a dynamic → development/databases/Oracle/SQL/statement[SQL statement] and then have it executed with `sqlcl.setStmt(…)` and `sqlcl.run()`:
code {
script
var tabName = 'all_users';
sqlcl.setStmt('select count(*) from ' + tabName);
sqlcl.run();
/
code }

  }

}
{ Starting sqlcl / Command line options

  sqlcl is started by using its name `sql`.

  sqlcl has the following command line options:
  table { ll

    `-H` ☰ Display SQLcl version (as `-V` does) and usage help.
    `-V` ☰ Display SQLcl version
    `-R level` ☰ Set restricted level. Level = 1, 2, 3 or 4, 4 being the most restrictve.  The restriction level determines how much a use can mess up the file system.
    `-S` ☰ Silent mode: no output of SQLcl banner, prompts and commands.
    `-verbose` ☰ Show logging messages inline.
    `-nohistory` ☰ No history logging.
    `-noupdates` ☰ No check if update is availab.e
    `-oci` ☰ By default, SQLcl uses Oracle's JDBC driver to connect to the database. With `-oci`, it is instructed to use the Oracle client.
    `-L` ☰ Don't reprompt for username/password if entered wrongly (→ development/databases/Oracle/errors/ORA-01017_invalid-username-password_logon-denied).

  table }
}
{ Misc

  { alias

    sqlcl can create aliases:
code {
rene@ORA19> alias usr=select username, account_status, default_tablespace from dba_users;
code }

   The command that such aliases is set to are then executed by simply entering the name of the alias:
code {
rene@ORA19> usr
code }

    When running sqlcl under → Windows, the aliases are stored in `→ Windows/dirs/Users/username/AppData/Roaming[%APPDATA]\sqlcl\aliases.xml` and thus can be reused when quitting and starting an
    sqlcl session.

  }
  { ddl / ctas

    Use `dbms_metadata` to get a table's create statement or to produce a `create table as select…` statement.

  }
  { info / info+

    `info` and `info+` describe tables and views

  }
  { colored output

    gh|about-SQLcl|/img/colored-output.png||

  }
  { SQL Select hints #sqlcl-sqldev-select-hints

    SQLcl and → development/Software/Oracle-SQL-Developer[SQL Developer] allow to specify *SQL select hints* which cause a result set to be returned in a specific format:
code {
select /*ansiconsole*/ * from …; -- Best appearance for ANSI terminal display
select /*csv*/         * from …; -- → development/Data/exchange/formats/CSV[Comma-separated values]
select /*delimited*/   * from …; -- same as csv
select /*fixed*/       * from …; -- Fixed-width fields with trailing blanks
select /*html*/        * from …; -- Marked-up → development/web/HTML table
select /*insert*/      * from …; -- Return INSERT statements
select /*json*/        * from …; -- Returns → development/languages/JavaScript/JSON object format
select /*loader*/      * from …; -- Pipe-delimited format suitable for → development/databases/Oracle/tools/sql-loader[SQL*Loader]
select /*text*/        * from …; -- Plain text
select /*xml*/         * from …; -- Tagged → development/XML
code }

    Note: these hints are not to be confused with → development/databases/Oracle/SQL/hints[Oracle Optimizer hints].

    In → development/Software/Oracle-SQL-Developer[SQL Developer], such a select statement needs to be executed with `F5` for the «hint» to have an effect.

    TODO: Compare with → development/Software/Oracle-SQL-Developer/SQL-extensions.

  }
  { Long input lines longer than 5000 characters #sqlcl-no-line-length-limit

    The maximum line length limit of → development/databases/Oracle/SQL-Plus of 5000 characters before and 3000 characters after subustitution (error messages → development/databases/Oracle/SQL-Plus/_errors/SP2-0027_Input-is-too-long_4999-characters_line-ignored and
    → development/databases/Oracle/SQL-Plus/_errors/SP2-0341_line-overflow-during-variable-substitution) does not apply with sqlcl:
code {
$ printf 'set verify off\ndefine num=42\n%-10000s;\nexit\n' 'select &num as num from dual' > /tmp/long-line.sql
$ ~/bin/sqlcl/bin/sql rene/rene@localhost/freepdb1 @/tmp/long-line.sql
code }

  }
  { SQLcl not showing error messages

    SQLcl does not automatically show → development/databases/Oracle/errors[error messages]. (As per → https://ogobrecht.github.io/posts/2020-01-02-why-i-like-sqlplus-for-deployment-scripts[Ottmar Gobrecht's Blog], this problem only occurs in
    versions prior to 19.4 or on Windows).

code {
rene@SYS$USERS> create or replace procedure drop_me as
  2  begin
  3     no_such_procedure;
  4  end;
  5  /
code }

    No error message shown, although `no_such_procedure` does not exist.

code {
rene@SYS$USERS> show errors

Errors for PROCEDURE RENE.DROP_ME:

LINE/COL ERROR
-------- -----------------------------------------------------------------
3/4      PL/SQL: Statement ignored
3/4      → development/databases/Oracle/PL-SQL/errors-warnings/PLS-00201_identifier_must-be-declared[PLS-00201: identifier 'NO_SUCH_PROCEDURE' must be declared]
code }

    Ottmar Gobrecht proposes to use the following setings until a fix is released
code {
set define off verify off feedback on
code }

    With these settings, the errors are now displayed.
  }
}
{ TODO

  { Can't load AMD 64-bit .dll on a IA 32-bit platform


    Apparently, `ocijdbc19.dll` is 64-bit while SQLcl (`sql.exe`) is 32-bit. This causes the error message
   *→ Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin/ocijdbcvv_dll[C:\Oracle\19\bin\ocijdbc19.dll]: Can't load AMD 64-bit .dll on a IA 32-bit platform*
    
   *Why* on Earth does SQLcl sometimes try to use OCI? And *why* is the executable a 32-bit executable?

   *Ok*…, it seems that I *can* connect with the thin driver if I use the corresponding connection string:
code {
.\sql.exe rene/rene@jdbc:oracle:thin:@192.168.0.227:1521:ORA19
code }

   If this is how this is supposed to be? Who knows?

  }
  { no ocijdbc19 in java.library.path

    How is it possible to add `ocijdbc19` to `java.library.path`?
code {
PS:\> sql /@ORA19

SQLcl: Release 19.4 Production on Thu Nov 05 08:46:33 2020

Copyright (c) 1982, 2020, Oracle.  All rights reserved.

  USER          =
  URL           = jdbc:oracle:oci8:@ora19
  Error Message = no ocijdbc19 in java.library.path
  USER          =
  URL           = jdbc:oracle:thin:…
  Error Message = ORA-01017: invalid username/password; logon denied
Username? (RETRYING) ('/@db.uat.xy'?) ^
code }

  }

}

links:
  → https://twitter.com/oraclesqlcl[@oraclesql]

  → https://github.com/oracle/oracle-db-tools/tree/master/sqlcl

sa:
  → development/databases/Oracle/SQLcl/script

  → development/Software/Oracle-SQL-Developer/SQL-extensions

  → development/tools/scripts/personal/sqlcl_bat[sqlcl.bat] is a simple → Windows/dirs/Windows/System32/cmd_exe/batch-files to start SQLcl

  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/bin/sql[`%ORACLE_HOME%\bin\sql.bat`] is a → Windows/dirs/Windows/System32/cmd_exe/batch-files that is supposed to
  start SQLcl (but doesn't seem to work).
  -
  → Linux/fhs/u01/app/oracle/product/vv-v-v/dbhome_n/sqldeveloper/sqldeveloper/sql[`$ORACLE_HOME/sqldeveloper/sqldeveloper/bin/sql`] however *does* seem to work.

  → development/Software/Oracle-SQL-Developer/directories/installation/sqldeveloper/bin/sql[SQL Developer installation directory: `sqldeveloper/bin/sql`]

links:
  The Github repository `oracle-db-tools` has → https://github.com/oracle/oracle-db-tools/tree/master/sqlcl[SQLcl examples]
