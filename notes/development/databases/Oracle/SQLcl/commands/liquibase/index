$ SQLcl: LIQUIBASE
@ liquibase

The `liquibase` command can be abbreviated with `lb`.

{ Subcommands

  table { lll

     `calculate-checksum` ☰ `cac` ☰ Calculates and prints a checksum for the changeset with the given id in the format `filepath::id::author`
     `→ development/databases/Oracle/SQLcl/commands/liquibase/changelog/sync` ☰ `chs` ☰ Marks all changes in the changelog file as executed in the database
     `changelog-sync-sql` ☰ `chss` ☰ Output the raw SQL used by Liquibase when running changelogSync
     `changelog-sync-to-tag` ☰ `chstt` ☰ Marks all undeployed changesets as executed starting from the top of the changelog file and moving down up to and including the tag
     `changelog-sync-to-tag-sql` ☰ `chstts` ☰ Output the raw SQL used by Liquibase when running changelogSyncToTag
     `clear-checksums` ☰ `clc` ☰ Clears all checksums and nullifies the MD5SUM column of the DATABASECHANGELOG table so that they will be re-computed on the next database update
     `data` ☰ `da` ☰ Generate changelogs for the data - Creates changelog for data from all objects or as filers are specified
     `db-doc` ☰ `dbd` ☰ Generates JavaDoc documentation for the existing database and changelogs
     `diff` ☰ `di` ☰ Compare two databases
     `diff-changelog` ☰ `dic` ☰ Compare two databases to produce changesets resolving the differences and write them to a changelog file
     `drop-all` ☰ `dra` ☰ dropAll drops all database objects owned by the user
     `future-rollback-count-sql` ☰ `furcs` ☰ Generates SQL that would be used to sequentially revert the specified number of undeployed changes
     `future-rollback-from-tag-sql` ☰ `furfts` ☰ Generates SQL to revert future undeployed changes up to the specified tag
     `future-rollback-sql` ☰ `furs` ☰ Generate the raw SQL needed to rollback future undeployed changes
     `generate-apex-object` ☰ `geao` ☰ Generates the changeset for an APEX object
     `generate-changelog` ☰ `gec` ☰ Writes Change Log XML to copy the current state of the database
     `→ development/databases/Oracle/SQLcl/commands/liquibase/generate/controlfile` ☰ `gecf` ☰ Creates a controller changelog with nothing in it to assist in starting new changeset
     `generate-db-object` ☰ `geo` ☰ Writes Change Log XML to copy the current state of the database object to a file
     `generate-ords-module` ☰ `geom` ☰ Generates the code necessary to reproduce a module and all children using the ORDS API's
     `generate-ords-schema` ☰ `geos` ☰ Generates the code necessary to reproduce all modules and children using the ORDS API's
     `→ development/databases/Oracle/SQLcl/commands/liquibase/generate/schema` ☰ `ges` ☰ Writes Change Log XML to copy the current state of the database to files
     `history` ☰ `hi` ☰ List all deployed changesets and their deployment ID
     `list-locks` ☰ `lil` ☰ List the hostname, IP address, and timestamp of the Liquibase lock record
     `mark-next-changeset-ran` ☰ `mancr` ☰ Marks the next change you apply as executed in your database. This command is used when deploy errors occur due to Liquibase not being synchronized with changes made outside of Liquibase.
     `mark-next-changeset-ran-sql` ☰ `mancrs` ☰ Writes the SQL used to mark the next change you apply as executed in your database
     `release-locks` ☰ `rel` ☰ Remove the Liquibase lock record from the DATABASECHANGELOG table
     `rollback` ☰ `rb` ☰ Rollback changes made to the database based on the specified tag
     `rollback-count` ☰ `rbc` ☰ Rollback the specified number of changes made to the database
     `rollback-count-sql` ☰ `rbcs` ☰ Generate the SQL to rollback the specified number of changes
     `rollback-sql` ☰ `rbs` ☰ Generate the SQL to rollback changes made to the database after a defined tag
     `rollback-to-date` ☰ `rbtd` ☰ Rollback changes made to the database back to the specified date/time
     `rollback-to-date-sql` ☰ `rbtds` ☰ Generate SQL to rollback changes made to the database back to the specified date/time
     `snapshot` ☰ `sn` ☰ Capture the current state of a target database. This command is used to a) review and track changes in the target database, or b) compare a previous database state to b1) an online database, or b2) another snapshot
     `status` ☰ `st` ☰ Generate a list of pending changesets
     `tag` ☰ `ta` ☰ Mark the current database state with the specified tag to use for roll back
     `tag-exists` ☰ `tae` ☰ Verify the existence of the specified tag
     `unexpected-changesets` ☰ `unc` ☰ Generate a list of changesets that have been executed but are not in the current changelog
     `update` ☰ `up` ☰ Deploy any changes in the changelog file that have not been deployed
     `update-count` ☰ `upc` ☰ Deploy the specified number of changes from the changelog file
     `update-count-sql` ☰ `upcs` ☰ Generate the SQL to deploy the specified number of changes for review before running the update command
     `update-sql` ☰ `ups` ☰ Generate the SQL identified in the changelog for review before running the update command
     `update-testing-rollback` ☰ `uptr` ☰ Updates database, then rolls back changes before updating again
     `update-to-tag` ☰ `uptt` ☰ Deploy changes sequentially from the newest changeset up to and including the changeset with the specified tag
     `update-to-tag-sql` ☰ `uptts` ☰ Generate the SQL from the newest changeset up to and including the changeset with the specified tag
     `validate` ☰ `va` ☰ Validate the changelog for errors that may cause an UPDATE to fail
     `version` ☰ `ve` ☰ Display Version information

   table }

}

{ Extensions to the vanilla client

  The SQLcl frontend to Liquibase extends the functionality of the vanilla liquibase client with commands such as
    • `generate-schema`
    • `generate-ords-module`, `generate-ords-schema`
    • `generate-apex`

  These extensions are dependent on the following jar files which are located under the sqlcl's installation directory:
    • `lib/ext/dbtools-liquibase.jar`
    • `lib/ext/dbtools-apex.jar`
    • `lib/guava-with-lf.jar
    • `lib/xmlparserv2_sans_jaxp_services.jar`
    • `lib/dbtools-common.jar`

}

sa:
  → development/databases/Oracle/SQLcl/commands
