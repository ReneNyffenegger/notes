$ Scripting SQLcl

→ development/databases/Oracle/SQLcl scripting is based on → development/languages/Java/JSR-223[JSR-223].

{ Global objects

  The scripting environment of SQLcl has some global objects ( members of `this`):
  table { lll
   ~Object~ ☰ ~Type~ ☰ ~JAR file~
    `args` ☰ `java.lang.String[]` ☰
    `commands` ☰ ☰
    → #sqlcl-script-conn[`conn`] ☰ `oracle.jdbc.driver.T4CConnection` ☰
    `ctx` ☰ `oracle.dbtools.raptor.newscriptrunner.ScriptRunnerContext` ☰ `oracle.dbtools-common.jar`
    `engine` ☰ `jdk.nashorn.api.scripting.NashornScriptEngine` ☰
    `out` ☰ `oracle.dbtools.raptor.newscriptrunner.WrapListenBufferOutputStream` ☰
    → #sqlcl-script-sqlcl[`sqlcl`] ☰ `oracle.dbtools.raptor.newscriptrunner.ScriptExecutor` ☰ `oracle.dbtools-common.jar`
    `util` ☰ `oracle.dbtools.db.OracleUtil` ☰ `oracle.dbtools-common.jar`
     … ? ☰ ☰
  table }

  { args

    The variable `args` is an array that stores the values of parameters that are passed to a script that was invoked with the `script` command.
    The value of the first element (`args[0]`) stores the name of the script.

    The following trivial script prints the script name and the values of the arguments that were passed to it:
    gh|about-SQLcl|/script/global-objects/print-args.js||

  }
  { util

code {
script
print(util.getClass())
/
class oracle.dbtools.db.OracleUtil
code }

  {  util.executeReturnOneCol

     The following example uses the pseudo column `user` to determine the currently connected
     → development/databases/Oracle/users-roles/users[user] name. (Of course, this name can more easily be found via `→ #sqlcl-script-conn[conn].getUserName()`)
code {
script
var whoAmI = util.executeReturnOneCol('select user from dual');

if (whoAmI == 'RENE') {
  print('yeah');
}
else {
  print('no');
}
/
code }

    Using → development/databases/Oracle/SQL/statement/bind-variables[bind variables]:
code {
script
print(util.executeReturnOneCol('select :B from dual', {B: 'hello world'}));
/
code }

  }
  { util.executeReturnList

code {
script
var objs = util.executeReturnList(
    "select                       " +
    "  object_name name,          " +
    "  owner                      " +
    "from                         " +
    "  all_objects                " +
    "where                        " +
    "  object_name like :name and " +
    "  object_type = :type        "
    , 
    { name: '%RS%',
      type: 'TABLE'
    });

objs.forEach( function(obj) {
   print(obj.NAME + ' (' + obj.OWNER + ')');
});

/
code }

   Unfortunatetly, multiline strings (aka → development/languages/JavaScript/language/expressions/primary-expressions/template-literals[template literals])
   don't seem to be supported in the Nashorn interpreter, therefore I needed the clumsy addition of substrings to make the select statement visually appealing.

  }

  }
  { conn #sqlcl-script-conn

  `conn` is the connection object.

code {
script
print(sqlcl.getClass())
/
class oracle.jdbc.driver.T4CConnection
code }

  Apparently, `oracle.jdbc.driver.T4CConnection` → https://stackoverflow.com/a/39571663[derives] from `oracle.jdbc.driver.PhysicalConnection` which in turn
  implements the interface → development/languages/Java/classes/oracle/jdbc/OracleConnection[`oracle.jdbc.OracleConnection`].

code {
script
print(conn.getUserName())
/
RENE
code }

    Show connection URL:
code {
connUrl = conn.getMetaData().getURL()
print(connUrl)
code }

  }
  { sqlcl #sqlcl-script-sqlcl

 `sqlcl` seems to be a class that represents → development/databases/Oracle/SQLcl itself: 
code {
script
print(sqlcl.getClass())
/
class oracle.dbtools.raptor.newscriptrunner.ScriptExecutor
code }

    Execute an arbitrary SQL statement:
code {
sqlcl.setStmt('select username, created from dba_users order by created')
sqlcl.run()
code }

  However, executing → development/databases/Oracle/tools/oradebug[`oradebug`] is not supported:
code {
script
sqlcl.setStmt('→ development/databases/Oracle/tools/oradebug/help[oradebug help]')
sqlcl.run()
/
not supported.
code }

  }
  { ctx

  The global(?) object `ctx` is an instance of the `oracle.dbtools.raptor.newscriptrunner.ScriptRunnerContext` class.
code {
script
print(ctx.getClass())
/
class oracle.dbtools.raptor.newscriptrunner.ScriptRunnerContext
code }

  Among others, this class allows to set the prompt of SQLcl:
code {
script
ctx.setPrompt(conn.getUserName() + '> ');
/
code }

  There are also a handful of properties (that also could be set):
code {
script
print(ctx.getProperty('script.runner.serveroutformat'));
print(ctx.getProperty('script.runner.setnumwidth'));
print(ctx.getProperty('script.runner.autocommit.setting'));
/
code }

  Request data (input) from the user:
code {
var x = ctx.getPromptedFieldProvider().getPromptedField(ctx, 'What? ', false);
print('x = ' + x);
code }

  }

}
{ Accessing the history

code {
script
var hist = Java.type('oracle.dbtools.raptor.console.MultiLineHistory').getInstance();
print('max history size: ' + hist.getMaxSize());
hist.setMaxSize(500);
print('max history size: ' + hist.getMaxSize());
/
code }

}
{ java.lang.Math

 `java.lang.Math` is available:
code {
script
print(java.lang.Math.sqrt(2));
/
code }

}
{ load()

 `load(url|filename)` loads and executes another script.

}
{ Command handlers #sqlcl-script-cmd-handler

   A → development/databases/Oracle/SQLcl/script/command-handler[user defined command handler] can be defined with three functions to be called before a command is executed, after a command was executed and
   a handler that actually executes the command:
code {
Java.type("oracle.dbtools.raptor.newscriptrunner.CommandRegistry").addForAllStmtsListener( 
   Java.extend(Java.type("oracle.dbtools.raptor.newscriptrunner.CommandListener"),
   {
      handleEvent: function(conn, ctx, cmd) {
   
         if ( cmd.getSql().trim().equals('sysdt') ) {
             sqlcl.setStmt('select sysdate from dual');
             sqlcl.run()
   
             return true; // cmd was handled
         }
         return false;    // cmd was not handled
      },
   
      beginEvent: function(conn, ctx, cmd) {
         ctx.writeln('begin handler, cmd.getSql = ' + cmd.getSql())
      // ctx.write('type: ' + cmd.getClass() + '\n'); // class oracle.dbtools.raptor.newscriptrunner.SQLCommand
      },
   
      endEvent:   function (conn, ctx, cmd) {
         ctx.writeln('end handler, cmd.getSql = ' + cmd.getSql())
      }
   
   }).class
);
code }

}
{ TODO

  The *global object* seems to be referencable with `this`:
code {
script
print(this);
/
[object global]
code }

  There's an `engine` object:
code {
script
print(new javax.script.ScriptEngineManager().getEngineFactories()[0].getEngineName());
print(engine);
/
Oracle Nashorn
jdk.nashorn.api.scripting.NashornScriptEngine@1e7a35c
code }

code {
print(ctx.getDate('xyz'))
code }


}

sa:

  The `→ development/databases/Oracle/SQLcl/commands/script` command.

  → development/databases/Oracle/SQLcl/script/lob[This example] uses SQLcl scripting to put and get a → development/databases/Oracle/SQL/data-types/lob[BLOB] from/into an
  → development/databases/Oracle/objects/tables[Oracle table].
