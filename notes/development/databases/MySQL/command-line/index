$ MySQL command line

{ Specifying the Password

  Use `-p` to ask for → development/security/password[password]:
code {
mysql -u userName -p dbName
code }

  Use `-pSecret` to specify password. Convenient but insecure, client will write
  *mysql: [Warning] Using a password on the command line interface can be insecure.*.
code {
mysql -u userName -pSecret dbName
code }

  Use → development/environment-variable[environment variable] `MYSQL_PWD`. The client does not issue a warning, but it is still insecure.
code {
mysql -u userName dbName
code }

}

{ Specifying the host

  The host to be connected to can be specified with `-h`:
code {
mysql -h foobar.xy -u rene -pSecretGarden
code }

}

{ Executing an SQL script file

  After the command line options, a script file can be «redirected» with `<` so that its content is executed by mySql.

code {
mysql -u userName -pPassWord -D database < scriptFile.sql
code }

}
{ mysql_config_editor

  The best way to store passwords for later connection seems to be to use the `mysql_config_editor` which stores the authentication needed in a file named `.mylogin.cnf`. This
  file is located in the → Linux/fhs/home/username[home directory] in Unix and in `→ Windows/dirs/Users/username/AppData/Roaming[%APPDATA]\MySQL` in Windows.

  Enter a password:
code {
c:\> "→ Windows/dirs/Program-Files[%programfiles%]\MySQL\MySQL Server 8.0\bin\mysql_config_editor" set --login-path=client --host=localhost --user=rene --password
code }

  Remove it again:
code {
C:\> "%programfiles%\MySQL\MySQL Server 8.0\bin\mysql_config_editor" remove  --login-path=client --user
code }
  
}
{ Other command line options

  Other comand line options that I like to use are
    • `--skip-column-names` (so as not to show column headers)
    • `--show-warnings`
    • `--local-infile` (in conjunction with the `load data local infile` command - it also requires the `local_infile=on` setting in the → development/databases/MySQL/configuration/server-instance[server config file])

}
