$ SQL Server - set statement
@ set statement

The `set` statement can be used to assign a value to a → development/databases/SQL-Server/T-SQL/variables[variable] or to set/unset a boolean-like option that changes
how a session handles different things.

{ On / off options

  The `set` statement can be used to set boolean like options to `on` or unset `off` (such as `nocount`).
  
  Wich options are set is stored in the → development/databases/SQL-Server/T-SQL/variables/atat/options[`@@options`] variable.

}
{ set ansi_warnings #mssql-ansi_warnings

  TODO: → development/databases/SQL-Server/sql/select/aggregate/Null-value-is-eliminated-by-an-aggregate-or-other-SET-operation

}
{ set language #mssql-set-language

code {
set language english;
…
set language german;
…
code }

  The current language is stored in `@@language`.

  The chosen language apperantly influences how a string is interpreted if → development/databases/SQL-Server/T-SQL/data-types/date#mssql-cast-as-datetime[cast to a datetime].

}
{ set nocount

Turn off printing `42 row(s) affected`:
code {
set nocount on;
code }

Apparently, a construct such as `set count off` is not easily possible because `count` is already an → development/databases/SQL[SQL] keyword.

}

sa:

  → development/databases/SQL-Server/T-SQL/statements/set/xact_abort[stop executing the current block when an error occurs with »set xact_abort on«].

  → development/databases/SQL-Server/administration/schemas/sys/objects/views/databases#mssql-db-level-options[Database level options]

  → development/databases/SQL-Server/T-SQL/statements[statements]

