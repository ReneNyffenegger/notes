$ T-SQL: procedures

code {
create procedure dbo.my_procedure ( -- Note: the parentheses around the parameters are optional. I use it only for visual purposes.
      @param_one nvarchar(42),
      @param_two nvarchar(20),
      @param_out int           output
)
as
  set nocount on
  
  select …
  where
    field_one = @param_one and
    field_two = @param_two;

  set @param_out = 42;

  set nocount off
code }

code {
declare @ret int;
exec dbo.my_procedure('foo', 'bar', @ret out);
code }



{ Named parameters

  gh|about-MSSQL|/t-sql/procedures/named-parameters.sql||

}
{ Declare variables

  gh|about-MSSQL|/t-sql/procedures/declare-variables.sql||

}
{ Calling a procedure from within a procedure

  gh|about-MSSQL|/t-sql/procedures/call-proc-from-proc.sql||

}
{ Output parameters #t-sql-proc-output-param

  Apparently, a → development/databases/SQL-Server/T-SQL/user-defined-functions[user defined function] does not allow to execute
  → development/databases/SQL-Server/sql/DML[DML statements]. Thus, in order to return a value from a »function« that modifies data
  in the database, an *output parameter* might be used.

  The parameter needs to be declared with the `output` keyword when the procedure is declared as well as when it is executed:
  gh|about-MSSQL|/t-sql/procedures/output-parameters.sql||

}
{ Optional parameters

  If a parameter is declared with an assignment (`@param = 42`), the parameter has a default value (here: 42) and thus becomes *optional*: if not explicitely given a value when the procedure is invoked, the value
  of the parameter will then be that of the default value:

  gh|about-MSSQL|/t-sql/procedures/optional-parameters.sql||

}
{ Settings quoted_identifier and ansi_nulls

  The two → development/databases/SQL-Server/T-SQL/statements/set[settings]
  → development/databases/SQL-Server/T-SQL/statements/set/quoted_identifier[`quoted_identifier`] and
  → development/databases/SQL-Server/T-SQL/statements/set/ansi_nulls[`ansi_nulls`] are special: when a procedure is created, it stores the then current values for these two settings.
  When the procedure is running, it re-activates those settings for the procedure.

}
{ TOO_MANY_ROWS

  gh|about-MSSQL|/t-sql/procedures/too_many_rows.sql||

}

sa:

  → development/databases/SQL-Server/T-SQL/user-defined-functions[User defined functions (UDF)]

  → development/databases/SQL-Server/T-SQL/procedures/create[Creating stored procedures]

  → development/databases/SQL-Server/T-SQL

  The definition (source text) of a (unecrypted) stored procedure can be queried from → development/databases/SQL-Server/administration/schemas/sys/objects/views/sql_modules[`sys.sql_modules`].
