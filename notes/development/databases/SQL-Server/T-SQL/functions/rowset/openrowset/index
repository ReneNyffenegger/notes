$ SQL Server function: openrowset

`openrowset` allows to query → development/Data[data] from an → development/databases/OLE-DB capable data source.

Such queries are referred to as *ad hoc queries*.

{ Enabling ad hoc queries

  In order to perform ad hoc queries, they need to be enabled.

  The following statement shows if ad hoc queries are enabled:
code {
exec → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_configure[sp_configure] 'show advanced options', 1
-- reconfigure -- ?
code }

  If they're not enabled, → development/databases/SQL-Server[SQL Server] will throw the following error:
  *SQL Server blocked access to STATEMENT 'OpenRowset/OpenDatasource' of component 'Ad Hoc Distributed Queries' because this component is turned off as part of the security configuration for this server*.

  Ad hoc queries can be enabled with
code {
exec sp_configure 'Ad Hoc Distributed Queries', 1
→ development/databases/SQL-Server/T-SQL/statements/reconfigure[reconfigure]
code }

}
{ Select from an Excel Spreadsheet

  If *Microsoft Access database engine* is installed (which comes with the → development/databases/OLE-DB/provider/Microsoft-Access-database-engine),
  `OpenRowset` can query data from an → Microsoft/Office/Excel[Excel] spreadsheet:

code {
exec master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0' , N'AllowInProcess'   , 1;
exec master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0' , N'DynamicParameters', 1;
go

select * from openrowset(
   'Microsoft.ACE.OLEDB.12.0',                     -- ProgID of OLE DB Provider
   'Excel 12.0;Database=C:\Users\Rene\data.xlsx',
   'select * from [Sheet1$]'
);
code }

   → Windows/registry/tree/HKEY_CLASSES_ROOT/Microsoft_ACE_OLEDB_12_0[`Microsoft.ACE.OLEDB.12.0`] is the → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[ProgId] for the
   → development/databases/OLE-DB/provider/Microsoft-Access-database-engine.

   The available OLE DB Providers for an → development/databases/SQL-Server/architecture/instance[SQL Server instance] can be seen, for example, in the
   → Windows/registry under the key → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Microsoft-SQL-Server/_instance-name_/Providers[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\instance name\Providers`].

}
{ openrowset(table …)

  Some → development/databases/SQL-Server/administration/schemas/sys/objects/views[`sys.…` views] select from `openrowset(table …)`. For example, the definition of
  → development/databases/SQL-Server/administration/schemas/sys/objects/views/user_token[`sys.user_token`] is:
code {
→ development/databases/SQL-Server/T-SQL/statements/execute[exec] → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_helptext[sp_helptext] 'sys.user_token'

CREATE VIEW sys.user_token AS  
 SELECT * FROM OpenRowset(TABLE USERROLES)  
code }

  It is unclear to me, what exactly `openrowset(table userroles)` does. When trying to exectute `select * from openRowset(table userroles)`, → development/databases/SQL-Server just reports the error message
  *Msg 102… Incorrect syntax near 'TABLE'*

  → http://improve.dk/[Mark S. Rasmussen] has also → http://improve.dk/exploring-the-sys-system_internals_partition_columns-ti-field[investigated this openrowset(table…) syntax] - and comes to the conclusion that
  "
    The OPENROWSET(TABLE RSCPROP, x) obviously performs some dark magic. 
  "

}

sa:
  → development/databases/SQL-Server/T-SQL/functions

  → development/databases/SQL-Server/administration/schemas/sys/objects/views/servers[`sys.servers`]
