$ SQL Server function: openrowset

`openrowset` allows to query → development/Data[data] from an → development/databases/OLE-DB capable data source.

Such queries are referred to as *ad hoc queries*.

{ Enabling ad hoc queries

  In order to perform ad hoc queries, they need to be enabled.

  The following statement shows if ad hoc queries are enabled:
code {
exec → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_configure[sp_configure] 'show advanced options', 1
-- reconfigure -- ?
code }

  If they're not enabled, → development/databases/SQL-Server[SQL Server] will throw the following error:
  *SQL Server blocked access to STATEMENT 'OpenRowset/OpenDatasource' of component 'Ad Hoc Distributed Queries' because this component is turned off as part of the security configuration for this server*.

  Ad hoc queries can be enabled with
code {
exec sp_configure 'Ad Hoc Distributed Queries', 1
→ development/databases/SQL-Server/T-SQL/statements/reconfigure[reconfigure]
code }

}
{ Select from an Excel Spreadsheet

  If *Microsoft Access database engine* is installed (which comes with the → development/databases/OLE-DB/provider/Microsoft-Access-database-engine),
  `OpenRowset` can query data from an → Microsoft/Office/Excel[Excel] spreadsheet:

code {
exec master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0' , N'AllowInProcess'   , 1;
exec master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0' , N'DynamicParameters', 1;
go

select * from openrowset(
   'Microsoft.ACE.OLEDB.12.0',                     -- ProgID of OLE DB Provider
   'Excel 12.0;Database=C:\Users\Rene\data.xlsx',
   'select * from [Sheet1$]'
);
code }

   → Windows/registry/tree/HKEY_CLASSES_ROOT/Microsoft_ACE_OLEDB_12_0[`Microsoft.ACE.OLEDB.12.0`] is the → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[ProgId] for the
   → development/databases/OLE-DB/provider/Microsoft-Access-database-engine.

   The available OLE DB Providers for an → development/databases/SQL-Server/architecture/instance[SQL Server instance] can be seen, for example, in the
   → Windows/registry under the key → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Microsoft-SQL-Server/_instance-name_/Providers[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\instance name\Providers`].

}
{ Select content of a file

  The content of a file that is located on the SQL Server marchine or is accessible from the SQL Servier instance, can also be selected with `openrowset`:
code {
select
   ors.bulkColumn
from
   openrowset(
      bulk N'C:\Users\rene\AppData\Local\Temp\tq84.txt', single_clob
   ) as ors;
code }

  When selected into a → development/databases/SQL-Server/T-SQL/variables[variable] and then printed, even new lines are visible in SQL Server Studio:
code {
declare @content nvarchar(max);

select
   @content = ors.bulkColumn
from
   openrowset(
      bulk N'C:\Users\rene\AppData\Local\Temp\tq84.txt', single_clob
   ) as ors;

print(@content);
code }

}
{ Select from a CSV file #mssql-openrowset-csv

  The following example tries to demonstrate how `openrowset` can be used to select from a → development/Data/exchange/formats/CSV file.

  { CSV File

    This is the CSV (but semicolon separated) file I want to `select` from:
code {
42;forty-two;2019-08-28T22:23:15
99;ninety-nine;2020-02-05T07:08:09
3;three;
0;;2011-12-13T14:15:16
code }

  }
  { Format file

    In this case, `openrowset` needs a → https://docs.microsoft.com/en-us/sql/relational-databases/import-export/use-a-format-file-to-bulk-import-data-sql-server?view=sql-server-ver15[format file]
    that describes the input file and the order of columns in the resulting table.

    The `12.0` in the first indicates the version. I can't think of a case where this is relevant, but it is required. Without it, SQL Server gives an error message
    like *Cannot bulk load. Unknown version of format file …*.

    The `3` in the next line specifies the number of fields in the CSV file.

    This is followed by the specification for each line, which is
      • Position (Here: `1`, `2` and `3`)
      • Data type (which apparently must be `SQLCHAR` when using `openrowset`)
      • Prefix bytes (can be set to `0` for convinience or does not have any effect(?))
      • Maximal length in bytes (also seems to not have any effect, therefore set to `0` for my convenience)
      • Position in result table (I have reordered the input columns to 2, 1, 3)
      • Name of resulting colunns (Here: `num`, `txt` and `dat`).
      • → development/Unicode/collation[Collation] string (not relevant for this example)

code {
12.0
3
1 SQLCHAR 0 0 ";"    2 num ""
2 SQLCHAR 0 0 ";"    1 txt ""
3 SQLCHAR 0 0 "\r\n" 3 dat ""
code }

  }
  { bulk collect statement

    With the CSV file and the corresponding format file, I can create a view that selects from the data.

    The view also → development/databases/SQL-Server/T-SQL/functions/cast[casts] the text data into an → development/databases/SQL-Server/T-SQL/data-types/integer and
    the date into a → development/databases/SQL-Server/T-SQL/data-types/datetime. (The `127` in the → development/databases/SQL-Server/T-SQL/functions/convert[`convert()`] function
    indicates an → misc/ISO/8601[ISO-8601] date format (`YYYY-MM-DDThh:mi:ss`).

code {
create or alter view data_csv as
select
   txt,
   cast(num as integer) num,
   convert(datetime,    dat, 127) dat
from openrowset (
   bulk          N'c:\users\rene\data.csv',
   formatfile =  N'c:\users\rene\data.format'
) csv;
code }

  }
  { Selecting from the view

code {
select
   txt,
   dat + num
from
   data_csv;
code }

  }


}
{ openrowset(table …)

  Some `sys.…` views select from `openrowset(table …)`. For example, the definition of
  → development/databases/SQL-Server/administration/schemas/sys/objects/views/user_token[`sys.user_token`] is:
code {
→ development/databases/SQL-Server/T-SQL/statements/execute[exec] → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_helptext[sp_helptext] 'sys.user_token'

CREATE VIEW sys.user_token AS  
 SELECT * FROM OpenRowset(TABLE USERROLES)  
code }

  It is unclear to me, what exactly `openrowset(table userroles)` does. When trying to execute `select * from openRowset(table userroles)`, → development/databases/SQL-Server just reports the error message
  *Msg 102… Incorrect syntax near 'TABLE'*

  → http://improve.dk/[Mark S. Rasmussen] has also → http://improve.dk/exploring-the-sys-system_internals_partition_columns-ti-field[investigated this openrowset(table…) syntax] - and comes to the conclusion that
  "
    The OPENROWSET(TABLE RSCPROP, x) obviously performs some dark magic. 
  "

}

sa:
  → development/databases/SQL-Server/T-SQL/functions

  → development/databases/SQL-Server/administration/schemas/sys/objects/views/servers[`sys.servers`]
