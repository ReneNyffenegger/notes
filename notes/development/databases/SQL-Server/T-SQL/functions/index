$ SQL Server - T-SQL / functions
@ T-SQL functions

{ cast

  → development/databases/SQL-Server/T-SQL/functions/cast[`cast`] converts a value from one → development/databases/SQL-Server/T-SQL/data-types[data type] to another.

}
{ convert

  gh|about-MSSQL|/t-sql/functions/convert.sql||

}
{ collationproperty #t-sql-collationproperty

code {
select
   table_schema,
   table_name,
   column_name,
   collation_name,
   collationproperty(collation_name, 'CodePage') code_page,
   collationproperty(collation_name, 'LCID'    ) locale_identifier
from
   → development/databases/SQL-Server/administration/schemas/INFORMATION_SCHEMA/columns[information_schema.columns];
code }

   See also → Windows/development/WinAPI/data-types/index#winnt_LCID[LCID (Windows)]

}
{ dateadd #t-sql-dateadd

  `dateadd` is used for → development/databases/SQL-Server/T-SQL/data-types/date[date] arithmetic.

  The following example adds 10 days to August 28th, 2018:
  gh|about-MSSQL|/t-sql/functions/dateadd.sql||

}
{ datename #t-sql-datename

  gh|about-MSSQL|/t-sql/functions/datename.sql||

}
{ db_name #t-sql-db_name

  If called without arguments, this function returns the current → development/databases/SQL-Server/administration/database[database] name.

  If called with an id, it returns the nam of the database that is identified with this id (see → development/databases/SQL-Server/administration/schemas/sys/objects/views/databases[`sys.databases`]).

}
{ iif

  `iif(condition, value-if-true, value-if-false)`

  The following select statement replaces the value `3` with `99`:
  gh|about-MSSQL|/t-sql/functions/iif.sql||

}
{ object_definition

  → development/databases/SQL-Server/T-SQL/functions/object_definition[see here].

}
{ object_id

  → development/databases/SQL-Server/T-SQL/functions/object_id[see here].

}
{ openquery

 `openquery(LinkedSrv, 'select …')` executes a *pass-through* query on the specified *linked server* (first parameter).

  A new linked server can be added with `sp_addLinkedServer`, the names of the currently added linked servers can be determined with `sp_linkedServers`.

}
{ openrowset

  → development/databases/SQL-Server/T-SQL/functions/rowset/openrowset[`openrowset`] allows to query → development/Data[data] from an → development/databases/OLE-DB capable data source.

}
{ scope_identity

  `ident_current` and `@@identity`

}
{ server_property

  → development/databases/SQL-Server/T-SQL/functions/serverproperty[see here].

}
{ str

 `str(expr)` / `str(expr, len)` / `str(expr, len, dec-places)`

  gh|about-MSSQL|/t-sql/functions/str.sql||

}
{ stuff

  `stuff(string, start_pos, length, replace_string)` replaces `length` characters from `start_pos` in `string` with `replace_string`.

  `stuff` can be used to remove the first `n` characters from a string: `stuff(string, 1, n, '')`.

code {
select
  stuff('1234567890', 5, 2, 'abcd'), -- 1234abcd7890
  stuff('1234567890', 5, 0, 'abcd'), -- 1234abcd567890
  stuff('1234567890', 5, 2, ''    ), -- 12347890
  stuff('1234567890', 1, 4, ''    )  -- 567890
code }

}
{ substring

  The SQL server equivalent of Oracle's `substr`:
code {
select substring('1234567890', 5, 3) --> 567
code }

}
{ suser_sname

 `suser_sname` returns the login name associated with a security identification number (SID). When called without the optional parameter, it returns the name of the
  current security context.

}
{ sysdatetime

  `sysdatetime` (and `sysutcdatetime()`) are the → development/databases/SQL-Server/T-SQL/data-types/datetime2[`datetime2`] equivalents of `getDate()` and `getUTCDate()`.

}
{ xact_state

  → development/databases/SQL-Server/T-SQL/functions/xact_state[`xact_state()`] can be used to determine if a → development/databases/SQL-Server/architecture/session[session] (?) has an active
  → development/databases/SQL-Server/architecture/transaction[transaction].


}

sa:
  → development/databases/SQL-Server/T-SQL/functions/regexp[Regular expressions]

  → development/databases/SQL-Server/T-SQL
