$ SQL Server - T-SQL / functions
@ T-SQL functions

{ cast

  → development/databases/SQL-Server/T-SQL/functions/cast[`cast`] converts a value from one → development/databases/SQL-Server/T-SQL/data-types[data type] to another.

}
{ convert

  → development/databases/SQL-Server/T-SQL/functions/convert[`convert`] returns the value of an expression in a different → development/databases/SQL-Server/T-SQL/data-types[data type].

}
{ collationproperty #t-sql-collationproperty

code {
select
   table_schema,
   table_name,
   column_name,
   collation_name,
   collationproperty(collation_name, 'CodePage') code_page,
   collationproperty(collation_name, 'LCID'    ) locale_identifier
from
   → development/databases/SQL-Server/administration/schemas/INFORMATION_SCHEMA/columns[information_schema.columns];
code }

   See also → Windows/development/WinAPI/data-types/index#winnt_LCID[LCID (Windows)]

}
{ dateadd #t-sql-dateadd

  `dateadd` is used for → development/databases/SQL-Server/T-SQL/data-types/date[date] arithmetic.

  The following example adds 10 days to August 28th, 2018:
  gh|about-MSSQL|/t-sql/functions/dateadd.sql||

  See also the → development/languages/VBA/functions/dateAdd[equally named VBA function `dateAdd`].

}
{ datediff #t-sql-datediff

  `dateDiff(datePart, startDate, endDate)` returns the duration between `startDate` and `endDate` in non-fractional `datePart` units.

 `datePart` is an *unquoted* literal and cannot be a → development/databases/SQL-Server/T-SQL/variables[variable]:
  table { ll
    `yy`, `yyyy` ☰ year
    `qq`, `q` ☰ quarter
    `mm`, `m` ☰ month
    `dy`, `y` ☰ dayofyear
    `dd`, `d` ☰ day
    `wk`, `ww` ☰ week
    `hh` ☰ hour
    `mi`, `n` ☰ minute
    `ss`, `s` ☰ second
    `ms` ☰ millisecond
    `mcs` ☰ microsecond
    `ns` ☰ nanosecond
  table }

code {
select
   datediff(day, '2020-03-05', '2020-03-12') -- 7 (days)
code }

}
{ datename #t-sql-datename

  gh|about-MSSQL|/t-sql/functions/datename.sql||

  See also the three functions → development/databases/SQL-Server/T-SQL/functions/_date-related/year-month-day[`year()`, `month()` and `day()`].

}
{ db_name #t-sql-db_name

  If called without arguments, this function returns the current → development/databases/SQL-Server/administration/database[database] name.

  If called with an id, it returns the nam of the database that is identified with this id (see → development/databases/SQL-Server/administration/schemas/sys/objects/views/databases[`sys.databases`]).

}
{ iif

  `iif(condition, value-if-true, value-if-false)`

  The following select statement replaces the value `3` with `99`:
  gh|about-MSSQL|/t-sql/functions/iif.sql||

}
{ format #t-sql-format

  → development/databases/SQL-Server/T-SQL/functions/format[`format()`] creates strings from different → development/databases/SQL-Server/T-SQL/data-types[data types] with a specific format (which *sort of* comes
   closest to the functionality of → development/languages/printf[printf] or → development/misc/strftime[strftime].

}
{ isNull #t-sql-isNull

 `isNull(expr, replacement)` evaluates to the value of `expr` if `expr` is not null and to the value of `replacement` if `expr` is null.

code {
select
   isNull( null , 'replaced') as   returns_replaced,
   isNull('xyz' , 'replaced') as   regturns_xyz
;
code }

}
{ len

  → development/databases/SQL-Server/T-SQL/functions/len[`len(expr)`] returns the string-length of `expr`.

}
{ object_definition

  → development/databases/SQL-Server/T-SQL/functions/object_definition[see here].

}
{ object_id

  → development/databases/SQL-Server/T-SQL/functions/object_id[see here].

}
{ openquery

 `openquery(LinkedSrv, 'select …')` executes a *pass-through* query on the specified *linked server* (first parameter).

  A new linked server can be added with `sp_addLinkedServer`, the names of the currently added linked servers can be determined with `sp_linkedServers`.

}
{ openrowset

  → development/databases/SQL-Server/T-SQL/functions/rowset/openrowset[`openrowset`] allows to query → development/Data[data] from an → development/databases/OLE-DB capable data source.

}
{ round

  → development/databases/SQL-Server/T-SQL/functions/round[`round()`]

}
{ scope_identity

  `ident_current` and `@@identity`

}
{ server_property

  → development/databases/SQL-Server/T-SQL/functions/serverproperty[see here].

}
{ sql_variant_property

 → development/databases/SQL-Server/T-SQL/functions/sql_variant_property[`sql_variant_property()`] allows to inspect properties of an `sql_variant` → development/databases/SQL-Server/T-SQL/data-types[data type].

  I found the function especially useful to determine the data type of any expression.

}
{ str

 `str(expr)` / `str(expr, len)` / `str(expr, len, dec-places)`

  gh|about-MSSQL|/t-sql/functions/str.sql||

}
{ string_split

  → development/databases/SQL-Server/T-SQL/functions/string/split[`string_split`] split a string and create a table with one column that has the parts of the splitted each in one row.

}
{ stuff

  `stuff(string, start_pos, length, replace_string)` replaces `length` characters from `start_pos` in `string` with `replace_string`.

  `stuff` can be used to remove the first `n` characters from a string: `stuff(string, 1, n, '')`.

code {
select
  stuff('1234567890', 5, 2, 'abcd'), -- 1234abcd7890
  stuff('1234567890', 5, 0, 'abcd'), -- 1234abcd567890
  stuff('1234567890', 5, 2, ''    ), -- 12347890
  stuff('1234567890', 1, 4, ''    )  -- 567890
code }

}
{ substring #t-sql-substring

 `substring` returns the part of a string which is indicated by its (1-based) starting position (2nd argument) and its length (3rd argument).

 The SQL server equivalent of Oracle's → development/databases/Oracle/SQL/functions/text/substr[`substr`]. Unlike Oracle's `substr` however, `substring` requires all three parameters.

code {
select substring('1234567890', 5, 3) --> 567
code }

}
{ suser_sname

 → development/databases/SQL-Server/T-SQL/functions/security/suser_sname[`suser_sname`] returns the login name associated with a security identification number (SID). When called without the optional parameter, it returns the name of the
  current security context.

  Compare with → development/databases/SQL-Server/T-SQL/functions/security/suser_name[`suser_name()`]

}
{ sysdatetime #t-sql-sysdatetime

  → development/databases/SQL-Server/T-SQL/functions/_date-related/_now[`sysdatetime`] (and `sysutcdatetime()`) are the → development/databases/SQL-Server/T-SQL/data-types/datetime2[`datetime2`] equivalents of `getDate()` and `getUTCDate()`.

}
{ xact_state

  → development/databases/SQL-Server/T-SQL/functions/xact_state[`xact_state()`] can be used to determine if a → development/databases/SQL-Server/architecture/session[session] (?) has an active
  → development/databases/SQL-Server/architecture/transaction[transaction].


}

sa:
  → development/databases/SQL-Server/T-SQL/functions/regexp[Regular expressions]

  → development/databases/SQL-Server/T-SQL

  → development/databases/SQL-Server/T-SQL/functions/type/id[`type_id(…)`]
