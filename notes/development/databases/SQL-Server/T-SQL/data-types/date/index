$ SQL Server: datatype date

{ Date literals

  { cast as datetime #mssql-cast-as-datetime

    When a string is → development/databases/SQL-Server/T-SQL/functions/cast[cast] as `datetime`, the current language is considered. The following cast would not work if the language was set to `german`, for example.

code {
→ development/databases/SQL-Server/T-SQL/statements/set/language[set language] english
select
  cast('2018-08-28' as datetime)
code }

  }
}
{ functions

  `getdate()` returns a → development/databases/SQL-Server/T-SQL/data-types/datetime[`datetime` datatype] (whose precision is about 3 to 4 milliseconds).
  -
  → development/databases/SQL-Server/T-SQL/functions#t-sql-sysdatetime[`sysdatetime()`] returns a → development/databases/SQL-Server/T-SQL/data-types/datetime2[`datetime2(7)` datatype] (whose precision is
  in the nano seconds).

  `sysdatetime` (or potentially `sysutcdatetime`) should be preferred over `getdate()`.

  `datepart` can be used to extract parts of a date, for example
code {
→ development/databases/SQL-Server/sql/select[select] datepart(hour, sysdatetime());
code }

   A date can be converted into a textual → misc/ISO/8601 representation with a convoluted `convert`:
code {
select convert(varchar(23), getdate       (), 126);
--
-- 2019-06-22T18:01:49.820

select convert(varchar(27), sysutcdatetime(), 127);
--
-- 2019-06-22T16:01:49.8205525
code }

}
{ date arithmetic

  → development/databases/SQL-Server/T-SQL/functions#t-sql-dateadd[`dateadd`]

}

sa:

  The → development/databases/SQL-Server/T-SQL/functions#t-sql-datename[`datename()`] function.

  → development/databases/SQL-Server/T-SQL/data-types/dates/unambigouos[Unambiguous date formats].

  → development/databases/SQL-Server/T-SQL/data-types[data types] and
  → development/databases/SQL-Server/T-SQL/data-types/_date-time[date and/or time related data types]
