$ SQL Server versions

table { llll

  ~Version~ ☰ ­☰ ~nnn~ ☰ ~Codename~

                     ☰  6.0 ☰   ? ☰ SQL95
                     ☰  6.5 ☰   ? ☰ Hydra
                     ☰  7.0 ☰   ? ☰ Sphinx
  SQL Server 2000 (?)☰  8.0 ☰   ? ☰ Shiloh
  SQL Server 2005    ☰  9.0 ☰  90 ☰ Yukon
  SQL Server 2008    ☰ 10.0 ☰ 100 ☰ Katmai
  SQL Server 2008 R2 ☰ 10.5 ☰   ? ☰ Kilimanjaro
  SQL Server → development/databases/SQL-Server/versions/2012[2012] ☰ 11.x ☰ 110 ☰ Denali
  SQL Server 2014    ☰ 12.? ☰ 120 ☰ Hekaton
  SQL Server 2016    ☰ 13.x ☰ 130 ☰ ?
  SQL Server 2017    ☰ 14.x ☰ 140 ☰ ?
  SQL Server → development/databases/SQL-Server/versions/2019[2019]    ☰   ?  ☰  ?  ☰ ?
  SQL Server 2022    ☰   ?  ☰  ?  ☰ ?

table }

*nnn* identifies an → development/databases/SQL-Server version in the directory structure and corresonds to *version* in
→ Windows/dirs/Program-Files/Microsoft-SQL-Server/version[`C:\Program Files\Microsoft SQL Server\nnn`].
-
The value of `nnn` also appears in the → Windows/registry/tree-structure/key[registry key]
→ Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Microsoft-SQL-Server/nnn[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\nnn`].

The (two digit) version number (11 for 2012 etc.) are needed in the (default) naming of the → development/databases/SQL-Server/architecture/instance#mssql-instance-id[instance id].

sa:
  → development/databases/SQL-Server/T-SQL/variables/atat/version[Determine SQL Server version with `@@version`].

  The *Database Experimentation Assistant (DEA)* can be used to evaluate a given workload on a targeted SQL Server version, especially before upgrading.
  -
  The → development/databases/SQL-Server/Data-Migration-Assistant finds compatibility issues between two versions of SQL Server, also especially useful in upgrading scenarios.
