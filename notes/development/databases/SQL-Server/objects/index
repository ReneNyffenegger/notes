$ SQL Server: objects

→ development/databases/SQL-Server/T-SQL/data-types/table[table]

{ Fully qualified object names #mssql-fully-qualified-obj-name

  A *fully qualified object name* consists of four parts: server, → development/databases/SQL-Server/administration/database[database],
  → development/databases/SQL-Server/administration/schemas[schema] and object. These are separated by a dot:
code {
select * from [hst\inst].db.sch.obj;
code }

  The indivdual parts of the fully qualified object name might be omitted from the right side:
code {
select * from [hst\inst].db.sch.obj;
select * from            db.sch.obj;
select * from               sch.obj;
select * from                   obj;
code }

  The schema part might be omitted (but still needs two dots):

code {
select * from  db..obj;
code }

}

{ Showing defitions of objects #mssql-show-obj-definition

  There are a few possibilites to show an object's definition:
    • The → development/databases/SQL-Server/T-SQL/functions/object_definition[`object_definition()` function]
    • The → development/databases/SQL-Server/administration/schemas/sys/objects/views/sql_modules[`sys.sql_modules` view]
    • → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_helptext[The `sp_helptext` system stored procedure]

}
rem {
{ Object types

 table { ll

   ☰ syn
   Assembly (CLR) Stored Procedure      ☰ ✓
   Assembly (CLR) table-valued-function ☰ ✓
   Assembly (CLR) Scalar Function       ☰ ✓
   Assembly Aggregate (CLR) function    ☰ ✓
   Replication filter procedure         ☰ ✓
   Extended Stored procedure            ☰ ✓
   SQL Scalar Function                  ☰ ✓
   SQL table-valued-function            ☰ ✓
   SQL Stored procedure                 ☰ ✓
   SQL Inline-table-valued Function     ☰ ✓
   Tables                               ☰ ✓
   View                                 ☰ ✓

 table }

   If syn has ✓, then `create synonym` is possible for the respective type.


}
rem }
