$ SQL Server: objects

→ development/databases/SQL-Server/T-SQL/data-types/table[table]

{ Fully qualified object names #mssql-fully-qualified-obj-name

  A *fully qualified object name* consists of four parts: server, → development/databases/SQL-Server/administration/database[database],
  → development/databases/SQL-Server/administration/schemas[schema] and object. These are separated by a dot:
code {
select * from [hst\inst].db.sch.obj;
code }

  The indivdual parts of the fully qualified object name might be omitted from the right side:
code {
select * from [hst\inst].db.sch.obj;
select * from            db.sch.obj;
select * from               sch.obj;
select * from                   obj;
code }

  The schema part might be omitted (but still needs two dots):

code {
select * from  db..obj;
code }

  An object name without schema information is first searched in the user's default schema. If not found there, it is searched in the dbo schema. If still not found, an error is thrown.

  { parsename()

   `parsename(qualifed_name, elem_from_right)` is a handy function to get a part of a fully or partially qualified object name:
code {
select parsename('inst.db.sch.obj', 1); -- obj
select parsename('inst.db.sch.obj', 2); -- sch
select parsename('inst.db.sch.obj', 3); -- db
select parsename('inst.db.sch.obj', 4); -- inst
select parsename(        'sch.obj', 1); -- obj
select parsename(        'sch.obj', 2); -- sch
select parsename(        'sch.obj', 3); -- NULL
code }

  }

}

{ Showing definitions of objects #mssql-show-obj-definition

  Some objects (notably views or stored procedures) have a definition.

  There are a few possibilites to show an object's definition:
    • The → development/databases/SQL-Server/T-SQL/functions/object_definition[`object_definition()` function]
    • The → development/databases/SQL-Server/administration/schemas/sys/objects/views/sql_modules[`sys.sql_modules` view]
    • → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_helptext[The `sp_helptext` system stored procedure]

  → development/databases/SQL-Server/T-SQL/functions/object_definition[`object_definition(@obj_id)`] works hand in hand with `object_id()`:
code {
select object_definition(object_id('→ development/databases/SQL-Server/administration/schemas/sys/objects/views/all_objects[sys.all_objects]'));
select object_definition(object_id('sp_msForEachDB'));
code }

}
{ Object ID

  Each object is identified by an numerical ID. This ID can be queried with
  → development/databases/SQL-Server/T-SQL/functions/object_id[`object_id('sch.object_name')`], for example
code {
select object_id('sys.all_objects')
code }

}


{ sys.all_objects

  → development/databases/SQL-Server/administration/schemas/sys/objects/views/all_objects[`sys.all_objects`] shows all schema scoped user defined objects *and* system objects.

}
rem {
{ Object types

 table { ll

   ☰ syn
   Assembly (CLR) Stored Procedure      ☰ ✓
   Assembly (CLR) table-valued-function ☰ ✓
   Assembly (CLR) Scalar Function       ☰ ✓
   Assembly Aggregate (CLR) function    ☰ ✓
   Replication filter procedure         ☰ ✓
   Extended Stored procedure            ☰ ✓
   SQL Scalar Function                  ☰ ✓
   SQL table-valued-function            ☰ ✓
   SQL Stored procedure                 ☰ ✓
   SQL Inline-table-valued Function     ☰ ✓
   Tables                               ☰ ✓
   View                                 ☰ ✓

 table }

   If syn has ✓, then `create synonym` is possible for the respective type.


}
rem }

sa:
 The  → development/databases/SQL-Server/administration/schemas/sys/objects/system-base-tables/sysschobjs[`sys.sysschobjs` system base table] 
