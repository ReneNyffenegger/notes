$ SQL Server: top n queries

{ Creating a test table

  First a test table is → development/databases/SQL-Server/sql/create/table[created] …
  gh|about-MSSQL|/sql/select/top-n/create-table.sql||

  … and → development/databases/SQL-Server/sql/DML/insert[filled] with values:
  gh|about-MSSQL|/sql/select/top-n/create-table.sql|| 

}
{ A simple top n query

  The following simple *top n query* returns 4 records:

  gh|about-MSSQL|/sql/select/top-n/select-top-n.sql|| 

}
{ Combining with order by

  Usually, a top n query should be combined with an → development/databases/SQL-Server/sql/select/order-by[order by clause]:

  The following query returns exactly *four* records, as specified with the `top 4` clause:

  gh|about-MSSQL|/sql/select/top-n/select-top-n-order-by.sql|| 

  However, this might not be what someone wants as there are three records show `txt` value is `def ghi`.

}
{ Using with ties

  The following query returns five records (all three `txt = 'def ghi'` records are now included).

  gh|about-MSSQL|/sql/select/top-n/select-top-n-with-ties-order-by.sql|| 

}
{ Paging the record set

  The `offset n rows fetch next m rows` allows to page through the record set:

  gh|about-MSSQL|/sql/select/top-n/select-row-n-through-m.sql|| 

}
sa:
  → development/databases/Oracle/SQL/select/first-n-rows[Selecting first n rows in Oracle]

  → development/databases/SQLite/sql/select/limit[limit clause in SQLite]
