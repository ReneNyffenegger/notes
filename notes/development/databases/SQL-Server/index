$ SQL Server

→ development/databases/SQL-Server/architecture

→ development/databases/SQL-Server/Reporting-Services

→ development/databases/SQL-Server/Data-Tools

→ development/databases/SQL-Server/Migration-Assistant

→ development/databases/SQL-Server/Data-Migration-Assistant

{ Management tools

  → development/databases/SQL-Server/Management-Studio[SQL Server Management Studio]

  Commandline utilities → development/databases/SQL-Server/tools-utilities/sqlcmd and → development/databases/SQL-Server/tools-utilities/bcp.

  SQL Server → Windows/PowerShell/index provider

  SQL Server Profiler

  Database Tuning Advisor

}
{ Server Mode (?)

  • Multidimensional and Data Mining Mode
  • Tabular Mode
  • PowerPivot Mode

}

{ TODO

  How can I query → development/databases/SQL-Server/administration/database options.

  What is the *guest* account.

  Apparently, the SQL-SMO API allows programmers to administer SQL Server in their applications. 

  `sp_who`

  Show definition of a procedure: `exec sp_helptext 'proc_name'`.

  What is the `sysdiagrams` table? Why does it have to be excluded manually when selecting from `information_schema.tables`?

  What does → development/databases/SQL-Server/sql/functions/db_name[`db_name()`] return?

  How do I loop over a result set in a query (`for r in (select … ) loop`)?

  Apparently, the first part in an object name (`dbo.foo`) refers to the → development/databases/SQL-Server/administration/schemas[schema] name (for example `dbo`).

  How do I extend the length of the returned value in → development/databases/SQL-Server/sql/functions/object_definition[`object_definition()`]? The returned string seems truncated at times.

  → development/databases/SQL-Server/administration/schemas/sys/objects/views/_object_views

  → https://docs.microsoft.com/en-us/sql/t-sql/functions/metadata-functions-transact-sql[Metadata functions]


  How do I comment a table or a column? Apparently with `sp_addextendedproperty`:
code {
execute sp_addextendedproperty 'MS_Description', 
   'This is my table comment',
      'user', @CurrentUser, 'table', 'TABLE_1'
      go
code }
And how will I then get the comment from the → development/databases/SQL-Server/administration/schemas/sys[sys] tables?

code {
use database_name
go
code }

code {
if object_id('dbo.my_procedure', 'P') is not null
   drop procedure dbo.my_procedure
go
code }


Apparently, in → development/databases/SQL-Server/tools-utilities/sqlcmd/, commands starting with a colon (such as → development/databases/SQL-Server/tools-utilities/sqlcmd#sqlcmd-listvar[`:listvar`], are executed immediatly, rather than
stored in the execution buffer (which is executed with the next `GO`):
code {
select
:listvar
@@servername
go
code }

code {
c:\> → development/databases/SQL-Server/tools-utilities/sqlcmd
:setvar name Rene
:setvar bla  moreBla
exec dbo.my_procedure $(name), $(bla)
go
code }




Equivalent of → development/databases/Oracle/installed/packages/dbms/lock[`dbms_lock.sleep`]: `waitfor`.

`substring` instead of `substr`, `charindex` instead of `instr`, `isnull` instead of `nvl`, `getdate` instead of `sysdate`, `choose` instead of `decode`, `print` instead
of `→ development/databases/Oracle/installed/packages/dbms/output[`dbms_output.put_line`], `raiseerror` instead of `raise_application_error`.

code {
convert(data-type, expression [, format])
code }

Automatic filling of primary key:
code {
create table tq84 (
  id bigint IDENTITY(1, 1),
  …
);
code }

With `ansi_nulls off` -> `null = null` is true.

  { Killing a session

code {
c:\> → development/databases/SQL-Server/tools-utilities/sqlcmd -A
select blocked from sys.dm_exec_requests where blocked <> 0;
go
.... some numbers returned ...
kill 42
go
code }

  }
  { VB Script

code {
set oServer = createObject("SQLDmo.SqlServer")  

oServer.loginSecure = true  
oServer.connect "(local)"  

…

oServer.disconnect  
set oServer = nothing  
code }

  Apparently obsoleted in next release.

  }
  { Declaring variables

code {
declare  @var_01    bigint
declare  @var_02       int
declare  @var_03       int           = 42
declare  @var_04    decimal  (18, 6);
declare  @var_05    nvarchar ( max ) = 'abc';
declare  @var_true  bit              =  1   ;
declare   cur_ab    → development/databases/SQL-Server/T-SQL/cursors[cursor]   for select foo, bar from tab;
declare  @tab       table (col_nm int, col_dt datetime); insert into @tab values (…); select * from @tab;
code }

  }
  { Assigning values to variables

  An assignment requires `set` (or `select`):
code {
declare @foo int
declare @bar varchar(10)
set    @foo =   42
select @bar = 'baz'
code }

  }
  { Scope of variables

`go` apparently deletes or removes previously declared variables.

  }
  { Concatenation of strings

code {
@string_one + 'string two'
code }

    If one of the concatenated elements is `null`, then the entire resulting string will be `null`, too. (`concat` might help here)

  }
  { Creating an index if it does not exist

code {
if not exists (
  select *
  from sys.indexes
  where
    name=’IX_TQ84_TAB’ AND
    object_id = OBJECT_ID('[dbo].[TQ84_TAB]')
  )
begin
  create nonclustered index IX_TQ84_TAB
    on dbo.TQ84_TAB(COL_1, COL_2)
end
code }

  }
  { date datatype

code {
set dateformat dmy
code }
Use `exec sp_helplanguage` to determine available date formats.
  
  cast as date:
code {
select * from tab
where
  cast(col_dt as date) = '2017-08-28'
code }
Apparently, `where col_dt = '20170828'` works also.

code {
select
  convert(nvarchar(10), getdate(), 112) as iso_date,
  convert(nvarchar(10), getdate(), 108) as hour_minute_second,
  format (@someDate, 'd', 'en-us'         )  date_en_us,
  format (@someDate, 'd', 'de-de'         )  date_de_de,
  format (@someDate, 'yyyy-MM-dd hh:mm:ss') yyyy_MM_dd__hh_mm_ss
  …
code }

  }
  { procedures

code {
create procedure dbo.my_procedure (
      @param_one nvarchar(42),
      @param_two nvarchar(20),
      @param_out int           output
)
as
  set nocount on
  
  select …
  where
    field_one = @param_one and
    field_two = @param_two;

  set @param_out = 42;

  set nocount off
code }

code {
declare @ret int;
exec dbo.my_procedure('foo', 'bar', @ret out);
code }


  }
  { DBCC

code {
dbcc checkident ('TABLE_NAME', reseed, 0); -- Check current identity value.
code }

  }
  { T-SQL blocks

code {
begin
declare
  @someVar = 42

  …
end
code }

  { if

code {
if @a = @b
   stmt
code }

code {
if @a = @b
begin
   stmtOne
   stmtTwo
   stmtThree
end
code }

  }

code {
begin try
  …
end try
begin catch
  select
    error_number   (),
    error_severity (),
    error_state    (),
    error_procedure(),
    error_line     (),
    error_message  ()
  …
end catch
code }

  }
  { Transactions

    `set transaction isolation level`

    `begin transaction` -> `@@trancount ++`

    `commit` -> `@@trancount --`

    `rollback` -> `@@transcount = 0`

    `@@transcount = 1` -> changes are written to database.

  }
  { Table valued functions

  A table valued function may only contain exactly one
  → development/databases/SQL-Server/sql/select[select statement].

code {
create function u.tabFn (@par int) returns table
as return (
  select
    abc,
    def,
    ghi
  from
    t_bla
  where
    id = @par
);

select * from u.tabFn(42);
code }

  }



}
{ Backing up the database

code {
backup database[$(db)] to disk='$(backup_file)'
code }

}
{ XML

code {
:xml on
select …
code }

}

sa:
  → development/databases/SQL-Server/authentication

  → development/databases/SQL-Server/administration

  → development/databases/SQL-Server/T-SQL[T-SQL]: → development/databases/SQL-Server/T-SQL/functions[functions]

  → development/databases/SQL-Server/helpers[helpers]

links:
   Developer edition of → https://www.microsoft.com/en-us/cloud-platform/sql-server-editions-developers[SQL Server 2016]. Free for
   development and testing.
