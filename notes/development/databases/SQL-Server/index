$ SQL Server

SQL Server is part of the *Microsoft data platform*.

→ development/databases/SQL-Server/architecture

→ development/databases/SQL-Server/Data-Tools

→ development/databases/SQL-Server/Migration-Assistant

→ development/databases/SQL-Server/Data-Migration-Assistant

{ Installing #sql-server-install

  With → Windows/Chocolatey:
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y sql-server-2019
code }

  *TODO*: can → development/databases/SQL-Server/Integration-Services[SSIS] be installed with SQL Server in one step? Does it have to be installed in a separate step?

  After performing a default installation of SQL Server, it can be connected to with → development/databases/SQL-Server/Management-Studio[SQL Server Management Studio] by using a dot (`.`) as Server Name
 *if* SQL Server is running on the same machine as Management Studio:
  gh|about-MSSQL|/img/SSMS-connect-dot.png||

  If installed to the default loaction, the installation directory is → Windows/dirs/Program-Files/Microsoft-SQL-Server[`%programFiles%\Microsoft SQL Server`].

}
{ Management tools

  → development/databases/SQL-Server/Management-Studio[SQL Server Management Studio]

  → Windows/dirs/Windows/SysWOW64/SQLServerManagernn_msc[SQL Server configuration manager]

  Commandline tools that interact with SQL Server include
     • → development/databases/SQL-Server/tools-utilities/sqlcmd
     • → development/databases/SQL-Server/tools-utilities/bcp
     • → Windows/dirs/Program-Files-x86/Microsoft-SQL-Server/version/DAC/bin/SqlPackage_exe[SqlPackage]
     • → development/databases/SQL-Server/tools-utilities/mssql-cli

  → Windows/PowerShell/language/module[PowerShell module] → development/databases/SQL-Server/PowerShell[SqlServer]

  SQL Server Profiler

  Database Engine Tuning Advisor (→ Windows/dirs/Program-Files-x86/Microsoft-SQL-Server/version/Tools/Binn/DTA_EXE, → Windows/dirs/Program-Files-x86/Microsoft-SQL-Server/version/Tools/Binn/DTASHELL_EXE, → Windows/dirs/Program-Files-x86/Microsoft-SQL-Server/version/Tools/Binn/dtaengine_exe)

  The → Microsoft/dot-net/namespaces-classes/Microsoft/SqlServer/Management[`Microsoft.SqlServer.Management`] namespace provides functionality for SQL Server management.

  Data Quality Client

  → development/databases/SQL-Server/Data-Tools[SQL Server Data Tools (SSDT)]

}
{ Server Mode (?)

  • Multidimensional and Data Mining Mode
  • Tabular Mode
  • PowerPivot Mode

}
{ PolyBase #mssql-polybase

  PolyBase allows to query *big data* that is stored in HDFS-compatible Hadoop distributions and file systems (such as HortonWorks, Cloudera and
  → Microsoft/Azure/products/Blob-Storage) from T-SQL.

  With PolyBase, external tables are referenced in queries as though they were ordinary SQL Server tables.

  PolyBase was added to SqlServer in Version 2016.

  With Version 2019, PolyBase added new connectors that can link to external data stored in
    • → development/databases/Oracle
    • Teradata
    • MongoDB
    • Data sources that are accessible with → development/databases/ODBC
  

  It is possible to grant or deny access to data in external tables to/from users by adding them to *Active Directory Users and Groups*.

}
{ Backing up the database

code {
backup database[$(db)] to disk='$(backup_file)'
code }

}
{ XML

code {
:xml on
select …
code }

}
{ Things to get used to

  If both sides of a division are integers, the result is also an integer. That is `select 9/4` results in 2.

  The → development/databases/SQL-Server/sql/select/aggregate[aggregate function] `avg()`, if applied on an
  → development/databases/SQL-Server/T-SQL/data-types/integer[integer] data type → development/databases/SQL-Server/sql/select/aggregate/avg/beware-of-integers[returns an integer].

}
{ R

  → Windows/dirs/Program-Files/Microsoft-SQL-Server/version/R_SERVER/library/RevoScaleR/rxLibs/x64/RegisterRExt_exe#sql-server-enable-r-package-mgmt

  → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_execute_external_script[`sp_execute_external_script`]

}
{ TODO

  How can I query → development/databases/SQL-Server/administration/database options.

  What is the *guest* account.

  Apparently, the SQL-SMO API allows programmers to administer SQL Server in their applications. 

  → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_who[`sp_who`]

  Show definition of a procedure: `exec sp_helptext 'proc_name'`.

  What is the `sysdiagrams` table? Why does it have to be excluded manually when selecting from `information_schema.tables`?

  → Windows/dirs/Program-Files/Microsoft-SQL-Server/version/DTS/Binn/DTSWizard_exe[`DTSWizard.exe`] (The SQL Server Import and Export Wizard).

  How do I loop over a result set in a query (`for r in (select … ) loop`)?

  Setting columns to `not null`:
code {
alter table TAB alter column COL integer not null;
code }

  How do I extend the length of the returned value in → development/databases/SQL-Server/T-SQL/functions/object_definition[`object_definition()`]? The returned string seems truncated at times.

  → development/databases/SQL-Server/administration/schemas/sys/objects/views/_object_views

  → https://docs.microsoft.com/en-us/sql/t-sql/functions/metadata-functions-transact-sql[Metadata functions]

  → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_executesql[`sp_executesql`]

  The *Microsoft Container Registry* at mcr.microsoft.com is the official container registry for the distribution of Microsoft product containers.

  How do I comment a table or a column? Apparently with `sp_addextendedproperty`:
code {
execute sp_addextendedproperty 'MS_Description', 
   'This is my table comment',
      'user', @CurrentUser, 'table', 'TABLE_1'
      go
code }
And how will I then get the comment from the → development/databases/SQL-Server/administration/schemas/sys[sys] tables?


code {
if object_id('dbo.my_procedure', 'P') is not null
   drop procedure dbo.my_procedure
go
code }


Apparently, in → development/databases/SQL-Server/tools-utilities/sqlcmd/, commands starting with a colon (such as → development/databases/SQL-Server/tools-utilities/sqlcmd#sqlcmd-listvar[`:listvar`],
are executed immediately, rather than stored in the execution buffer (which is executed with the next `GO`):
code {
select
:listvar
@@servername
go
code }

code {
c:\> → development/databases/SQL-Server/tools-utilities/sqlcmd
:setvar name Rene
:setvar bla  moreBla
exec dbo.my_procedure $(name), $(bla)
go
code }


code {
convert(data-type, expression [, format])
code }

Automatic filling of primary key:
code {
create table tq84 (
  id bigint IDENTITY(1, 1),
  …
);
code }

With `ansi_nulls off` -> `null = null` is true.


  { From Oracle to SQL Server 

    table { ll
      ~Oracle~  ☰ ~SQL Server~
      → development/databases/Oracle/SQL/functions/text/substr[`substr`]  ☰ `substring`
      `instr`   ☰ `charindex`
      → development/databases/Oracle/SQL/functions/null-related#nvl[`nvl`]  ☰ → development/databases/SQL-Server/T-SQL/functions/isNull[`isNull`]
      → development/databases/Oracle/SQL/functions/date/sysdate[`sysdate`] ☰ `getDate`
      `decode`  ☰ `choose`
      `raise_application_error` ☰ → development/databases/SQL-Server/T-SQL/raiserror[`raisError`]
      → development/databases/Oracle/installed/packages/dbms/output[`dbms_output.put_line`] ☰ `print`
      → development/databases/Oracle/installed/packages/dbms/lock[`dbms_lock.sleep`] ☰ `waitfor`
    table }
  }
  { Create database

code {
create database tq84_db;
create database another_db;
go
code }

code {
use tq84_db
go

use another_db
go
code }

Determine current database name:
code {
select → development/databases/SQL-Server/T-SQL/functions#t-sql-db_name[db_name()]
code }

  { Collation

    A database can be created in a specific → development/Unicode/collation[collation]:
code {
create database tq84_db
       collate SQL_Latin1_General_CP1_CI_AS;
code }

   Determine → development/Unicode/collation[collation] of a database:
code {
select databasepropertyex('tq84_db', 'collation');
code }

  }


  }
  { VB Script

code {
set oServer = createObject("SQLDmo.SqlServer")  

oServer.loginSecure = true  
oServer.connect "(local)"  

…

oServer.disconnect  
set oServer = nothing  
code }

  Apparently obsoleted in next release.

  }
  { Declaring variables

code {
declare  @var_01    bigint
declare  @var_02       int
declare  @var_03       int           = 42
declare  @var_04    decimal  (18, 6);
declare  @var_05    nvarchar ( max ) = 'abc';
declare  @var_true  bit              =  1   ;
declare   cur_ab    → development/databases/SQL-Server/T-SQL/cursors[cursor]   for select foo, bar from tab;
declare  @tab       table (col_nm int, col_dt datetime); insert into @tab values (…); select * from @tab;
code }

  }
  { Assigning values to variables

  An assignment requires `set` (or `select`):
code {
declare @foo int
declare @bar varchar(10)
set    @foo =   42
select @bar = 'baz'
code }

  }
  { Scope of variables

`go` apparently deletes or removes previously declared variables.

  }
  { Concatenation of strings

code {
@string_one + 'string two'
code }

    If one of the concatenated elements is `null`, then the entire resulting string will be `null`, too. (`concat` might help here)

  }
  { Creating an index if it does not exist

code {
if not exists (
  select *
  from sys.indexes
  where
    name=’IX_TQ84_TAB’ AND
    object_id = OBJECT_ID('[dbo].[TQ84_TAB]')
  )
begin
  create nonclustered index IX_TQ84_TAB
    on dbo.TQ84_TAB(COL_1, COL_2)
end
code }

  }
  { date datatype

code {
set dateformat dmy
code }
Use `exec sp_helplanguage` to determine available date formats.
  
  cast as date:
code {
select * from tab
where
  cast(col_dt as date) = '2017-08-28'
code }
Apparently, `where col_dt = '20170828'` works also.

code {
select
  convert(nvarchar(10), getdate(), 112) as iso_date,
  convert(nvarchar(10), getdate(), 108) as hour_minute_second,
  format (@someDate, 'd', 'en-us'         )  date_en_us,
  format (@someDate, 'd', 'de-de'         )  date_de_de,
  format (@someDate, 'yyyy-MM-dd hh:mm:ss') yyyy_MM_dd__hh_mm_ss
  …
code }

  }
  { T-SQL blocks

code {
begin
declare
  @someVar = 42

  …
end
code }

  { if

code {
if @a = @b
   stmt
code }

code {
if @a = @b
begin
   stmtOne
   stmtTwo
   stmtThree
end
code }

  }

code {
begin try
  …
end try
begin catch
  select
    error_number   (),
    error_severity (),
    error_state    (),
    error_procedure(),
    error_line     (),
    error_message  ()
  …
end catch
code }

  }

  { Service accounts

   SQL Server Express 2012 seemed to install or use the following accounts 
table { ll
   → Windows/services[Service] ☰ → Windows/user-account[Account]
   SQL Server Database Engine ☰ NT Service\MSSQL$SQLEXPRESS
   SQL Server Browser ☰ NT AUTHORITY\LOCAL SERVICE
table } 

  }
  { Data Directories

    Data directories apparently can be specified for
      • System database
      • User databases
      • User database logs
      • Temp databases
      • Temp database logs
      • backups

  }
  { SMO - SQL Server Management Objects

    *SQL Server Management Objects* allow to manage an SQL Server programatically. Thus,
    these object complement the functionality of → development/databases/SQL-Server/Management-Studio[Management Studio].

  }
  { Schemas

    Schemas can be owned by any *database principal*.
    -
    A principal can own multiple schemas

    By default, objects in a schema are owned by the *security principal* that owns the schema.
    However, ownership can be transferred with `alter authorization …`.

    There are ten predefined schemas. They have the same name as the built-in database users.
    -
    Of these ten predefined schemas, the following four cannot be deleted:
      • `dbo`, the default schema for a newly created → development/databases/SQL-Server/administration/database[database], owned by the `dbo` user.
      • `guest`
      • `sys`
      • → development/databases/SQL-Server/administration/schemas/INFORMATION_SCHEMA[`INFORMATION_SCHEMA`]


  }

  { Users, roles, princicpals etc.

    Roles are either
      • fixed server roles
      • fixed database roles
      • user-defined database roles

    The fixed server roles are
      • sysadmin
      • serveradmin
      • securityadmin
      • processadmin
      • setupadmin
      • bulkadmin
      • diskadmin
      • dbcreator
      • public

    Everyone belongs to the *public* fixed server role and receives any permission assigned there.

  }
  { Security

    Extensible Key Management (EKM) module holds symmetric or asymmetric keys outside of SQL Server.

    *Transparent Data Encryption (TDE)* encrypts an entire → development/databases/SQL-Server/administration/database with a symmetric key, the so-called *database encryption key* (DEK).
    TDE secures against the threat of someone having direct access to the media on which the senstitive data is stroed.
    -
    The database encryption key itself is protected by
      • a certificate protected by the database master key of the master database, or
      • by an asymmetric key stored in an EKM.

    *Database master keys* are protected by the *Service Master Key*. The *Service Master Key* is created when SQL Server starts up and is encrypted with the *Windows Data Protection API (DPAPI)*.

  }

  { Components

    SQL Server compenents are
      • SQL Server Database Engine
      • → development/databases/SQL-Server/Analysis-Services[Analysis Services (SSAS)]
      • → development/databases/SQL-Server/Reporting-Services[Reporting Services (SSRS)]
      • → development/databases/SQL-Server/Integration-Services[Integration Services (SSIS)]
      • Master Data Services (For Master Data Management)
      • Machine Learning Services (In-Database)
      • Machine Learning Server (Standalone)

  }
  { Features that support High Availability

    Features that support HA include
     • Log shipping
     • Database mirroring
     • Backup compression
     • Database snapshot
     • Always On failover cluster instances
     • Always On availability groups
     • Basic availability groups
     • Automatic read write connection re-routing
     • Online page and file restore
     • Online index create and rebuild
     • Resumable online index rebuilds
     • Online schema change
     • Fast recovery
     • Accelerated database recovery
     • Mirrored backups
     • Hot add memory and CPU
     • Database recovery advisor
     • Encrypted backup
     • Hybrid backup to Windows Azure (backup to URL)
     • Cluster-less availability group
     • Failover servers for disaster recovery
     • Failover servers for high availability
     • Failover servers for disaster recovery in Azure

  }
  { Scalability and performance feeatures

    Scalability and → development/databases/SQL-Server/administration/performance-tuning[performance] features include
      • Columnstore
      • Large object binaries in clustered columnstore indexes
      • Online non-clustered columnstore index rebuild
      • → development/databases/SQL-Server/architecture/In-Memory-OLTP[In-Memory] Database: In-Memory OLTP
      • → development/databases/SQL-Server/architecture/In-Memory-OLTP[In-Memory] Database: hybrid buffer pool
      • → development/databases/SQL-Server/architecture/In-Memory-OLTP[In-Memory] Database: memory-optimized tempdb metadata
      • → development/databases/SQL-Server/architecture/In-Memory-OLTP[In-Memory] Database: persistent memory support
      • Stretch database
      • Multi-instance support
      • Table and index partitioning
      • Data compression
      • Resource governor
      • Partitioned table parallelism
      • Multiple filestream containers
      • NUMA aware and large page memory and buffer array allocation
      • Buffer pool extension
      • IO resource governance
      • Read-ahead
      • Advanced scanning
      • Delayed durability
      • Intelligent Database: automatic tuning
      • Bulk insert improvements

    See also → development/databases/SQL-Server/administration/performance-tuning#mssql-iqp-features

  }
  { Security features

    → development/databases/SQL-Server/administration/security[Security] features include
       • Row-level security
       • Always Encrypted
       • Always Encrypted with Secure Enclaves
       • Dynamic data masking
       • Server audit
       • Database audit
       • Transparent database encryption
       • Extensible key management
       • User-defined roles
       • Contained databases
       • Encryption for backups
       • Data classification and auditing

  }
  { Replication features

    Replication features include
      • Heterogeneous subscribers
      • Merge replication
      • Oracle publishing
      • Peer to peer transactional replication
      • Snapshot replication
      • SQL Server change tracking
      • Transactional replication
      • Transactional replication to Azure
      • Transactional replication updateable subscription

  } 
  { Management tools

     Management tools include
         • SQL Management Objects (SMO)
         • SQL Assessment API
         • SQL Vulnerability Assessment
         • SQL Configuration Manager
         • SQL CMD (Command Prompt tool)
         • Distributed Replay - Admin Tool
         • Distribute Replay - Client
         • Distributed Replay - Controller
         • SQL Profiler
         • → development/databases/SQL-Server/architecture/services/agent
         • Microsoft System Center Operations Manager Management Pack
         • Database Tuning Advisor (DTA)
  }
  { RDBMS manageability

    RDBMS manageability features include
      • User instances
      • LocalDB
      • Dedicated admin connection
      • SysPrep support 1
      • PowerShell scripting support2
      • Support for data-tier application component operations - extract, deploy, upgrade, delete
      • Policy automation (check on schedule and change)
      • Performance data collector
      • Able to enroll as a managed instance in multi-instance management
      • Standard performance reports
      • Plan guides and plan freezing for plan guides
      • Direct query of indexed views (using NOEXPAND hint)
      • Direct query SQL Server Analysis Services
      • Automatic indexed views maintenance
      • Distributed partitioned views
      • Parallel indexed operations
      • Automatic use of indexed view by query optimizer
      • Parallel consistency check
      • SQL Server Utility Control Point
      • Buffer pool extension
      • Master instance for → development/databases/SQL-Server/Big-Data-Clusters[big data cluster]
      • Compatibility certification

  }
  { Development tools

    Development tools include
       • Microsoft Visual Studio integration
       • Intellisense (Transact-SQL and MDX)
       • → development/databases/SQL-Server/Data-Tools[SQL Server Data Tools (SSDT)]
       • → development/Data/OLAP/MDX edit, debug, and design tools

  }

}

sa:

  → development/databases/SQL-Server/sql

  → development/databases/SQL-Server/authentication

  → development/databases/SQL-Server/administration

  → development/databases/SQL-Server/T-SQL[T-SQL]: → development/databases/SQL-Server/T-SQL/functions[functions],
  → development/databases/SQL-Server/T-SQL/procedures[stored procedures].

  → development/databases/SQL-Server/helpers[helpers]

  → development/databases/SQL-Server/architecture/transaction[Transactions]

  → Windows/dirs/Windows/System32/cliconfg_exe[`cliconfg.exe`] is a tool for configuring SQL Server aliases.

  → Windows/dirs/Program-Files-x86/Microsoft-SQL-Server/version/Tools/Binn/SQLPS_exe starts a → Windows/PowerShell session with the *SQL Server PowerShell provider*.

  The → Windows/registry[registry] keys
    • → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/MSSQLServer[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSSQLServer`]
    • → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/ODBC/ODBCINST_INI/SQL-Server[`HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\SQL Server`]

  → development/databases/SQL-Server/versions[SQL Server versions] (see also → development/databases/determine-versions).

  The → development/databases/OLE-DB/provider for SQL Server is *SQLOLEDB*.

  → development/databases/SQL-Server/editions

  → development/databases/SQL-Server/architecture/services[Services]:
    • → development/databases/SQL-Server/Reporting-Services (SSRS)
    • → development/databases/SQL-Server/Integration-Services (SSIS)
    • → development/databases/SQL-Server/Analysis-Services (SSAS)


  → Microsoft/dot-net/namespaces-classes/System/Data/SqlClient[`System.Data.SqlClient`] is the → Microsoft/dot-net namespace for the → Microsoft/dot-net/ADO#dot-net-data-provider[Data Provider] for → development/databases/SQL-Server.

  The point in time that SQL Server was last started is recorded in the column `sqlserver_start_time` of the → development/databases/SQL-Server/administration/schemas/sys/objects/views/dm/os/sys/info[`sys.dm_os_sys_info`] view.

  → Microsoft/Azure/products/SQL is a family of Azure services in the → Microsoft/Azure cloud that are built on the SQL Server database engine.

  → Microsoft/Azure/products/SQL-Managed-Instance is almost 100% compatible with the Enterprise → development/databases/SQL-Server/editions[Edition] of SQL Server and allows to *lift and shift* existing SQL Server
  applications to the cloud.


links:
   Developer edition of → https://www.microsoft.com/en-us/cloud-platform/sql-server-editions-developers[SQL Server 2016]. Free for
   development and testing.
