$ sqlcmd.exe
@ sqlcmd

The *sqlcmd* utility is very useful because it can be executed from a command line (→ Windows/dirs/Windows/System32/cmd_exe). It might be the → development/databases/SQL-Server counterpart
to → development/databases/Oracle/SQL-Plus/.

sqlcmd superseeds → development/databases/SQL-Server/tools-utilities/osql.

{ Connect to an instance

  In order to connect to the default → development/databases/SQL-Server/architecture/instance of the SQL Server on the current machine simply use `sqlcmd`:
code {
C:\> sqlcmd
code }
  
  In order to connect to another instance, use the `-S` option.

code {
C:\> sqlcmd -S Hostname\InstanceName
code }

  If the instance is running on the same server, instead of `Hostname`, a dot can be used:
 
code {
C:\> sqlcmd -S .\InstanceName
code }

  If the server is running on a non default port, the port number is indicated after a comma:
code {
C:\> sqlcmd -S HOST05,55101
code }

  The name of the server can also be stored in the → development/environment-variable[environment variable] `SQLCMDSERVER`. sqlcmd will then use this value if not executed with the `-S` option.
code {
C:\> → Windows/dirs/Windows/System32/cmd_exe/commands/set[set] SQLCMDSERVER=SRV03\InstXYZ
C:\> sqlcmd -d TQ84DB -i theScript.sql
code }

  In order to create a → development/databases/SQL-Server/administration/dedicated-administrator-connection[dedicated administrator connection], the `-A` option can be used:
code {
C:\> sqlcmd -S . -A
code }

}
{ Specify the database to connect to

   The `-d` option controls which database `sqlcmd` connects to (so that there is no need to use the `use` statement).
code {
C:\> sqlcmd -S … -d myDatabase
code }

  The value of the database can also be stored in the environment variable `SQLCMDDBNAME`.

}
{ Executing a script

  sqlcmd executes the comma separated list of SQL script files if executed with `-i`:
code {
C:\> sqlcmd … -i scriptOne.sql,scriptTwo.sql
code }

  When sqlcmd executes a script, it might print lots of `(n rows affected)` messages. In order to turn off such messages, the first
  → development/databases/SQL-Server/T-SQL/statements[statement] in the script should be
code {
→ development/databases/SQL-Server/T-SQL/statements/set#mssql-set-nocount[set nocount on]
code }

}
{ Execute ad-hoc statements

  With the `-q` and `-Q` option, »ad-hoc statements« can be executed, that is: statements that are entered in `cmd.exe`:

code {
C:\> sqlcmd -q → development/databases/SQL-Server/administration/schemas/sys/objects/stored-procedures/sp_who[sp_who]
exit
code }

code {
C:\> sqlcmd -Q sp_who
code }

  Both execute the `sp_who` stored procedure.

  The difference between `-q` and `-Q` is that `-q` does not terminate the sqlcmd session after executing the given statement,
  so it must be explicitely exited. `-Q` just executes the specified statement and automatically exits.

  If the executed statement consists of multiple words, they must be quoted:
code {
C:\> sqlcmd -Q "→ development/databases/SQL-Server/sql/select[select] col_1, col_2 from tab"
code }

}
{ Specifying the batch terminator #sqlcmd-c

  The default → development/databases/SQL-Server/sql/batch[batch] terminator is → development/databases/SQL-Server/sql/go[`go`] which needs to be entered to execute queries.
  -
  This default can be changed with the `-c` option:
code {
C:\> sqlcmd -S … -c ";"
code }

  Unfortunately, the `;` still needs to be entered on a seperate input line.

}
{ Writing output to a file

  An output file can be stated with the `-o` option:
code {
C:\> sqlcmd -S Hostname\InstanceName -i f:\project\some\script.sql -o f:\project\output\file.dat
code }

  Alternatively, the `:out` statement can be used *within* an SQL script to specify a log file. The following script assumes that the
  → Windows/development/environment-variables/TEMP-TMP[environment variable `TEMP`] is already set when `sqlcmd` is invoked:
  gh|about-MSSQL|/tools/sqlcmd/out.sql||

}
{ Set quoted_identifier on #sqlcmd-quoted_identifier

  By default, `sqlcmd` sets → development/databases/SQL-Server/T-SQL/statements/set/quoted_identifier[`quoted_identifier`] to `off`. In order to change this default, the `-I` option is needed:
code {
C:\> sqlcmd … -I …
code }

}
{ Authentification options

  Credentials for authentification to the Server can be specified with `-E`, `-U` and `-P`.
  
  `-E` (use Windows authentification) is the default.

}
{ Printing (echoing) text

  gh|about-MSSQL|/tools/sqlcmd/print.sql||

}
{ Scripting variables #sqlcmd-variable

  { Defining scripting variables

    A scripting variable might be set with `:setvar`.
    -
    In an SQL script, the variable is referenced with `$(varName)`:
    gh|about-MSSQL|/tools/sqlcmd/setvar.sql||
  
    Alternatively, a variable can be set with when `sqlcmd` is started with the command line option `-v varName=varValue`.
    -
    The following script creates a table with one column and inserts one value into the table. All variables, table name, column name and inserted value, can be dynamically set when `sqlcmd` is executed with the `-i` and `-y` options:
    gh|about-MSSQL|/tools/sqlcmd/scripting-variables/dynamic-table-and-column-name.sql||

  }
  { Showing scripting variables #sqlcmd-listvar

    The currently set scripting variables can be displayed with
code {
:listvar
code }

  }
  { Predefined scripting variables

    gh|about-MSSQL|/tools/sqlcmd/scripting-variables/predefined.sql||

  }
  { Environment variables

    Environment variables that were already set when `sqlcmd.exe` is invoked can also be used in scripts:
code {
C:\> → Windows/dirs/Windows/System32/cmd_exe/commands/set TXT=Hello World
C:\> sqlcmd -S … -d … 
1> print("$(TXT), I am $(→ Windows/development/environment-variables/USERNAME[username])");
2> → development/databases/SQL-Server/sql/go
code }


  }
}
{ Reading (sourcing) another file

  Another SQL script file can be read and executed with the `:r` command.
  gh|about-MSSQL|/tools/sqlcmd/read-file.sql||

  Variables are passed to the read file
  gh|about-MSSQL|/tools/sqlcmd/file-to-read.sql||

}
{ Connecting to another instance #connect

  With `:connect`, it's possible to connect to another → development/databases/SQL-Server/architecture/instance

code {
:connect Hostname\InstanceName
code }

}
{ Raising the error level to suppress informational messages

  sqlcmd operates with an *error level* which is a threshold value that controls which messages are sent to → development/stdin-stdout-stderr[stdout]. The higher this threshold value is, the less messages are displayed.

  Because the default error level value is 0, even informational messages (such as *Changed database context to …* are emitted when an sql script executes a `use DB` statement is executed).

  When sqlcmd is invoked, the error level can be set with the `-m` option. 
code {
sqlcmd -m 1 …
code }

  Note: the error level that is set with `-m` should not be confused with the error level that is returned to the caller with `:exit(…)`.

}
{ Checking errorlevel in scripts

  When a script terminates with an error, it sets the corresponding `%errorlevel%`.
  
  This can be checked in a `.bat` file.

  { run-sql-script.bat

    This batch script tries to run the script that is passed as argument.

    If `sqlcmd` encounters an error, it immediatly returns (because of the `-b` option) and sets `%errorlevel%`. This
    can be checked by the script

    gh|about-MSSQL|/tools/sqlcmd/check-errorlevel/run-sql-script.bat||

    The at signs in front of each command prevent → Windows/dirs/Windows/System32/cmd_exe from echoing the command when being run.

  }
  { script-with-error.sql

    The following script contains an error.

    gh|about-MSSQL|/tools/sqlcmd/check-errorlevel/script-with-error.sql||

  }
  { script-without-error.sql

    This script should be fine

    gh|about-MSSQL|/tools/sqlcmd/check-errorlevel/script-without-error.sql||

  }
  { exit-with-errorcode.sql

    This script exits with a specific error code:
    gh|about-MSSQL|/tools/sqlcmd/check-errorlevel/exit-with-errorcode.sql||

  }
  { run-sql-scripts.bat

    `run-sql-scripts.bat` (note the plural) runs the three scripts.

    gh|about-MSSQL|/tools/sqlcmd/check-errorlevel/run-sql-scripts.bat||

  }
}
{ sqlcmd statments are executed before the script content is run

  It should be noted that sqlcmd statements are executed *before* the script is run as a → development/databases/SQL-Server/sql/batch[batch].
  Particularly, variable assignments using `:setVar` might lead to unexpected results if used in an → development/databases/SQL-Server/T-SQL/statements/if[`if` statement]:
  gh|about-MSSQL|/tools/sqlcmd/preprocessed.sql||

  This script prints
code {
This text is printed
second assignment
code }

}
{ sqlcmd mode in management studio

  From a query editor in → development/databases/SQL-Server/Management-Studio[management studio], it's possible to go into *sqlcmd mode*: Menu Query -> SQLCMD Mode.

}
sa:

  → development/databases/SQL-Server/tools-utilities/sqlcmd/on-error-exit[`:on error exit`] instructs sqlcmd to immediatly abort a script if it encounters an error.

  → development/databases/SQL-Server/tools-utilities/sqlcmd/options/i[Specifying an sql file to be executed] when sqlcmd is invoked.

  → development/databases/SQL-Server/tools-utilities/sqlcmd/colon

  → development/databases/SQL-Server/tools-utilities/sqlcmd/scripts[scripts]

  The executable `sqlcmd.exe` is located under
  → Windows/dirs/Program-Files/Microsoft-SQL-Server/Client-SDK/ODBC/nnn/Tools/Binn[`%programfiles%\Microsoft SQL Server\Client SDK\ODBC\nnn\Binn`]

  → development/databases/SQL-Server/tools-utilities

links:
  → https://github.com/Microsoft/mssql-scripter[mssql-scripter] is an open source command line tool, written in → development/languages/Python, to access SQL Server.
