
{ Rulesets, selectors, declarations, properties and property values

  { Declaration

    A *declaration* consists of a → development/web/CSS/properties[property (name)] and the assigned *property value*.

    The property value follows the property name and is separated by a colon from it:
code {
→ development/web/CSS/properties/position: absolute
code }

    Multiple declarations are separated by a semicolon (`;`) from each other:
code {
→ development/web/CSS/properties/position: absolute; → development/web/CSS/properties/font-family: monospace; …
code }

  }
  { Selector

    A → development/web/CSS/selectors[selector] selects the
    → development/web/HTML/tags[(HTML) elements] for which a list of declarations applies.

    The list of declarations is embedded in curly braces.

    So called pseudo selectors (such as `::first-letter`) allow to select portions of the document that don't correspond to an element.

  }
  { Ruleset

    A *ruleset* assigns a list of declarations to a selector.

    The following snippet shows a *ruleset*.
    -
   `div` is the selector.
    -
    The text between `{` and `}` are the declarations:
code {
→ development/web/HTML/tags/div {
   → development/web/CSS/properties/position   : absolute;
   → development/web/CSS/properties/font-family: monospace;
   …
}
code }

    Sometimes, a *ruleset* is referred to simply as a *rule*.

  }


}
{ Rendering content

  CSS specify how structured document (i. e. → development/web/HTML elements in a → development/web/DOM[DOM]) should be rendered on various output devices such
  as screen, print etc.

  { Canvas

    The space on which the content is rendered is referred to as *canvas*.

    The size of the canvas is infinite in each direction.
    -
    Space must not only be thought of as euclidean (thik *aural* user agents).



  }
  { Viewport #css-viewport
  
    In case of visual canvases, the visible part of the canvas is limited by the *viewport* which is the window that the browser (UA) offers to look upon the canvas.

    Usually, if the viewport is smaller than the size required by elements on the canvas, the viewport is decorated with scrollbars that allow to move the canvas in order to see different parts.

    However, elements whose `→ development/web/CSS/properties/position` attribute is set to `fixed` are fixed in respect to the viewport. So, they stay at the same place if
    the scroll bars are used to move the canvas.

  }

}
{ Specification

  The CSS specification is maintained by the → development/standards/W3C.

}
{ CSS Level 1, 2, 3, …

  CSS Level 1 was the first published CSS specification (December 1996).
  -
  This Level is considered obsolete.

  CSS Level 2 (published May 1998) is a revision of CSS Level 1 that addressed issues that were not covered in CSS Level 1

  Both, CSS Level 1 and Level 2, fit into a single document.

  Because of its many problems, the errata list of CSS Level 2 was not updated any further, instead, CSS2.1 was started working on.

  For Level 3 and beyond, it was decided to publish the standard in multiple modules to make the entire process more manageable.
  -
  There is no CSS Level 3 or even CSS Level 4, rather, each module goes through Levels.

}
{ Interfaces and Mixins

  Some interfaces (APIs) that CSS specifies include
    • StyleSheet
    • CSSGroupingRule
    • CSSImportRule
    • CSSNamespaceRule
    • CSSMarginRule
    • CSSMediaRule
    • CSSPageRule
    • → development/web/CSS/interfaces-mixins/CSSRule
    • CSSRuleList
    • → development/web/CSS/interfaces-mixins/CSSStyleDeclaration
    • CSSStyleRule
    • → development/web/CSS/interfaces-mixins/CSSStyleSheet
    • LinkStyle
    • MediaList
    • StyleSheetList

  Some mixins include
    • CSSInlineStyle
    • DocumentOrShadowRoot (which is an extension to the same mixin of the → development/web/DOM)
    • ElementCSSInlineStyle
    • LinkStyle

  These interfaces and mixins are defined in → https://drafts.csswg.org/cssom[CSSOM].

}
{ Misc

  → development/web/CSS/properties

  → development/web/CSS/inline-vs-external

  → development/web/CSS/line-breaking[Line breaking] and its prevention.

  → development/web/CSS/selectors[Selector]

  → development/web/CSS/snippets

  → development/web/CSS/javascript

  Creating → development/web/CSS/tables/responsive[responsive tables] with CSS.

}
{ TODO

  { Functions

     Some functions are:
       • `attr()`
       • `calc()`
       • `color()` (see also the `@color-profile` at-rule)
       • `cubig-bezier()`
       • `drop-shadow()`
       • `element()`
       • → design/graphic/color[Color] related: `rgb()`, `rgba()`, `hsl()` and `hsla()`
       • `image()`
       • `opacity()`
       • `perspective()`
       • `rect()`
       • `url()`

    Filter related functions
      • `blur()`
      • `brightness()`
      • `contract()`
      • `grayscale()`
      • `invert()`
      • `hue-rotate()`
      • `saturate()`
      • `sepia()`
      • `matrix()`
      • `matrix3d()`
      • `rotate()`
      • `rotate3d()`
      • `rotateX()`
      • `rotateY()`
      • `rotateZ()`
      • `scale()`
      • `scaleY()`
      • `scaleZ()`
      • `skew()`
      • `skewX()`

  }
  { At-rules

    Some @-rules are
    table { ll
      `@charset` ☰ Specifies the → development/Unicode/character-encoding for the style sheet and is especially useful when using non-→ development/Unicode/ASCII characters in → development/web/CSS/properties[properties] like `→ development/web/CSS/properties/content`. If used, it must be the first element in a style sheet.
      `@color-profile` ☰ Defines a color profile which can then be referred to using the `color()` function.
      `@container` ☰ Apply styles to certain containers: `@container (width > 768px) { → development/web/CSS/properties/font/size: … }`. Compare with `→ development/web/CSS/selectors/at-rules/media`.
      `@counter-style` ☰ See also → development/web/HTML/tags/ul-ol-li[`<li>`] elements and the → development/web/CSS/properties/list-style[`list-style-*`] properties.
      `@document` ☰ *Deprecated*
      `@font-face` ☰ Specifies a custom → design/font
      `@font-feature-values` ☰
      `@import` ☰ Imports style rules from other stylesheets. Must be specified as the first at-rule after the optional `@charset` rule. Note that `@import url("path/to.css")` → https://stackoverflow.com/a/24579614/180275[is equivalent] to `@import "path/to.css"`.
      `@keyframes` ☰ Allows to control a transition sequence more precisely than using the → development/web/CSS/properties/transition[`transition-*`] properties.
      `@layer` ☰ Defines a cascade layer.
      `→ development/web/CSS/selectors/at-rules/media` ☰ Apply portions a style sheet based on the result of (one or more) *media queries*. In → development/languages/JavaScript, the rules that were created with `@media` can be accessed with the `CSSMediaRule` interface. `@container` rules are an alternative to `@media` rules.
      `@namespace` ☰ Defines → development/XML namespaces for a style sheet.
      `@page` ☰ Modifies properties of a *printed page*
      `@property` ☰ An *experimental* at-rule which allows to define  custome CSS properties. `@property` is part of the CSS Houdini umbrella of APIs.
      `@supports` ☰ Uses a *feature query* so that certain CSS declarations are only applied if a → development/web/browser[browser] supports a given set of CSS features.
    table }
    
code {
@media (prefers-color-scheme: light) { body { background-color: #f1f1f1; color: #151515; }}
@media (prefers-color-scheme: dark ) { body { background-color: #151515; color: #f1f1f1; }}
code }

code {
@font-face {
   font-family :'qualita rossa';
   font-style  : normal;
   font-weight : 400;
   font-stretch: 100%;

   src: url(https://fonts.server.xyz/….woff2)
        format('woff2');
   unicode-range: U+1F00-1FFF;
}
code }

code {
@font-face {
   font-family: "foo bar baz font";
      src: url("/res/foo-bar-baz.woff2") format("woff2"),
           url("/res/foo-bar-baz.woff" ) format("woff" )
         ;
}
code }

code {
@font-face {
   font-family: "fonty new 7";
   src: local("…"),
        url("fonty-new-7.otf"),
   format("opentype")
   tech(color-COLRv1)
   …
}
code }

  }
  { @mixin

   `@mixin` is a → https://sass-lang.com/guide/#mixins[Sass «extension»]. 

  }
  { Data types

    { Textual

      table { ll
         `initial` ☰ The value specified as the property's initial value.
         `inherit` ☰ The computed value of the property on the element's parent.
         `revert` ☰ Rolls back the cascade to the value of the earlier origin.
         `unset` ☰ Acts as inherit or initial depending on whether the property is inherited or not.
         Pre-defined keywords ☰ For example: `collapse` (which can be applied to `border-collapse`)
         `<custom-ident>` ☰
         `<dashed-ident>` ☰
         `<string>` ☰
         `url()` ☰
      table }

    }
    { Numeric

      table { ll
         `<integer>` ☰ `42`, `999` …
         `<number>` ☰ `42`, `2.5`, `1.618` …
         `<dimension>` ☰ A number with a *unit*  (`23px` or `15em`). See the *quantity* data types.
         `<percentage>` ☰ For example `10%`
         `<ratio>` ☰ `<number> / <number>`
         `<flex>` ☰ A *flexible length* introduced for CSS Grid Layout, written as a `<number>` with the `fr` unit attached and used for grid track sizing.
      table }

    }
    { Quantities

      Used for distances etc.

      table { ll
      `<length>` ☰ Lengths are a `<dimension>` and refer to distances.
      `<angle>` ☰ Angles are used in properties such as `linear-gradient()` and are a `<dimension>` with one of `deg`, `grad`, `rad` or *turn units* attached.
      `<time>` ☰ Duration units are a `<dimension>` with an `s` or `ms` unit.
      `<frequency>` ☰ Frequencies are a `<dimension>` with a `Hz` or `kHz` unit attached.
      `<resolution>` ☰ Is a `<dimension>` with a unit identifier of `dpi`, `dpcm`, `dppx` or `x`.
      table }

      { Combinations

        table { ll
        `<length-percentage>` ☰ Length or a percentage as a value.
        `<frequency-percentage>` ☰ A frequency or a percentage as a value.
        `<angle-percentage>` ☰ An angle or a percentage as a value.
        `<time-percentage>` ☰ A time or a percentage as a value.
        table }

      }

    }
    { Colors

       table { ll
       `<color>` ☰ Specified as a keyword or a numerical color value.
       `<alpha-value>` ☰ Specifies the transparency of a color. May be a `<number>`, in which case `0` is fully transparent and `1` is fully opaque, or a `<percentage>`, in which case `0%` is fully transparent and `100%` fully opaque.
       `<hue>` ☰ Specifies the `<angle>`, with a unit identifier of `deg`, `grad`, `rad`, `turn` or unitless `<number>` interpreted as `deg`, of the color wheel specific to the `<absolute-color-functions>` of which it is a component.
       table }

    }
    { Images

      table { ll
        `<image>` ☰ A URL reference to an image or a color gradient.
        `<color-stop-list>` ☰ A list of two or more color stops with optional transition information using a color hint.
        `<linear-color-stop>` ☰ A `<color>` and a `<length-percentage>` to indicate the color stop for this part of the gradient.
        `<linear-color-hint>` ☰ A `<length-percentage>` to indicate how the color interpolates.
        `<ending-shape>` ☰ Used for radial gradients; can have a keyword value of `circle` or `ellipse`.
        `<size>` ☰ Determines the size of the radial gradient's ending shape. This accepts a value of a keyword or a `<length>` but not a percentage.
      table }

    }
    { 2D positioning

      table { ll
        `<position>` ☰ Defines the position of an object area. Accepts a keyword value such as top or left, or a `<length-percentage>`.
      table }

    }
    { Calculation data types

      Used for → https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions#math_functions[math functions].

      table { ll
         `<calc-sum>` ☰A calculation which is a sequence of calculation values interspersed with addition (+) and substraction (-) operators. This data type requires both values to have units.
         `<calc-product>` ☰A calculation which is a sequence of calculation values interspersed with multiplication (*) and division (/) operators. When multiplying, one value must be unitless. When dividing, the second value must be unitless.
         `<calc-value>` ☰Defines accepted values for calculations, values such as `<number>`, `<dimension>`, `<percentage>`, `<calc-constant>` or nested `<calc-sum>` calculations.
         `<calc-constant>` ☰Defines a number of CSS keywords representing numeric constants such as `e` and `π`, that can be used in CSS math functions.
      table }

    }

  }
  { Units

    { Absolute lengths

      Most absolute length units are useful for printing.
      -
      The only exception is `px`.
      -
      But even so, absolute lenght units can be expressed in terms of `px` and vice versa.

      table { ll
        `px` ☰ Pixel
        `cm` ☰ Centimeter. `1cm` = `37.8px`
        `mm` ☰ Millimeter
        `Q` ☰ Quarter millimeter
        `in` ☰ Inch. `1in` = `96px`
        `pc` ☰ Pica. a ⅙ of an inch.
        `pt` ☰ Point. 1/72th of an inch
      table }
    
    }
    { Relative lengths

      table { ll
       `vw` ☰ 1% of the viewport's width.
       `vh` ☰ 1% of the viewport's height.
       `vmin` ☰ 1% of the viewport's smaller dimension.
       `vmax` ☰ 1% of the viewport's larger dimension.
       `vb` ☰ 1% of the size of the initial containing block in the direction of the root element's block axis.
       `vi` ☰ 1% of the size of the initial containing block in the direction of the root element's inline axis.
       `svw`, `svh` ☰ 1% of the small viewport's width and height, respectively.
       `lvw`, `lvh` ☰ 1% of the large viewport's width and height, respectively.
       `dvw`, `dvh` ☰ 1% of the dynamic viewport's width and height, respectively.
      table }

     { Relative length units based on a font

       table { ll
        `em` ☰ In case of typographical properties like `font-size`: font size of the parent. In case of other properties like `width`: font size of the element itself.
        `ex` ☰ x-height of the element's font.
        `ch` ☰ The advance measure (width) of the glyph "0" of the element's font.
        `lh` ☰ Line height of the element.
        `cap` ☰ The nominal height of capital letters («cap height»)
        `ic` ☰ Advance measure of the 水 glyph (`U+6C34`)
       table }

       These units can be prefixed with an `r` so that they refer to the corresponding size of the root element's font (`em` -> `rem`, `ex` -> `rex` etc.)

     }

    }
    { Container query lengths

      table { ll
         `cqw`, `cqh` ☰ Percentage of the query container's widht/height (`1cqw` is 1% of the query container's width)
         `cqi` ☰ Percentage of the *inline size* of the query container
         `cqb` ☰ Percentage of the *block size* of the query container
         `cqmin`, `cqmax` ☰ Percentage of the smaller/larger value o f the query container's inline size or block size.
      table }

    }
    { ?

    table { ll
      `fr` ☰ Fraction of the leftover space in a grid container. Used to indicate the `<flex>` datatype.
    table }

    }

  }
  { Starting a CSS

    Is it good practice to start a CSS with something like
code {
* {
    → development/web/CSS/properties/box/sizing[box-sizing]: border-box;
    margin:  0;
    padding: 0;
}
code }

  }

}

sa:

  → development/web

  Using → development/web/browser/object-model/window/getComputedStyle[`window.getComputedStyle`] to query the CSS values of an
  → development/web/HTML element with
  → development/languages/JavaScript.

  The → development/web/HTML/tags/style[`HTML <style> tag`].

  → development/web/HTML/tags#html-replaced-elements[Replaced elements]

  → design/graphic/color#css-color-names[Color names]

  CSS is part of the → development/web/platform.
    
