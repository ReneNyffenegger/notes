$ HTML Attributes

{ Global attributes #html-global-attributes

 *Global attributes* can be assigned to *all* → development/web/HTML/tags[HTML elements]. The list of these attributes is:
    • accesskey
    • autocapitalize
    • autofocus
    • contenteditable
    • contextmenu (deprecated)
    • → #html-attr-data[data-*]
    • dir
    • draggable
    • enterkeyhint
    • exportparts (experimental)
    • hidden (Compare with `→ development/web/HTML/DOM/API/interfaces-classes/HTMLElement[HTMLElement].hidden`)
    • inert (See also → development/web/HTML/DOM/API/interfaces-classes/HTMLElement/inert[`HTMLElement.inert`])
    • inputmode
    • is
    • itemid
    • itemprop
    • itemref
    • itemtype
    • lang
    • nonce
    • part
    • role
    • slot
    • → development/web/HTML/attributes/item/scope
    • spellcheck
    • style
    • tabindex
    • title
    • translate (Setting it to `no` tells the browser(?) not to translate the element's content).

  In addition to the global attributes, there are a few attributes (which can also be specified for any element in any namespace) for which DOM defines the user agent requirements. These attributes are:
    • → #html-attr-class[class]
    • id
    • slot
 
}
{ id / name

  The attribute `id` is used to *uniquely* identify a HTML element. The value of the `id` attribute can be used in → development/languages/JavaScript to get the corresponding Node object:
code {
var node = → development/web/DOM/examples/Node/Document/getElementById[document.getElementById('the-id')];
code }

  The attribute `name` is similar, but the same value can be assigned to multiple HTML tags. Thus, `name` does not uniquely identify a HTML element. Accordingly, the corresponding function to query for elements
  with a specific name value is plural and returns an array:
code {
var nodes = → development/web/DOM/examples/Node/Document/getElementsByName[document.getElementsByName('…')];
code }

}
{ data #html-attr-data

  A `data-…="…"` attribute allows to associate → development/Data with an element.
  -
  Such data can be processed in → development/languages/JavaScript with the
 `DOMStringMap` object which is returned by the `→ development/web/HTML/DOM/API/interfaces-classes/HTMLElement/dataset` property of a `→ development/web/HTML/DOM/API/interfaces-classes/HTMLElement` instance.

  Data atttribute values are considered private to a page and should (unlike Microformats) not be indexed by → web/Search-Engines[search engines].

  Compare with `itemscope` and `itemtype`

}
{ class #html-attr-class

  The `class` attribute can be used by authors to extend elements which allows to create their own elements (compare with → https://en.wikipedia.org/wiki/Microformat[Microformat (μF)]).

  A browser that is not aware of the extension can still fall back to a somewhat useful representation of the element.

}
{ media #html-attr-media

  The media attribute can be used on the following → development/web/HTML/tags[elements]:
    • → development/web/HTML/tags/link/index[`<link>`]
    • → development/web/HTML/tags/meta[`<meta>`]
    • `<source>`
    • → development/web/HTML/tags/style[`<style>`]

}
{ rel

? Annotate links with specific meaning???

}
{ style #html-attr-style

  The value of the `style` attribute sets one or more → development/web/CSS styles, see → development/web/CSS/inline-vs-external#inline-css.

  The `style` attribute can be specified on all HTML elements (although I doubt that it makes sense on some)

  Compare with the → development/web/HTML/tags/style[`<style>`] tag.

}
{ Misc

  `onclick`: → development/web/DOM/examples/Events/onclick

}

sa:
  → development/web/HTML
