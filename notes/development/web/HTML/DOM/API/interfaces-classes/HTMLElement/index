

{ Class inheritance #HTMLElement-inheritance

  `HTMLElement` inherits from `→ development/web/DOM/interfaces-mixins/Element`.

  All classes that represent → development/web/HTML/tags[HTML elements] inherit from `HTMLElement`.
  -
  Thus, `HTMLElement` (together with `→ development/web/DOM/interfaces-mixins/Element` from which it inherits) provides the functionality that is shared by all HTML elements, such as
    • An element's `id`
    • The coordinates, including scroll position
    • The text that defines the element
    • etc.

  In most cases, the name of the child classes is constructed from the name of HTML element like so: → development/web/HTML/tags/body[`<body>`] ⇒ `HTMLBodyElement`,
  → development/web/HTML/tags/span[`<span>`] ⇒ `HTMLSpanElement` etc.
  -
  But there are also exceptions to the rule: → development/web/HTML/tags/a[`<a>`] ⇒ `HTMLLinkElement`, `<h1>` through `<h6>` ⇒ `HTMLHeadingElement`, `<caption>` ⇒ `HTMLTableCaptionElement` and others.

}
{ Properties, methods and events

  table { ll
   `accessKey` ☰
   `accessKeyLabel` ☰
   `attributeStyleMap` (?) ☰ A `StylePropertyMap` object.
   `attachInternals()` ☰
   `beforeinput` ☰ *Event*
   `blur()` ☰ Removes keyboard focus, compare with `focus()`
   `change` ☰ *Event*
   `click()` ☰
   `contentEditable` ☰
   `contextMenu` ☰ *Non-standard*, *Deprecated*, a (potentially `null`) `HTMLMenuElement`.
   `copy` ☰ *Event*
   `cut` ☰ *Event*
   `→ development/web/HTML/DOM/API/interfaces-classes/HTMLElement/dataset` ☰ A `DOMStringMap` object which allows to read and write to/from an HTML element's → development/web/HTML/attributes#html-attr-data[custom data attributs] (i.e. values of attributes whose names start with `data-`).
   `dir` ☰
   `drag` ☰ *Event*
   `dragend` ☰ *Event*
   `dragenter` ☰ *Event*
   `dragleave` ☰ *Event*
   `dragover` ☰ *Event*
   `dragstart` ☰ *Event*
   `drop` ☰ *Event*
   `enterKeyHint` ☰
   `focus()` ☰ Set current keyboard focus to element, compare with `blur()`
   `hidden` ☰ Corresponds to the value of the element's → development/web/HTML/attributes#html-global-attributes[global attribute] `hidden`.
   `→ development/web/HTML/DOM/API/interfaces-classes/HTMLElement/inert` ☰
   `innerText` ☰ When read: The node's and its descendants' rendered text (approximately that which would be copied into the clipboard). When written: replaces the node and its descendants with the text. Compare with `.outerText`, `→ development/web/DOM/interfaces-mixins/Element[Element].setHTML` and `→ development/web/DOM/interfaces-mixins/Node[Node].textContent`.
   `input` ☰ *Event*
   `inputMode` ☰
   `isContentEditable` ☰
   `lang` ☰
   `mscandidatewindowhide` ☰ *Non-standard*, *Event*
   `mscandidatewindowshow` ☰ *Non-standard*, *Event*
   `mscandidatewindowupdate` ☰ *Non-standard*, *Event*
   `noModule` (?) ☰ Used by *Content Security Policy*.
   `nonce` ☰
   `offsetParent` ☰ The `→ development/web/DOM/interfaces-mixins/Element` from which all `offset*` calculations are currently computed. See also → development/web/HTML/DOM/API/interfaces-classes/HTMLElement/offset_[this example].
   `offsetLeft`, `offsetTop` ☰ Distance of the elements left/top border to the corresponding border of `offsetParent`. See also → development/web/HTML/DOM/API/interfaces-classes/HTMLElement/offset_[this example].
   `offsetHeight`, `offsetWidth` ☰ See also → development/web/DOM/examples/Node/Element/offsetWidth-offsetHeight[this DOM example] and → development/web/HTML/DOM/API/interfaces-classes/HTMLElement/offset_[this example].
   `outerText` ☰ Compare with `.innerText`
   `paste` ☰ *Event*
   `style` ☰ A `→ development/web/CSS/interfaces-mixins/CSSStyleDeclaration` object which represents element's style/CSS attribute declarations. See also the *Houdini Web API*.
   `tabIndex` ☰
   `title` ☰
 table }

}

sa:

  `→ development/web/HTML/DOM/API/interfaces-classes/HTMLMediaElement`, `→ development/web/HTML/DOM/API/interfaces-classes/HTMLCanvasElement`, `HTMLUnknownElement`
