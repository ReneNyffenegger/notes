$ Graphic Library Shader Language

{ Built in types

  For example:
    • `vec2`
    • `vec3`
    • `vec4`
    • `mat2`
    • `mat3`
    • `mat4`

}
{ Built in functions

   For example
     • `sin()`


}
{ Variable types

  Four types of variables:
    • uniforms: »constants« or global variables (for the duration of a scence?), used in both fragment and vertex shaders.
    • buffers/attributes: Only used in vertex shaders. A buffer is an array of data that is passed from → development/languages/JavaScript to the GPU. The attribute specifies how the data is extracted. *Not* random access!
    • textures: read/write arrays used in shaders. Often used for images, hence the name.
    • varyings: declared in vertex shader and shared with (or passed to) fragment shader.

}
{ Vectors

  Referring to the elements of a `vec4 VEC`:
  table { lllll

    First element:  ☰ `VEC.x` ☰ `VEC.s` ☰ `VEC.r` ☰ `VEC[0]`
    Second element: ☰ `VEC.y` ☰ `VEC.t` ☰ `VEC.g` ☰ `VEC[1]`
    Third element:  ☰ `VEC.z` ☰ `VEC.p` ☰ `VEC.b` ☰ `VEC[2]`
    Fourth element: ☰ `VEC.w` ☰ `VEC.q` ☰ `VEC.a` ☰ `VEC[3]`

  table }

  The components can be concatenated to create a new vector. The following creates a four element vector whose first three elements are equal:
code {
new_vec = VEC.rrra;
code }

}

sa:
  → development/web/WebGL

  → development/web/WebGL/GLSL/source-code[Accessing the source code from javascript]

links:
  → https://www.shadertoy.com/[shadertoy]
