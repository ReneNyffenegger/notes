{ URI: Uniform Resource Identifier #uri

   A URI identifies a *resource* by a sequence of characters. An URI is *not* a file name, although in most cases that seems to be the case.
   For example, because of *content negotiation*, the same URI can lead to (different) documents in different languages.

   → development/web/RFC/index#rfc-3986[RFC 3986] requires the URI (that is: its sequence of characters) to be chosen from a limited subset of the repertoire of US-ASCII characters.
   -
   Characters outside that subset can be encoded with *percent encoding*. With percent encoding, the character is represented with a percent sign followed by the two-letter hexadecimal
   representation of that character (for example `%20` for space).
   -
   Some → development/languages[programming languages] provide special functions to decode percent ecoded characters, for example the → development/web/php function `urldecode()`.

   A property of URIs is that different persons or organizations can independently create them and then use them to identify things. 

   An URI starts with a *scheme name*. A particular scheme's specification may restrict the syntax and semantics of identifiers in that scheme.

   There are two types of URIs: URLs and URNs

   { Components of an URI

     → https://tools.ietf.org/html/rfc3986[RFC 3986] has this nice ASCII Art diagram that shows the component parts in an URI:
code {
  foo://example.com:8042/over/there?name=ferret#nose
  \_/   \______________/\_________/ \_________/ \__/
   |           |            |            |        |
scheme     authority       path        query   fragment
   |   _____________________|__
  / \ /                        \
  urn:example:animal:ferret:nose
code }

   }
   { query #url-query

     The *query* is separated from the path by a question mark (`?`) and contains name value pairs which are themselves separated by an equal sign (`=`).
     -
     In such pairs, the value (and the equal sign) are optional.
     -
     The name-value pairs are separated from each other by an ampersand (`&`).

     A query parameter that I see in my logs is `utm_source=chatgpt.com`.

     See also the `QueryString` property of the .NET `→ Microsoft/dot-net/namespaces-classes/System/Net/HttpListenerRequest` class.

   }

   { See also

     See also
       • → development/web/RFC#rfc-1630[RFC 1630]
       • → development/web/RFC#rfc-2396[RFC 2396]
       • → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/URI[URI]
       • The abstract → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Net/WebRequest[`System.Net.WebRequest`] and concrete class → Microsoft/dot-net/namespaces-classes/System/Uri[`System.Uri`].
       • Wikidata → https://opendata.renenyffenegger.ch/Wikimedia/Wikidata/entity/Q42253[Q42253]

  }
  { Percent encoding #url-encoding

   *Percent encoding* (aka URL encoding) allows to escape reserved characters (such as `:`, `/` etc) in an URI and/or(?) URL by prefixing the hexadecimal representation of the ASCII value of the character with a percent sign:
   `%3A` = `:`, `%2F` = `/`, `%25` = `%` etc.

    See also
     • the → Microsoft/Office/Excel/functions[Excel worksheet function] `encodeurl()`,
     • the Excel object model method `→ Microsoft/Office/Excel/Object-Model/Workbook[workbook].fullNameURLEncoded` and
     • the → Microsoft/dot-net methods `→ Microsoft/dot-net/namespaces-classes/System/Web/HttpUtility[System.Web.HttpUtility].EncodeUrl` and `….DecodeUrl`.
     • the two functions → development/languages/Python/standard-library/urllib/parse#py-urllib-parse-unquote[`unquote` and `unquote_plus`], found in the standard library → development/languages/Python/standard-library/urllib/parse[`urllib.parse`].

  }


}
{ URL: Uniform Resource Locator #url

code {
<protocol>://<host>[:<port>][<path>[?<query>]]
code }

  All URLs are URIs, but not all URIs are URLs.

  See also
    • RFC → development/web/RFC#rfc-1738
    • HTML Tag → development/web/HTML/tags/input[`<input>`] with `type='url'`. 
    • → development/web/text-fragment[Text fragments] allow to add highlighting and scrolling-to information to an URL

}
{ URN: Uniform Resource Name

  URNs define XML schemas:
code {
urn:<namespace>:<string>
code }

}
{ IRI Internationalized Resource Identifier #iri
 
  An IRI is a string that conforms to → development/web/RFC#rfc-3987[RFC 3987]. It «improves» URIs in that it not only allows for ASCII characters, but also for entire
  UCS-based character set.

  IRI is part of the → development/web/platform.

}
{ URC: Uniform Resource Citation

  URCs provide a set of attribute/value pairs that describe properties of URIs like authorship, publisher, copyright etc.

}
sa:
  → Windows/dirs/Windows/System32/rundll32_exe/url_bat[`url.bat`] opens an URL in the default
  → development/web/browser[browser] (?) from → Windows/dirs/Windows/System32/cmd_exe[cmd.exe].

  → development/languages/VBA/Useful-object-libraries/MSXML/XMLHTTP/get_vbs[`get.vbs`] allows to `GET`  a → development/web/HTTP ressource from → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] and print it to the console.

  → Windows/misc/URI-schemes

  → development/web/browser/object-model#bom-window-location[`window.location.href`] contains the URL of the content that is displayed in the `window` object of
  a → development/web/browser.
