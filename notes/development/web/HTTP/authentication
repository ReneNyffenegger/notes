$ HTTP authentication

{ Header fields

  → development/web/HTTP/header[Header] fields that are used for HTTP authentication include
    • `Authorization`
    • `Proxy-Authenticate`
    • `Proxy-Authorization`
    • `WWW-Authenticate`

}
{ The 'Basic' Authentication Scheme #http-basic-authentication

  The *Basic Authentication Scheme* protects so called *realms*. A realm is identified by a string (text) and consists of one or more resources. In order to access the resources
  that belong to a realm, the user needs to provide a user id/password  → development/security/credential pair.

  In order for this authentication scheme to be considered secure, it needs to be combined with an external secure
  system such as → development/security/cryptography/SSL-TSL[TLS].

  A → development/web/Proxy might use a similar challenge using the 407 → development/web/HTTP/status-code[status code] and the `Proxy-Authentication` → development/web/HTTP/header[header] field.

  { Possible exchange of headers between user agent and web server

  Initial HTTP request:
code {
GET /some/protected/resource HTTP/1.1
… more headers
code }

  The webserver answers with
code {
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Basic Realm="name of the realm"
… more headers (irrelevant for authenticaton )

<html> …
</html>
code }

  The User Agent displays a message box to enter username and password.
  -
  A character-string consisting of username and password, separated by a colon (`:`) is → development/Base64[Base 64 encoded] and sent with the `Authorization` header:
code {
GET /some/protected/resource HTTP/1.1
…
Authorization: Basic dXNlcjpwYXNzd29yZA==
…
code }
  
  The webserver decodes the encoded username and password. If correct, it serves the requested resource

  }


}
{ OAuth

  OAuth 2.0 is specified in → development/web/RFC#rfc-6749[RFC 6749]
  -
  Token exchange is specified in RFC 8693

  OAuth is about *authorization*, not about *authentication*.
  -
  With *OAuth 2.0 authorization*, it is possible for 3rd party applications to access
 *protected resources* without handing out password-based → development/security/credential[credential] to the 3rd party. Instead, the 3rd party obtains an *access token*
  that authenticates the 3rd party application when requesting a protected resource.

  A *refresh token* is a token that can be exchanged for an access token.

  OAuth relies strongly on *HTTP redirection* and → development/security/cryptography/SSL-TSL[TLS].

  An access token is just string whose format is not further specified. However, a useful common format is provided by JWT (JSON Web Tokens).
  -
  An access token is sometimes compared to a car's *valet key* that can open door and turn on the car but cannot open the trunk.
  -
  Access Tokens are specified in RFC 6750.

  OAuth defines 4 roles
  table { ll
    Resource owner ☰ Grants access to a protected resource. In case of persons, the resource owner is referred to as an *end user*.
    Resource server ☰ The server where the protected resource is hosted. It requires the *access token* to server the protected resource.
    Client ☰ An application that requests a protected resource from the resource server
    Authorization server ☰ The server that issues the access tokens.
  table }

  Four grant types
  table { ll
     Authorization code ☰ Used to obtain *access tokens* and *refresh tokens*. Optimized for conficential clients.
     Implicit ☰ Obtain *access tokens* - refresh tokens are not supported. Typically implemented in → development/web/browser[browsers] with → development/languages/JavaScript (or another scripting language).
     Resource owner password credentials ☰
     Client credentials ☰
  table }

  There's also an *extensibility mechanism* to define *additional grant types*.

  Two client types
  table { ll
     Confidential ☰
     Public ☰
  table }

  OAuth specifically does not specify the interaction between the *authorization server* and the *resource server*.

  OAuth 2.0 is not backward compatible with OAuth 1.0

}

sa:
  → development/web/HTTP

  → development/web/RFC → development/web/RFC#rfc-7615
  -
  → development/web/RFC → development/web/RFC#rfc-7616
  -
  → development/web/RFC → development/web/RFC#rfc-7617[RFC 7617]  The 'Basic' HTTP Authentication Scheme

  → development/security/authentication
