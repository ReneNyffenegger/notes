$ HTTP Header

Some → development/web/HTTP headers make sense only in HTTP requests, others only in HTTP responses and some can be used in requests and respones.

Some headers describe the body of a resource. These headers are referred to as *entity headers*.

A particular feature of HTTP headers is that they are (mostly) human readable.

{ Request headers

  Some request(?) headers include:
table { ll
  `Accept` ☰ `Accept` belongs to the set of *CORS-safelisted request headers*.
  `Accept-Charset` ☰ Compare with → development/web/HTTP/header/Content/Type[`Content-Type`]
  `Accept-Encoding` ☰ See also `Content-Encoding`.
  `Accept-Language` ☰ For example `de-CH` or `en-US` or `en-US, en` or `de, en-gb;q=0.8, en;q=0.7` etc….  `Accept-Language` belongs to the set of *CORS-safelisted request headers*. Can be changed in → development/web/browser/Firefox under `about:config` -> `intl.accept_languages`. See also the → Windows/PowerShell cmdLet → Windows/PowerShell/command-inventory/noun[noun] → Windows/PowerShell/command-inventory/noun/winAcceptLanguageFromLanguageListOptOut[`winAcceptLanguageFromLanguageListOptOut`] and the value → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/International#ie-accept-language[`AcceptLanguage`] under the → Windows/registry[registry] key → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/International[`HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\International`].
  `Accept-Ranges` ☰
  `Age` ☰ 
  `Allow` ☰
  `Authorization` ☰ 
  `Cache-Control` ☰ For example: `max-age=0`.
  `Clear-Site-Data` ☰ 
  `Connection` ☰ The value of `Connection` can be set to `keep-alive` to specify that the connection between the client and the server should not be terminated when the transaction finishes (Compare with `Keep-Alive` header. Setting it to `close` terminates the connection. This header is not allowed in HTTP/2 and HTTP/3 (although Chrome and Firefox treats it gracefully in such a case). See also the `Upgrade` header for `Connection: upgrade`. `Connection` belongs to the set of «hop-by-hop headers».
  `Cookie` ☰
  `Date` ☰
  `Expect` ☰
  `Expires` ☰ 
  `Forwarded` ☰
  `Host` ☰
  `Keep-Alive` ☰ `Keep-Alive` is used in conjunction with `Connection: keep-alive` to set the `timeout` and `max` values (for example `Keep-Alive: timeout=5, max=1000`). This header is not allowed in HTTP/2 and HTTP/3. `Keep-Aliave` belongs to the set of «hop-by-hop headers».
  `If-Match` ☰ Used together with `ETag` to detect *mid-air edit collisions*: When updating a resource, the client sends the ETag value it received from the server in the If-Match header. If the resource has changed in the mean time, the server responds with a 412 status («precodindition failed»).
  `If-Modified-Since` ☰
  `If-None-Match` ☰ 
  `If-Range` ☰
  `If-Unmodified-Since` ☰
  `Last-Modified` ☰ 
  `Location` ☰
  `Origin` ☰ A version of `Referer` without revealing a path.
  `Pragma` ☰ 
  `Proxy-Authenticate` ☰ `Proxy-Authenticate <type> realm=<realm>`. `<type>` is an → development/web/HTTP/authentication#HTTP-authentication-scheme[authentication scheme]. `<realm>` describes the protected «area». See also the `WWW-Authenticate` header and → development/web/HTTP/status-code[HTTP status] 401, 403 and 407. `Proxy-Authenticate` belongs to the set of «hop-by-hop headers».
  `Proxy-Authorization` ☰ `Proxy-Authorization` is typically when a server requests the credentials to authorize a user (status code 407). The syntax is `Proxy-Authorization <type> <credentials>`. `<type>` is an → development/web/HTTP/authentication#HTTP-authentication-scheme[authentication scheme]. `<credentials>` is the → development/Base64 encoded form of `username:secret`. `Proxy-Authorization` belongs to the set of «hop-by-hop headers».
  `Range` ☰
  `Referer` ☰ Note typo! Compare with the `Origin` header.
  `Referrer-Policy` ☰
  `Server` ☰
  `Set-Cookie` ☰
  `TE` ☰ Specifies the transfer encodings a user agent is willing to accept (it would probably be more intuitive to call this header `Accept-Transfer-Encoding`). See also the `Transfer-Encoding` response header. `TE` belongs to the set of «hop-by-hop headers».
  `Trailers` ☰ `Trailers` belongs to the set of «hop-by-hop headers».
  `Upgrade` ☰ Used to change the protocol used in an already established connection (for example HTTP/1.1 -> HTTP/2 or HTTP -> → development/web/HTTPS). Using `Upgrade` requires aslo `Connection: upgrade` to be sent with a request. This header can only be used in HTTP/1.1. `Upgrade` belongs to the set of «hop-by-hop headers».
  `Upgrade-Insecure-Requests` ☰
  `User-Agent` ☰
  `Warning` ☰ 
  `WWW-Authenticate` ☰ Used for → development/web/HTTP/authentication[authentication], comes with a *401* → development/web/HTTP/status-code[status]
table }

}
{ Response headers

  Some response headers include
table { ll
  `Accept-Ranges` ☰ For example `bytes`
  `Access-Control-Allow-Origin` ☰ For example `*`
  `Access-Control-Request-Header` ☰ This header can be used to respond to a *preflight request* to add more allowed headers (comma separated, or simply `*`) to the four CORS-safelisted request headers. A server must answer with this header if the request had an `Access-Control-Request-Headers` header.
  `Connection` ☰ For example: `Keep-Alive`
  `Date` ☰ `Sat, 22 Oct 2022 07:59:01 GMT`
  `ETag` ☰ `ETag: "33B282594…"`, `Etag: W/"1234"`. The value of the `ETag` response header line identifies the returned resource's version. This value is used by the → development/web/HTTP/User-Agent for → development/web/HTTP/User-Agent#ua-cache[caching the resources]. Related are the `If-Match`, `If-None-Match` and the 304 and 412 → development/web/HTTP/status-code[status codes].
  `Keep-Alive` ☰
  `Last-Modified` ☰ For example `Sat, 19 May 2018 08:51:05 GMT`
  `Server` ☰ For example `Apache` or `ngingx`
  `Set-Cookie` ☰
  `Transfer-Encoding` ☰ See also the `TE` request header.
  `Vary` ☰ For example `Accept-Encoding`
table }

   With → Windows/PowerShell, a request's response headers can be inspected with
code {
(→ Windows/PowerShell/command-inventory/noun/webRequest/invoke 'https://renenyffenegger.ch').headers
code }

}
{ Request and response headers

  Some headers, such as for example the so called *representation headers*, can be used in HTTP requests and responses.

  
  table { ll
   `Content-Encoding` ☰ specfies if and how content body was compressed. . See also `Accept-Encoding`.
   `Content-Encoding` ☰ For example: `text/html; charset=utf-8` or simply `text/html`
   `Content-Length` ☰
   `Content-Language` ☰ `Content-Language` belongs to the set of *CORS-safelisted request headers*.
   `Content-Location` ☰
   `Content-Range` ☰ 
   `→ development/web/HTTP/header/Content/Type` ☰ Content-Type transmits (among others?) a → development/web/Multipurpose-Internet-Mail-Extensions type.  Often, `Content-Type` has a value like `text/html; charset=utf-8` or `multipart/form-data; boundary=MYCAREFULLYCHOSENBOUNDARY` or `text/plain`. `Content-Type`  belongs to the set of *CORS-safelisted request headers*. Compare with `Accept-Charset`
  table }


}
{ CORS-safelisted request headers

  The four CORS-safelisted request headers are:
    • `Accept`
    • `Accept-Language`
    • `Content-Language`
    • `Content-Type`

  A HTTP request with no headers except these four does not necessitate a *preflight request*.

  In an response to a preflight request, a server can safelist more headers by specifying them with the `Access-Control-Allow-Headers` header.

}
{ Forbidden headers

  A *forbidden header* is a header over which a *user agent* has full control. Thus, they cannot be modified programmatically (for example with the JavaScript `fetch` API).

  The list of forbidden headers is
    • `Accept-Charset`
    • `Accept-Encoding`
    • `Access-Control-Request-Headers`
    • `Access-Control-Request-Method`
    • `Connection`
    • `Content-Length`
    • `Cookie`
    • `Date`
    • `DNT`
    • `Expect`
    • `Feature-Policy`
    • `Host`
    • `Keep-Alive`
    • `Origin`
    • `Proxy-`
    • `Sec-`
    • `Referer`
    • `TE`
    • `Trailer`
    • `Transfer-Encoding`
    • `Upgrade`
    • `Via`
    • Any header starting with `Proxy-`
    • Any header starting with `Set-`
    

}
{ Content-Disposition #content-disposition

  The content should be rendered inline or downloaded.

  Within a *regular* header:
code {
Content-Disposition: inline
Content-Disposition: attachment
Content-Disposition: attachment; filename="foo.mp3"
code }

  Within a *multipart body*:
code {
Content-Disposition: form-data
Content-Disposition: form-data; name="field-name"
Content-Disposition: form-data; name="field-name"; filename="foo.jpg"
code }

  This header might go hand in hand with `Content-Transfer-Encoding: binary`.

}

{ Proprietary headers (X-headers)

  Historically, custom proprietary headers were prefixed with `X-`.

  This convention was deprecated with → development/web/RFC#rfc-6648[RFC 6648] *Deprecating the "X-" Prefix and Similar Constructs in Application Protocols*.

}

{ TODO

  HTTP request and response messages include an HTTP protocol version number. This version comes in a *major.minor* format.
  "
     To make this as clear as possible:  The major version sent in a message
     MAY indicate the interpretation of other header fields.  The minor version
     sent in a message MUST NOT indicate the interpretation of other header
     fields.  
  " [ RFC 2145 ]
}

sa:

  → development/web/HTTP

  In order to get the response headers (and status line) only, the `HEAD` → development/web/HTTP/request-methods[request method] should be used.

  → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/HTTP/Headers[HTTP::Headers].

  For example, in → tools/wget, the header can be specified with the `--header` option (see → tools/wget#wget-result-language).

  In the → tools/cURL command line tool (such as → Windows/dirs/Windows/System32/curl_exe[`curl.exe`]), the → tools/cURL#curl-i[`-i` command line option] includes the
  response headers in the output.

  The → development/web/php function → development/web/php/snippets/HTTP/header[`header()`]


links:
  IANA maintains a → https://www.iana.org/assignments/message-headers/message-headers.xhtml[registry of message headers] (including a status such as standard, experimental, obsoleted)

  Wikipedia's → https://en.wikipedia.org/wiki/List_of_HTTP_header_fields[List of HTTP header fields]
