$ HTTP Header

Some HTTP headers make sense only in HTTP requests, others only in HTTP responses and some can be used in requests and respones.

Some headers describe the body of a resource. These headers are referred to as *entity headers*.

A particaluar feature of HTTP headers is that they are (mostly) human readable.

Some headers include
table { ll
  Accept ☰ 
  Accept-Charset ☰ Compare with `Content-Type`
  Accept-Encoding ☰ See also `Content-Encoding`.
  Accept-Language ☰ 
  Accept-Ranges ☰
  Age ☰ 
  Allow ☰
  Authorization ☰ 
  Cache-Control ☰ 
  Clear-Site-Data ☰ 
  Connection ☰ 
  Content-Encoding ☰ specfies if and how content body was compressed (for example `gzip`). See also `Accept-Encoding`.
  Content-Length ☰
  Content-Language ☰ 
  Content-Location ☰
  Content-Range ☰ 
  Content-Type ☰ Content-Type typically has a value like `text/html; charset=utf-8` or `multipart/form-data; boundary=MYCAREFULLYCHOSENBOUNDARY`. Compare with `Accept-Charset`
  Cookie ☰
  Date ☰
  ETag ☰ The value of the `ETag` response header line identifies the returned resource's version and is used by the → development/web/HTTP/User-Agent for → development/web/HTTP/User-Agent#ua-cache[caching the resources]. Related are the `If-Match`, `If-None-Match` and the 304 and 412 → development/web/HTTP/status-code[status codes].
  Expect ☰
  Expires ☰ 
  Forwarded ☰
  Host ☰
  Keep-Alive ☰ 
  If-Match ☰ 
  If-Modified-Since ☰
  If-None-Match ☰ 
  If-Range ☰
  If-Unmodified-Since ☰
  Last-Modified ☰ 
  Location ☰
  Pragma ☰ 
  Proxy-Authenticate ☰
  Proxy-Authorization ☰
  Range ☰
  Referer ☰ Note typo!
  Referrer-Policy ☰
  Server ☰
  Set-Cookie ☰
  Upgrade-Insecure-Requests ☰
  User-Agent ☰
  Warning ☰ 
  WWW-Authenticate ☰ Used for → development/web/HTTP/authentication[authentication], comes with a *401* → development/web/HTTP/status-code[status]
table }


{ Content-Disposition #content-disposition

  The content should be rendered inline or downloaded.

  Within a »regular« header:
code {
Content-Disposition: inline
Content-Disposition: attachment
Content-Disposition: attachment; filename="foo.mp3"
code }

  Within a *multipart body*:
code {
Content-Disposition: form-data
Content-Disposition: form-data; name="field-name"
Content-Disposition: form-data; name="field-name"; filename="foo.jpg"
code }

  This header might go hand in hand with `Content-Transfer-Encoding: binary`.

}

{ Proprietary headers (X-headers)

  Historically, custom proprietary headers were prefixed with `X-`.

  This convention was deprecated with → development/web/RFC#rfc-6648[RFC 6648] *Deprecating the "X-" Prefix and Similar Constructs in Application Protocols*.

}

{ TODO

  HTTP request and response messages include an HTTP protocol version number. This version comes in a *major.minor* format.
  "
     To make this as clear as possible:  The major version sent in a message
     MAY indicate the interpretation of other header fields.  The minor version
     sent in a message MUST NOT indicate the interpretation of other header
     fields.  
  " [ RFC 2145 ]
}

sa:

  → development/web/HTTP

  In order to get the response headers (and status line) only, the `HEAD` → development/web/HTTP/request-methods[request method] should be used.

  → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/HTTP/Headers[HTTP::Headers].

  For example, in → tools/wget, the header can be specified with the `--header` option (see → tools/wget#wget-result-language).

  In the → tools/cURL command line tool (such as → Windows/dirs/Windows/System32/curl_exe[`curl.exe`]), the → tools/cURL#curl-i[`-i` command line option] includes the
  response headers in the output.


links:
  IANA maintains a → https://www.iana.org/assignments/message-headers/message-headers.xhtml[registry of message headers] (including a status such as standard, experimental, obsoleted)

  Wikipedia's → https://en.wikipedia.org/wiki/List_of_HTTP_header_fields[List of HTTP header fields]
