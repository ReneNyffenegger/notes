$ HTTP Header

Some HTTP headers make sense only in HTTP requests, others only in HTTP responses and some can be used in requests and respones.

Some headers describe the body of a resource. These headers are referred to as *entity headers*.

Some headers include
table { ll
  Accept ☰ 
  Accept-Charset ☰ Compare with `Content-Type`
  Accept-Encoding ☰ See also `Content-Encoding`.
  Accept-Language ☰ 
  Accept-Ranges ☰
  Age ☰ 
  Allow ☰
  Authorization ☰ 
  Cache-Control ☰ 
  Clear-Site-Data ☰ 
  Connection ☰ 
  Content-Encoding ☰ specfies if and how content body was compressed (for example `gzip`). See also `Accept-Encoding`.
  Content-Length ☰
  Content-Language ☰ 
  Content-Location ☰
  Content-Range ☰ 
  Content-Type ☰ Content-Type typically has a value like `text/html; charset=utf-8` or `multipart/form-data; boundary=MYCAREFULLYCHOSENBOUNDARY`. Compare with `Accept-Charset`
  Cookie ☰
  Date ☰
  ETag ☰ 
  Expect ☰
  Expires ☰ 
  Forwarded ☰
  Host ☰
  Keep-Alive ☰ 
  If-Match ☰ 
  If-Modified-Since ☰
  If-None-Match ☰ 
  If-Range ☰
  If-Unmodified-Since ☰
  Last-Modified ☰ 
  Location ☰
  Pragma ☰ 
  Proxy-Authenticate ☰
  Proxy-Authorization ☰
  Range ☰
  Referer ☰ Note typo!
  Referrer-Policy ☰
  Server ☰
  Set-Cookie ☰
  User-Agent ☰
  Warning ☰ 
  WWW-Authenticate ☰
table }

{ Request

  A → development/web/HTTP/User-Agent[user agent] requests a ressource by sending a HTTP Request to a → web/webserver[web server].

  Such a request might look like so:
code {
host: renenyffenegger.ch
user-agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0
accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
accept-language: de
accept-encoding: gzip, deflate
referer: www.google.com
accept-charset: *
x-forwarded-for: …
x-forwarded-host: …
x-forwarded-server: …
connection: close
code }

}
{ Response

  The web server returns the requested resource along with a header.

  The minimal response header from a → web/webserver seems to be:
code {
HTTP/1.0 200 OK
Content-Type: text/html
code }

}

{ Content-Disposition #content-disposition

  The content should be rendered inline or downloaded.

  Within a »regular« header:
code {
Content-Disposition: inline
Content-Disposition: attachment
Content-Disposition: attachment; filename="foo.mp3"
code }

  Within a *multipart body*:
code {
Content-Disposition: form-data
Content-Disposition: form-data; name="field-name"
Content-Disposition: form-data; name="field-name"; filename="foo.jpg"
code }

  This header might go hand in hand with `Content-Transfer-Encoding: binary`.

}

{ Proprietary headers (X-headers)

  Historically, custom proprietary headers were prefixed with `X-`.

  This convention was deprecated with → development/web/RFC#rfc-6648[RFC 6648] *Deprecating the "X-" Prefix and Similar Constructs in Application Protocols*.

}

{ TODO

  HTTP request and response messages include an HTTP protocol version number. This version comes in a *major.minor* format.
  "
     To make this as clear as possible:  The major version sent in a message
     MAY indicate the interpretation of other header fields.  The minor version
     sent in a message MUST NOT indicate the interpretation of other header
     fields.  
  " [ RFC 2145 ]
}

sa:

  → development/web/HTTP

  → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/HTTP/Headers[HTTP::Headers].

  For example, in → tools/wget, the header can be specified with the `--header` option (see → tools/wget#wget-result-language).


links:
  IANA maintains a → https://www.iana.org/assignments/message-headers/message-headers.xhtml[registry of message headers] (including a status such as standard, experimental, obsoleted)

  Wikipedia's → https://en.wikipedia.org/wiki/List_of_HTTP_header_fields[List of HTTP header fields]
