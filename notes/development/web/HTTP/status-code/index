$ HTTP status codes
@ status code

A HTTP status code is a three digit number. It is sent in the first response line (also referred to as *status line*) after a HTTP request.

A status code informs the → development/web/HTTP/User-Agent if and how the → web/webserver[web server] was able to understand and satisfy the corresponding request.

{ Some HTTP status code

 Some HTTP status codes include:
 table { lll

  100 ☰ Continue ☰
  101 ☰ SwitchingProtocols ☰
  200 ☰ OK ☰ 
  201 ☰ Created ☰ A resource was created on the server. Typically used after `POST` (why?) and sometimes after `PUT` → development/web/HTTP/request-methods[requests].
  202 ☰ Accepted ☰
  203 ☰ NonAuthoritativeInformation ☰
  204 ☰ NoContent ☰
  205 ☰ ResetContent ☰
  206 ☰ PartialContent ☰
  300 ☰ MultipleChoices ☰
  301 ☰ MovedPermanently ☰
  302 ☰ Found ☰ War previously referred to as «Moved temporarily»
  303 ☰ SeeOther ☰
  304 ☰ Not modified ☰ See the `ETag` → development/web/HTTP/header[header]
  308 ☰ Permanent Redirect ☰ described in RFC 7538
  305 ☰ UseProxy ☰
  306 ☰ Unused ☰
  307 ☰ TemporaryRedirect ☰
  307 ☰ TemporaryRedirect ☰
  400 ☰ BadRequest ☰
  401 ☰ Unauthorized ☰ Used for → development/web/HTTP/authentication[authentication], comes with a `WWW-Authenticate` → development/web/HTTP/header[header] field.
  402 ☰ PaymentRequired ☰
  403 ☰ Forbidden ☰
  404 ☰ Not Found ☰ The client was able to contact the → web/webserver[web server], but the web server was unable find the requested resource.
  405 ☰ → development/web/HTTP/request-methods[Method] not allowed ☰
  406 ☰ NotAcceptable ☰
  407 ☰ Proxy Authentication Required ☰
  408 ☰ RequestTimeout ☰
  409 ☰ Conflict ☰
  410 ☰ Gone ☰
  411 ☰ LengthRequired ☰
  412 ☰ Precondition Failed ☰
  418 ☰ I'm a teapot ☰ Published in → development/web/RFC 2324, *1 April 1998*.
  428 ☰ Precondition Required ☰ optional: clients cannot rely upon this status code to prevent «lost update» conflicts.
  429 ☰ Too Many Requests ☰ user has sent too many requests in a given amount of time (*rate limiting*). Compare with DoD (Denial of Service) attacks.
  431 ☰ Request Header Fields Too Large ☰ server is unwilling to process the request because its header fields are too large.
  413 ☰ RequestEntityTooLarge ☰
  414 ☰ RequestUriTooLong ☰
  415 ☰ UnsupportedMediaType ☰
  416 ☰ RequestedRangeNotSatisfiable ☰
  417 ☰ ExpectationFailed ☰
  426 ☰ UpgradeRequired ☰
  500 ☰ Internal Server Error ☰ For example in an Apache Web Server because an → development/Apache/Server/htaccess[`.htaccess`] file is corrupt.
  501 ☰ Not implemented ☰ The → development/web/HTTP/request-methods[request method] is either not understood by web server, or it is not implemented in the web server.
  502 ☰ Bad Gateway ☰ A server that acts as a gateway or → development/web/Proxy[proxy] received an invalid response from its upstream server.
  503 ☰ ServiceUnavailable ☰
  504 ☰ GatewayTimeout ☰
  505 ☰ HttpVersionNotSupported ☰
  511 ☰ Network Authentication Required ☰ client needs to authenticate to gain network access.

 table }

  When creating this list, the → Microsoft/dot-net enumeration → Microsoft/dot-net/namespaces-classes/System/Net/HttpStatusCode[`System.Net.HttpStatusCode`] was helpful in the following
  → Windows/PowerShell → Windows/PowerShell/language/statement/foreach[`foreach`] statement:
code {
foreach ($e in [enum]::GetValues([System.Net.HttpStatusCode])) { 
   "$($e.value__) $e"
}
code }

}
{ 429

code {
HTTP/1.1 429 Too Many Requests
Content-Type: text/html
Retry-After: 3600
code }

}

