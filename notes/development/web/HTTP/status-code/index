$ HTTP status codes
@ status code

A HTTP status code is a three digit number. It is sent in the first response line (also referred to as *status line*) after a HTTP request.

A status code informs the → development/web/HTTP/User-Agent if and how the → web/webserver[web server] was able to understand and satisfy the corresponding request.

{ Some HTTP status code

 Some HTTP status codes include:
 table { lll

  100 ☰ Continue ☰ See also the request header `Expect`
  101 ☰ Switching Protocols ☰ See also the `Upgrade` → development/web/HTTP/header[request header].
  200 ☰ OK ☰ 
  201 ☰ Created ☰ A resource was created on the server. Typically used after `POST` (why?) and sometimes after `PUT` → development/web/HTTP/request-methods[requests].
  202 ☰ Accepted ☰
  203 ☰ Non-Authoritative Information ☰
  204 ☰ No Content ☰
  205 ☰ Reset Content ☰
  206 ☰ Partial Content ☰
  300 ☰ Multiple Choices ☰
  301 ☰ Moved Permanently ☰ The `Location` → development/web/HTTP/header#http-respsonse-header[response header] contains the URL to which a resource has moved. See also the `-L` option of → tools/cURL[`curl`]
  302 ☰ Found ☰ War previously referred to as «Moved temporarily»
  303 ☰ See Other ☰
  304 ☰ Not Modified ☰ See the `ETag` and `If-None-Matched` → development/web/HTTP/header[headers]. Compare with the 412 status code.
  305 ☰ Use Proxy ☰ *Deprecated*
  306 ☰ *not used anymore* ☰ This status code was used to indicate *Switch Proxy*
  307 ☰ Temporary Redirect ☰
  308 ☰ Permanent Redirect ☰ described in RFC 7538
  400 ☰ Bad Request ☰
  401 ☰ Unauthorized ☰ Used for → development/web/HTTP/authentication[authentication]. Must include a `WWW-Authenticate` → development/web/HTTP/header[header] field and a challenge.
  402 ☰ Payment Required ☰ Rarely used (and there is no standard convention)
  403 ☰ Forbidden ☰
  404 ☰ Not Found ☰ The client was able to contact the → web/webserver[web server], but the web server was unable find the requested resource (possibly because the client has a typo in the request). Compare with 410
  405 ☰ → development/web/HTTP/request-methods[Method] not allowed ☰
  406 ☰ Not Acceptable ☰ Might be sent if a server cannot serve a document in one of the languages requested with the `Accept-Language` or encodings requested with the `Accept-Encoding` → development/web/HTTP/header[request headers]
  407 ☰ → development/web/Proxy[Proxy] Authentication Required ☰ See also the `Proxy-Authenticate` and `Proxy-Authorization` headers.
  408 ☰ Request Timeout ☰
  409 ☰ Conflict ☰
  410 ☰ Gone ☰ This resource was likely available in the past but was removed. Compare with 404.
  411 ☰ LengthRequired ☰
  412 ☰ Precondition Failed ☰ 412 is returned when the ETag/If-Match mechanism detected a *mid-air collision*. Compare with status 304.
  418 ☰ I'm a teapot ☰ Published in → development/web/RFC 2324, *1 April 1998*.
  428 ☰ Precondition Required ☰ optional: clients cannot rely upon this status code to prevent «lost update» conflicts.
  429 ☰ Too Many Requests ☰ User has sent too many requests in a given amount of time (*rate limiting*). This status might come with a `Retry-After` → development/web/HTTP/header#http-respsonse-header[response header]. Compare with Status code 503. See also with DoD (Denial of Service) attacks.
  431 ☰ Request Header Fields Too Large ☰ server is unwilling to process the request because its header fields are too large.
  413 ☰ Request Entity Too Large ☰
  414 ☰ Request Uri Too Long ☰
  415 ☰ Unsupported Media Type ☰
  416 ☰ Range Not Satisfiable ☰
  417 ☰ Expectation Failed ☰ See also the request header `Expect`. 
  426 ☰ Upgrade Required ☰
  500 ☰ Internal Server Error ☰ For example in an Apache Web Server because an → development/Apache/Server/htaccess[`.htaccess`] file is corrupt.
  501 ☰ Not implemented ☰ The → development/web/HTTP/request-methods[request method] is either not understood by web server, or it is not implemented in the web server.
  502 ☰ Bad Gateway ☰ A server that acts as a gateway or → development/web/Proxy[proxy] received an invalid response from its upstream server.
  503 ☰ Service Unavailable ☰ Should be sent with the `Retry-After` → development/web/HTTP/header#http-respsonse-header[response header]. Compare with status code 429.
  504 ☰ Gateway Timeout ☰
  505 ☰ HTTP Version Not Supported ☰
  511 ☰ Network Authentication Required ☰ client needs to authenticate to gain network access.

 table }

  When creating this list, the → Microsoft/dot-net enumeration → Microsoft/dot-net/namespaces-classes/System/Net/HttpStatusCode[`System.Net.HttpStatusCode`] was helpful in the following
  → Windows/PowerShell → Windows/PowerShell/language/statement/foreach[`foreach`] statement:
code {
foreach ($e in [enum]::GetValues([System.Net.HttpStatusCode])) { 
   "$($e.value__) $e"
}
code }

}
{ 429

code {
HTTP/1.1 429 Too Many Requests
Content-Type: text/html
Retry-After: 3600
code }

}

sa:

  → development/web/RFC[RFCs] that deal with HTTP status codes seem to be
   • 9110: HTTP Semantics (which obsoletes 7231, which obsoletes 2616)
   • 6585: Additional HTTP Status Codes
   • 3229: Delta encoding in HTTP
   • 4918: HTTP Extensions for WebDAV, obsoletes 2518
   • 5842: Binding Extensions to WebDAV
   • 7238: Permanent Redirect
   • 2295: Transparent Content Negotiation in HTTP
   • 2774: An HTTP Extension Framework
   • → development/web/RFC#rfc-7725[7725]: An HTTP Status Code to Report Legal Obstacles
   • → development/web/RFC#rfc-7540[7540]: Hypertext Transfer Protocol Version 2 (HTTP/2)
   • 2324: Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)
   • 8297: An HTTP Status Code for Indicating Hints
   • 8469: Using Early Data in HTTP

  The Python class `→ development/languages/Python/standard-library/http/HTTPStatus`
