$ web service

Web services allow to
  • query
  • store
  • calculate/manipulate
→ development/Data[data] on a dedicated server.

A web service can be contrasted to *batch processes*.

One of the most significant characteristic of web services is their *loose coupling*. Each service has its own
  • Server they're running on
  • Programming language
  • Library version.

Web services typically send/return (structered) text in a non binary format. A web service usually does not return executable code.


→ development/web/service/BPEL: Business Process Execution Language

RDF: Resource Description Framework

→ development/web/service/REST: Representational State Transfer

RSS: Really Simple Syndication

→ development/web/service/SOAP: Simple Object Access Protocol

WSCL: Web Service Conversation Language

→ development/web/service/WSDL: Web Services Description Language. WSDL documents describe web services.

{ SOAP vs REST #ws-soap-vs-rest

  REST is easier to learn.

  table { ll

  SOAP ☰ REST
  access named operations (`doStuff(userId)`)☰ access named resources (`getData(userId)`)
  XML ☰ plain text, → development/web/HTML, → development/languages/JavaScript/JSON[JSON], XML, CSV …
  ☰ HTTP
  a protocol ☰  archictural style
  cannot use REST ☰ can use SOAP
  service interfaces ☰ URIs
  strict standards ☰ loose standards
  own security ☰ security from underlying protocol (HTTPS?)
  Usually `POST /....` plus interop ☰ usually `GET /service?do=something&id=42`
  Built-in error handling ☰ 

  
  table }

}
