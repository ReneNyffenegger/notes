$ PHP: Accessing an SQLite database

Some → development/web/php[php] code snippets related to → development/databases/SQLite[SQLite].

{ Create the database

  The first script uses `file_exists($dbFile)` to check if the SQLite database already exists and, if so, deletes it with `unlink($dbFile)`.

  With `new PDO("sqlite:$dbFile")`, a new and empty SQLite database is created.

  gh|about-php|/db/pdo/sqlite/01_create_db.html||

}
{ Create a table

  This script uses the `exec` method to run a → development/databases/SQLite/tables/create[`create table`] statement.

  gh|about-php|/db/pdo/sqlite/02_create_table.html||

}
{ Insert values

  This example uses `prepare` to prepare an insert statement with parameters (`:val_1` and `:val_2`).

  The returned (prepared) statement can then be used (executed) mulitple times with
  -
  In order to do so, the statement's `bindParam` method must be used to associate the statement's placeholders with PHP-variables.

  When the statement's `execute` method is called, the values as set to the variables are then inserted into the table.

  gh|about-php|/db/pdo/sqlite/03_insert_values.html||

}
{ Select values

  This example tries to demonstrate how the inserted values can be queried with a → development/databases/SQLite/sql/select[`select` statement].

  gh|about-php|/db/pdo/sqlite/04_select_values.html||

}
{ Select values with parameters

  As in the `insert` example above, it is also possible to use parameters in `select` statements.

  gh|about-php|/db/pdo/sqlite/05_select_values_with_param.html||

}
{ Cleaning up

  Delete the database.

  gh|about-php|/db/pdo/sqlite/99_clean_up.html||

}
sa:

  → development/web/php/snippets/sqlite/regular-expressions[Reglar expressions in PHP for SQLite]

  → development/web/php/snippets/mysql[Accessing a MySQL database with PHP]
