$ PHP code snippets: PDO statement class / sqlite

{ getColumnMeta()

 `getColumnMeta($col)` returns an → development/web/php/snippets/array/associative for (0-indexed) → development/databases/SQLite/tables/columns `$col`. The indexes of this array are
   • `name`
   • `native_type`
   • `driver:decl_type`
   • `flags`
   • `table`
   • `len`
   • `precision`
   • `pdo_type`

  The following example tries to demonstrate how `getColumnMeta()` can be used to query a result set's column names and types.

  Because → development/databases/SQLite is → development/databases/SQLite/tables/create#sqlite-create-table-datatype[flexibly typed], a record's data type can only be determined after fetching it.
  Thus, in this example, `$stmt->execute()` was required for `getColumnMeta()` to return any meaningful data.

  The example fetches two records and calls `getColumnMeta()` twice to demonstrate that it indeed does return different data types each time.

  Finally, it seems that the `blob` data type is not recognized correctly. At least, I was unable to insert and/or get a blob.

  gh|about-php|/db/pdo/sqlite/statement/getColumnMeta.php||

}

sa:
  → development/web/php/snippets/sqlite
