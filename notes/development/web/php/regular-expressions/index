$ PHP: regular expressions

The prefix `pcre_` stands for → development/languages/Perl/regular-expressions[Perl compatible regular expressions]. The functions include:
table { ll
  `preg_filter` ☰
  `preg_grep` ☰
  `preg_last_error_msg` ☰
  `preg_last_error` ☰
  `preg_match_all` ☰
  → #php-preg_match[`preg_match`] ☰ Tests if a given text matches a regular expressions (by returning a boolean like value) and fills an optional `matches` parameter.
  `preg_quote` ☰
  `preg_replace_callback_array` ☰
  `preg_replace_callback` ☰
  → #php-preg_replace[`preg_replace`] ☰ Uses a regular expression to replace portions of a text with a given replacement
  `preg_split` ☰
table }


{ preg_match #php-preg_match

  gh|about-php|/preg_match.html||

  See also → development/web/php/snippets/sqlite/regular-expressions[this example] that demonstrates how `preg_match` is imported into the → development/databases/SQLite engine so that it
  is possible to query an SQLite table with → development/regular-expressions.

}
{ preg_replace #php-preg_replace

  In its most basic form, `preg_replace` takes the following three parameters: `preg_replace($pattern, $replacement, $text)`.
  -
  The two optional parameters are `limit` and `count`.

  gh|about-php|/preg_replace.html||

}

{ Removing niqquds #php-remove-niqqud

  → biblisches/Grundtext/Hebräisch#nikud[Niqquds] can be removed with the following → development/regular-expressions[regular expression]:
code {
$without_niqqud = preg_replace('/[\x{0591}-\x{05C7}]/u', '', $hebrew_word);
code }

}
{ TODO

  { preg_replace_callback

code {
$pattern = '/foo: (\d+)/';
$result = preg_replace_callback(
            $pattern,
            function($m) use ($g_multiplicator) {
              $res = $m[1] * $g_multiplicator;
              return $res;
            }
            $text
          );
code }

  }

}

sa:
  → development/web/php/snippets/string#php-str_replace

  → development/web/php

