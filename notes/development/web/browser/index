$ Web browser
@ web browser

Some web browsers include
  • → development/web/browser/Firefox
  • → development/web/browser/Chrome
  • → development/web/browser/Internet-Explorer and its successor(?) → development/web/browser/Edge
  • → https://www.maxthon.com/[maxthon] claims to be *Awarded "Best Browser" in three consecutive years.*.
  • Opera
  • Brave
  • Vivaldi
  • Safari (which doesn't support the *web extension* standard)
  • → https://en.wikipedia.org/wiki/Dillo[Dillo]

Chrome, Edge, Opera and Vivaldi are *Chromium based* browsers.

Text based browser include
  • Links
  • Lynx
  • W3m
  • retawq
  • elinks

{ Viewports #browser-viewport

  In the context of a mobile browser, the concept of the layout viewport and the visual viewport is somewhat important.

  { Layout viewport

    The *layout viewport* is the portion of the document that the browser currently draws and which is currently looked at.
    Content outside of the layout viewport can usually be scrolled into the layout viewport to make it visible.

    The layout viewport may be smaller than the entire document because the document does not fit into the layout viewport.

    The portion that makes up the layout viewport *might* be larger than the currently visible elements, see *visual viewport*.

  }
  { Visual viewport

    The *visual viewport* is the portion of the document that is currently visible.
    -
    It might be smaller than the viewport because of
      • pinch-zoom
      • showing an on-screen keyboard
  }
  { See also

    → development/web/HTML/tags/meta/viewport[`<meta viewport … >`]

    → development/web/HTML/Responsive-design[responsive design]

    The *Visual Viewport* WebAPI, `→ development/web/browser/object-model/window[window].visualViewport`.

    The → https://github.com/WICG/visual-viewport[Visual Viewport README]

    → https://bokand.github.io/viewport/index.html[Visual vs. Layout viewport] demo.

  }

}
{ Storing data

  Apparently, there are (only?) three ways to store data in a browser:
    • LocalStorage: stores key-value pairs (but compare also to SessionStorage)
    • WebSQL: interface to → development/databases/SQLite, only supported in Chrome and Safari
    • → development/web/browser/Storage/Indexed-DB: The sucessor to both of them

  → development/Data in *SessionStorage* survives a page refresh, data in *LocalStorage* even a restart of a browser.

}
{ Accessing local files

  There are → https://stackoverflow.com/a/78053662/180275[only three ways to access local files] from a browser
    • Using the File System Access API
    • Through the HTML upload button
    • Dragging files into the browser

  These three methods have in common that the user has to select exactly which
  files they want to make available to the website.

}
{ JavaScript / ECMAScript

  Most browsers come with the ability to run programs locally (that is in the web browser itself as opposed to in the → web/webserver). This programming language is based on the ECMAScript language and
  implemented as → development/languages/JavaScript.

  { Main thread / event loop #browser-js-mainthread

    The browser's *main (→ development/languages/JavaScript) thread* is closely related to its *event loop*.
    -
    These two concepts are responsible to
      • draw any pending updates to the Document currently being displayed,
      • run any JavaScript code the page needs to run
      • accept events from input devices and dispatch those events to the elements that should receive them.

    Additionally, the event loop
      • handles interactions with the operating system,
      • updates to the browser's own user interface,
      • etc.

    Because of the criticality of the main thread and the event loop, some code might be run by a *worker* (See Web Worker API, the Service Workers API, and `Window.requestIdleCallback()`)


  }

}

sa:

  A web page being rendered in a brower can be accessed and manipulated through the `→ development/web/browser/object-model/document` object.

  → development/web/browser/layout-engine

  → development/web/browser/fingerprinting

  → development/web/browser/add-ons

  → development/web/browser-automation

  → development/web/browser/object-model

  → Windows/dirs/Windows/System32/rundll32_exe/url_bat[`url.bat`] uses `rundll32` to open an
  → development/web/URI-URL-URN-IRI-URC#url[URL] in the default browser (?) in → Windows/dirs/Windows/System32/cmd_exe[cmd.exe].

  → development/web/browser/WebAssembly: A programming language that runs on browsers.

  Windows setting → Windows/settings[`ms-settings:defaultapps`] allows to change the default web browser in → Windows.

  → development/version-control-systems/git/options/_browser[Browser related Git options]

  The → development/languages/Python library → development/languages/Python/libraries/html5lib parses a web page the same way as a browser does.


links:

  → https://caniuse.com/ displays matrices for which technology is supported by which browser.
