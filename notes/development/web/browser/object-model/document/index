$ Browser Object Model: The document object
@ document

A `document` instance represents a web page being rendered in a → development/web/browser and is the root element of the → development/web/DOM.
-
The type of `document` is `Document` which inherits from `→ development/web/DOM/interfaces-mixins/Node`.

Interestingly, there is a `document.body` property but no `document.html` or `document.head` property.
-
However, the document element (that is → development/web/HTML/tags/html[`<html>`]) can be accessed via `document.documentElement`.
(It is unclear to me if the terminology is correct to name `document` the root object because I believed for a long time that `<html>` is the root element).

{ Properties, methods and events

  table { ll

    `activeElement` ☰
    `adoptedStyleSheets` ☰
    `adoptNode()` ☰
    `afterscriptexecute` ☰ *Event*  *Non-standard*
    `alinkColor` ☰ *Deprecated*
    `all` ☰ *Deprecated*
    `anchors` ☰ *Deprecated*
    `append()` ☰
    `applets` ☰ *Deprecated*
    `beforescriptexecute` ☰ *Event*  *Non-standard*
    `bgColor`, `fgColor` ☰ *Deprecated*
    `body` ☰ Compare with `→ development/web/DOM/examples/Node/Document/documentElement`
    `caretPositionFromPoint()` ☰
    `caretRangeFromPoint()` ☰ *Non-standard*
    `characterSet` ☰
    `childElementCount` ☰
    `children` ☰
    `clear()` ☰ *Deprecated*
    `close()` ☰
    → development/web/browser/object-model/document/compatMode[`compatMode`] ☰ Returns the browser's → development/web/browser/layout-engine#browser-rendering-mode[rendering mode].
    `contentType` ☰
    `cookie` ☰ Read and write cookies associated with the document. See also the `Set-Cookie` response and `Cookie` request → development/web/HTTP/header[HTTP headers] and the (preferred) *Cookie Store Web API*.
    `copy` ☰ *Event* 
    `createAttribute()` ☰
    `createAttributeNS()` ☰
    `createCDATASection()` ☰
    `createComment()` ☰
    `createDocumentFragment()` ☰
    `createElement()` ☰ Compare with `createTextNode()`
    `createElementNS()` ☰
    `createEvent()` ☰
    `createExpression()` ☰
    `createNodeIterator()` ☰
    `createNSResolver()` ☰
    `createProcessingInstruction()` ☰
    `createRange()` ☰
    `createTextNode()` ☰ Compare with `createElement()`
    `createTouch()` ☰ *Non-standard*, *Deprecated*
    `createTouchList()` ☰ *Non-standard*, *Deprecated*
    `createTreeWalker()` ☰
    `currentScript` ☰ Returns the currently running → development/web/HTML/tags/script/[`<script>`] tag and is not a JavaScript module. Compare with `scripts`.
    `cut`, `paste` ☰ *Event* 
    `defaultView` ☰ In → development/web/browser[browsers], `defaultView` returns a `→ development/web/browser/object-model/window` object.
    `designMode` ☰
    `dir` ☰
    `doctype` ☰
    → development/web/DOM/examples/Node/Document/documentElement[`documentElement`] ☰ Usually the `HTMLHtmlElement` that represents the document's → development/web/HTML/tags/html[`<html>`] element. Compare with `→ development/web/DOM/examples/Node/Document/body`
    `documentURI` ☰ Compare with `→ development/web/browser/object-model/window[window].location`
    `domain` ☰ *Deprecated*
    `DOMContentLoaded` ☰ *Event*, compare with `→ development/web/browser/object-model/window[window].onload`.
    `elementFromPoint()` ☰
    `elementsFromPoint()` ☰
    `embeds` ☰
    `enableStyleSheetsForSet()` ☰ *Non-standard*, *Deprecated*
    `evaluate()` ☰
    `Events` ☰
    `execCommand()` ☰ *Deprecated*. See also the *Clipboard Web API*.
    `exitFullscreen()` ☰
    `exitPictureInPicture()` ☰
    `exitPointerLock()` ☰
    `featurePolicy` ☰ *Experimental*
    `firstElementChild` ☰
    `fonts` ☰
    `forms` ☰
    `fullscreen` ☰ *Deprecated*
    `fullscreenchange` ☰ *Event* 
    `fullscreenElement` ☰
    `fullscreenEnabled` ☰
    `fullscreenerror` ☰ *Event* 
    `getAnimations()` ☰
    `getElementById()` ☰ Returns the `→ development/web/DOM/interfaces-mixins/Element` whose `id` attribute is equal to the value passed as parameter. See also → development/web/DOM/examples/Node/Document/getElementById[this example].
    `getElementsByClassName()` ☰
    `getElementsByName()` ☰ Returns an array (a `NodeList`) of → development/web/HTML/tags whose `name` → development/web/HTML/attributes[attribute] has the specified value. See also → development/web/DOM/examples/Node/Document/getElementsByName[this example].
    `getElementsByTagName()` ☰ Returns an array (a `HTMLCollection`) of → development/web/HTML/tags whose name is specified in the argument. See also → development/web/DOM/examples/Node/Document/getElementsByTagName[this example].
    `getElementsByTagNameNS()` ☰
    `getSelection()` ☰
    `hasFocus()` ☰
    `hasStorageAccess()` ☰
    `head` ☰
    `hidden` ☰
    `images` ☰
    `implementation` ☰
    `importNode()` ☰
    `Instance` methods ☰
    `lastElementChild` ☰
    `lastModified` ☰
    `lastStyleSheetSet` ☰ *Non-standard*, *Deprecated*
    `linkColor` ☰ *Deprecated*
    `links` ☰ An `HTMLCollection` of all `<area>` and → development/web/HTML/tags/a[`<a>`] elements with a value for the `href` attribute.
    `location` ☰
    `lostpointercapture` ☰ *Event* 
    `mozSetImageElement()` ☰ *Non-standard*
    `mozSyntheticDocument` ☰ *Non-standard*
    `msCapsLockWarningOff` ☰ *Non-standard*
    `mssitemodejumplistitemremoved` ☰ *Event*  *Non-standard*
    `msthumbnailclick` ☰ *Event*  *Non-standard*
    `open()` ☰
    `origin` ☰ *Non-standard*, *Deprecated*
    `pictureInPictureElement` ☰
    `pictureInPictureEnabled` ☰
    `plugins` ☰
    `pointerlockchange` ☰ *Event* 
    `pointerLockElement` ☰
    `pointerlockerror` ☰ *Event* 
    `preferredStyleSheetSet` ☰ *Non-standard*, *Deprecated*
    `prepend()` ☰
    `queryCommandEnabled()` ☰ *Non-standard*, *Deprecated*
    `queryCommandState()` ☰ *Non-standard*, *Deprecated*
    `queryCommandSupported()` ☰ *Non-standard*, *Deprecated*
    `querySelector()` / `→ development/web/DOM/examples/Node/Document/querySelectorAll[querySelectorAll]()` ☰ Selects the first/all elements that match a given → development/web/CSS/selectors[CSS selector]. Compare with `→ development/web/DOM/interfaces-mixins/Element].querySelector` and `Element.querySelectorAll`.
    `readyState` ☰
    `readystatechange` ☰ *Event* 
    `referrer` ☰
    `registerElement()` ☰ *Non-standard*, *Deprecated*
    `releaseCapture()` ☰ *Non-standard*
    `replaceChildren()` ☰
    `requestStorageAccess()` ☰
    `rootElement` ☰ *Deprecated*
    `scripts` ☰ The list of the document's → development/web/HTML/tags/script[`<script>`] elements. Compare with `currentScript`.
    `scroll` ☰ *Event* 
    `scrollingElement` ☰
    `selectedStyleSheetSet` ☰ *Non-standard*, *Deprecated*
    `selectionchange` ☰ *Event* 
    `styleSheets` ☰ A list (`StyleSheetList`) of `CSSStyleSheet` objects. See also → development/web/CSS/javascript/document-styleSheets[this example]
    `styleSheetSets` ☰ *Non-standard*, *Deprecated*
    `timeline` ☰
    `title` ☰
    `URL` ☰
    `visibilitychange` ☰ *Event* 
    `visibilityState` ☰
    `vlinkColor` ☰ *Deprecated*
    `write()` ☰
    `writeln()` ☰
    `xmlEncoding` ☰ *Deprecated*
    `xmlVersion` ☰ *Deprecated*

  table }

}
{ document.addEventListener

  gh|Browser-Object-Model|/document/addEventListener.html||

}
{ document.querySelectorAll

  gh|Browser-Object-Model|/document/querySelectorAll.html||

}
sa:
  → development/web/DOM
