$ Browser Object Model: console object
@ console

The console object provides an API to a → development/web/browser[browser's] debugging console
(aka *Web Console* in → development/web/browser/Firefox[Firefox].
-
From a browser, the debugging console can be opened with `ctrl+shift+j` (at least in → development/web/browser/Firefox).
→ development/web/browser/Chrome also opens the console with `F12`
-
*2022-12-03*: For a specific application rendered in a Chrome browser, I could not open the debugging console with `ctrl+shift+j` (why?), but was able to open it by pressing `F12` then `ESC`.

→ development/web/browser/object-model/console/log[`console.log(…)`] allows to write messages into the debugging console.

→ development/web/browser/object-model/console/table[`console.table()`] prints data in tabular form.

With → development/web/browser/object-model/console/time[`console.time(timerName)`] and the corresponding
`console.timeEnd(timerName)`, it's possible to crudly time the duration of a section of code.

{ Methods

 table { ll

    `assert()` ☰
    `clear()` ☰ Clears the console (but has no effect on consoles running in a terminal (such as those running on *Node*)).
    `count()` ☰
    `countReset()` ☰
    `debug()`, `error()`, `info()`, `warn()` ☰ Writes a debug/error/informational/warning message to the console. A debug message is only displayed to the user if the console is configured to display debug output
    `dir()` ☰  displays an interactive list of the properties of the specified JavaScript object. To get a ist of methods of the `→ development/languages/JavaScript/objects/Array` object, try (directly in the console window): `dir(.prototype)`. Is this method inspired by → development/languages/Python/built-in-functions/dir[Python's `dir()`]?
    `dirxml()` ☰
    `group()`, `groupEnd()` ☰ Starts/ends an (indented) inline log group
    `groupCollapsed()` ☰ Similar to `group()`, but the new group is created collapsed.
    `log()` ☰
    `profile()`, `profileEnd()` ☰ *Non-standard*
    `table()` ☰ Displays tabular data as table.
    `time()`, `timeEnd()` ☰ Starts/ends a (named) timer which can be used to measure the time it takes for an operation to finish.
    `timeLog()` ☰ Logs the current time for a currently running timer started with `time()`
    `timeStamp()` ☰ *Non-standard*: Adds a marker to the browser's (Chrome, Firefox) *Performance Tool*.
    `trace()` ☰ Prints a stack trace
   
 table }

}

{ console.group

  gh|Browser-Object-Model|/console/group.html||

}
{ console.profile

  gh|Browser-Object-Model|/console/profile.html||

}

sa:
 `→ development/web/browser/object-model/window[window].console`

