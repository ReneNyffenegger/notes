$ Browser Object Model: The Window object
@ window

The `Window` object inherits from `→ development/web/DOM/interfaces-mixins/EventTarget`.

The `Window` object has one instance, named `window`.

{ Properties and Methods

  table { ll

   `alert()` ☰
   `applicationCache` ☰ *Deprecated*
   `back()` ☰ *Non-Standard*, *Deprecated*
   `blur()` ☰
   `cancelAnimationFrame()` ☰ Experimental
   `cancelIdleCallback()` ☰
   `captureEvents()` ☰ *Non-Standard*
   `clearImmediate()` ☰
   `close()` ☰
   `closed` ☰
   `confirm()` ☰
   `console` ☰ The `→ development/web/browser/object-model/console` object.
   `convertPointFromNodeToPage()` ☰ *Non-Standard*
   `convertPointFromPageToNode()` ☰ *Non-Standard*
   `customElements` ☰ Returns a `→ development/web/APIs/interfaces/CustomElementRegistry` interface.
   `defaultStatus` ☰ *Deprecated*
   `devicePixelRatio` ☰ Number of physical pixels that represent a logical (or CSS) pixel. The value 1 represents a classic 96 DPI display, 2 is expected for HiDPI/Retina displays.
   `dialogArguments` ☰ *Deprecated*
   → development/web/browser/object-model/document[`document`] ☰
   `dump()` ☰ *Non-Standard*
   `event` ☰
   `fetch()` ☰ Returns a `Response` object. Part of the *Fetch API*. (See → development/web/browser/object-model/window/fetch/asynchronous[demonstration of the asynchronicity of fetch()])
   `find()` ☰ *Non-Standard*
   `focus()` ☰
   `forward()` ☰ *Non-Standard*, *Deprecated*
   `frameElement` ☰
   `frames` ☰
   `fullScreen` ☰ *Non-Standard*
   `getComputedStyle()` ☰
   `getDefaultComputedStyle()` ☰
   `getSelection()` ☰
   `history` ☰ A reference to a `History` object
   → development/web/browser/object-model/window/innerWidth-innerHeight[`innerHeight` and `innerWidth`] ☰ return the size of the browser-window's viewport.
   `length` ☰
   `localStorage`, `sessionStorage` ☰ References to `Storage` objects
   `location` ☰ See also `→ development/web/DOM/interfaces-mixins/Node[Node].baseURI` and `→ development/web/browser/object-model/document[document].documentURI`.
   `locationbar`, `personalbar`, `scrollbars` ☰ References to `BarProp` objects.
   `matchMedia()` ☰ TODO: This method seems to be somehow related to the `→ development/web/CSS/selectors/at-rules/media` CSS at-rule.
   `menubar` ☰
   `Methods` ☰
   `moveBy()` ☰
   `moveTo()` ☰
   `mozInnerScreenX` ☰
   `mozInnerScreenY` ☰
   `mozPaintCount` ☰ *Non-Standard*, *Deprecated*
   `name` ☰
   `navigator` ☰ A reference to a `Navigator` object
   `ondragdrop` ☰ *Deprecated*
   `open()` ☰
   `openDialog()` ☰ *Non-Standard*
   `opener` ☰
   `outerHeight` ☰
   `outerWidth` ☰
   `pageXOffset`, `pageYOffset`, `scrollX`, `scrollY` ☰ `pageXOffset` is an alias for `scrollX`, `pageYOffset` an alias for `scrollY`.
   `parent` ☰ A reference to (another?) `Window` object
   `postMessage()` ☰
   `print()` ☰
   `prompt()` ☰
   → development/web/browser/object-model/window/PublicKeyCredential[`PublicKeyCredential`] ☰ See also `→ development/web/browser/object-model/navigator[navigator].credentials`
   `releaseEvents()` ☰ *Non-Standard*
    → development/web/browser/object-model/window/requestAnimationFrame[`requestAnimationFrame()`] ☰
   `requestFileSystem()` ☰ *Non-Standard*, *Deprecated*
   `requestIdleCallback()` ☰
   `resizeBy()` ☰
   `resizeTo()` ☰
   `screen` ☰ A reference to a `Screen` object
   `screenLeft`, `screenTop`, `screenX`, `screenY` ☰ `screenLeft` is an alias for `screenX`, `screenTop` an alias for `screenY`. The values correspond to the vertical/horizontal distance, measured in CSS pixels, from the the browser's viewport to the edges of the screen.
   `scroll()` ☰
   `scrollBy()` ☰
   `scrollByLines()` ☰ *Non-Standard*
   `scrollByPages()` ☰ *Non-Standard*
   `scrollMaxX` ☰ *Non-Standard*
   `scrollMaxY` ☰ *Non-Standard*
   `scrollTo()` ☰
   `self` ☰ A (`WindowProxy`) reference to *the* `window` instance. Compare with `WorkerGlobalScope.self`.
   `setImmediate()` ☰ *Non-Standard*
   `showDirectoryPicker()` ☰
   `showModalDialog()` ☰ *Deprecated*
   `showOpenFilePicker()` ☰
   `showSaveFilePicker()` ☰
   `sidebar` ☰ *Non-Standard*
   `sizeToContent()` ☰
   `speechSynthesis` ☰
   `status` ☰
   `statusbar` ☰
   `stop()` ☰
   `toolbar` ☰
   `top` ☰
   `updateCommands()` ☰
   `visualViewport` ☰
   `window` ☰

  table }

}
{ Scrolling

  → development/web/browser/object-model/window/scrollX-scrollY[`window.scrollX` and `window.scrollY`] indicate the amount in pixels that the document is scrolled horizontally and vertically.
  `window.pageXOffset` and `window.pageYOffset` are aliases for `window.scrollX` and `window.scrollY`.

  The properties `.scrollColumn` and `.scrollTow` set or get the left-most column or top-most row in a pane or window.

  Relative scrolling is possible for example with
code {
activeWindow.smallScroll Down    := 105
activeWindow.largeScroll toRight :=   2
code }

}

sa:

  In → development/web/browser[browsers], `→ development/web/browser/object-model/document[document].defaultView` returns a `window` object.


 `→ development/web/browser/object-model/window/onerror`

 `→ development/web/browser/object-model/window/setTimeout`
