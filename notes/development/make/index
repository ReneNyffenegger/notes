$ make

{ Recursively turn each cpp file into an executable

code {
SOURCES=$(shell find -type f -iname '*.cpp')

all: $(SOURCES:.cpp=)
code }

See → https://stackoverflow.com/a/9996597/180275[this stackoverflow answer].

}
{ Multiple processors #multiple_processors

  With multiple processors (or cores), the compilation time can be reduced by parallelizing the tasks.

  This can be achieved with `export MAKEFLAGS='-j 2'` or just `make -j2`.

  The number of available processing units can be determined with → Linux/shell/commands/nproc (`MAKEFLAGS="-j $(nproc)"`).

}
{ See also

  → development/GNU-Build-System/automake.

  → development/tools/scripts/personal/make-targets: A → development/tools/scripts/personal[script] that shows the targets of a makefile.

}
{ Standard targets

  • clean
  • distclean
  • maintainer-clean

}
{ Show make's default rules

code {
make -p
code }

`make` calls these default rules the »internal database«.

}
{ TODO

   MinGW seems to name the make executable `mingw32-make.exe`.
   -
   Strawberry → development/languages/Perl[Perl] seems to name it `gmake.exe`. It also comes with a `dmake.exe`...

}
