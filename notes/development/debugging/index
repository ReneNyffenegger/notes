
{ Debugger

  A debugger allows to observer and hopefully correct programming errors.

  A debugger creates a new process or attaches to an existing one. Then, the debugger allows to
    • control execution of this process (for example by setting *breakpoints*).
    • read and write memory
    • read and write CPU (registers and flags)
    • examine call stack
    • dissasemble the program (and merge it with source code if available)

}
{ Anti debugging techniques #anti-debugging-techniques

  Check if debugger is attached (Windows: `→ Windows/development/process/PEB[PEB].IsDebugged`).

  Scan for → development/languages/assembler/x86/instructions/int/3[`int 3`] instructions.

  Check the time it takes to run through a specific portion of the code. The assumption is that a debugging entity slows down the exeuction time.
  -
  The → development/languages/assembler/x86/instructions/rdtsc[`rdtsc`] instruction (x86/x64) is useful for that.

  Try to detect *virtual machines*.

}
sa:
  → Windows/development/WinAPI/Debugging 
