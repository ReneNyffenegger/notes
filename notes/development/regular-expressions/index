$ Regular expressions
@ regular expressions

A *regular expression* (aka regex) is a set of rules that put any imaginable character string into one of two groups:
  • either the string follows the rule set, or
  • it doesn't.
The string is said to *match* the regular expression *if* it follows the rules.
-
Thus, these rules specify a *pattern* of text. For example, it's possible to define a regex that can be used to determine if some text is a phone number or an email addresses.

With regular expressions, its also possible to extract some matched (sub-)string from the text or replace the matched text with other text.

The regular expression itself is a character string.

{ Some rules

  { Most characters match themselves

    A basic rule of regular expressions is that most characters match themselves.

    table { lll
      Regexp ☰ text     ☰ matches?
      `p`    ☰ `p`      ☰ ✓
      `p`    ☰ `pear`   ☰ ✓
      `p`    ☰ `apple`  ☰ ✓
      `p`    ☰ `banana` ☰ ✗
      `ppl`  ☰ `p`      ☰ ✗
      `ppl`  ☰ `pear`   ☰ ✗
      `ppl`  ☰ `people` ☰ ✗
      `ppl`  ☰ `apple`  ☰ ✓
    table }

    Note: it is sufficient for `text` to *contain* the regular expression in order to match it.

  }
  { Meta characters

    *Meta characters* are characters that are used to create or specify regular expression rules. Thus, they have a special meaning and don't match themselves.

    Some common meta characters are:
      • The dot: `.`
      • Caret and dollar sign: `^` `$`
      • Star, plus and question mark: `*` `+` `?`
      • Parantheses and braces: `(` `)` `{` `}` `[` `]`
      • Backslash: `\`
      • Vertical bar: `|`

    In order to match such a meta character, they need to be escaped with the meta character backslash: `\`

  }
  { Meta character: dot

    The dot (`.`) matches *any* single character except a → development/line-break[new line] (`\n`).

    table { lll
      Regexp ☰ text     ☰ matches?
     `.`     ☰ `q`       ☰ ✓        
     `.`     ☰ `foo`     ☰ ✓ 
     `ba.`   ☰ `foo`     ☰ ✗
     `ba.`   ☰ `bar`     ☰ ✓
     `ba.`   ☰ `baz`     ☰ ✓
     `ba.`   ☰ `qabanti` ☰ ✓
     `b.r`   ☰ `bar`     ☰ ✓
     `b.r`   ☰ `baz`     ☰ ✗
     `...`   ☰ `p`       ☰ ✗
     `...`   ☰ `pq`      ☰ ✗
     `...`   ☰ `pqr`     ☰ ✓
     `...`   ☰ `pqrs`    ☰ ✓
     `...`   ☰ `pqrst`   ☰ ✓

    table }

  }
  { Meta characters: caret and dollar #re-caret-dollar

   The caret and the dollar sign match a *position* rather than a character: the caret matches the position *beginning of string*, the dollar sign matches the position *end of string*.

   table { lll
     Regexp ☰ text             ☰ matches?
    `two`   ☰ `one two three`  ☰ ✓
    `^two`  ☰ `one two three`  ☰ ✗
    `two$`  ☰ `one two three`  ☰ ✗
    `two$`  ☰ `one two`        ☰ ✓
    `^two`  ☰ `one two`        ☰ ✗
    `^two`  ☰ `two three`      ☰ ✓
    `^t..`  ☰ `two three`      ☰ ✓
    `^t..`  ☰ `two`            ☰ ✓
    `^t..`  ☰ `the good`       ☰ ✓
    `^t..`  ☰ `t`              ☰ ✗
    `^t..`  ☰ `xyz`            ☰ ✗
   table }
   

  }
  { Meta characters: star, plus, question mark, curly braces

    The meta characters `*` `+` `?` and `{` `}` are *quantifiying* meta characters. They control how *often* the *preceeding* character (or atom, to be defined later) are matched.

    `*` means to match it 0, 1 or more times.
    -
    `+` matches 1 or more times
    -
    `?` matches 0 or 1 times
    -
    `{n}` matches excactly `n` times.
    -
    `{n,m}` matches between `n` and `m` times.
    -
    `{n,}` matches at least `n` times
    -
    `{,m}` matches at most `m` times

   table { lll
     Regexp    ☰ text     ☰ matches?
    `x+`       ☰ `foo`    ☰ ✗
    `x+`       ☰ `xyz`    ☰ ✓
    `x+`       ☰ `axis`   ☰ ✓
    `x*`       ☰ `axis`   ☰ ✓
    `x*`       ☰ `apple`  ☰ ✓
    `x?`       ☰ `apple`  ☰ ✓
    `x+`       ☰ `apple`  ☰ ✗
    `x{3}`     ☰ `axis`   ☰ ✗
    `x{3}`     ☰ `exxon`  ☰ ✗
    `x{3}`     ☰ `axxxr`  ☰ ✓
    `x{3}`     ☰ `axxxqr` ☰ ✓
    `Aq{2,3}Z` ☰ `AqZ`    ☰ ✗
    `Aq{2,3}Z` ☰ `AqqZ`   ☰ ✓
    `Aq{2,3}Z` ☰ `AqqqZ`  ☰ ✓
    `Aq{2,3}Z` ☰ `AqqqqZ` ☰ ✗
   table }

  }
  { Meta characters: backslash to escape following meta character

   One of the uses of the backslash (`\`) is to escape the following meta character in order to make it match the literal character rather than meaning of the meta character.

   table { lll
     Regexp   ☰ text       ☰ matches?
     `a.c`    ☰ `abc`      ☰ ✓
     `a.c`    ☰ `a.c`      ☰ ✓
     `a\.c`   ☰ `a.c`      ☰ ✓
     `a\.c`   ☰ `abc`      ☰ ✗
     `bla$`   ☰ `bla bla`  ☰ ✓
     `bla$`   ☰ `more bla$`☰ ✗
     `bla\$`  ☰ `more bla$`☰ ✓
   table }

  }
  { Meta characters: square brackets to define a set of characters

    Square brackes (`[…]`) defines a *set of characters* that match any character that is in this set. For example, `[aeiou]` matches (one) lowercase-vowel.

    Such a set of characters is especially useful when combined with one of the *quantifers*.

   table { lll
     Regexp      ☰  text    ☰ matches?
    `[aeiou]`    ☰ `xyz`    ☰ ✗
    `[aeiou]`    ☰ `one`    ☰ ✓
    `[aeiou]`    ☰ `two`    ☰ ✓
    `[aeiou]{2}` ☰ `two`    ☰ ✗
    `[aeiou]{2}` ☰ `three`  ☰ ✓
   table }

    If the first character in the square brackets is a caret, it negates the set of characters. `[^aeiou]` matches any non-lowercase-vowel).
   table { lll
     Regexp     ☰ text     ☰ matches?
    `[^aeiou]`  ☰ `X`      ☰ ✓
    `[^aeiou]`  ☰ `e`      ☰ ✗
    `[^aeiou]`  ☰ `ef`     ☰ ✓
    `^[^aeiou]$`☰ `ef`     ☰ ✗
    `^[^aeiou]$`☰ `i``     ☰ ✓
   table }

  }
  { Meta characters: parantheses to create a sequece

    Parantheses create a sequence of characters or embedded sequences. As with square brackets, such sequences are especially useful with quantifiers.

   table { lll
     Regexp        ☰ text              ☰ matches?
    `(xyz){2,}`    ☰`xxyyzz`           ☰ ✗
    `(xyz){2,}`    ☰`one xyz`          ☰ ✗
    `(xyz){2,}`    ☰`two xyzxyz!`      ☰ ✓
    `(xyz){2,}`    ☰`three xyzxyzxyz.` ☰ ✓
   table }

  }
  { Matching «special» characters

    A backslash followed by a `n`, `r`, `t` or `f` match some special characters:
    table { ll
     `\n` ☰ New line
     `\r` ☰ Carriage return
     `\t` ☰ Tabulator (→ development/Unicode/ASCII 9)
     `\f` ☰ Form feed
    table }

  }
  { Meta characteres: backslash for special groups of characters

    The backslash followed by some specific character matches some predefined character set.

    table { ll
         ☰ is equivalent to
    `\d` ☰ `[1234567890]` or `[0-9]`
    `\w` ☰ `[A-Za-z0-9_]`
    `\s` ☰ `[ \t\r\n\f]` (that is: any whitespace character) 

    table }

    If the backslashed character is uppercase, it negates the meaning of its lowercase cousin. Thus `\D` is equivalent to `[^0-9]`, etc.

   table { lll
     Regexp ☰ text       ☰ matches?
    `\d{3}` ☰ `42`       ☰ ✗
    `\d{3}` ☰ `123`      ☰ ✓
    `\D{3}` ☰ `42`       ☰ ✓
    `\D{3}` ☰ `ab`       ☰ ✗
    `\D{3}` ☰ `abc`      ☰ ✓
    `\w\d`  ☰ `4a`       ☰ ✗
    `\w\d`  ☰ `a4`       ☰ ✓
   table }

  }
  { Meta characters: vertical bar #regexp-vertical-bar

    The vertical bar separates two (sub-) regular expressions. At least one of these two regular expressions need to match in order for the complate regular expression to match.

    Because the vertical bar has a low precedence, it is often used within parentheses.

   table { lll
     Regexp               ☰ text     ☰ matches?
    `\d{3}|[^aeiou]{2}`   ☰ `12`     ☰ ✗
    `\d{3}|[^aeiou]{2}`   ☰ `a`      ☰ ✗
    `\d{3}|[^aeiou]{2}`   ☰ `a123`   ☰ ✓
    `\d{3}|[^aeiou]{2}`   ☰ `ee99`   ☰ ✓
    `\d{3}|[^aeiou]{2}`   ☰ `ff99`   ☰ ✗
    `(\d|\w){2}`          ☰ `1a`     ☰ ✗
    `(\d|[xyz]){2}`       ☰ `1`      ☰ ✗
    `(\d|[xyz]){2}`       ☰ `1x`     ☰ ✓
    `(\d|[xyz]){2}`       ☰ `2y`     ☰ ✓
    `(\d|[xyz]){2}`       ☰ `xy`     ☰ ✓
    `(\d|[xyz]){2}`       ☰ `ay`     ☰ ✗
   table }

  }
  { Matching word boundaries #regexp-word-boundary

    Such as `^` and `$` match the beginning or end of a entire string, there is a notation to match the beginning or end of a word: `\b`. Such a *word boundary* is (usually) between
    a `\w` and a `\W` or `^` or `$`. Like `^` and `$`, the word boundary matches a position rather than one (or more) characters. Technically, this is referred to as *zero-width assertion*.

    table { lll
     Regexp               ☰ text        ☰ matches?
    `\bxyz`               ☰ `xyz one`   ☰ ✓
    `\bxyz`               ☰ `one xyz`   ☰ ✓
    `\bxyz`               ☰ `blaxyz`    ☰ ✗
    `\bxyz`               ☰ `xyzbla`    ☰ ✓
    `\bxyz\b`             ☰ `blaxyzbla` ☰ ✗
    table }

    Note that some regular expression dialects use `\<` and `\>` to match on the left or right side of a word.

  }

}
{ Flags

  Most implementations allow to alter the behaviour of regular expressions with flags. Typically, such flags include
    • `i` to ignore case
    • `m` to match *multi lines*
    • `s` to require a *single line* match

}
{ Some examples in a few environments

  → development/vim/script/regular_expressions[Vim]

  → development/languages/Perl/regular-expressions

  → development/languages/R/functions/regular-expressions

  → development/languages/Perl/modules/DBD/SQLite/regexp

  → development/languages/Python/standard-library/re[Python's standard library `re`]

  → Companies-Products/SAS[SAS] functions for → Companies-Products/SAS/programming/regular-expressions[regular expressions]: → Companies-Products/SAS/programming/functions/prxchange and
  → Companies-Products/SAS/programming/functions/prxmatch, → Companies-Products/SAS/programming/functions/prxmatch etc.
  -
  See also → Companies-Products/SAS/macros/regexp[SAS macros for regular expressions]

  → development/databases/SQLite/functions/regexp[SQLite function `regexp`]

  → development/web/php/regular-expressions[Regular expressions in PHP]
  -
  → development/web/php/snippets/sqlite/regular-expressions

  → development/databases/Oracle/SQL/functions/regular_expressions[Oracle functions for regular expressions]
  -
  → development/databases/SQL-Server/T-SQL/functions/regexp[Similarly for SQL Server].

  → Linux/shell/bash/variables/regular-expressions[Regular expressions in bash]

  The JavaScript → development/languages/JavaScript/objects/RegExp[`RegExp` object] and
  → development/languages/JavaScript/objects/String/regular-expression[String methods] that operate on regular expressions.

  The → Linux/shell/commands[shell command] → Linux/shell/commands/grep[`grep`]

  → development/languages/VBA/regular-expressions[Regexps in VBA]

  In → Windows/PowerShell, a string can be tested against regular expression with the → Windows/PowerShell/language/operator/comparison/match_notmatch[`-match` and `-nomatch` operators].
  -
  In → Windows/PowerShell/pipeline[pipelines], objects can be grepped with the → Windows/PowerShell/command-inventory/noun/string/select[`select-string` cmdLet].

  → Windows/dirs/Windows/System32/findstr_exe[`findstr.exe`]

  → misc/ISO/9075[SQL standard]: the → misc/ISO/9075/features[features] F841, F842, F843, F844, F845 (`like_regex`, `occurrences_regex`, `position_regex`, `substring_regex`, `translate_regex`) and
  feature T581.

}

sa:
  The → Windows/development/COM object (?) → Windows/development/COM/Useful-object-libraries/Microsoft-VBScript-Regular-Expressions[Microsoft VBScript Regular Expressions].

  The → Microsoft/dot-net namespace → Microsoft/dot-net/namespaces-classes/System/Text/RegularExpressions[`System.TextRegular.Expressions`].

links:
  
   → https://en.wikipedia.org/wiki/Henry_Spencer[Henry Spencer] wrote a non-proprietary replacement for `regex(3)` and made it freely available.
