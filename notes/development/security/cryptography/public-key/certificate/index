$ Public Key Certificate
@ certificate

aka: digital certificate, identity certificate, or just *certificate*.

The primary *purpose* of a certificate is to authenticate the identity of the owner of the certificate to other parties involved in electronic transactions.
-
Such owners include persons, services and devices.

Ceritificate owners are also referred to as *subjects*.

The information («fields») typically found in a certificate includes:
  • The subject's → development/security/cryptography/public-key/cryptography[public key]
  • Identifiying information such as eMail address, name etc.
  • The time period (valid from, valid to) during which the certificate is valid.
  • Information about the certificate's issuer, including the issuer's *digital signature*.

A certificate must be issued and signed by a *certfication authority* (CA).

The *main advantage* for public key certificates is that a party that needs to authenticate someone does not have to keep a list of
→ development/security/password[passwords] but rather explicitly trusts *one* certificate authority and implicitely trusts that the
certificate authority has performed the necessary identity verifications.

A standard that defines the *format* of public key certificates is → development/security/cryptography/X_509[X.509].

{ Types of certificates

  Types of certificates include

  table { ll
    ~Certificate type~ ☰ ~Purpose~
    Secure Multipurpose Internet Mail Extensions (S/MIME) ☰ signing email messages.
    Secure Sockets Layer (SSL) and Internet Protocol security (IPSec) digital certificates ☰ authenticating network connections.
    Smart cards ☰ logging on to PCs
  table }

}
{ Self signed certificate

  A certificate that is signed by its own private key (and whose subject is equal to the issuer?) is a *self signed certificate*.
  -
  Such certificates can be trusted (only) because of arrangements that were made in the physical world (for example inclusion on a *trusted root list*).

  Root certificates are self signed.

  Misc: Under the → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN[root directory] of an → Microsoft/Office[MS Office] installation is the the
  → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN/SELFCERT_EXE[`SELFCERT.EXE`] executable which allows to create a self-signed digital certificate.

}
{ Displaying the content of a certificate

  { OpenSSL

    The content of a certificate can be displayed, for example, on the command line with the → development/security/cryptography/SSL-TSL/OpenSSL/executable[`openssl` executable]:
code {
$ openssl → development/security/cryptography/SSL-TSL/OpenSSL/executable/x509 -in xyz.crt -noout -text
code }

  }
  { Windows

    In a Windows command line, the certificate can be displayed like so
code {
C:\> Windows/dirs/Windows/System32/certutil_exe[certutil] -dump path\to\certificate.crt
code }

    A certificate file with the `.crt` suffix can be right clicked and then opened in → Windows/dirs/Windows/explorer_exe/[Windows Explorer] to have its content displayed in a dialog window.

  }

}
{ Windows

  In Windows, a *Domain* includes a *certificates authority* that issues certificates to computers in that domain.

  Certificates can be viewed and examined with → Windows/dirs/Windows/System32/certmgr_msc[`certmgr.msc`].

  { Stores

    Certificates are stored in *stores*, of which the two most important ones are
      • the local machine store
      • the current user store

    With → Windows/PowerShell, these stores can be displayed with the *cert* → Windows/PowerShell/language/provider[provider]:
code {
PS C:\> cd cert:
PS Cert:\> → Windows/PowerShell/command-inventory/noun/childItem/get[get-childItem] | → Windows/PowerShell/command-inventory/noun/object/select[select-object] location

    Location
    --------
 CurrentUser
LocalMachine
p
PS Cert:\> cd LocalMachine
… etc. etc. …
code }

  }
  { .NET namespace

     The .NET namespace `System.Security.Cryptography.X509Certificates` contains the → Microsoft/dot-net#dot-net-clr[Common Language Runtime] implementation of the *Authenticode X.509 v.3 certificate*.

     The → Windows/PowerShell/language/provider[PowerShell provider] *Certificate* allows to access the namespace's classes `X509Certificate2` and `X509Store`.

  }

}

sa:

  → development/security/credential[Security: credentials]

  The PowerShell cmdlet → Windows/PowerShell/command-inventory/noun/selfSignedCertificate/new[`new-selfSignedCertificate`] creates X.509 certificates and private key/public key pairs

 `→ Windows/dirs/Windows/System32/certutil_exe`

 `→ development/languages/Python/installation/directory/Tools/scripts[Tools/scripts]/get-remote-certificate.py`
  → development/security/cryptography/public-key

  The JDK `→ development/languages/Java/JDK/directory/bin/keytool`.
