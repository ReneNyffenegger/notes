$ Public Key Cryptography
@ Public key cryptography

Any → development/security/cryptography[cryptographic] system that uses the public key and private key pair is said to be *public key cryptography* or *asymmetric cryptography*.

The best-known uses for public key cryptography are:
 • → development/security/authentication[authentication] (Profing that holder of private key sent a message)
 • encryption (Only the holder of the private key can decrypt a message encrypted with a public key.

Asymmetric encryption is slower than symmetric encryption.

RSA is one of the dominant public key cryptosystems.

Apparently, a public/private key pair can be generated with `ssh-keygen`.

{ Public Key Cryptographic Standards (PKCS) #pkcs

  The PKCS are a set of standards which are published by RSA Security LLC.

  table { lll
    PKCS #1  ☰ RSA Cryptography Standard ☰ RFC 8017
    PKCS #3  ☰ Diffie–Hellman Key Agreement Standard ☰ 
    PKCS #5  ☰ Password-based Encryption Standard ☰ RFC 8018, → https://en.wikipedia.org/wiki/PBKDF2[PBKDF2]
    PKCS #6  ☰ Extended-Certificate Syntax Standard ☰ 
    PKCS #7  ☰ Cryptographic Message Syntax Standard ☰ RFC 2315
    PKCS #8  ☰ Private-Key Information Syntax Standard ☰ Storing *private key information*, see RFC 5958 and → development/security/cryptography/public-key/cryptography
    PKCS #9  ☰ Selected Attribute Types ☰ RFC 2985
    PKCS #10 ☰ Certification Request Standard ☰ RFC 2986
    PKCS #11 ☰ Cryptographic Token Interface ☰ 
    PKCS #12 ☰ Personal Information Exchange Syntax Standard ☰ RFC 7292
    PKCS #15 ☰ Cryptographic Token Information Format Standard ☰
  table }

  Some standards (which are not listed in the table above) are withdrawn or were not published.

}
{ Possible notation

  `A` is → development/security/cryptography/persons/Alice-and-Bob[Alice's] public key, and `a` is her private key. Thus,
   -
  `{msg}ᴬ` is an encrypted cyphertext,
  -
  `{msg}ᵃ` is a signed message.

}
{ Surreptious forwarding

  Don Davis: → http://world.std.com/~dtd/sign_encrypt/sign_encrypt7.html#tthFtNtAAD[Defective Sign & Encrypt in S/MIME, PKCS#7, MOSS, PEM, PGP, and XML]

  Alice sends Bob a signed and encrypted message `{{msg}↑a↑}↑B↑`.
  -
  Using his private key, Bob gets `{msg}↑a↑`.
  -
  Using Charlies public key, Bob encrypts this to `{{msg}↑a↑}↑C↑` and sends it to Charlie.
  -
  Using his private key, Charlie decrypts it to `{msg}↑a↑` and then uses Alice's public key to
  (naively) verify that Alice sent `{msg}`.
  -
  Thus, Charlie is under the wrong impression that Alice sent `{msg}` to Charlie rather than to Bob.

}

sa:
  → development/security/cryptography/public-key
