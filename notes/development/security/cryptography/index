$ Cryptography
@ Cryptography

Plaintext (aka cleartext) => encryption => ciphertext => decryption => plaintext

The algorithm to perform the encryption and decription is also called *cipher*.

Ciphers can be divided into
table { lll
   ☰ ~characteristic~ ☰ ~examples~
  Symmetric key algorithms  ☰ The same key is used for encryption and decrypion. ☰ DES, → #aes[AES]
  Asymmetric key algorithms ☰ Th plaintext is encrypted with a different key than the ciphertext will be decrypted. ☰ → #rsa[RSA]
table }

Ciphers can also be distinguished by the type of the processed data:
  • block ciphers
  • stream ciphers

Three interesting applications of cryptography include:
  • Hashing
  • → development/security/cryptography/public-key/cryptography (→ development/security/cryptography/Digital-signature)
  • Encryption and decryption

{ Algorithms

  ISO/IEC 18033 has 5 parts related to encryption algorithms:
    • ISO/IEC 18033-1:2015 Part 1: General
    • ISO/IEC 18033-2:2006 Part 2: Asymmetric ciphers
    • ISO/IEC 18033-3:2010 Part 3: Block ciphers
    • ISO/IEC 18033-4:2011 Part 4: Stream ciphers
    • ISO/IEC 18033-5:2015 Part 5: Identity-based ciphers

}

{ Some words, idioms etc

{ AES #aes

  AES = Advanced Encryption Standard

  AES is a → #block-cipher.

  AES is a symmetric-key algorithm.

  AES supersedes DES.

}
{ Avalanche effect

  Changing (only) one bit in the input creates a significant large difference in the output.

}
{ Birthday attack

}
{ Block cipher #block-cipher

  The cipher text of an n-bit text contains n bits.

  → #aes

}
{ Blowfish

  Blowfish is a symmetric cipher. It should not be used on files larger than 4GB in size.

}
{ Break

  A «break» is anything that is faster than a brute-force attack.:q


}
{ Diffie Hellman (DH) #dh

  An anonymous, non-authenticated key-agreement protocol.

  In GPG, Diffie Hellman is called the *Elgamal encryption algorithm*.

}
{ Elliptic curve cryptography (ECC)

  Before ECC become popular, almost all public-key algorithms were based on → #rsa[RSA], DSA, and → #dh[DH].
  -
  RSA etc still used, though.

  ECC found in → development/security/cryptography/SSL-TSL, → development/security/cryptography/OpenPGP[PGP] and SSH.

}
{ Encryption algorithms

  Some encryption algorithms include
    • DES (Data Encryption Standard)
    • Triple DES
    • TRIPLE_DES_3KEY
    • RC2
    • RC4 (Rivest Cipher 4, generally considered insecure)
    • 128-bit RC4
    • DES-X
    • AES (128, 192 and 256 bit)

}
{ ElGamal

  A public key encryption scheme with security based on the discrete logarithm problem.

}
{ Format preserving encryption

  Output format = Input format.
  -
  So, an encrypted german word is a german word. An encrypted credit card is a credit card.

}
{ Hash function

  A general hash function has the following three properties
    • Input can be any size
    • Output size is fixed
    • Output can be calculated efficiently: it takes O(n) time (n = length of input). However, it's difficult to compute the input given the output only.

  A hash value is called *digest* and can be used to identify a (longer) message or document.

  In order to be useful for → development/Crypto-Currencies/Bitcoin, it additionally needs these three properties:
    • Collision resistance: nobody can find an input for a given output.
    • Hiding: The hash doesn't allow to guess the input
    • Puzzle friendly



  Apparently, no hash functions are *proven* to be collision resistant.

  Examples of well-known hash function are *SHA-256* or MD2.

}
{ Key exchange

  Key exchange protocols allow two parties to produce a secret session key over a public channel.

}
{ Message authentication code (MAC)

  HMAC, for example, is a MAC algorithm.

}
{ Malleability

  A malleable encryption algorithm allows (potentially an attacker) to transform a cipher
  text into a different ciphertext which decrypts into a plain text that is
  similar or related to the original plain text.
  -
  When the attacker does that, he is not necessarily able to read the original or new message.

  Some algorithms are malleable by design, for example: homomorphic encryption schemes.


}
{ Nonce #security-nonce

  An arbitrary (usually random) number that may be used only *once*.

  In → development/security/authentication[authentication], a nonce ensures that old communication cannot be reused in a reply attack.

 *Salts* are related to the concept of nonces.

}
{ One time pad (OTP)

  A OTP encrypts a message with a key that is at least as long as the message. The key is used only once (hence *one-time* pad).
  
  An OTP is allegedly completely secure: → http://crypto.stackexchange.com/a/31086/6411

}
{ PGP

}
{ PKI - Public Key Infrastructure

  → development/security/cryptography/public-key/infrastructure

}
{ Public-private key encryption

  `m` = message
   -
  `c` = cipher text
   -
  `n` = arbitrarily chosen value
   -
  `a` = private key
   -
  `b` = public key

  `c=m^a mod n`

  `m=c^b mod n`

  `m=(m^a)^b mod n = (m^b)^a mod n`

}
{ Reply attack
}
{ RSA #rsa

  RSA is an asymmetric cipher and is named after its inventors: Rivest, Shamir and Adleman.

}
{ Secure socket layer (SSL)

  Predecessor of → development/security/cryptography/SSL-TSL[TLS]

}
{ Secure electronic standard (SET)

  SET ~was~ a communications protocol standard for securing credit card transactions over insecure network.

}
{ Transport layer security (TLS)

  SSL is the predecessor of TLS

}
  { X.509

    *X.509* is a standard that defines the *format* of → development/security/cryptography/public-key/certificate[public key certificates].

  }

}

sa:
  The Windows utility → Windows/dirs/Windows/System32/cipher_exe[`cipher_exe`]
