
Three interesting applications:
  • Hashing
  • → development/security/cryptography/Public-key-cryptography (→ development/security/cryptography/Digital-signature)
  • Encryption and decryption

{ Some words, idioms etc

{ AES #aes

  A → #block-cipher

}
{ Avalanche effect

  Chaning (only) one bit in the input creates a significant large difference in the output.

}
{ Birthday attack

}
{ Block cipher #block-cipher

  The cipher text of an n-bit text contains n bits.

  → #aes

}
{ Diffie Hellman (DH) #dh

  An anonymous, non-authenticated key-agreement protocol.

}
{ Elliptic curve cryptography (ECC)

  Before ECC become popular, almost all public-key algorithms were based on RSA, DSA, and → #dh[DH].
  -
  RSA etc still used, though.

  ECC found in → development/security/cryptography/TLS[TLS], PGP and SSH.

}
{ ElGamal

  A public key encryption scheme with security based on the discrete logarithm problem.

}
{ Format preserving encryption

  Output format = Input format.
  -
  So, an encrypted german word is a german word. An encrypted credit card is a credit card.

}
{ Hash function

  A general hash function has the following three properties
    • Input can be any size
    • Output size is fixed
    • Output can be calculated efficiently: it takes O(n) time (n = length of input)

  In order to be useful for → development/Crypto-Currencies/Bitcoin, it additionally needs these three properties:
    • Collision resistance: nobody can find an input for a given output.
    • Hiding: The hash doesn't allow to guess the input
    • Puzzle friendly

  Apparently, no hash functions are *proven* to be collision resistant.

  An example of a hash function is *SHA-256*.

}
{ Key exchange

  Key exchange protocols allow two parties to produce a secret session key over a public channel.

}
{ Message authentication code (MAC)

  HMAC, for example, is a MAC algorithm.

}
{ Malleability

  A malleable encryption algorithm allows (potentially an attacker) to transform a cipher
  text into a different ciphertext which decrypts into a plain text that is
  similar or related to the original plain text.
  -
  When the attacker does that, he is not necessarily able to read the original or new message.

  Some algorithms are malleable by design, for example: homomorphic encryption schemes.


}
{ Nonce #security-nonce

  An arbitrary (usually random) number that may be used only *once*.

  In → development/security/authentication[authentication], a nonce ensures that old communication cannot be reused in a reply attack.

}
{ One time pad (OTP)

  
  Allegedly completely secure: → http://crypto.stackexchange.com/a/31086/6411

}
{ PGP

}
{ PKI - Public Key Infrastructure

  → development/security/cryptography/Public-key-infrastructure

}
{ Public-private key encryption

  `m` = message
   -
  `c` = cipher text
   -
  `n` = arbitrarily chosen value
   -
  `a` = private key
   -
  `b` = public key

  `c=m^a mod n`

  `m=c^b mod n`

  `m=(m^a)^b mod n = (m^b)^a mod n`

}
{ Reply attack
}
{ RSA


}
{ Secure socket layer (SSL)

  Predecessor of → development/security/cryptography/TLS

}
{ Secure electronic standard (SET)

  SET ~was~ a communications protocol standard for securing credit card transactions over insecure network.

}
{ Transport layer security (TLS)

  Predecessor of SSL

}
  { X.509

    *X.509* is a standard that defines the *format* of → development/security/cryptography/Public-key-certificate[public key certificates].

  }

}
