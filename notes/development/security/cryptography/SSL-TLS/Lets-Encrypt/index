$ Let's Encrypt

Let's Encrypt is a Certification Authority (CA) which issues certificates that are required to enable → development/web/HTTPS for a website/→ web/webserver. Let's Encrypt will issue such a certificate to everyone who demonstrates to have control over the server where the webserver runs.

Let’s Encrypt is a joint project of EFF, Mozilla and many other sponsors.

{ Certbot #certbot

  Certbot is the ACME client (see → development/web/RFC#rfc-8555[RFC 8555]) recommended by Let's Encrypt (a list of other client implementations
  is → https://letsencrypt.org/docs/client-options/[here]).

  Certbot fetches a certificate from Let's Encrypt. Generated keys and fetched certficates are stored under `/etc/letsencrypt/live/$domain` (`$domain` = certificate name),hw

  Certbot is meant to be run on the machine where the webserver is hosted.
  -
  If Certbot is run with root privileges, it is able to automatically configure TLS/SSL for Apache and nginx.

  Most modern Linux distributions (basically any that use systemd) can install Certbot packaged as a snap.

  Some commands:
    • `certbot` (or `certbot run`): Obtain and install a certificate.
    • `certbot certonly`: Obtain a certificate without installing it.
    • `certbot --nginx`: Use nginx plugin?
    • `certbot certificates`: Show a list of all certificates that cerbot knows about.
    • `certbot --version` (useful when asking questions in the community forum)

  Log file: `/var/log/letsencrypt`.

  { nginx-confgen

code {
$ → Linux/package-managers/APT/commands/apt/show python3-certbot-nginx 2>→ Linux/fhs/dev/null | → Linux/shell/commands/grep Description
Description: → web/webserver/nginx[Nginx] plugin for Certbot
code }

  }

  { apache/nginx

    I found the following insight of Allan John (→ https://allanjohn909.medium.com/letsencrypt-multiple-ip-address-one-domain-4fd95afa176f[LetsEncrypt: Multiple IP address One domain]) interesting:
    "
      When certbot is run with apache or nginx plugin, certbot spins up a dummy
      webserver with an acme-challenge file, so that when letsencypt wants to
      validate the domain and reach out to the server, this challenge file is
      served by certbot. Once verified, the dummy server is destroyed with the
      challenge files and generating the certificate and storing on the server
    "

  }

}
{ Staging Environment

  Let's encrypt recommends to use its → https://letsencrypt.org/docs/staging-environment/[staging environment] for tests before using their production environment.

  The ACME URL for the staging environment is `https://acme-staging-v02.api.letsencrypt.org/directory`.

  When using `certbot`, the `--test-cert` option instructs it to use the staging environment.kj

}

sa:
  The Python library → development/languages/Python/libraries/certbot

  → development/web/RFC#rfc-8555[RFC 8555]

  The deb package `certbot`

 `→ Linux/fhs/etc/letsencrypt`
  -
 `→ Linux/fhs/var/log/letsencrypt/letsencrypt_log`

links:

  Ask questions on the → https://community.letsencrypt.org/[Let's Encrypt Community Forum] 

  → https://github.com/letsencrypt/letsencrypt[github repository certbot]

  → https://acme-v02.api.letsencrypt.org/directory and `→ Linux/fhs/etc/letsencrypt[/etc/letsencrypt]/accountes/acme-v02.api.letsencrypt.org/directory/0123456789abcdef0123456789abcdef`

  The *public certificate transparency log*: → https://crt.sh/?q=osm.renenyffenegger.ch
