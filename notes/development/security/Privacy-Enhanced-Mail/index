$ Privacy-Enhanced Mail (PEM)
@ PEM

*Privacy-Enhanced Mail (PEM)* defines a format for storing and exchanging cryptographic keys and → development/security/cryptography/public-key/certificate[certificates].

With PEM, → development/Data/binary is represented with → development/Base64. The Base64 encoded data is embedded between a starting line and an ending line like so
code {
-----BEGIN label -----
…
-----END label -----.
code }

Commonly found values for `label` include
  • `CERTIFICATE`
  • `CERTIFICATE REQUEST`
  • `PRIVATE KEY`
  • `X509 CRL`

A file that contains PEM data typically has one of the following suffixes:
  • `*.pem` (
  • `*.cer` (→ development/security/cryptography/public-key/certificate/[Certificates])
  • `*.crt` (also Certificates)
  • `*.key` (Public or private key)


{ TODO

  { Generate a file in PEM format

code {
$ → development/security/cryptography/SSL-TSL/OpenSSL/executable/genpkey[openssl genpkey] -out the.key -algorithm RSA
$ cat the.key
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDd+IKR9wyKI5jp
Yy4abfvcuDebil4av4P7qh1qykOZE5L0MYaAL0pXsC7iYu1/dZSGpqiR0xigwDFQ
…
-----END PRIVATE KEY-----
code }

  }
  { BEGIN RSA PRIVATE KEY

    A PEM file that starts with `BEGIN RSA PRIVATE KEY` is stored in a legacy format.

  }

}

sa:

  The → development/languages/Python script `get-remote-certificate.py`, located in a Python installation under → development/languages/Python/installation/directory/Tools/scripts[`Tools/scripts`]

  → development/security/cryptography/public-key/cryptography#pkcs[PKCS #8]

links:

  → https://datatracker.ietf.org/doc/html/rfc7468[RFC 7468]: Textual Encodings of PKIX, PKCS, and CMS Structures.
