
OpenStreetMap is a database of geographic → development/Data.

Generally, anything that is *visible* can be added to this database. A universally accepted exception of unobservable «things» in the database are *boundaries of political territories*.
-
The database does not contain any *private data*.

{ Coordinates

  Viewing specific coordinates on the Open Street Map:
  → http://www.openstreetmap.org/?mlat=-30&mlon=-60&zoom=4
  -
  Apparently, the southern hemisphere has negative latitude, the hemisphere west of
  grenwich has negative longitude.

  { Precision

    OSM stores a coordinate in a 32 bit integer with a precision of 7 digits after the decimal point. Thus, a latitude/longitude coordinate pair requires 64-bit.

    With this precision, a point can be identified with an accuracy of at least 1 cm.

  }
  { Quad tiles #osm-quad-tile

    The current «official» OSM data stores the 64 bits required for longitude and lattitude along with 64-bits (column `tile`) which identify the coordinate's *quad tile*.

    The `tile` column is indexed with a B-tree.

  }
  { Anti-Meridian considerations

    A way that connects 179° E with 179° Way goes which way exactly? Does it cross the anti-meridian or does it take the longer way around the entire wordl?

  }
}

{ Perl and other scripts

  → https://github.com/Zverik/gpxplanet-tools[GPX Planet Tools] for processing *planet.gpx*.

  → http://wiki.openstreetmap.org/wiki/Perl_Scripts[Perl scripts] on → http://wiki.openstreetmap.org/[OSM's wiki].

  Perl modules
    → development/languages/Perl/modules/Geo/Coder/OSM[Geo::Coder::OSM],
    → https://metacpan.org/pod/Geo::OSM::DBI[Geo::OSM::DBI]
}
{ Showing ids on a map

  → http://www.openstreetmap.org/way/10665159

  → http://www.openstreetmap.org/node/10665159

  → http://www.openstreetmap.org/relation/172224

}
{ Overpass API #osm-overpass-api

  The → development/OpenStreetMap/API/Overpass is a query API for Openstreet Data. It is designed for queries of objects that are spatially close from one to another.

  The Overpass API was referred to as *OSM Server Side Scripting* (OSM3S) before 2011.

  { Overpass turbo

    Overpass turbo allows to runs an Overpass API query and have it show the results on an interactive map.

    Some URLs where Overpass turbo queries can be executed include:
      • → https://overpass-turbo.eu/[overpass-turbo.eu/]
      • → https://overpass-turbo.osm.ch/[overpass-turbo.osm.ch] (Swiss data only)

    Find everything with the → https://overpass-turbo.eu/s/1is1[name Freienstein]. `nwr` is an abbreviation for *nodes, ways and relations*.
code {
nwr[name="Freienstein"];
→ development/OpenStreetMap/API/Overpass/statements/out center;
code }


   Searching with → development/regular-expressions: find objects whose name have an → https://overpass-turbo.eu/s/1is7[`x` followed directly or indirectly by an `y`]:
code {
nwr[name~"x.*y"]({{bbox}});
→ development/OpenStreetMap/API/Overpass/statements/out;
code }

  `node(s, w, n, e)` selects all nodes in a (bounding) box that is delimited by the south, west, north and east coordinates `s`, `w`, `n` and `e`.
   -
   → https://overpass-turbo.eu/s/1lyp[This query] shows the nodes of → https://en.wikipedia.org/wiki/Bishop_Rock[Bishop Rock], according to the Guineess Book of Records the
   *smallest island with a building on it*:
code {
node (
   49.8727, -6.4458, // minimum latitude and longitude (South and West border)
   49.8730, -6.4452  // maximum latitude and longitude (North and East border)
);
→ development/OpenStreetMap/API/Overpass/statements/out;
code }
   Compare `node(…`) with `[bbox:…]`.

  `(around:n)` is another spatial filter: it searches within `n` meters of the currently found/selected objects. The following query searches for
  → https://overpass-turbo.eu/s/1is6[supermarktes that are within 100 meters of public transport stations]:
code {
nwr[public_transport = station    ]({{bbox}}  );
nwr[shop             = supermarket](around:100);
→ development/OpenStreetMap/API/Overpass/statements/out center;
code }

    → https://t.co/vn0CRxrgl6[This query] searches for → development/Data/open/Switzerland/City-of-Zürich/dataset/stadtkreise/plot-fountains[fountains in Zurich]
code {
[→ development/OpenStreetMap/API/Overpass/settings/out#overpass-out-json[out:json]][timeout:25];
{{→ development/OpenStreetMap/API/Overpass/extensions/geocode#overpass-geocodeArea[geocodeArea]:Zürich}}->.searchArea;
// gather results
(
  nwr["amenity"="fountain"](area.searchArea);
);
→ development/OpenStreetMap/API/Overpass/statements/out center;
code }


    { UNION #overpass-union

      Parenthesis combine the results of two «queries». The following query selects anything that has
      → https://overpass-turbo.eu/s/1is4[either Freienstein or Ofenloch in its name]:
code {
(
 nwr[name="Freienstein"];
 nwr[name="Ofenloch"   ];
);
→ development/OpenStreetMap/API/Overpass/statements/out center;
code }

      I believe this parantheses are technically called a *block statement*.

    }
    { Searching in a supplied bounding box

 `({{bbox}})` is a *spatial filter* that searches in the supplied bounding box.

   The following query searches for → https://osm.li/WoO[parking lots in the selected region]:
code {
[→ development/OpenStreetMap/API/Overpass/settings/bbox[bbox]:{{bbox}}];
(
   node[amenity=parking]({{bbox}});
   way [amenity=parking]({{bbox}});
);
→ development/OpenStreetMap/API/Overpass/statements/out geom;
code }

    }
    { Comments

      Portions of a query can be commented with the usual `/* … */` and `//` symbols.

    }

  }
}
{ Automated edits

  Unfortunately, the «OSM community» maintains a *dogma* which prevents them from executing so-called «→ https://wiki.openstreetmap.org/wiki/Automated_edits[automated edits]»
 (aka *mechanical edits*). The → https://wiki.openstreetmap.org/wiki/Automated_Edits_code_of_conduct[Automated Edits code of conduct] specifically prohibits:
   • changes made by Bots, which by definition act autonomously from human intervention.
   • data imports, including both fully automated imports and ones where a standard editor is used
   • other scripted changes made to the database
   • use of find-and-replace functionality using a standard editor such as JOSM or finding using services such as Overpass API and changing without reviewing each object individually
   • manually changing tags without adequate review

  Modifications that were executed in compliance with the code of conduct are listed in → https://wiki.openstreetmap.org/wiki/Category:Automated_edits_log[Automated edits log].

  → https://mapsaregreat.com/[Mateusz Konieczny] (reasonably, imho) → https://wiki.openstreetmap.org/wiki/Mechanical_Edits/Mateusz_Konieczny_-_bot_account[maintains] that automatic edits are OK if
    • humans making such changes would not cause a reasonable protest
    • humans would edit in the same way or humans would make more mistakes
    • preparing program and discussing automatic edit will take less time than a tedious manual edit
    • probability that human during editing would spot major issues not detected by validators is not significantly higher than during normal editing (human will spot mistakes during any editing anywhere, automatic program not spotting problems during editing is harmful only if unusually many major issues not detected by validators would not spotted)
    • edit is accepted by OSM community in discussion (even if somebody is convinced that edit makes perfect sense one should not make if community opposes. It makes sense even if edit was really a good idea)

  See also
    • A → https://wiki.openstreetmap.org/wiki/Bot[list of bots]
    

}
{ Tools

  { osmium-surplus #osmium-surplus

    → https://github.com/osmcode/osmium-surplus[osmium-surplus] contains some commands to detect problems and anomalies in OSM data:
    table { ll
      osp-find-colocated-nodes ☰
      osp-find-orphans ☰ Find untagged, unconnected «orphan» nodes.
      osp-find-unusual-tags ☰
      osp-find-way-problems ☰
      osp-find-relation-problems ☰
      osp-find-multipolygon-problems ☰
    table }

  }
  { OSM Conflator

    → https://wiki.openstreetmap.org/wiki/OSM_Conflator[OSM Conflator] is a python script to merge (aka → https://wiki.openstreetmap.org/wiki/Conflation[confluate]) a third-party dataset with coordinates and OpenStreetMap data.
    -
    This script was inspired by → https://wiki.openstreetmap.org/wiki/Osmsync[Osmsync].

    → https://cfauditgui.geoh.infs.ch/[This webpage] takes a JSON output from OSM Conflate and presents logged-in users an interface for validating each affected OSM element, one-by-one

  }
  { Hootenanny

    Another confluation tool is → https://github.com/ngageoint/hootenanny[Hootenanny].

  }

}
{ TODO

  → https://wiki.openstreetmap.org/wiki/UMap[uMap] allows to create maps (and embed them in a webpage).

  { Changesets

   Changesets need not be monotonously increasing in respect to a node's history.
   -
   Additionally, It's also possible for different versions to have the same changeset.
   -
   See for example the history of → https://www.openstreetmap.org/node/580485/history[node 580485] (changeset of version 1 is 132228, of version 2 is 79005; → https://www.openstreetmap.org/changeset/854251[changeset 854251]
   contributes to the nodes versions 6, 7 and 8).


  }
  { Quality Assurance (QA)

    { osmose-backend

      → https://github.com/osm-fr/osmose-backend[osmose-backend] contains tools (queries?) that find QA issues,
      for example → https://github.com/osm-fr/osmose-backend/blob/46027f64bb5ad33d8119d012ecc3e95c68f577c8/analysers/analyser_osmosis_useless.py#L126-L128[An object without any relevant tags (no other tags than `source`, `created_by`, `note:qadastre`, `area` or `name`) nor a relation member with a role.]
      (file → https://github.com/osm-fr/osmose-backend/blob/dev/analysers/analyser_osmosis_useless.py[`analyser_osmosis_useless.py`])

      There is also a → https://osmose.openstreetmap.fr/[frontend] for the results whose github repository is → https://github.com/osm-fr/osmose-frontend/tree/master[osm-fr/osmose-frontend].
      -
      An interesing file in this repository is → https://github.com/osm-fr/osmose-frontend/blob/master/tools/database/items_menu.txt[`tools/database/items_menu.txt`]: it
      seems to store «names» for various possible QA probles, such as
      → https://github.com/osm-fr/osmose-frontend/blob/e553206a8f4d12abe06760a283c1030120e9b42d/tools/database/items_menu.txt#L83[incompatible tags],
      → https://github.com/osm-fr/osmose-frontend/blob/e553206a8f4d12abe06760a283c1030120e9b42d/tools/database/items_menu.txt#L89[unwanted tag on node] etc.

    }

  }

}

sa:

  The `→ development/OpenStreetMap/API/Overpass/statements/out` statement

  → development/OpenStreetMap/nodes-ways-relations[Nodes, ways, relations] and → development/OpenStreetMap/tags[tags].

  An → development/OpenStreetMap/database[SQLite database schema] for OSM data.

  → development/languages/Perl/modules/Net/Curl/Multi

  → development/OpenStreetMap/Switzerland

  → development/OpenStreetMap/github/scripts

  → development/OpenStreetMap/Nominatim

  → development/OpenStreetMap/API

  R packages → development/languages/R/packages/OpenStreetMap[`OpenStreetMap`] (which is not affiliated with the OpenStreetMap project) and
  → development/languages/R/packages/osmdata[`osmdata`].

  → Wissenschaft/Geologie/Karten#mapnik[Mapnik] is the library with which  OSM maps are typically rendered.

  → development/Data/geo

links:

  OpenStreetMap → https://github.com/openstreetmap[Repositories on github]

  → http://www.volkerschatz.com/net/osm/osm.html[The hacker's guide to OpenStreetmap] with a link to → http://www.volkerschatz.com/net/osm/canonicalosm.html[the canonical map server toolchain]
  which gives an overview of how geospatial information from OpenStreetmap is turned into map tiles for online viewing.

  → http://staticmap.openstreetmap.de/[staticMapLite: simple maps for the website].

  → https://commutetimemap.com/map?places=47.499172%253B8.729150%253B0%253B1800%253B%25234143f4[Commute Time Map] creates isochrone maps.
  
  The → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/Geo/OSM/Tiles[Geo::OSM::Tiles] can be used to calculate the url of an image »tile«.

  → http://download.geofabrik.de/[OSM data extracts] (PBFs)

  → http://planet.osm.org/gps/[planet.gpx] is an enormous CSV file, dated 2013, that contains all point coordinates as of that date.

  → http://osmhv.openstreetmap.de/index.jsp[OSM history viewer]

  → http://opengeofiction.net[OpenGeofiction] is a map of an imagery world, built using OpenStreetMap technology.

  → development/Data/open/Wikidata property → https://opendata.renenyffenegger.ch/Wikimedia/Wikidata/entity/P402[P402]

  → https://osm.renenyffenegger.ch[My OSM experiment]

  An → https://osm.renenyffenegger.ch[experiment] that tries to load the OpenStreetMap database into
  → development/databases/SQLite.

  → https://www.openhistoricalmap.org/[OpenHistoricMap] also has a time dimension and tries to show how the earth used to look like.jkjkj
