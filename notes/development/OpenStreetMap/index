
OpenStreetMap is a database of geographic → development/Data.

Generally, anything that is *visible* can be added to this database. A universally accepted exception of unobservable «things» in the database are *boundaries of political territories*.
-
The database does not contain any *private data*.

{ Coordinates

  Viewing specific coordinates on the Open Street Map:
  → http://www.openstreetmap.org/?mlat=-30&mlon=-60&zoom=4
  -
  Apparently, the southern hemisphere has negative latitude, the hemisphere west of
  grenwich has negative longitude.

}

{ Perl and other scripts

  → https://github.com/Zverik/gpxplanet-tools[GPX Planet Tools] for processing *planet.gpx*.

  → http://wiki.openstreetmap.org/wiki/Perl_Scripts[Perl scripts] on → http://wiki.openstreetmap.org/[OSM's wiki].

  Perl modules
    → development/languages/Perl/modules/Geo/Coder/OSM[Geo::Coder::OSM],
    → https://metacpan.org/pod/Geo::OSM::DBI[Geo::OSM::DBI]
}
{ Showing ids on a map

  → http://www.openstreetmap.org/way/10665159

  → http://www.openstreetmap.org/node/10665159

  → http://www.openstreetmap.org/relation/172224

}
{ Overpass API #osm-overpass-api

  The → development/OpenStreetMap/API/Overpass is a query API for Openstreet Data. It is designed for queries of objects that are spatially close from one to another.

  The Overpass API was referred to as *OSM Server Side Scripting* (OSM3S) before 2011.

  { Overpass turbo

    Overpass turbo allows to runs an Overpass API query and have it show the results on an interactive map.

    Some URLs where Overpass turbo queries can be executed include:
      • → https://overpass-turbo.eu/[overpass-turbo.eu/]
      • → https://overpass-turbo.osm.ch/[overpass-turbo.osm.ch] (Swiss data only)

    Find everything with the → https://overpass-turbo.eu/s/1is1[name Freienstein]. `nwr` is an abbreviation for *nodes, ways and relations*.
code {
nwr[name="Freienstein"];
out center;
code }


   Searching with → development/regular-expressions: find objects whose name have an → https://overpass-turbo.eu/s/1is7[`x` followed directly or indirectly by an `y`]:
code {
nwr[name~"x.*y"]({{bbox}});
out;
code }

  `node(s, w, n, e)` selects all nodes in a (bounding) box that is delimited by the south, west, north and east coordinates `s`, `w`, `n` and `e`.
   -
   → https://overpass-turbo.eu/s/1lyp[This query] shows the nodes of → https://en.wikipedia.org/wiki/Bishop_Rock[Bishop Rock], according to the Guineess Book of Records the
   *smallest island with a building on it*:
code {
node (
   49.8727, -6.4458, // minimum latitude and longitude (South and West border)
   49.8730, -6.4452  // maximum latitude and longitude (North and East border)
);
out;
code }
   Compare `node(…`) with `[bbox:…]`.

  `(around:n)` is another spatial filter: it searches within `n` meters of the currently found/selected objects. The following query searches for
  → https://overpass-turbo.eu/s/1is6[supermarktes that are within 100 meters of public transport stations]:
code {
nwr[public_transport = station    ]({{bbox}}  );
nwr[shop             = supermarket](around:100);
out center;
code }

    → https://t.co/vn0CRxrgl6[This query] searches for → development/Data/open/Switzerland/City-of-Zürich/dataset/stadtkreise/plot-fountains[fountains in Zurich]
code {
[→ development/OpenStreetMap/API/Overpass/settings/out#overpass-out-json[out:json]][timeout:25];
{{→ development/OpenStreetMap/API/Overpass/extensions/geocode#overpass-geocodeArea[geocodeArea]:Zürich}}->.searchArea;
// gather results
(
  nwr["amenity"="fountain"](area.searchArea);
);
out center;
code }


    { UNION

      Parenthesis combine the results of two «queries». The following query selects anything that has
      → https://overpass-turbo.eu/s/1is4[either Freienstein or Ofenloch in its name]:
code {
(
 nwr[name="Freienstein"];
 nwr[name="Ofenloch"   ];
);
out center;
code }

      I believe this parantheses are technically called a *block statement*.

    }
    { Searching in a supplied bounding box

 `({{bbox}})` is a *spatial filter* that searches in the supplied bounding box.

   The following query searches for → https://osm.li/WoO[parking lots in the selected region]:
code {
(
   node[amenity=parking]({{bbox}});
   way [amenity=parking]({{bbox}});
);
out geom;
code }

    }
    { Comments

      Portions of a query can be commented with the usual `/* … */` and `//` symbols.

    }

  }
  { out statements

    table { ll
      `out` ☰ The complete geodata.
      `out ids;` ☰  The ids of the objects.
      `out skel;` ☰ Add the information necessary to reconstruct the objects.
      `out meta;` ☰  Add objects' version and timestamp
      `out … bb;` ☰ Add a bounding box for each way and relation.
      `out … center;` ☰ Amends ways and relations with geometries, requires at least `out meta`.
      `out tags;` ☰

    table }

  }

}
{ TODO

  → https://wiki.openstreetmap.org/wiki/UMap[uMap] allows to create maps (and embed them in a webpage).

}

sa:

  → development/OpenStreetMap/tags

  An → development/OpenStreetMap/database[SQLite database schema] for OSM data.

  → development/languages/Perl/modules/Net/Curl/Multi

  → development/OpenStreetMap/Switzerland

  → development/OpenStreetMap/github/scripts

  → development/OpenStreetMap/Nominatim

  → development/OpenStreetMap/API

  R packages → development/languages/R/packages/OpenStreetMap[`OpenStreetMap`] (which is not affiliated with the OpenStreetMap project) and
  → development/languages/R/packages/osmdata[`osmdata`].

  → Wissenschaft/Geologie/Karten#mapnik[Mapnik] is the library with which  OSM maps are typically rendered.

  → development/Data/geo

links:

  OpenStreetMap → https://github.com/openstreetmap[Repositories on github]

  → http://www.volkerschatz.com/net/osm/osm.html[The hacker's guide to OpenStreetmap] with a link to → http://www.volkerschatz.com/net/osm/canonicalosm.html[the canonical map server toolchain]
  which gives an overview of how geospatial information from OpenStreetmap is turned into map tiles for online viewing.

  → http://staticmap.openstreetmap.de/[staticMapLite: simple maps for the website].
  
  The → development/languages/Perl/modules[Perl module] → development/languages/Perl/modules/Geo/OSM/Tiles[Geo::OSM::Tiles] can be used to calculate the url of an image »tile«.

  → http://download.geofabrik.de/[OSM data extracts] (PBFs)

  → http://planet.osm.org/gps/[planet.gpx] is an enormous CSV file, dated 2013, that contains all point coordinates as of that date.

  → http://osmhv.openstreetmap.de/index.jsp[OSM history viewer]

  → http://opengeofiction.net[OpenGeofiction] is a map of an imagery world, built using OpenStreetMap technology.

  → development/Data/open/Wikidata property → https://opendata.renenyffenegger.ch/Wikimedia/Wikidata/entity/P402[P402]

  → https://osm.renenyffenegger.ch[My OSM experiment]
