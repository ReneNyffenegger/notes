$ Overpass API

{ Querying an Overpass API endpoint

  { Python

    The following snippet gives an idea how an Overpass API endpoint can be queried with → development/languages/Python:
code {
→ development/languages/Python/statements/import → development/languages/Python/libraries/requests

query = """
[→ development/OpenStreetMap/API/Overpass/settings/out#overpass-out-csv[out:csv](::id,name)];
relation[admin_level="2"];
out;
"""

response = requests.get(
   'http://overpass-api.de/api/interpreter',
    headers = {'Accept-Charset': 'utf-8'},
    params  = {'data'          :  query }
)

response.encoding='utf-8'

with open('overpass-result.csv', 'w', encoding='utf-8') as file:
     file.write(response.text)
code }

    There is also the → https://python-overpy.readthedocs.io/en/latest/[overpy] library.

  }
  { PowerShell

    The following snippet gives an idea how an Overpass API endpoint can be queried with → Windows/PowerShell:
code {
$query = @'

  [→ development/OpenStreetMap/API/Overpass/settings/out#overpass-out-json[out:json]];
  nwr [name=Freienstein];
  → development/OpenStreetMap/API/Overpass/statements/out[out];

'@

$res     = → Windows/PowerShell/command-inventory/noun/webRequest/invoke -method post -body (@{'data' = $query}) https://overpass-api.de/api/interpreter
$resTxt  = $res.Content
$resJson = → Windows/PowerShell/command-inventory/noun/json/convertFrom $resTxt

→ Windows/PowerShell/language/statement/foreach($elem in $resJson.elements) {
   "id: $($elem.id) ($($elem.type))"

   if ($elem.type -eq 'node') {
      "  $($elem.lat) $($elem.lon)"
   }

   …
}
code }

  }

}
{ File extension

  The proposed file extension for files that store Overpass API queries is → https://wiki.openstreetmap.org/wiki/Talk:Overpass_API/Overpass_QL#Recommended_file_extension[`*.overpassql`].

}
{ TODO

  { Calculating distances

    Although there is a `length()` function, the calculation of distances (notably between two nodes) seems impossible.

  }
  { Find buildings whose house number is 13

code {
{{→ development/OpenStreetMap/API/Overpass/extensions/geocode#overpass-geocodeArea[geocodeArea]:Pfungen}};              // Search in Pfungen

nw                                    // Search nodes and ways
  [building]                          // that have a building and
  ['addr:housenumber']                // an addr:housenumber tag.
  (area)                              // Restrict search to selected area (geocodeArea)
  (if: t['addr:housenumber'] == 13 ); // and keep only those objects whose addr:housenumber value is 13

→ development/OpenStreetMap/API/Overpass/statements/out geom;
code }

  }

  { olbricht.nrw/ovt

    → https://olbricht.nrw/ovt/[olbricht.nrw/ovt] is a → https://dev.overpass-api.de/blog/flat_world.html[temporary instance] of Overpass Turbo (and seems to have an implementation that
    translates osm to → development/languages/JavaScript/JSON/GeoJSON).

    The source code is hosted on github (→ https://github.com/drolbr/osmtogeojson[osmtogeojson])

  }

}

sa:

  Overpass language constructs such as
    • → development/OpenStreetMap/API/Overpass/functions[Functions]
    • → development/OpenStreetMap/API/Overpass/statements[Statements]
    • → development/OpenStreetMap/API/Overpass/settings[Settings]

  Some → development/OpenStreetMap/API/Overpass/queries

  The R package → development/languages/R/packages/osmplotr[`osmplotr`] creates visually impressive customisable images of → development/OpenStreetMap data downloaded internally from the → development/OpenStreetMap/API/Overpass.

  → development/OpenStreetMap/API/Overpass/extensions

  → development/OpenStreetMap/API/Overpass/js/request
