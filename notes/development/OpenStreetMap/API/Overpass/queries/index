$ Overpass API queries

{ Find just everything

  The following query uses `nwr` (a shorthand for `node`, `way` and `relation`)) to find just everything in the area visible in *Overpass turbo*. I like this because makes nodes and ways clickable and I can
  quickly get some information about a (small) area:
code {
[→ development/OpenStreetMap/API/Overpass/settings/bbox[bbox]: → development/OpenStreetMap/API/Overpass/extensions/bbox ];
nwr;
→ development/OpenStreetMap/API/Overpass/statements/out;
code }

}
{ Shops

  The following query tries to find «non-specialized» shops.

  Because `amenity=shops` is → https://wiki.openstreetmap.org/wiki/Tag:amenity%3Dshop[deprecated] in favor of `shop=…` but might still be in the OSM database,
  the query combines `amenity=shop` with `shop=…` with a *union* clause (the two statements within the parantheses).

  Furthermore, the query also uses a regular expression alternative to search for both, `shop=convenience` and/or `shop=supermarket`.

code {
[→ development/OpenStreetMap/API/Overpass/settings/bbox[bbox]: → development/OpenStreetMap/API/Overpass/extensions/bbox ];

(
   nw[shop    ~'^(convenience|supermarket)'] ; 
   nw[amenity ='shop'                      ] ;
);
  
out geom;
code }

}
{ Interesting natural objects

  Find interesting → https://wiki.openstreetmap.org/wiki/Key:natural[natural] objects.

  Trees, scrub etc. are of little interest for me. Therefore, the following query excludes these objects from all nodes or ways that have the `natural` tag:
code {
[→ development/OpenStreetMap/API/Overpass/settings/bbox[bbox]: → development/OpenStreetMap/API/Overpass/extensions/bbox ];

nw[natural     ] -> .res;

   ( .res; - nw[natural=bare_rock];) -> .res;
   ( .res; - nw[natural=cliff    ];) -> .res;
   ( .res; - nw[natural=grassland];) -> .res;
   ( .res; - nw[natural=peak     ];) -> .res;
   ( .res; - nw[natural=sand     ];) -> .res; // in combination with golf=bunker
   ( .res; - nw[natural=scree    ];) -> .res;
   ( .res; - nw[natural=scrub    ];) -> .res;
   ( .res; - nw[natural=shrub    ];) -> .res;
   ( .res; - nw[natural=shrubbery];) -> .res;
// ( .res; - nw[natural=stone    ];) -> .res;
   ( .res; - nw[natural=tree     ];) -> .res;
   ( .res; - nw[natural=tree_row ];) -> .res;
   ( .res; - nw[natural=water    ];) -> .res;
   ( .res; - nw[natural=wetland  ];) -> .res;
   ( .res; - nw[natural=wood     ];) -> .res;


.res → development/OpenStreetMap/API/Overpass/statements/out geom;
code }

}
{ Searching for a specific historic period (civilization)

  The following query searches for all nodes/ways with a → https://wiki.openstreetmap.org/wiki/Key:historic:civilization[`historic:civilization`] tag and excludes some that I currently find
  uninteressing (such as `WW1` or `modern`):
code {
[→ development/OpenStreetMap/API/Overpass/settings/bbox[bbox]: → development/OpenStreetMap/API/Overpass/extensions/bbox ];

nw['historic:civilization'     ] -> .res;

// ( .res; - nw['historic:civilization'='prehistoric'        ];) -> .res;
// ( .res; - nw['historic:civilization'='paleolithic'        ];) -> .res;
// ( .res; - nw['historic:civilization'='mesolithic'         ];) -> .res;
// ( .res; - nw['historic:civilization'='neolithic'          ];) -> .res;
// ( .res; - nw['historic:civilization'='megalith'           ];) -> .res;
   ( .res; - nw['historic:civilization'='bronze-age'         ];) -> .res;
   ( .res; - nw['historic:civilization'='iron-age'           ];) -> .res;
// ( .res; - nw['historic:civilization'='celtic'             ];) -> .res;
   ( .res; - nw['historic:civilization'='german'             ];) -> .res;
   ( .res; - nw['historic:civilization'='ancient_roman'      ];) -> .res;
   ( .res; - nw['historic:civilization'='roman'              ];) -> .res;
   ( .res; - nw['historic:civilization'='gallo-romain'       ];) -> .res;
   ( .res; - nw['historic:civilization'='medieval'           ];) -> .res;
   ( .res; - nw['historic:civilization'='middle-ages'        ];) -> .res;
   ( .res; - nw['historic:civilization'='Renaissance'        ];) -> .res;
   ( .res; - nw['historic:civilization'='early-modern'       ];) -> .res;
   ( .res; - nw['historic:civilization'='early_modern'       ];) -> .res; // early_modern vs early-modern
   ( .res; - nw['historic:civilization'='modern'             ];) -> .res;
   ( .res; - nw['historic:civilization'='WW1'                ];) -> .res;
   ( .res; - nw['historic:civilization'='1._weltkrieg'       ];) -> .res; // Should this not be WW1 ?
   ( .res; - nw['historic:civilization'='1°_guerra_mondiale' ];) -> .res; // Should this not be WW1 ?
   ( .res; - nw['historic:civilization'='wk1'                ];) -> .res; // Should this not be WW1 ?
   ( .res; - nw['historic:civilization'='world_war_2'        ];) -> .res;

   ( .res; - nw['historic:civilization'='westwall'           ];) -> .res; // What is westwall?
   ( .res; - nw['historic:civilization'='unknown'            ];) -> .res;

.res out geom;
code }

}
{ Megaliths

code {
[→ development/OpenStreetMap/API/Overpass/settings/bbox[bbox]: → development/OpenStreetMap/API/Overpass/extensions/bbox ];

( nw[site_type = megalith] ;
  nw[megalith_type       ] ;
);

out geom;
code }

}
{ List of countries

  The following query produces the list of countries in → development/Data/exchange/formats/CSV format (using a vertical bar (`|`) instead of a comma to separate the fields):
code {
[→ development/OpenStreetMap/API/Overpass/settings/out#overpass-out-csv[out:csv](::id,name,'name:en','ISO3166-1',wikidata;
    false;  // No header
   '|'      // Seperator
)];
  
relation
   [admin_level='2']
   ["ISO3166-1"~"^..$"];

→ development/OpenStreetMap/API/Overpass/statements/out;
code }

  The result of a variation of this query is rendered → https://opendata.renenyffenegger.ch/OpenStreetMap/ISO-3166/[here].

}
{ CERN: Large Hadron Collider (LHC) / Super Proton Synchroton (SPS)

  → https://wiki.openstreetmap.org/wiki/CERN[CERN's] Large Hadron Collider and Super Proton Synchroton are not shown on an ordinary rendering on OpenStreetMap (because the value of `layer` is negative?), but
  can be shown with the following Overpass query:
code {
way[highway=corridor](46.2,5.8,46.31,6.13);
(._;>;);
out body;
code }

  → https://overpass-turbo.eu/s/1rLE[Link to map]


}

sa:
  → development/OpenStreetMap/API/Overpass
