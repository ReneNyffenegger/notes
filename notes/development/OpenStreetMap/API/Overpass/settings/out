$ Overpass API settings - out

{ csv

code {
[out:csv(
   num, txt ;    // Column names
   true     ;    // header (true is default)
  "|"            // separator
)];

make foo   // <--- the type / if output is xml, it becomes the XML's tag name
     num = 42,
     txt ='Hello world';

out;
code }

  { (Mis-)using CSV output to generate text result

code {
[out:csv(txt; false)];

{{geocodeArea: Pfungen }};

//
// Search for amenities with a name in the
// selected area:
//
nw[amenity][name](area) -> .amenities;

//
// Iterate over each amenity type (restaurant, doctor etc.)
//
for.amenities -> .amenity  (t['amenity']) {

//
// Print name of amenity type
//
   make x txt = amenity.val; out;

//
// Iterate over each amenity within the type:
//
   foreach.amenity {
//
//    Print the amenity's id, type and name:
//
      make x txt = '  ' + u(id()) + ' (' + u(type()) + '): ' + u(t['name']); out;
   }

//
// Finish amenity type with an empty line:
//
   make x txt = ''; out; 
}
code }

  }

}
{ Get tramway colors of VBZ (Verkehrsbetriebe Zürich)

code {
[out:csv(ref, colour)];

relation
   [operator = 'Verkehrsbetriebe Zürich']
   [route    = 'tram'                   ];

out;
code }

   Unfortunately, the same line (and colour value) are returned multple times, but we want a unique (distinct) list. The following query will achieve this:
code {
[out:csv(ref, colour)];

relation[operator='Verkehrsbetriebe Zürich'][route='tram'];

for (t['ref']) {
   make x
      ref = _.val,
      colour = u(t['colour']);
   out;
}
code }

}

sa:

  The `out` → development/OpenStreetMap/API/Overpass/settings[setting] is unrelated to the `→ development/OpenStreetMap/API/Overpass/statements/out` statement.

  → development/OpenStreetMap/API/Overpass/settings[settings]
