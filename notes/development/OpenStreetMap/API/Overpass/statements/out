$ Overpass API: out statement
@ out

{ out statements

  table { ll
    `out` ☰ The complete geodata.
    `out ids;` ☰  The ids of the objects.
    `out skel;` ☰ Add the information necessary to reconstruct the objects.
    `out meta;` ☰  Add objects' version and timestamp
    `out … bb;` ☰ Add a bounding box for each way and relation.
    `out … center;` ☰ Amends ways and relations with geometries, requires at least `→ development/OpenStreetMap/API/Overpass/statements/out meta`.
    `out tags;` ☰

  table }

}

{ Test script

  Uncomment a given attribute to test the effect:
code {
rel
  [boundary=administrative]
  [name    =Pfungen       ]
;

//  >;

out        //     <relation id="1682188">
//  meta   //     <relation id="1682188" version="5" timestamp="2016-12-07T02:43:55Z" changeset="44224658" uid="339581" user="nyuriks">

//  → #out-bb[bb]     //     Bounding box for each selected element?
//         //     <relation id="1682188">
//         //        <bounds minlat="47.4974379" minlon="8.6176417" maxlat="47.5218535" maxlon="8.6611408"/>

//  center //     <relation id="1682188">
           //        <center lat="47.5096457" lon="8.6393912"/>

//  geom   //     include coordinates in <nd …> tags.
           //     Seems to be required to draw ways on the map.

//  skel   //     Don't emit <tag k="…" v="…"> nodes.

//  → #out-ids[ids]    //     Output IDs only

//  tags   //     Output IDs and tags

    → #out-count[count]  //     get number of nodes, ways, relations and their total.

//  qt     //     Sort by quadtile index
//                This is roughly geographical and significantly faster than order by ids.
//                See also https://gis.stackexchange.com/a/187754:

//  body   //     ?

//  popup  //     Invalid parameter «popup»
;
code }
} 
{ Named set

  The content of a set can be outputted by prepending `out` statement with the name of the set (and the usual dot):
code {
(
   make t1
       num = 42,
       txt = 'hello world';
  
   make t2
       num = 99,
       txt = 'ninety-nine';
  
) -> .x;

.x out;
code }

}
{ bb #out-bb

 `out bb` reports the bounding box of relations in a `<bounds>` tag with `minlat`, `minlon`, `maxlat` and `maxlon` attributes, for example:
code {
…
  <relation id="1682188">
    <bounds minlat="47.4974379" minlon="8.6176417" maxlat="47.5218535" maxlon="8.6611408"/>
    …
  </relation>
…
code }

  See also the `→ development/OpenStreetMap/API/Overpass/settings/bbox` setting.

}
{ count #out-count

 `out count;` prints the total number of elements in the input set, broken down to type (i. e. nodes, ways, relations, areas).

  It cannot be combined with another `out` specifier.

  The following query counts the number of ways and nodes in → https://osm.renenyffenegger.ch/elem/rel?id=5305784[OSM relation 5305784]:
code {
relation(5305784);
>>;

out count;
code }

  The output is something like
code {
<count id="0">
  <tag k="nodes" v="2106"/>
  <tag k="ways" v="2"/>
  <tag k="relations" v="1"/>
  <tag k="total" v="2109"/>
</count>
code }

  { Count the number of amenity=drinking_water nodes, ways and relations in each canton of Switzerland #overpass-out-cnt-drinking_water

code {
[out:csv(
   ::count,
   ::"count:nodes",
   ::"count:ways",
   ::"count:relations"
)];

→ development/OpenStreetMap/API/Overpass/statements/query/area[area]['ISO3166-2' ~ '^CH-'];

→ development/OpenStreetMap/API/Overpass/statements/foreach -> .kanton(

   nwr
     (area.kanton)
     [amenity = drinking_water];

   out count;
);
code }

    Almost the same thing, but with `→ development/OpenStreetMap/API/Overpass/statements/foreach`.

  }

}
{ Limiting the number of returned elements

  The `out` statement takes an optional number which limits the number of returned elements to this number.

  This query finds at most 5 nodes with `natural=tree` in the selected bbox-region:
code {
[→ development/OpenStreetMap/API/Overpass/settings/bbox: → development/OpenStreetMap/API/Overpass/extensions/bbox];
node[natural=tree];
out geom 5;
code }

}
{ Special field names

  Special field names (starting with two colons (`::…`)) make it easy to export OSM data as CSV:
code {
[out:csv (

 //
 //   Tag names:
 //
      amenity          ,
      name             ,
     'addr:street'     ,
     'addr:housenumber', 
 //
 //   Special field names:
 //
    ::id         , //  OSM object ID
    ::type       , //  Object type (node, way or relation)
    ::otype      , //  Object type as numeric value
    ::lat        , //  Latitude + Longitude (available for nodes
    ::lon        , //      or ways with 'out center')
 //
 //   Field names available with 'out meta'
 //
    ::version    , //  OSM object's version number
    ::timestamp  , //  Timestamp of last modificatio
    ::changeset  , //  Changeset in which the object was changed
    ::uid        , //  User id of mapper
    ::user       ; //  User name of mapper
 //
 //  Header and separator
 //
     true   ;
     " | "
)];

{{→ development/OpenStreetMap/API/Overpass/extensions/geocode#overpass-geocodeArea[geocodeArea]: Pfungen }} -> .pfungen;

nwr[amenity](area.pfungen);

out meta;
code }

  Some field names are available for the `out count` statement
code {
[out:csv (
 //
 //   Special field names (for 'out count')
 //
    ::count            , //    Returns total number of objects (nodes, ways, relations and areas) in inputset
    ::"count:nodes"    , //    Returns number of nodes in inputset
    ::"count:ways"     , //    Returns number of ways in inputset
    ::"count:relations", //    Returns number of relations in inputset
    ::"count:areas"    ; //    Returns number of areas in inputset
 //
 //  Header and separator
 //
     true   ;
     " | "
)];

{{→ development/OpenStreetMap/API/Overpass/extensions/geocode#overpass-geocodeArea[geocodeArea]: Pfungen }} -> .pfungen;

nwr(area.pfungen);

out count;
code }

}
{ ids #out-ids

  Print the ids of all nodes whose name is *Matterhorn* and are also peaks. It turns out that there are more than just one Matterhorn…
code {
node
   [name    = Matterhorn]
   [natural = peak      ];

out ids;
code }

  This query returns:
code {
<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="Overpass API 0.7.62.1 084b4234">
<note>The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.</note>
<meta osm_base="2024-05-29T06:00:00Z"/>

  <node id="26863664"/>
  <node id="357312239"/>
  …
  <node id="8988077705"/>

</osm>
code }

}
{ tags

code {
relation[admin_level=2];

out tags;
code }

   The previous query only emits relations and their tags, without also listing the relations' members:
code {
<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="Overpass API 0.7.59.2 0994154d">
<note>The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.</note>
<meta osm_base="2023-03-11T11:04:42Z"/>

  <relation id="9407">
    <tag k="ISO3166-1" v="AD"/>
    ….
    <tag k="name" v="Andorra"/>
  </relation>
  <relation id="11980">
    <tag k="ISO3166-1" v="FR"/>
    …
    <tag k="name" v="France (terres)"/>
    …
code }

}

sa:

  The → development/OpenStreetMap/API/Overpass/settings/out[`out`] setting is unrelated to the `out` → development/OpenStreetMap/API/Overpass/statements[statement].

  → development/OpenStreetMap/API/Overpass/statements
