$ Overpass API: for statement
@ for

code {
[out:csv("name";false)];

→ development/OpenStreetMap/API/Overpass/statements/query/area[area][name="Pfungen"];

way(area)[highway][name];

for (t["name"]) (
   → development/OpenStreetMap/API/Overpass/statements/make x name=_.val;
   → development/OpenStreetMap/API/Overpass/statements/out; 
);
code }

code {
[out:csv(
   'id', 'key', 'val';
    false;
   '|'
)];

node[name='Freienstein'] -> .nd;

for.nd -> .id (id())  {
  for.id -> .ky (keys()) {    
    for.ky -> .vl(t[ky.val]) {
      → development/OpenStreetMap/API/Overpass/statements/make x
          id  = id.val, 
          key = ky.val,
          val = vl.val;
      → development/OpenStreetMap/API/Overpass/statements/out;
    }
  }
};
code }

{ for is GROUP BY in disguise

  The `for` statement behaves like the → development/databases/SQL/select/group-by[SQL `GROUP BY`] clause where the expression in the parantheses (here: `t['name']`) is the value on which the other
  elements are grouped (and/or aggregated).
  
? Therefore, in a `for (t['…']) { … }` loop, the aggregation functions `sum`, `→ development/OpenStreetMap/API/Overpass/functions/count`, `min`, `max` (but not `avg`?) can be used.


code {
[ → development/OpenStreetMap/API/Overpass/settings/out[out : csv](
   name,
   total_length,
   cnt_ways,
   min_length,
   max_length,
   avg_length,
   all_lengths
)];

{{→ development/OpenStreetMap/API/Overpass/extensions/geocode#overpass-geocodeArea[geocodeArea]: Pfungen }};

way[highway](area);

for (t['name']) {

   → development/OpenStreetMap/API/Overpass/statements/make Beispiel
     name         = _.val,
     total_length = sum(length()),                // Aggregate all lengths
     cnt_ways     = → development/OpenStreetMap/API/Overpass/functions/count[count](ways)  ,
     min_length   = min(length()),
     max_length   = max(length()),
     avg_length   = sum(length()) / count(ways),  // There is no function avg()
     all_lengths  = set(length())                 // Concatenate the individual lengths with semicolons.
   ;

   → development/OpenStreetMap/API/Overpass/statements/out;
}
code }

  Of course, we can use a constant expression as group by expression so that we can, for example, calculate the total length of multiple ways:
code {
[→ development/OpenStreetMap/API/Overpass/settings/out[out:csv](
     length,
     cnt,
     name
)];

(
   way(228531783);  // Length = 60.520
   way(228533515);  // Length = 38.373
) -> .ways;


for.ways (1) { // Group by constant value -> get aggregate for all elements
  → development/OpenStreetMap/API/Overpass/statements/make x
    cnt    = count(ways),
    length = sum(length());
  → development/OpenStreetMap/API/Overpass/statements/out;
}
code }

}

sa:

  The `→ development/OpenStreetMap/API/Overpass/statements/foreach` → development/OpenStreetMap/API/Overpass/statements[statement].
