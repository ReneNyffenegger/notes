$ web server
@ web server

{ Python

  With → development/languages/Python, a simple web server can be started in the document root like so:
code {
python -m SimpleHTTPServer 7777
code }
  7777 is obviously the port number.

  Alternatively, a webserver can also be started with
code {
→ Linux/shell/commands/sudo python -m → development/languages/Python/standard-library/http/server 80
code }
Note: the port is optional. The `sudo` is apparently required for ports below 1024(?).

}
{ PHP

  The → development/web/php executable has a built-in web server which can be started with the
  → development/web/php#php-cmdline-option[`php` command line option] `-S <addr>:<port>`.
  -
  The doc root of the webserver can be specified with the option `-t <docroot>`.

}
{ IIS Express

  On → Windows, if *IIS Express* is installed, a web server can be started in a console like so:
code {
C:\> "c:\Program Files (x86)\IIS Express\iisexpress.exe" /path:%cd% /port:8765
code }

  See also → Windows/optional-features/IIS

}
{ Uniform Server

  → web/webserver/Uniform-Server[Uniform Server] makes it easy to run Apache, PHP and MySQL on Windows.

}

{ Early webservers

  { CERN httpd #cern-httpd

   *CERN httpd* was the first web server.

    CERN httpd  was programmed 1990 onwards by Tim Berners-Lee and others in → development/languages/C-C-plus-plus/C.
    -
    Later, the development was taken over by → development/standards/W3C which released the latest version 3.0A in 1996.
    -
    After this release, W3C focused on the development of the Java-based Jigsaw server.

    CERN httpd was later also known as W3C httpd.

  }
  { Plexus Server

    Developped by Tony Sanders in Perl.

  }
  { NCSA HTTPd #ncsa-httpd

    The NCSA HTTPd was developped at the → https://en.wikipedia.org/wiki/National_Center_for_Supercomputing_Applications[NCSA] (hence its name) and first released 1993.

    The Apache project took the code base of NCSA HTTPd.

    This webserver introduced → development/web/CGI.

  }

}
{ Considerations

  Technologies
    • epoll
    • io_uring

  Conncurrency:
    • threads
    • processes (`fork`)

  Defending againts attacks such as slowloris
    • `signal`, `alarm`

}

sa:

  → development/Apache/Server,  → web/webserver/nginx, → web/webserver/althttpd

  → https://www.gnu.org/software/libmicrohttpd/[GNU Libmicrohttpd] is a small C library that makes it easy to run an HTTP server as part of another application. 

  → https://tools.suckless.org/quark/[Quark] is a GET/HEAD-only web server for static content
  -
  Rather than supprorting TLS, its creators (suchless) find it less-sucking to use a TLS reverse-proxy such as → https://github.com/hannesm/tlstunnel-lwt[tlsnunnel], → https://hitch-tls.org/[hitch] or → https://www.stunnel.org/[stunnel].

  → development/languages/Python/PEP/3333[PEP 3333]: Python Web Server Gateway Interface v1.0.1 (WSGI)

  → development/web/HTTP/header

  → web/webserver/cpp/simple

  A (Python) webserver to handle → web/webserver/CORS[CORS requests]

  → development/languages/Perl/modules/HTTP/Server/Simple/CGI/webserver[A simple webserver] using the Perl module `→ development/languages/Perl/modules/HTTP/Server/Simple/CGI`
  -
  → development/languages/Perl/misc/webserver[Another webserver] written in Perl

  The Perl module `→ development/languages/Perl/modules/HTTP/Daemon`

  → development/languages/VBA/Win-API/examples/winsock#vba-webserer[webserver in Visual Basic for applications]

  Some web servers run as Linux user → Linux/user#user-www-data[`www-data`].

  → development/security/cryptography/SSL-TLS/Lets-Encrypt

  → development/databases/Oracle/PL-SQL/Embedded-PLSQL-Gateway

  Using `→ Linux/shell/commands/nc` to run a → Linux/shell/commands/nc#nc-webserver[simple webserver in a Linux shell].
