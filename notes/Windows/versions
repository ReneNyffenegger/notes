$ Windows versions

{ Determining versions

  { winver.exe

    One method to determine the → Windows version one is running is with → Windows/dirs/Windows/System32/winver_exe[`winver.exe`] which opens a message box.

  }
  { PowerShell

    With → Windows/PowerShell[PowerShell], the version can be determined like so:
code {
[environment]::osVersion.version
code }

code {
[environment]::osVersion.versionString
code }

    Note, Windows 7, 8 and 8.1 all have version 6, but are distinguished by their minor number, as per the table below.

  }
  { cmd.exe

    The following → Windows/cmd-exe/batch-files[batch file] queries the → Windows/registry[registry] under
    → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion`] to
    show some version related values:

    gh|about-Windows-Registry|/HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/determine-Windows-version.bat||

    The script might print something like
code {
CurrentVersion     : 6.1
ProductName        : Windows
CurrentBuildNumber : 7601
EditionID          : Enterprise
InstallationType   : Client
code }

  }
}
{ Version equivalency


table { llll

  `winver` ☰                     ☰ `#define WINVER` ☰
  4        ☰ Windows NT          ☰ `0x0400`         ☰ `_WIN32_WINNT_NT4`        
  5        ☰ Windows 2000        ☰ `0x0500`         ☰ `_WIN32_WINNT_WIN2K`
  5.1      ☰ Windows XP          ☰ `0x0501`         ☰ `_WIN32_WINNT_WINXP`
  5.2      ☰ Windows Server 2003 ☰ `0x0502`         ☰ `_WIN32_WINNT_WINXP`
  6        ☰ Windows Vista       ☰ `0x0600`         ☰ `_WIN32_WINNT_VISTA`
  6.1      ☰ Windows 7           ☰ `0x0601`         ☰ `_WIN32_WINNT_WIN7`
  6.2      ☰ Windows 8           ☰ `0x0602`         ☰ `_WIN32_WINNT_WIN7`
  6.3      ☰ Windows 8.1         ☰ `0x0603`         ☰ `_WIN32_WINNT_WINBLUE`
  10.0     ☰ windows 10          ☰ `0x0A00`         ☰ `_WIN32_WINNT_WIN10`

table }

}

sa:
  → Windows
