$ Windows versions

{ Determining versions #win-determine-version

  { winver.exe

    One method to determine the → Windows version one is running is with → Windows/dirs/Windows/System32/winver_exe[`winver.exe`] which opens a message box.

  }
  { PowerShell

    With → Windows/PowerShell[PowerShell], the version can be determined like so:
code {
[environment]::osVersion.version
code }

code {
[environment]::osVersion.versionString
code }

    Note, Windows 7, 8 and 8.1 all have version 6, but are distinguished by their minor number, as per the table below.

  }
  { Registry

    The following → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch file] queries the → Windows/registry[registry] under
    → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion`] to
    show some version related values:

    gh|about-Windows-Registry|/HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/determine-Windows-version.bat||

    The script might print something like
code {
CurrentVersion     : 6.1
ProductName        : Windows
CurrentBuildNumber : 7601
EditionID          : Enterprise
InstallationType   : Client
code }

  }
  { Using systeminfo.exe


    Besides other information, → Windows/dirs/Windows/System32/systeminfo_exe[`systeminfo.exe`] prints OS Version and name.

In → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] with → Windows/dirs/Windows/System32/findstr_exe[`findstr.exe`]. Note, because the → development/regular-expressions[regular expression] capabilities of `findstr.exe`
don't support alternations, its not easy to restrict the output to *OS Name* and *OS Version*:
code {
C:\Users\Rene>systeminfo | findstr OS
OS Name:                   Microsoft Windows 7 Enterprise
OS Version:                6.1.7601 Service Pack 1 Build 7601
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Member Workstation
OS Build Type:             Multiprocessor Free
BIOS Version:              Dell Inc. A21, 01.02.2018
code }


In → Windows/PowerShell, it's easier to search for lines that match a list of regular expressions:
code {
PS C:\> systeminfo | select-string "^OS Name", "^OS Version"
 
OS Name:                   Microsoft Windows 7 Enterprise
OS Version:                6.1.7601 Service Pack 1 Build 7601
code }

  }
  { net config workstation

   → Windows/dirs/Windows/System32/net_exe/config/workstation[`net config workstation`] prints, among other information, the version which can be → Windows/dirs/Windows/System32/findstr_exe[findstr'ed] (grepped):
code {
PS C:\> net config workstation | findstr /c:"Software version"
Software version                     Windows 10 Pro
PS C:\>
code }

  }
  { PROMPT environment variable in cmd.exe

    → Windows/dirs/Windows/System32/cmd_exe[cmd.exe], if the → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%` environment variable] contains a `$V`, it is replaced with a *Windows Version text*,
    for example `Microsoft Windows [Version 6.1.7601]`.

  }
}
{ Version equivalency


table { llllll

  Internal Vers. Nr   ☰ Product name                          ☰ → Windows/versions/Server[Server] ☰ Release date ☰  Codename    ☰ `#define WINVER` ☰
 `winver`             ☰                                       ☰   ☰           ☰              ☰ `        ☰
  3.1                 ☰ Windows NT 3.1                        ☰   ☰ July 1993 ☰              ☰ `0x0400` ☰ 
  3.5                 ☰ Windows NT 3.5                        ☰   ☰ Sept 1994 ☰              ☰          ☰ 
  3.51                ☰ Windows NT 3.51                       ☰   ☰ May 1995  ☰              ☰          ☰ 
  4                   ☰ Windows NT                            ☰   ☰ July 1996 ☰              ☰ `0x0400` ☰ `_WIN32_WINNT_NT4`        
  5                   ☰ Windows 2000                          ☰   ☰ Dec 1999  ☰              ☰ `0x0500` ☰ `_WIN32_WINNT_WIN2K`
  5.1                 ☰ Windows XP                            ☰   ☰ Aug 2001  ☰              ☰ `0x0501` ☰ `_WIN32_WINNT_WINXP`
  5.2                 ☰ Windows Server 2003                   ☰ ✓ ☰ Mar 2003  ☰              ☰ `0x0502` ☰ `_WIN32_WINNT_WINXP`
  5.2                 ☰ Windows Server 2003 R2                ☰ ✓ ☰ Dec 2005  ☰              ☰ `0x0502` ☰ `_WIN32_WINNT_WINXP`
                      ☰ Windows Small Business Server 2003    ☰ ✓ ☰           ☰              ☰          ☰ 
                      ☰ Windows Small Business Server 2003 R2 ☰ ✓ ☰           ☰              ☰          ☰ 
  6                   ☰ Windows Vista                         ☰   ☰ Jan 2007  ☰              ☰ `0x0600` ☰ `_WIN32_WINNT_VISTA`
  6.1                 ☰ Windows Server 2008                   ☰ ✓ ☰ Mar 2008  ☰              ☰   ?      ☰   ?
                      ☰ Windows Small Business Server 2008    ☰ ✓ ☰           ☰              ☰          ☰ 
                      ☰ Windows Server 2008 R2                ☰ ✓ ☰           ☰              ☰          ☰ 
  6.1                 ☰ Windows 7                             ☰   ☰ Oct 2009  ☰              ☰ `0x0601` ☰ `_WIN32_WINNT_WIN7`
                      ☰ Windows Home Server 2007              ☰ ✓ ☰           ☰              ☰          ☰ 
  6.2                 ☰ Windows 8                             ☰   ☰ Oct 2012  ☰              ☰ `0x0602` ☰ `_WIN32_WINNT_WIN8`
                      ☰ Windows Small Business Server 2011    ☰ ✓ ☰           ☰              ☰          ☰ 
                      ☰ Microsoft Windows Home Server 2011    ☰ ✓ ☰           ☰              ☰          ☰ 
  6.2                 ☰ Windows Server 2012                   ☰   ☰ Oct 2012  ☰              ☰ `0x0602` ☰ `_WIN32_WINNT_WIN7`
  6.3                 ☰ Windows 8.1                           ☰   ☰ Oct 2013  ☰              ☰ `0x0603` ☰ `_WIN32_WINNT_WINBLUE`
  6.3                 ☰ Windows Server 2012 R2                ☰   ☰ Oct 2013  ☰              ☰   ?      ☰   ?
  10.0 (Build 10240)  ☰ Windows 10                            ☰   ☰ Jul 2015  ☰ Threshold 1  ☰ `0x0A00` ☰ `_WIN32_WINNT_WIN10`
  10.0 (Build 10586)  ☰ Windows 10 vers. 1511                 ☰   ☰ Nov 2015  ☰ Threshold 2  ☰   ?      ☰   ?
  10.0 (Build 14393)  ☰ Windows 10 vers. 1607                 ☰   ☰ Jul 2016  ☰ Redstone 1   ☰   ?      ☰   ?
   ?                  ☰ Windows Server 2016                   ☰   ☰ Oct 2016  ☰ Redstone 2 ? ☰   ?      ☰   ?
   ?                  ☰                                       ☰   ☰           ☰ Redstone 3 ? ☰          ☰ 
                      ☰ Windows Server 2019                   ☰ ✓ ☰           ☰              ☰          ☰ 

table }

  The versions numbers 1511 and 1607 refer to the the year and month (11/2015 and 07/2016, respectively)

  Build 14393/Vers 1607 is also referred to as *anniversary update*.
  -
  It includes a → Windows/Subsystem-for-Linux[Windows Subsystem for Linux (WSL)] in beta state (for developers only). It is not a real → Windows/development/Portable-Executable/subsystem[subsystem], however, like Console or GUI.

  Windows 8 introduced a new API: the *Windows Runtime* (Windows RT) which is built on TOP of → Windows/development/COM and aim at building *Windows Apps*.

  See also the `SDKDDKVer.h` header file in the *Windows SDK*.

}
{ Character sets

  Windows NT used (at least internally) UCS-2.

  Starting with Windows 2000, Windows uses UTF-16.

}
{ Misc

  The *Windows version and edition* can be shown by pressing *Windows-key + Pause/break*.

}

sa:
  → Windows

  The → Windows/development/WinAPI[WinAPI] functions
    • `GetVersionEx()` (deprecated)
    • `VerifyVersionInfo()`
    • `IsWindows8OrGreater()`
    • `IsWindows8Point1OrGreater()`
    • `IsWindows10OrGreater()`
    • `IsWindowsServer()`
    •  …

  → Windows/versions/10

  The → Microsoft/Office/Excel[Excel] VBA function → Microsoft/Office/Excel/Object-Model/Application#excel-application-operatingSystem[`application.operatingSystem`].

  → Windows/versions/NT[Windows NT]

  → Windows/versions/Server

