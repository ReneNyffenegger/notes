$ PowerShell cmdLet select-string

`select-string` allows to search for strings with → development/regular-expressions[regular expressions]. The → Windows/PowerShell/language/object[objects] that are
  → Windows/PowerShell/pipeline[piped] into `select-string` need to be either be → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSObject[`System.Management.Automation.PSObject`] objects or
  have a `ToString()` method.

{ Recursive search for a pattern (grep -R) #select-string-recursively

  The following → Windows/PowerShell/pipeline tries to demonstrate how `select-string`, in conjunction with → Windows/PowerShell/command-inventory/noun/childItem/get[`get-childItem`] might be used to
  recursively search for text patterns in and below files of a given directory. Thus, it sort of does what is known in the Linux/shell universe as → Linux/shell/commands/grep[`grep -R`].

  gh|about-PowerShell|/cmdlets/string/select/grep-recursively.ps1||

  When executed, these → Windows/PowerShell/language/cmdlet[cmdLets] might print something like
code {
LineNumber rel. path                      Line
---------- ---------                      ----
         1 ..\..\gridView\out\array.ps1   'foo', 'bar', 'baz' | out-gridView -title 'An array'
         4 ..\..\json\convertTo\basic.ps1   bla = 'foo', 'bar', 'baz'
         6 .\grep-recursively.ps1          'foo.*bar' `                                        <# find files that contain foo followed by bar #> |
         1 ..\..\write-host.ps1           write-host "Foo bar baz" -foregroundColor red -backgroundColor yellow
        15 ..\..\write-host.ps1           write-host "foo bar" -noNewline
        17 ..\..\write-host.ps1           # foo bar baz
code }

}

{ TODO

Search for → development/regular-expressions[regular expressions] in a → Windows/PowerShell/pipeline:
code {
42, 128, 1, 44 | select-string \d\d
code }

`select-string` returns → Windows/PowerShell/language/object[objects] whose type is → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/MatchInfo[`Microsoft.PowerShell.Commands.MatchInfo`].

}

sa:
  → Windows/PowerShell/command-inventory/noun/string
