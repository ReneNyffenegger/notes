$ PowerShell cmdLet unblock-file

`unblock-file` removes a file's *Zone.Identifier* alternate data stream whose value of 3 (?) indicates that the file was downloaded from the internet and is possibly unsafe to run.
-
After unblocking a file, it can be run even if → Windows/PowerShell/execution-policy[execution policy] is set to *RemoteSigned*.

`unblock-file` might also be used to execute a → Windows/PowerShell/script[PowerShell script] that was downloaded from a trusted location and trying to execute the script results in
the error message
*script cannot be loaded. The file … is not digitally signed. You cannot run this script on the current system.*

{ Demonstration

code {
PS C:\> $dll = 'C:\oracle\18c\ODP.NET\managed\common\Oracle.ManagedDataAccess.dll'
PS C:\> add-type -path $dll
add-type : Could not load file or assembly 'file:///C:\oracle\18c\ODP.NET\managed\common\Oracle.ManagedDataAccess.dll'
or one of its dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515)
…
code }


  Verifying if the → Windows/development/Portable-Executable/DLL has the *Zone.Identifier* alternate stream which causes the error:
code {
PS C:\> (get-item $dll -stream zone.identifier -errorAction silentlyContinue).length
103
code }

  Open the DLL's property dialog:
code {
PS C:\> (→ Windows/PowerShell/command-inventory/noun/object/new[new-object] -com → Windows/development/COM/Useful-object-libraries/Shell-Automation-Service[shell.application]).nameSpace((split-path $dll)).parseName((split-path -leaf $dll)).invokeVerb('properties')
code }

  gh|about-PowerShell|/cmdlets/file/unblock/before.png||

  Unblock the DLL
code {
PS C:\> unblock-file $dll
PS C:\> (get-item $dll -stream zone.identifier -errorAction silentlyContinue).length
0
PS C:\> (new-object -com shell.application).nameSpace((split-path $dll)).parseName((split-path -leaf $dll)).invokeVerb('properties')
code }

  After unblocking the file, the unblock checkbox is gone from the file's property dialog:
  gh|about-PowerShell|/cmdlets/file/unblock/after.png||

  The DLL can now be added:
code {
PS C:\> add-type -path $dll
code }

}

sa:

  → Windows/PowerShell/command-inventory/noun/content/set/stream-Zone-Identifier[Set the `Zone.Identifier` stream in a file] to simlate a file being downloaded from the Internet.

  Error message: → Windows/PowerShell/modules/The-xyz-command-was-found-in-the-module-xyz_but-the-module-could-not-be-loaded[The 'xxx' command was found in the module 'xxx', but the module could not be loaded.]

  → Windows/PowerShell/command-inventory/noun/executionPolicy

  → Windows/PowerShell/command-inventory/noun/file
