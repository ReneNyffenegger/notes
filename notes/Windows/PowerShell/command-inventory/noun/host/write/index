$ PowerShell cmdLet: Write-Host

{ Bypass the pipeline

 `write-host` writes a string or a text representation of the cmdlet's arguments directly (aka asynchronously) to the → Windows/PowerShell/host[host's] console, that is *without*
  putting them into the → Windows/PowerShell/pipeline.

  This behaviour is demonstrated with the following simple pipeline: an → Windows/PowerShell/language/type/array[array] of three strings, `'one'`, `'two'` and `three'` is piped into
  a → Windows/PowerShell/command-inventory/noun/object/forEach[`foreach-object`] cmdlet whose → Windows/PowerShell/language/scriptblock evaluates the the incoming objects (strings).
  -
  If the strings ends in `o` (as is the case for `two`), then a string is written directly to the host (`write-host`).
  -
  If it starts with an `o`, a string is written with → Windows/PowerShell/command-inventory/noun/output/write[`write-output`], which essentially passes the string down the pipeline.
  -
  Otherwise, the string is passed down the pipeline unmodified.

  The result of the entire pipeline is assigned to the → Windows/PowerShell/language/variable `$pipelineResult`:

  gh|about-PowerShell|/cmdlets/host/write/pipeline.ps1||

  When executing this example, it prints:
code {
two ends in o

pipelineResult:
one begins with o
three
code }

  See also → Windows/PowerShell/command-inventory/noun/host/write/vs-string[this example] which essentially demonstrates the same.
}

{ Colored output

  With the cmdLet's `-foregroundColor` and `-backgroundColor` options, it's possible to write colored output:
  gh|about-PowerShell|/cmdlets/host/write/color.ps1||

  The script, when executed, prints:
  gh|about-PowerShell|/cmdlets/host/write/img/color.png||

}
{ Write-host considered harmful

  Because `write-host` does not pass → Windows/PowerShell/language/object[objects] down the pipeline, Jeffrey Snover, the inventor of → Windows/PowerShell, reminds his audience on his blog that
  → http://www.jsnover.com/blog/2013/12/07/write-host-considered-harmful/[using `write-host` is almost always wrong] and that
  → Windows/PowerShell/command-inventory/noun/output/write[`write-output`] should be used instead.

  The reason that Jeffrey Snover disourages the use of `write-host` is because `write-host` directly writes to the console without a possibility to redirect the output into a
  → development/log-files[log file] or to use the output further down a → Windows/PowerShell/pipeline[pipeline].

  However, as per → https://devblogs.microsoft.com/scripting/weekend-scripter-welcome-to-the-powershell-information-stream/[this blog post by Ed Wilson], `write-host` is being redeemed because
  → Windows/PowerShell/command-inventory/noun/information/write[`write-information`] provides the good stuff of `write-host` without its problems.

}

sa:

  Compare with → Windows/PowerShell/command-inventory/noun/host/out[`out-host`] which does not render an object.

  → Windows/PowerShell/command-inventory/noun/host
