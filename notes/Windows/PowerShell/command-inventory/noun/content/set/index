$ PowerShell cmdLet Set-Content
@ set-content

`set-content` creates or replaces a file and writes this file's text. In its most basic form, the → Windows/PowerShell/language/cmdlet is given a file name and an → Windows/PowerShell/language/type/array whose elements
represent the lines in the file. The following example creates (or replaces) the file `just-some.text`:
gh|about-PowerShell|/cmdlets/content/set/write-file.ps1||
After running the statement, the content of `just-some.text` will be:
code {
first line
second line
third line
code }

{ Creating an empty file (mimicking the Unix touch command) #set-content-empty

  In order to mimic the Unix → Linux/shell/commands/touch[`touch`] command to create an empty file (if it does not already exist), `set-content` can be used like so:
code {
PS → Windows/dirs/Users/username[C:\users\rene\]> set-content empty.file → Windows/PowerShell/language/variable/automatic/null
PS → Windows/dirs/Users/username[C:\users\rene\]> (→ Windows/PowerShell/command-inventory/noun/itemProperty/get[get-itemProperty]).length
0
code }

}
{ DOS and Unix line endings

  By default, `set-content` uses DOS → development/line-break[line endings] when writing a file (at least on → Windows, that is).

  In order to create a file that has Unix line endings, the array with the lines must first be → Windows/PowerShell/language/operator/string-manipulation#ps-split-join[joined] with the Unix separator ("`n") and
 *then* written.
  -
  Because `set-content` by default also ends the file with a line separator, the `-noNewLine` must also be used. The final new line needs then to be added «manually», too.

  gh|about-PowerShell|/cmdlets/content/set/unix-vs-dos.ps1||

  Note, it seems that `-noNewLine` must appear as last element in this command as it causes an error if it directly follows `set-content`.

}
{ Alias sc vs sc.exe #sc-alias

  A standard → Windows/PowerShell/language/alias[alias] for `set-content` is `sc`.

  So, if someone is used to invoke → Windows/dirs/Windows/System32/sc_exe[`sc.exe`] (the → Windows/dirs/Windows/System32/services_exe[Service Control Manager] Configuration Tool)
  from → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] by just typing the two letters `sc`, this might lead to unexpected results in
  a → Windows/PowerShell console.
  -
  Therefore, to start the service configuration tool, it needs to be given its → development/filename-extensions[extension] `.exe`:
code {
PS C:\> sc.exe
…
code }

}

sa:
  The → Windows/PowerShell/language/command parameter → Windows/PowerShell/command-inventory/parameter/credential[`-credential`].

  → Windows/PowerShell/command-inventory/noun/content

  → Windows/PowerShell/command-inventory/noun/file/out[`out-file`]

 `set-content` belongs to the → Windows/PowerShell/language/cmdlet[cmdlets] with the → Windows/PowerShell/command-inventory/parameter/encoding[`-encoding` parameter].

  → Windows/PowerShell/command-inventory/noun/item/new[`new-item -type file -value …`]

  → Windows/PowerShell/command-inventory/noun/content/set/stream-Zone-Identifier[Set the `Zone.Identifier` stream] to simulate a file being downloaded from the internet.
