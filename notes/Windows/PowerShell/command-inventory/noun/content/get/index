$ PowerShell cmdLet get-content

`get-content` retrieves the content of an → Windows/PowerShell/command-inventory/noun/item[item] at a specified → Windows/PowerShell/command-inventory/noun/location[location].

{ Files

  Usually, `get-content` is used to read a file. In such a case, `get-content` returns an → Windows/PowerShell/language/type/array[array] of strings (each of which is a text line in the file):
code {
PS C:\Users\Rene> $fileContent = get-content README.txt
PS C:\Users\Rene> $fileContent.GetType().FullName
System.Object[]
PS C:\Users\Rene> $fileContent[0].GetType().FullName
System.String
code }

}
{ Return one string with the content of the file rather than an array #get-content-raw

  In order to make `get-content` return the content of a file as a string rather than an array, the `-raw` option is needed:
code {
PS C:\> $text = get-content -raw README.txt
code }

  Compare with the → Microsoft/dot-net method → Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllText[`ReadAllText`] of the
  class → Microsoft/dot-net/namespaces-classes/System/IO/File[`System.IO.File`]

}
{ Grep for regular expressions

  Because `get-content` returns a file as an array of strings, the array can be → Windows/PowerShell/pipeline[piped] into → Windows/PowerShell/command-inventory/noun/object/where[`where-object`] to search
  for specific lines that match a criteria (such as a → development/regular-expressions[regular expression]).
code {
PS C:\Users\Rene> get-content README.txt | where-object { $_ -match '\d\d\d' }
code }

}
{ -readCount and -totalCount

  The parameter `-readcount` specifies a number that controls the number of lines in the array that is passed down the → Windows/PowerShell/pipeline.
  -
  The parameter `-totalCount` specifies the maximum number of lines that are read.

  { Processing every n-th line in a file

    Thus, every `n-th line` in a file can be processed like so (here: `n` = 3):
    gh|about-PowerShell|/cmdlets/content/get/every-nth-line.ps1||

    Every 2nd line, with a maximum of 3 processed lines (which correspond to 6 (=3*2) lines from the input file) can be achieved like so:
    gh|about-PowerShell|/cmdlets/content/get/every-nth-line-max.ps1||

    In order to start with the n-th line rather than the first one, `→ Windows/PowerShell/language/variable/automatic/psItem[$_][0]` must be changed accordingly.

  }
  { Reading a file in batches of n bytes

    In combination with `-encoding byte` («ordinary» PowerShell) or `-asByteStream` (PowerShell Core), `-readCount` and `-totalCount` allows to read
    a file in batches of n bytes:
    gh|about-PowerShell|/cmdlets/content/get/readCount-totalCount-byte-array.ps1||

    Note, that the (supposed) array of four bytes must be enclosed into an → Windows/PowerShell/language/operator/array-subexpression[array subexpression operator `@(…)`] for
    format to work (see also → https://stackoverflow.com/q/65205884/180275[my question on StackOverflow]).

  }

}
{ Getting the content of non-filesystem providers

  It is possible to get the content non-filesystem → Windows/PowerShell/language/provider[providers] such as the *function* provider:
code {
PS C:\> get-content function:/mkdir
code }

  { Variables as special kinds of items #get-content-variable

    Because a → Windows/PowerShell/language/variable[variable] is just a special kind of an → Windows/PowerShell/language/item[item], the value (that is: the content) of a variable can be determined with get-content.

    The following example demonstrates that even indirection is possible: `get-content variable:\$varName` returns the value of the variable whose name is `$varName`:

    gh|about-PowerShell|/cmdlets/content/get/variable.ps1||

    Compare with → Windows/PowerShell/command-inventory/noun/variable/get[`get-variable`] that does not only return a variable's value but the
    → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSVariable[`System.Management.Automation.PSVariable`] object that is associated with the variable.

  }
  { Functions

    → Windows/PowerShell/language/statement/function[Functions] are also types of items. Thus, the definition of a function can also be queried with `get-content`:

    gh|about-PowerShell|/cmdlets/content/get/function.ps1||

    Compare with → Windows/PowerShell/command-inventory/noun/command/get[`get-command mkdir`] which returns a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/FunctionInfo[`System.Management.Automation.FunctionInfo`] object.

  }


}
{ Getting the content of a file as byte array #ps-get-content-byte-array

  In order to get the content of a file as a → Windows/PowerShell/language/type/array/byte[byte array], `get-content` must be used together with the parameters `-encoding byte -raw` (PowerShell Desktop)
  or `-asByteStream` (PowerShell Core).

}
{ Hexadecimal representation of a file #ps-get-content-hex

  The canonical way to get the content of a file in hexadecimal representation is the cmdLet → Windows/PowerShell/command-inventory/noun/hex/format[`format-hex`].

 `format-hex` also prints a header and the printable characters which sometimes is not what I want.

  If the content of a file needs to be returned as a simple hexadecimal string, `get-content` along with `-encoding byte` and `-raw` might achieve this:

  gh|about-PowerShell|/cmdlets/content/get/hexString.ps1||

  In *PowerShell Core*, there is no `byte` encoding anymore. The `→ Windows/PowerShell/command-inventory/noun/content/get[get-content] -encoding byte` needs to be replaced with `get-content -asByteStream`.

}
{ Reading XML data #ps-get-content-xml

  → development/XML data can be read with `get-content` by assigning it to a → Windows/PowerShell/language/variable that is declared with the `[xml]` → Windows/PowerShell/language/object/type/accelerators[type accelerator].
  gh|about-PowerShell|/cmdlets/content/get/read-xml.ps1||

  See also the → Windows/PowerShell/command-inventory/noun/XML[PowerShell command noun `XML`].

  { data.xml

    This was the XML test file I used for this example:
    gh|about-PowerShell|/cmdlets/content/get/data.xml||

  }


}
{ The -encoding parameter #get-content-encoding

  The `-encoding` parameter accepts a value of the → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/FileSystemCmdletProviderEncoding[`Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding`]
  enum.

}
{ Alias

  An (predefined) → Windows/PowerShell/language/alias[alias] for `get-content` is `cat` (which is borrowed from the → Linux/shell/commands/cat[Unix shell command with the same name]).

  Another alias is `type` because of the → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] command → Windows/dirs/Windows/System32/cmd_exe/commands/type[`type`].

  Finally, there is the alias `gc`.

}

sa:

  Apparently, the → Windows/PowerShell/command-inventory/noun/item[item] for which `get-content` is invoked needs to implement `System.Management.Automation.Provider.IContentCmdletProvider`.

  The → Windows/PowerShell/language/command parameter → Windows/PowerShell/command-inventory/parameter/credential[`-credential`].

  Using `get-content` to → Windows/PowerShell/pipeline[pipe] the content of a file with an expression into → Windows/PowerShell/command-inventory/noun/expression/invoke#invoke-expression-pipe[`invoke-expression`].

  → Windows/PowerShell/command-inventory/noun/content
