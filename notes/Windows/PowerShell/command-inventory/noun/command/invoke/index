$ PowerShell cmdLet Invoke-Command

The → Windows/PowerShell/language/cmdlet[PowerShell cmdlet] `invoke-command` is typically used to execute a → Windows/PowerShell/language/scriptblock (`-scriptBlock …`) or a
PowerShell → Windows/PowerShell/script[script file] (→ #invoke-command-filePath[`-filePath …`]).
-
Use `→ Windows/PowerShell/command-inventory/noun/expression/invoke` to execute a command (including arguments) whose text is stored in a
→ Windows/PowerShell/language/variable.

{ Call a script block

  The following example assigns a → Windows/PowerShell/language/scriptblock[script block] to a variable and then uses the `invoke-command` → Windows/PowerShell/language/cmdlet[cmdLet] to execute it:

  gh|about-PowerShell|/cmdlets/command/invoke/script-block.ps1||

}
{ Passing arguments to a script block

  The `-argumentList` parameter of `invoke-command` allows to pass parameters to a script block. Note, that the values of the parameters need to be separated by commas in the invocation:
  gh|about-PowerShell|/cmdlets/command/invoke/argumentList.ps1||

}
{ Execute commands/scripts on a remote machine

  { Command
  
    Using the → Windows/PowerShell/command-inventory/parameter/computerName[`-computerName` parameter], it is possible to run a → Windows/PowerShell/language/command on a remote computer.
  
    In order to run the command, → Windows/PowerShell establishes a temporary connection. As soon as the command has finished, the connection is closed. Thus,
    → Windows/PowerShell/language/variable[variables], → Windows/PowerShell/language/function[functions] etc. that were defined in the command, will be lost.
    -
    In order to prevent such a loss, a → Windows/PowerShell/session#psSession[PsSession] (which is basically a persistent connection) should be created.
  
  }
  { Script #invoke-command-filePath
  
    A → Windows/PowerShell/script[PowerShell script file] can be executed on a *remote machine* using the `-filePath` command option.
  
  }

}
{ Running commands in multiple PsSessions #invoke-command-multiple-sesions

  It is possible to run a → Windows/PowerShell/language/command in mutliple → Windows/PowerShell/session#psSession[PsSessions]:
code {
#    Create three sessions to the servers
#    named alpha, beta and gamma:
#
$ses = → Windows/PowerShell/command-inventory/noun/psSession/new[new-psSession] -computerName alpha, beta, gamma

#    Run a command (or more accuratly: a → Windows/PowerShell/language/scriptblock) all three servers:
#
invoke-command -session $ses -scriptBlock { … }
code }

}

sa:

 `invoke-command` is one of the cmdLets with the → Windows/PowerShell/command-inventory/parameter/computerName[`-computerName`] and
 → Windows/PowerShell/command-inventory/parameter/asJob[`-asJob`] parameter.

 The → Windows/PowerShell/language/command parameter → Windows/PowerShell/command-inventory/parameter/credential[`-credential`].

  → Windows/PowerShell/command-inventory/noun/command
