$ PowerShell cmdLet get-command

The `get-command` → Windows/PowerShell/language/cmdlet[cmdLet] returns an array of objects that are derived from
→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandInfo[`System.Management.Automation.CommandInfo`]. These objects can then be queried about the individual commands.


{ get-command

 `get-command` prints all installed commands.

}
{ get-command *

 `get-command *` additionally  includes → Windows/development/Portable-Executable/EXE[EXEs] that are in the → Windows/development/environment-variables#win-envvar-path[`PATH` environment variable] (`$env:path`).

 `get-command *-command` lists all commands whose → Windows/PowerShell/command-inventory/noun[noun] is → Windows/PowerShell/command-inventory/noun/command[`command`]:
code {
PS:\> get-command *-command
CommandType     Name               Version    Source
-----------     ----               -------    ------
Function        Find-Command       1.0.0.1    PowerShellGet
Cmdlet          Get-Command        3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Invoke-Command     3.0.0.0    Microsoft.PowerShell.Core
Cmdlet          Measure-Command    3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Show-Command       3.1.0.0    Microsoft.PowerShell.Utility
Cmdlet          Trace-Command      3.1.0.0    Microsoft.PowerShell.Utility
code }

}
{ Querying meta info about a command

  The → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandInfo` object that `get-object` returns can be passed to the constructor of
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandMetadata[System.Management.Automation.CommandMetadata]. The object that this constructor
  creates can then be used to query some meta data about a command.

  In the following example, this technique is rudimentarily covered with an → Windows/PowerShell/language/alias[alias] and a
  → Windows/PowerShell/language/cmdlet[cmdLet]:
code {
#
#  Get the two CommandInfo objects:
#
PS C:\> $lsCommand          = get-command ls
PS C:\> $stopProcessCommand = get-command stop-process

#
#  Get the object's respective CommandMetadata objects:
#
PS C:\> $lsMeta          = → Windows/PowerShell/command-inventory/noun/object/new[new-object] → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandMetadata[System.Management.Automation.CommandMetadata]($lsCommand)
PS C:\> $stopProcessMeta = → Windows/PowerShell/command-inventory/noun/object/new[new-object] → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandMetadata[System.Management.Automation.CommandMetadata]($lsCommand)

#
# ls is an alias for → Windows/PowerShell/command-inventory/noun/childItem/get[get-childItem]:
#
PS C:\> $lsMeta.Name
Get-ChildItem

#
# Show a → Windows/PowerShell/language/cmdlet[cmdLet's] help → development/web/URI-URL-URN-IRI-URC#uri
#
PS C:\> $stopProcessMeta.HelpUri
→ https://go.microsoft.com/fwlink/?LinkID=113412
code }


}


sa:
  → Windows/PowerShell/command-inventory/noun/command
