$ PowerShell cmdLet test-path

`test-path` checks if *all* given → Windows/PowerShell/command-inventory/noun/path[paths] exist and returns either → Windows/PowerShell/language/variable/automatic/true-false[`$true` or `$false`].

Because → Windows/PowerShell/language/variable[variables] are stored in the → Windows/PowerShell/language/provider/drive[drive] `variable:`, `test-path` can also be used to
→ Windows/PowerShell/language/variable#ps-var-check-if-assigned[check if a variable has been assigned a value].

{ Using negation of test-path in if statements

  If `test-path` is used in an → Windows/PowerShell/language/statement/if[`if` statement] to check if a file does *not* exist, the `test-path` must be enclosed in parentheses:
code {
if (-not (test-path $txtFile)) {
   → Windows/PowerShell/command-inventory/noun/output/write[write-output] "$txtFile does not exist"
}
code }

}
{ -pathType

  The parameter `-pathType` allows to make sure that the tested path not only exists but also if it is a file (`-pathType leaf`) or is a directory (`-pathType container`).

  In the following script, the (absolute) path name of the script is assigned to the → Windows/PowerShell/language/variable[variable] `$scriptFile`
 (see the → Windows/PowerShell/language/variable/automatic/myInvocation[automatic variable `$myInvocation`]). Because (clearly), this path exists, `test-path` returns
  → Windows/PowerShell/language/variable/automatic/true-false[`$true`].
  -
  When the test for this file is executed with `-pathType leaf`, the → Windows/PowerShell/language/cmdlet[cmdLet] still returns `$true`, because the script *is* a file.
  -
  However, when executed with `-pathType container`, the cmdLet returns `$false` because the script is *not* a directory.
  -
  Finally, when the directory that contains the script (`→ Windows/PowerShell/command-inventory/noun/path/split[split-path] $scriptFile`) is tested with `-pathType container`, it
  returns `$true` because it is a directory.

  gh|about-PowerShell|/cmdlets/path/test/pathType.ps1||

}
{ Verify the existence of functions, aliases etc. #ps-test-path-check-existence

 `test-path` not only operates on → Windows/file-system[file systems] or → Windows/registry/tree-structure/key[registry keys], but also on other
  → Windows/PowerShell/language/provider[providers] such as → Windows/PowerShell/language/alias[aliases] or → Windows/PowerShell/language/function[functions].

  Check if `mkdir` and `where` are functions or aliases:
code {
PS C:\Users\Rene> test-path function:\mkdir
True
PS C:\Users\Rene> test-path function:\where
False
PS C:\Users\Rene> test-path alias:\mkdir
False
PS C:\Users\Rene> test-path alias:\where
True
code }

}
{ Create directory if it does not exist

  The following example uses `test-path` to check if the directory `→ Windows/PowerShell/language/variable/automatic/home[$home]\some-dir` exists. If not, it
  uses → Windows/PowerShell/command-inventory/noun/item/new[`new-item`] to create a directory:
  gh|about-PowerShell|/cmdlets/path/test/create-directory-if-it-does-not-exist.ps1||

}
{ Error message: Could not find a part of the path…

  If the path being tested contains a question mark (`?`) *and* has at least 149 characters, `test-path` throws the error message *Could not find a part of the path…*, as for example in the following statement.
code {
test-path 'A?123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567'
code }

  This error message is not thrown when one character is removed:
code {
test-path 'A?12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456'
code }

  → https://stackoverflow.com/questions/59197788/powershell-query-could-not-find-a-part-of-the-path[This stackoverflow question] has answers with other possible reasons for this error message.

}
{ Alternative: System.IO.File/Directory::Exists() #ps-test-path-exists

  An alternative to using `test-path` is to use the method `Exists()` of the → Microsoft/dot-net class
  → Microsoft/dot-net/namespaces-classes/System/IO/File[`System.IO.File`] or → Microsoft/dot-net/namespaces-classes/System/IO/Directory[`System.IO.Directory`]:
  gh|about-PowerShell|/cmdlets/path/test/IO.File.Exists.ps1||

}

sa:
  The → Windows/PowerShell/language/command parameter → Windows/PowerShell/command-inventory/parameter/credential[`-credential`].

  → Windows/PowerShell/command-inventory/noun/path
