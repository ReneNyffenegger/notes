$ Powershell: Creating assemblies with add-type and then using them

This page tries to demonstrate how the → Windows/PowerShell/command-inventory/noun/type/add[PowerShell cmdLet `add-type`] can be used
to turn → development/languages/C-Sharp[C#] code into an → Microsoft/dot-net/assembly and then be used in PoWerShell.

{ aClass.cs

 `aClass.cs` is the C# source file we want to create an assembly from. It defines a class (aptly named `aClass`) within the
  namespace `TQ84`. The class' constructor takes two values, an `int` and a `string` and prints these values to the console
  when `printValues` is invoked on the object created by the constructor:
  gh|about-PowerShell|/cmdlets/type/add/create-assembly/aClass.cs||

  Load the source code into the → Windows/PowerShell/language/variable `$sourceCode` and then create the assembly:
  gh|about-PowerShell|/cmdlets/type/add/create-assembly/create-assembly.ps1||

}
{ Use assembly in PowerShell

  After creating the assembly, it can be used in the same or another PowerShell session like so:
  gh|about-PowerShell|/cmdlets/type/add/create-assembly/use-assembly.ps1||

}
{ C-Sharp class that uses assembly

  Here's another C# class. This class relies on the one that can be referenced in the created assembly:
  gh|about-PowerShell|/cmdlets/type/add/create-assembly/useAssembly.cs||

  Here, → Windows/PowerShell/command-inventory/noun/type/add[`add-type`] is used to create a new type (to be used in the current PowerShell session)
  and to reference the required assembly (`anAssembly.dll`, that is):
  gh|about-PowerShell|/cmdlets/type/add/create-assembly/compile-useAssembly.ps1||

  The following approach (without explicitly usind `LoadFile`) did not work, it caused the error *Exception calling "run" with "0" argument(s): "Could not load file or assembly*:
  gh|about-PowerShell|/cmdlets/type/add/create-assembly/did-not-work.ps1||

}
