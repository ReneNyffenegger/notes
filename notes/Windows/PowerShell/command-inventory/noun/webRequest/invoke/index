$ PowerShell cmdLet Invoke-WebRequest
@ invoke-webRequest

{ Returned object

  `invoke-webRequest` returns an object whose type is → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/BasicHtmlWebResponseObject[`Microsoft.PowerShell.Commands.BasicHtmlWebResonseObject`] or
  → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/HtmlWebResponseObject[`Microsoft.PowerShell.Commands.HtmlWebResonseObject`].

  Both classes derive from → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/WebResponseObject[`Microsoft.PowerShell.Commands.WebResonseObject`].

code {
PS C:\> $response = invoke-webRequest https://renenyffenegger.ch
PS C:\> $response.GetType().FullName
→ Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/HtmlWebResponseObject[Microsoft.PowerShell.Commands.HtmlWebResonseObject]
code }

  It seems that PowerShell 7 always returns a `Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject` object.
code {
PS7 C:\> $response = invoke-webRequest https://renenyffenegger.ch
PS7 C:\> $response.GetType().FullName
Microsoft.PowerShell.Commands.BasicHtmlWebResponseObject
code }

  See also → Windows/PowerShell/command-inventory/noun/webRequest/invoke/desktop-vs-core[`invoke-webRequest`, PowerShell Desktop vs PowerShell Core].

}

{ Download a file

 When `invoke-webRequest` is invoked with the `-outFile` parameter, it can be used to download a file:
code {
invoke-webRequest https://foo.xyz/path/to/file.xlsx -outfile $env:temp/file.xlsx
code }

  A «private» file can be downloaded from github like so:
code {
$githubToken = 'ghp_…'
$headers = @{ Authorization = "token $githubToken" }
invoke-webRequest -headers @headers https://raw.githubusercontent.com/…
code }

}
{ -useDefaultCredential

? Specifying `-useDefaultCredential` seems to use the credentials that were authenticated with → Windows/security/authentication[Windows authentication] (on Windows, of course):
code {
$res = invoke-webRequest -useDefaultCredential 'https://xyz.foo.bar/api/data/v8.0/$metadata'
$res.content > p:\ath\to\file.txt
code }

}
{ Error message: The request was aborted: Could not create SSL/TLS secure channel.

  The error message *The request was aborted: Could not create SSL/TLS secure channel.* indicates (sometimes?, always?) that (at least?) → development/security/cryptography/SSL-TSL[TLS] 1.2 shoud be used. TLS 1.2 can be enabled with
code {
[→ Microsoft/dot-net/namespaces-classes/System/Net/ServicePointManager[net.servicePointManager]]::securityProtocol = [net.securityProtocolType]::Tls12
code }

}
{ Checking status, content, headers etc.

  Assign the result of a web request to a → Windows/PowerShell/language/variable[variable]:
code {
[net.servicePointManager]::securityProtocol = [net.securityProtocolType]::Tls12
$res = invoke-webRequest https://renenyffenegger.ch/notes/Windows/PowerShell/command-inventory/noun/webRequest/invoke
code }

  Now, this varibale can be use to query the → development/web/HTTP/status-code[request's status code]…
code {
'{0} {1}' → Windows/PowerShell/language/operator/f[-f] $res.statusCode, $res.statusDescription
code }
  … some → development/web/HTTP/header[headers] …
code {
$res.headers['Content-Type']
$res.headers['Connection']
code }
… or the requests body …
code {
$res.content
code }
… links …
code {
$res.links | foreach-object { '{0,-60} {1}' -f $_.innerText, $_.href}
code }

  With the `parsedHtml` property, it is even possible to access → development/web/HTML/tags[elements] in the returned → development/web/HTML document:
code {
$res.parsedHtml.title
$res.ParsedHtml.body.childNodes.item(3).innerHtml
code }

}
{ Specifying HTTP-headers

  The following example executes a HTTP request with a → development/web/HTTP/request-methods[POST method]
  and specifies the values for the two HTTP headers `Accept` and `Content-Type`.
  -
  The body of the request contains a → development/languages/JavaScript/JSON document.

code {
invoke-webRequest `

  -useDefaultCredentials `
  -method post `
  -headers  @{ 'Accept'        = 'application/json' ;
               'Content-Type'  = 'application/json' } `
$URL   `

  -body '{
     "num”:  42,
     "txt”: "Hello world"
}'
code }

}
{ -useBasicParsing #ps-invoke-webRequest-useBasicParsing

  → https://stackoverflow.com/a/38054505/180275[Using `-useBasicParsing` is necessary] on systems where IE is not installed or configured (for example after a fresh installation of Windows where Internet Explorer
  was not launched for a first time, or on a Server Core installation of Windows Server).
  -
  On such systems, `invoke-webRequest` throws the error message
 "
   The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete.
   Specify the UseBasicParsing parameter and try again.
 "

  On a non-Windows Server machine, the following modification in the → Windows/registry allows to use `invoke-webRequest` without starting Internet Explorer:
code {
→ Windows/PowerShell/command-inventory/noun/itemProperty/set[set-itemProperty] -path "→ Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/Main[HKCU:\SOFTWARE\Microsoft\Internet Explorer\Main]" -Name "DisableFirstRunCustomize" -Value 2
code }

}
{ The underlying connection was closed …

  Sometimes, trying to execute `invoke-webRequest` results in the error message
 *The underlying connection was closed: An unexpected error occurred on a send.*

  In this case, the following statement might help:
code {
[→ Microsoft/dot-net/namespaces-classes/System/Net/ServicePointManager[Net.ServicePointManager]]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
code }

}
{ Dealing with unsuccessful requests

  { -skipHttpErrorCheck
  
   `-skipHttpErrorCheck` is a switch-parameter that was added in PowerShell 7. With this flag, the `invoke-webRequest` won't throw an exception if the → development/web/HTTP/status-code[HTTP status] indicates
    an unsuccessful request.
  
  }
  { Test

gh|about-PowerShell|/cmdlets/webRequest/invoke/deal-with-unsuccessful-requests.ps1||

  }

}
{ Setting the user agent (-userAgent) #ps-invoke-webrequest-ua

  The parameter `-userAgent` allows to set the → development/web/HTTP/User-Agent string for a request.

  PowerShell provides some templates for user agent strings in the → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/PSUserAgent[`Microsoft.PowerShell.Commands.PSUserAgent` class]:
code {
invoke-webRequest -userAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::Chrome) https://…/…
code }

}
{ Alias

  `wget` (compare with → tools/wget[`wget.exe`]) and `curl` (compare with → Windows/dirs/Windows/System32/curl_exe[`curl.exe`]) are an → Windows/PowerShell/language/alias[aliases] for `invoke-webRequest`.

}

sa:

  → Windows/PowerShell/command-inventory/noun/restMethod/invoke[`invoke-restMethod`]

  → Windows/PowerShell/command-inventory/noun/webRequest
