$ PowerShell cmdLet Set-PSReadLineOption

{ List of options

  table { lll

    `-EditMode` ☰ A member of the `→ Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/EditMode` enumeration ☰
    `-ContinuationPrompt` ☰ <String> ☰
    `-HistoryNoDuplicates` ☰ ☰
    `-AddToHistoryHandler` ☰ <System.Func`2[System.String,System.Object>] ☰
    `-CommandValidationHandler` ☰ <System.Action`1[System.Management.Automation.Language.CommandAst>] ☰
    `-HistorySearchCursorMovesToEnd` ☰ ☰
    `-MaximumHistoryCount` ☰ <Int32> ☰
    `-MaximumKillRingCount` ☰ <Int32> ☰
    `-ShowToolTips` ☰ <C-->- ☰
    `-ExtraPromptLineCount` ☰ <Int32> ☰
    `-DingTone` ☰ <Int32> ☰ See also `-DingDuration` and `-BellStyle`
    `-DingDuration` ☰ <Int32> ☰ See also `-DingTone` and `-BellStyle`
    `-BellStyle` ☰ A member of the `→ Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/BellStyle` enumeration ☰ See also `-DingTone` and `-DingDuration`
    `-CompletionQueryItems` ☰ <Int32> ☰
    `-WordDelimiters` ☰ <String> ☰
    `-HistorySearchCaseSensitive` ☰ ☰
    `-HistorySaveStyle` ☰ <HistorySaveStyle> ☰
    `-HistorySavePath` ☰ <String> ☰
    `-AnsiEscapeTimeout` ☰ <Int32> ☰
    `-PromptText` ☰ An array of strings ☰
    `-ViModeIndicator` ☰ `→ Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/ViModeStyle` ☰
    `-ViModeChangeHandler` ☰ A → Windows/PowerShell/language/scriptblock  ☰
    `-PredictionSource` ☰ A member of the `→ Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/PredictionSource` enumeration ☰ PowerShell Core only?
    `-PredictionViewStyle` ☰ <PredictionViewStyle> ☰ ?
    `-Colors` ☰ A → Windows/PowerShell/language/type/hash-table  ☰

  table }

}

{ Set a value of an option

code {
PS C:\> set-psReadLineOption -editMode vi
code }

}
{ Boolean like options

  `showToolTips` is a boolean like option. This option can be set like so:
code {
PS C:\> set-psReadLineOption -showToolTips
code }

  In order to turn it off, the `$false` needs to be appended after a colon which is appended to the parameter name:
code {
PS C:\> set-psReadLineOption -showToolTips:$false
code }

}
{ Colors #set-psReadLineOption-colors

  It is possible to define → design/graphic/color[colors] for different token types in PowerShell with the `-colors` option which requires a → Windows/PowerShell/language/type/hash-table.

  The color itself can be stated with → Linux/shell/ANSI-escape-sequences[ANSI escape sequences] or the → Microsoft/dot-net/namespaces-classes/System/ConsoleColor[`System.ConsoleColor`] enumeration or
  an → Linux/shell/ANSI-escape-sequences[ANSI escape sequence].

code {
set-psReadLineOption -colors @{
   operator = 
      "$([char]27)[38;2;255;127;0m"    +  # forground  color: orange
      "$([char]27)[48;2;100;120;130m";    # background color: grey
   number   = 'darkGreen'            ;
   variable = [ConsoleColor]::Yellow
}
code }

}

sa:
  → Windows/PowerShell/command-inventory/noun/psReadLineOption
