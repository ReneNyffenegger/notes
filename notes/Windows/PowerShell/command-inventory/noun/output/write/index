$ PowerShell cmdLet write-output

`write-output` sends the specified → Windows/PowerShell/language/object[object(s)] down the *primary pipeline* (aka «output stream» or «success pipeline») to the next commend in a → Windows/PowerShell/pipeline.
-
If `write-output` is executed in the last command of a pipeline, the objects are rendered in the console.

Generally, `write-output` is not necessary. The following two → Windows/PowerShell/pipeline[pipelines] are equivalent:
code {
do-something | write-output
do-something
code }

Note: While `do-something | write-output` is equivalent to `do-something` the following pipeline → Windows/PowerShell/command-inventory/noun/host/write#write-host-vs[is not, although at first sight it seems to be].
code {
do-something | → Windows/PowerShell/command-inventory/noun/host/write[write-host]
code }


{ -noEnumerate

  If write-output is given an → Windows/PowerShell/language/type/array of multiple objects, by default, it passes the array as *one* object to the next command.
  -
  However, if the option `-noEnumerate` is used on `write-output`, each object in the array is passed individually:
  gh|about-PowerShell|/cmdlets/output/write/noEnumerate.ps1||

  The first pipeline writes
code {
object is foo
object is bar
object is baz
code }

  The second pipeleine write
code {
object is foo bar baz
code }
 
}

{ Alias

  An → Windows/PowerShell/language/alias[alias] for `write-output` is `echo`  which is the name of commands used in other → Linux/shell[shells] or
  → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] to display strings in the console)

}
sa:

  The → Windows/PowerShell/command-inventory/verb/write[cmdLet verb `write`]

  → Windows/PowerShell/command-inventory/noun/output
