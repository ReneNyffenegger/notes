$ PowerShell cmdLet Start-Job
@ start-job

`start-job` returns a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSRemotingJob[`System.Management.Automation.PSRemotingJob`] object.

{ Passing variables to a job #start-job-pass-var

  In order to pass a → Windows/PowerShell/language/variable[variable] to a → Windows/PowerShell/language/scriptblock that is started with `start-job`, the variable name needs to be prefixed with `using:`.

  gh|about-PowerShell|/cmdlets/job/start/pass-variable.ps1||

  This script, when run, writes the following line into `~/variable-value`:
code {
var= | using:var=changed
code }

  See also → Windows/PowerShell/language/scopes[scopes].

}
{ Working directory for jobs ps-start-job-wd

  A job's *working directory* is set to → Windows/dirs/Users/username/Documents[`$home\Documents`] (Windows Powershell) or → Windows/PowerShell/language/variable/automatic/home[`$home`] (PowerShell Core).
  -
  This is demonstrated by the following simple → Windows/PowerShell/pipeline: it starts a → Windows/PowerShell/command-inventory/noun/job[job] with a → Windows/PowerShell/language/scriptblock which in turn writes the
  current location (→ Windows/PowerShell/command-inventory/noun/location/get[`get-location`]) to `~/current-directory`.
  -
  After the job has finished, `~/current-directory` can be inspected to determine the current directory of powershell jobs.

  gh|about-PowerShell|/cmdlets/job/start/current-directory.ps1||

  PowerShell 7 finally comes with the new option `-workingDirectory` which allows to change the initial working directory for a background job.

}
{ Passing parameters to a scheduled cmdLet

  The following command tries to use `start-job` to schedule a download of a resource and storing it to an aribitrary file, using the `-outFile` parameter:
code{
start-job → Windows/PowerShell/command-inventory/noun/webRequest/invoke[invoke-webRequest] http://server.xyz/path/to/resource.pdf -outFile downloadedFile.pdf
code }

  However, this results in the error message *Start-Job : Parameter set cannot be resolved using the specified named parameters*. This is becouse `start-job` (rather than `invoke-webRequest`) tries
  to interprete the `-outfile` parameter.

  In order to pass a parameter to a scheduled cmdLet, a → Windows/PowerShell/language/scriptblock must be used:
code{
start-job -scriptBlock { → Windows/PowerShell/command-inventory/noun/webRequest/invoke[invoke-webRequest] http://server.xyz/path/to/resource.pdf -outFile downloadedFile.pdf }
code }

  The `-scriptBlock` parameter is not necessary:
code{
start-job { → Windows/PowerShell/command-inventory/noun/webRequest/invoke[invoke-webRequest] http://server.xyz/path/to/resource.pdf -outFile downloadedFile.pdf }
code }

  Of course, if using a script block to download a resource, absolute paths or the → #ps-start-job-wd[working directory] should be specified in order to download the file to a
  non-default location.
  -
  The following command combines the `using` → Windows/PowerShell/language/scopes[scope] with the → Windows/PowerShell/language/variable/automatic/pwd[`$pwd` automatic variable] to download
  a resource to the current directory:
code {
start-job  { invoke-webRequest https//server.xyz/path/to/resource.pdf -outFile $using:→ Windows/PowerShell/language/variable/automatic/pwd[pwd]\downloadedFile.pdf }
code }

}

sa:

  → Windows/PowerShell/command-inventory/noun/process/start[`start-process`].

  → Windows/PowerShell/command-inventory/noun/objectEvent/register[`register-objectEvent`]

  The → Windows/PowerShell/language/command parameter → Windows/PowerShell/command-inventory/parameter/credential[`-credential`].

  → Windows/PowerShell/command-inventory/noun/job
