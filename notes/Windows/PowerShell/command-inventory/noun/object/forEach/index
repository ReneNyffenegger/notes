$ PowerShell cmdLet Foreach-Object
@ foreach-object

{ Execute a script block in a pipeline #ps-exec-scriptblock-in-pipeline

  The `forEach-object` → Windows/PowerShell/language/cmdlet[cmdLet] can be used to invoke a
  → Windows/PowerShell/language/scriptblock within a → Windows/PowerShell/pipeline.

  gh|about-PowerShell|/cmdlets/object/forEach/script-block.ps1||

}
{ Shorter ways to write forEach-object #forEach-object-abbr

 `forEach-object` can be abbreviated with `forEach` or `%`.

  It should be noted, however, that → Windows/PowerShell/language/statement/foreach[`foreach`] is also a → Windows/PowerShell/language/statement/foreach[statement]
  and that the percent sign also acts as the arithmetic modulus → Windows/PowerShell/language/operator.

}
{ Powershell 7: Parallel execution

  With Powershell 7, the objects passed to `foreach-object` can be processed in parallel by specifying the `-parallel` parameter:

  By default, PowerShell starts up to five threads in parallel:
code {
7,5,2,3,6,4,8,1 | forEach-object -parallel { write-output "Thread $_ started at $(get-date -format 'mm:ss'). PID = $pid, TID = $([System.Threading.Thread]::CurrentThread.ManagedThreadId)"; start-sleep $_; write-output "Thread $_ is stopping" }
code }

  The number of maximum concurrent threads can be adjusted with `-throttleLimit`:
code {
get-random (1..10) -shuffle| forEach-object -parallel { write-output "Thread started at $(get-date -format 'mm:ss'). PID = $pid, TID = $([System.Threading.Thread]::CurrentThread.ManagedThreadId)"; start-sleep $_ } -throttleLimit 8
code }

}

sa:
  → Windows/PowerShell/command-inventory/noun/object

  → science/computer/Programming-paradigm/Functional-programming/First-class-function/map
