$ PowerShell cmdLet New-Object
@ new-object

`new-object` creates a new → Windows/PowerShell/command-inventory/noun/object[PowerShell object] which represents either a
→ Microsoft/dot-net[.NET] or a → Windows/development/COM/object

The `new-object` → Windows/PowerShell/language/cmdlet[cmdLet] cannot be → Windows/PowerShell/pipeline[piped] into.


{ Creating a .NET object / psObject

  An instance of a → Microsoft/dot-net object is created by specifying the *type of a .NET Framework class*. The optional `-typeName` argument can be used to explicitly mark the argument as a type name.

  Under the hood, `new-object` creates a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSObject[`System.Management.Automation.PSObject`] object whose
  member `ImmediateBaseObject` is a reference to the actual object that is created.
 
code {
PS C:\> $webClient = new-object → Microsoft/dot-net/namespaces-classes/System/Net/WebClient[System.Net.WebClient]

PS C:\> $webClient.→ Microsoft/dot-net/namespaces-classes/System/Object#Object-GetType[GetType]().FullName
System.Net.WebClient

PS C:\> $webClient.psObject.GetType().FullName
System.Management.Automation.PSObject

PS C:\> $webClient.psObject.ImmediateBaseObject.GetType().FullName
System.Net.WebClient
code }

  { Constructor

  If the .NET object to be created does not provide a *default constructor*, the arguments to the constructor need to be passed after the type name:
code {
$txt = new-object System.String 'Hello world'
code }

  }
  { psObject

    `psObject` has a special meaning: it creates a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCustomObject[`System.Management.Automation.PSCustomObject`] object, one of the
  most important, if not the most important object type in PowerShell:
code {
PS C:\> $obj = → Windows/PowerShell/command-inventory/noun/object/new/psObject[new-object psObject]
PS C:\> $obj.GetType().FullName
System.Management.Automation.PSCustomObject
code }

  With `new-object psObject`, PowerShell also creates a `PSObject` with `ImmediateBaseObject` referencing the `PSCustomObject`.

  }
  { Beware of particularities of argument parsing mode

    Arguments that are passed to a → Microsoft/dot-net type constructor are parsed in → Windows/PowerShell/language/parsing#ps-parse-arg-mode[argument parsing mode] which is different from
    → Windows/PowerShell/language/parsing#ps-parse-expr-mode[expression parsing mode]. This might lead to seemingly inexplainable results.

    One of the main differences of these → Windows/PowerShell/language/parsing[parsing modes] is that *argument parsing mode* does not recognize the type reference (for example
    `[→ Microsoft/dot-net/namespaces-classes/System/Console[System.Console]]`) but assumes it to be a string.

    Thus, if a method on a type is called to fill an argument to the constructor of the object being created, such a type reference must be enclosed in parenthesis:
code {
$obj = new-object type.name ( [Another.type.name]::method() )
code }

  }

}
{ Creating a COM object

  A → Windows/development/COM/object is created with the `-comObject` option that specifies a → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[progid].
code {
$obj = new-object -comObject → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[prog.id]
code }

  See also → Windows/PowerShell/command-inventory/noun/object/new/COM.

}
{ Creating an object from inline C-Sharp code

  The → Windows/PowerShell/command-inventory/noun/type/add[`add-type`] cmdLet allows to compile → development/languages/C-Sharp classes that then can be
  created in PowerShell:
  gh|about-PowerShell|/cmdlets/object/new/inline-c-sharp.ps1||

}
{ -property

  The `-property` option takes an object that implements the → Microsoft/dot-net/namespaces-classes/System/Collections/IDictionary[`System.Collections.IDictionary`] interface.
  -
  An object with such an interface can be created with the → Windows/PowerShell/language/type/hash-table#ps-create-hash-table[`@{ … }`] syntax (which creates a → Windows/PowerShell/language/type/hash-table.

  { psObject

    In the following example, a Powershell custom object is created with the property names and values of the hash table (`$probs`) that is first created:
    gh|about-PowerShell|/cmdlets/object/new/property-ps.ps1||

  }
  { .NET class

    This example is similar to the previous one, but this time a «real» → Microsoft/dot-net class is created. This class already has the two properties `num` and `txt`.
    Thus, the member type of the properties is *property* as opposed to *noteProperty* in `psObject` objects:
    gh|about-PowerShell|/cmdlets/object/new/property-dotNet.ps1||

  }

}
{ Instantiating an object from a DLL #ps-new-object-dll

  The following simple example tries to demonstrate how a class from a → Windows/development/Portable-Executable/DLL can be used in → Windows/PowerShell.

  First, we need to create such a DLL. Here's the → development/languages/C-Sharp source code:
  gh|about-PowerShell|/cmdlets/object/new/cs-class/obj.cs||

  The source code is compiled into a DLL (`-target:library`):
code {
PS C:\path\to\somewhere > csc -nologo -target:library .\obj.cs
code }

   In order to use the class, the DLL needs to be added to the current → Windows/PowerShell session:
code {
PS C:\path\to\somewhere > → Windows/PowerShell/command-inventory/noun/type/add[add-type] -path 'obj.dll'
code }

   Static methods can be called without instantiating a class.
code {
PS C:\path\to\somewhere > [TQ84.Obj]::twice(21)
code }

  However, member methods require an object, which is what `new-object` creates.
  -
  When the object is created, its constructor is automatically called. Because the constructor contains a `System.Console.WriteLine` statement, *Obj's constructor was called* is printed.
code {
PS C:\path\to\somewhere > $obj_1 = new-object TQ84.Obj one
Obj's constructor was called
PS C:\path\to\somewhere > $obj_2 = new-object TQ84.Obj two
Obj's constructor was called
code }

   Now, that the objects have been created, we can use them:
code {
PS C:\path\to\somewhere > $obj_1.saySomeThing('eins')
one says eins
PS C:\path\to\somewhere > $obj_2.saySomeThing('zwei')
two says zwei
code }

}
{ Error message: Cannot find type …: verify that the assembly containing this type is loaded

  Some assemblies need to be explicitly added to a PowerShell session in order to use them, otherwise, an *Cannot find type …: verify that the assembly containing this type is loaded* error is thrown:
code {
PS C:\> $bmp = new-object Drawing.Bitmap 200, 40
new-object : Cannot find type [Drawing.Bitmap]: verify that the assembly containing this type is loaded.o
… etc. etc. …
code }

  The required assembly can be added with the → Windows/PowerShell/command-inventory/noun/type/add[`add-type` cmdLet]:
code {
PS C:\> add-type -assembly 'System.Drawing'
PS C:\> $bmp = new-object Drawing.Bitmap 200, 40
code }

}

sa:

  → Windows/PowerShell/command-inventory/noun/object/new/psObject[`new-object psObject`]

  → Windows/PowerShell/command-inventory/noun/object

  → Windows/PowerShell/language/object/creation[Object creation in PowerShell]
