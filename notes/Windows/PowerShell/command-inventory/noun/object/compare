$ PowerShell cmdLet compare-object

{ Comparing two string arrays

  The following example tries to demonstrate how `compare-object` can be used to compare two string → Windows/PowerShell/language/type/array[arrays]:
  gh|about-PowerShell|/cmdlets/object/compare/string-arrays.ps1||

}
{ Comparing directory structures

  A combination of `compare-object` and → Windows/PowerShell/command-inventory/noun/childItem/get[`get-childItem -recurse`] allows to compare *directory structures*.

  The following command finds directories or files that are missing below `dir-one` or `dir-two` that are present in the other directory.
  gh|about-PowerShell|/cmdlets/object/compare/compare-directory-structure.ps1||

  Note: this command only checks if the directory structure is equal. If a file that is present in both directories has a different content, it won't be reported!

}
{ Comparing two psObjects

  The following script compares two → Windows/PowerShell/command-inventory/noun/object/new/psObject[psObjects].

  These objects differ one from another in two ways:
    • Attribute names (`$psObject_1` has the attribute `word_1` while `$psObject_2` has the attribute `word_x`)
    • Attribute values (The value of `.word_3` is `ghi` or `XXX`, respectively)

  Although these two objects are clearly different, `compare-object` won't report them as such.

  With `-includeEqual`, they are explicitely shown to be equal:
  gh|about-PowerShell|/cmdlets/object/compare/psObjects.ps1||


}
{ Alias

  An → Windows/PowerShell/language/alias for `compare-object` is `diff`

}
sa:
  → Windows/PowerShell/command-inventory/noun/object
