$ PowerShell cmdLet Get-ChildItem

`get-childItem` returns a list of → Windows/PowerShell/command-inventory/noun/item[items] and → Windows/PowerShell/command-inventory/noun/childItem[childItems] of a given
→ Windows/PowerShell/command-inventory/noun/location[location].

code {
get-childItem
get-childItem -path p:\ath\to\dir
get-childItem -path p:\ath\to\dir        → #get-childItem-filter[-filter]  *.txt
get-childItem -path p:\ath\to\dir\*      → #get-childItem-include[-include] *.txt                 # Note the star
get-childItem -path p:\ath\to\dir\*      -exclude *.dll,*.exe
get-childItem -path p:\ath\to\dir\a*\b*
get-childItem  …                         -recurse
get-childItem  …                         → #get-childItem-attributes[-attributes] …
get-childItem  …                         -force                         # also return hidden files
get-childItem  …                         -hidden                        # return hidden files only
get-childItem  …                         -readOnly                      # return read-only files only
get-childItem  …                         -system                        # return system files only
get-childItem  …                         -directory                     # return directories only
get-childItem  …                         → #get-childItem-name[-name]                          # return strings rather than filesystem, registry or certificate objects
code }


{ List files that were modified in the last 24 hours

  The following → Windows/PowerShell/pipeline shows files (not directories) that were modified during the last 24 hours.

  The → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object`] part is required to transform the returned objects into strings.

code {
get-childItem -recurse -attributes !directory | → Windows/PowerShell/command-inventory/noun/object/where[where-object] { → Windows/PowerShell/language/variable/automatic/psItem[$_].lastWriteTime → Windows/PowerShell/language/operator/comparison[-gt] (→ Windows/PowerShell/command-inventory/noun/date/get[get-date]).addDays(-1) } | forEach-object { $_.directoryName + '\' + $_.name }
code }

}
{ Sort files and directories according to modification time

  The equivalent of → Windows/dirs/Windows/System32/cmd_exe/commands/dir#cmd-exe-dir-sort[cmd.exe's `dir /od`], which sorts files according to their modification date time, in PowerShell is
code {
get-childItem | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] { $_.lastWriteTime }
code }

}
{ Find items whose name contain a given pattern (globbing) #get-childItem-filter

  With `-filter`, it is possible to get a list of items whose names have a specific → Windows/PowerShell/language/wildcards[wildcard] pattern.

  The following command lists files and directories that contain *il* in their names:
  gh|about-PowerShell|/cmdlets/childItem/filter-il.ps1||

  As per → https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7.1[Microsoft's documentation], only
  the file system → Windows/PowerShell/language/provider[provider] supports filtering.

  { Using -filer on filename extensions

    Using `-filter` on → development/filename-extensions[filename extensions] is problematic. The following snippet also finds files that end in `*.sql~`, `*.sqlx` etc:
code {
foreach ($file in get-childItem -recurse -filter *.sql) {
   → Windows/PowerShell/command-inventory/noun/host/write[write-host] $file
}
code }

   Therefore, it is (probably) better to use → #get-childItem-include[`-include`] rather than `-filter`.

  }

}
{ -include #get-childItem-include

 `-include` allows to specify an → Windows/PowerShell/language/type/array of filename patterns that further removes items from matched files that are not matched by the filename patters.

 `-include` only works in conjunction with at least one `-recurse`, `-depth` or `-path`.

  Unlike `-filter`, `-include` is implemented by → Windows/PowerShell.

  Because `-filter` requires `-path` if `-recurse` and `-depth` are not specified, the the first of the following two → Windows/PowerShell/language/command[commands] does not return anything, but the second does (if
  there are `*.txt` files in the current directory):
code {
get-childItem   -include *.txt
get-childItem * -include *.txt
code }

}
{ List or exclude items with specific attributes (such as files, directories etc.) #get-childItem-attributes

  The `-attributes` option allows to only list or excludeitems with a given set of attributes. The list of attributes that can be specified is that of
  → Microsoft/dot-net/namespaces-classes/System/IO/FileAttributes[`System.IO.FileAttributes`].

  For example, to list only directories, the following would do
code {
get-childItem -attributes directory
code }

  This command can be abbreviated with:
code {
ls -at d
code }

  The type given to the `-attributes` option is a `→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/FlagsExpression-T[System.Managment.Automation.FlagsExpression]<→ Microsoft/dot-net/namespaces-classes/System/IO/FileAttributes[System.IO.FileAttribute]>`, thus, by the power of `FlagsExpression`, the `FileAttribute` flags
  can be combined:
code {
get-childItem -attributes !directory+!system+encrypted, !directory+!system+compressed
code }

}
{ Getting child items from a given location

  By default, `get-childItem` returns items from the current location (→ Windows/PowerShell/command-inventory/noun/location/get[`get-location`]).

  With the `-path` option, it is possible to get the child items from another location:
code {
get-childItem -path $env:temp -recurse -name
code }

  The explicit text `-path` can be omitted, so that the following command is equivalent:
code {
get-childItem $env:temp -recurse -name
code }

}
{ Returned type of get-childItem

  If `get-childItem` is invoked in a file system → Windows/PowerShell/language/provider/drive, `get-childItem` returns an
  → Windows/PowerShell/language/type/array of → Microsoft/dot-net/namespaces-classes/System/IO/DirectoryInfo[`System.IO.DirectoryInfo`] and
  → Microsoft/dot-net/namespaces-classes/System/IO/FileInfo[`System.IO.FileInfo`] objects, both of which derive from
  → Microsoft/dot-net/namespaces-classes/System/IO/FileSystemInfo[`System.IO.FileSystemInfo`].
  -
  If used in a drive that accesses the → Windows/registry, it returns an array of → Microsoft/dot-net/namespaces-classes/Microsoft/Win32/RegistryKey[`Microsoft.Win32.RegistryKey`] objects.

  The fact that `get-childItem` returns specific → Windows/PowerShell/language/object[objects] turns out to be problematic if these objects are compared with
  → Windows/PowerShell/language/operator/comparison[comparison operators] (such as `-eq`) to a string. The following probably won't do what the author expected to do:
code {
foreach ($file in get-childItem *) {
   if ($file -eq "readme.txt") {
      ...
   }
}
code }
  

  In order to have `get-childItem` return an array of strings, it must be invoked with the  → #get-childItem-name[`-name`] argument.


}
{ Let get-childItem return strings with -name #get-childItem-name

  When `get-childItem` is invoked with the `-name` parameter, the cmdLet returns an array of strings rather then specialized types for the child items.

  This is especially useful to get a more readable (imho) output, especially when combined with `-recurse` (in which case it behaves like the good old
  → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] command → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir /b …`]).

}
{ Querying child items from another provider (such as the registry, environment variables etc.)

  Usually, `get-childItem` is used to list files and directories. However, it can also list items from a non file system provider by prepending the path with the provider and a colon.

  The following command lists all → Windows/development/environment-variables[environment variables] that contain *user* in their names:
code {
get-childItem env:*user*
code }

  The previous command is of course just an abbreviation that omits the `-path` attribute and is equivalent to
code {
get-childItem -path env:*user*
code }

  Listing items from the → Windows/registry is possible with
code {
get-childItem '→ Windows/registry/tree/HKEY_CURRENT_USER/AppEvents/Schemes[HKCU:\AppEvents\Schemes]' -recurse -name
code }

  Alternatively, it is also possible to change the location into another provider so that the provider does not need to be prefixed anymore:
code {
→ Windows/PowerShell/command-inventory/noun/location/set[set-location] hkcu:
get-childItem appEvents\Schemes
code }

}
{ Aliases

 `ls` and `dir` are → Windows/PowerShell/language/alias[aliases] for `get-childItem`.

}

sa:
  → Windows/PowerShell/command-inventory/noun/childItem

  Iterating over a list of files in a directory with → Windows/PowerShell/language/statement/foreach#ps-foreach-get-childItem[`foreach`].

  → Windows/PowerShell/command-inventory/noun/path/resolve#resolve-path-relative_get-childItem[Combining `get-childItem` and `resolve-path -relative`] to obtain a list of relative file names beneath
  the current directory.

links:
  Thomas Lee's → https://tfl09.blogspot.com/2012/02/get-childitem-and-theinclude-and-filter.html[`-filter` vs `-include` in get-childItem]
