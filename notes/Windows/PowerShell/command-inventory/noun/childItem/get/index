$ PowerShell cmdLet get-childItem

`get-childItem` returns a list of → Windows/PowerShell/command-inventory/noun/item[items] and → Windows/PowerShell/command-inventory/noun/childItem[childItems] of a given
→ Windows/PowerShell/command-inventory/noun/location[location].

code {
get-childItem
get-childItem -path p:\ath\to\dir
get-childItem -path p:\ath\to\dir        -filter  *.txt
get-childItem -path p:\ath\to\dir\*      -include *.txt                 # Note the star
get-childItem -path p:\ath\to\dir\*      -exclude *.dll,*.exe
get-childItem -path p:\ath\to\dir\a*\b*
get-childItem  …                         -recurse
get-childItem  …                         → #get-childItem-attributes[-attributes] …
get-childItem  …                         -force                         # also return hidden files
get-childItem  …                         -hidden                        # return hidden files only
get-childItem  …                         -readOnly                      # return read-only files only
get-childItem  …                         -system                        # return system files only
get-childItem  …                         -directory                     # return directories only
get-childItem  …                         -name                          # return strings rather than filesystem, registry or certificate objects
code }


{ List files that were modified in the last 24 hours

  The following → Windows/PowerShell/pipeline shows files (not directories) that were modified during the last 24 hours.

  The → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object`] part is required to transform the returned objects into strings.

code {
get-childItem -recurse -attributes !directory | → Windows/PowerShell/command-inventory/noun/object/where[where-object] { → Windows/PowerShell/language/variable/automatic/psItem[$_].lastWriteTime → Windows/PowerShell/language/operator/comparison[-gt] (→ Windows/PowerShell/command-inventory/noun/date/get[get-date]).addDays(-1) } | forEach-object { $_.directoryName + '\' + $_.name }
code }

}
{ Sort files and directories according to modification time

  The equivalent of → Windows/dirs/Windows/System32/cmd_exe/commands/dir#cmd-exe-dir-sort[cmd.exe's `dir /od`], which sorts files according to their modification date time, in PowerShell is
code {
get-childItem | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] { $_.lastWriteTime }
code }

}
{ List or exlude items with specific attributes (such as files, directories etc.) #get-childItem-attributes

  The `-attributes` option allows to only list or excludeitems with a given set of attributes. The list of attributes that can be specified is that of
  → Microsoft/dot-net/namespaces-classes/System/IO/FileAttributes[`System.IO.FileAttributes`].

  For example, to list only directories, the following would do
code {
get-childItem -attributes directory
code }

  The type given to the `-attributes` option is a `→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/FlagsExpression-T[System.Managment.Automation.FlagsExpression]<→ Microsoft/dot-net/namespaces-classes/System/IO/FileAttributes[System.IO.FileAttribute]>`, thus, by the power of `FlagsExpression`, the `FileAttribute` flags
  can be combined:
code {
get-childItem -attributes !directory+!system+encrypted, !directory+!system+compressed
code }

}
{ Returned type of get-childItem

  If `get-childItem` is used in a file system → Windows/PowerShell/language/provider/drive, `get-childItem` returns an
  → Windows/PowerShell/language/type/array of → Microsoft/dot-net/namespaces-classes/System/IO/DirectoryInfo[`System.IO.DirectoryInfo`] and
  → Microsoft/dot-net/namespaces-classes/System/IO/FileInfo[`System.IO.FileInfo`] objects, both of which derive from
  → Microsoft/dot-net/namespaces-classes/System/IO/FileSystemInfo[`System.IO.FileSystemInfo`].

  If used in a drive that accesses the → Windows/registry, it returns an array of → Microsoft/dot-net/namespaces-classes/Microsoft/Win32/RegistryKey[`Microsoft.Win32.RegistryKey`] objects.

}
{ Aliases

  `ls` and `dir` are → Windows/PowerShell/language/alias[aliases] for `get-childItem`.

}

sa:
  → Windows/PowerShell/command-inventory/noun/childItem

  Iterating over a list of files in a directory with → Windows/PowerShell/language/statement/foreach#ps-foreach-get-childItem[`foreach`].

links:
  Thomas Lee's → https://tfl09.blogspot.com/2012/02/get-childitem-and-theinclude-and-filter.html[`-filter` vs `-include` in get-childItem]
