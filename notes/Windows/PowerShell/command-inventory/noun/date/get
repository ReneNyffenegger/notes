$ PowerShell cmdLet Get-Date
@ get-date

The → Windows/PowerShell/language/cmdlet `get-date` returns a → Microsoft/dot-net/namespaces-classes/System/DateTime[`System.DateTime`] struct.

Without argument, `get-date` returns the date/time that corresponds to «now».
-
The cmdLet can be given a → misc/ISO/8601 string to specify an arbitrary date.

{ Formatting dates into strings

  The `-format` option allows to format a date in → development/misc/strftime like fashion.

  In the following example, the format specifiers, except `K`, are imho self explanotary. The `K` stands for the *Time zone offset from → misc/UTC[UTC]*
  gh|about-PowerShell|/cmdlets/date/get/format.ps1||
  These commands might print something like
code {
formattedDate = 2019-11-25 10-36-12 (+01:00)
code }

  A complete list of format specifiers is → https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings[found at .NET documentation].

}

{ Substracting one date from another

  Subtracting one `System.DateTime` from another returns a → Microsoft/dot-net/namespaces-classes/System/TimeSpan[`System.TimeSpan`] struct.
  -
  This is useful to determine the elapsed time between two point in times:
  gh|about-PowerShell|/cmdlets/date/get/basic.ps1||

}
{ Adding a System.TimeSpan to a date

  Conversely, its possible to add a `System.TimeSpan` to a `System.DateTime` object to obtain a new point in time.

  A time span is explicitely created with the → Windows/PowerShell/command-inventory/noun/timeSpan/new[`new-timeSpan`].
  gh|about-PowerShell|/cmdlets/date/get/add-explicit.ps1||

  A time span can also be created implicitely with a string in `dd.hh:mm:ss` format:
  gh|about-PowerShell|/cmdlets/date/get/add-implicit.ps1||

}

sa:

  The → Linux/shell/commands/date[shell command `date`]

  → Windows/PowerShell/command-inventory/noun/date
