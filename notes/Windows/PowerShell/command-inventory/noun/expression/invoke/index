$ PowerShell cmdLet: invoke-expression

{ Executing a string as PowerShell command

 `invoke-expressions` seems to be the equivalent of a statement that in other → development/languages[programming languages] might be called `eval`: it executes the content of a string → Windows/PowerShell/language/variable[variable]
  as PowerShell command.

  The following example creates a string whose content is `write-output (3*14)` and then passes it to `invoke-expression`. Thus, when run, the example prints `42`:
  gh|about-PowerShell|/cmdlets/expression/invoke/eval.ps1||

}
{ Executing the commands in a file

  `invoke-expression` can also be used to execute the commands that are stored in a file (that is: a script).

  The following script uses → Windows/PowerShell/language/variable/automatic/myInvocation#myInvocation-dir-of-script[`split-path $myInvocation.myCommand.path`] to determine the directory where it is located and assigns the value to
  the → Windows/PowerShell/language/variable[variable] `$dir`. It then uses `$dir` to execute a powershell that is located in `$dir` and is named `commands.ps1`. Note, that the → development/filename-extensions[file extension] `.ps1` is not
  required when using the `-command` parameter:

  gh|about-PowerShell|/cmdlets/expression/invoke/source.ps1||

}

sa:

  The → Windows/PowerShell/language/operator/call[call operator (`&`)], especially the section → Windows/PowerShell/language/operator/call#ps-call-op-dynamic-cmd[executing «dynamic» commands]. 

  → Windows/PowerShell/command-inventory/noun/expression
