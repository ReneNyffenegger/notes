$ PowerShell cmdLet: Invoke-Expression
@ invoke-expression

code {
$dir = 'p:\ath\to\dir'
$dir\some-script.ps1  # Unexpected token '\some-script-script.ps1' in expression or statement.

# Works as intended:

invoke-expression $dir\some-script.ps1
code }

{ Executing a string as PowerShell command

 `invoke-expressions` seems to be the equivalent of a statement that in other → development/languages[programming languages] might be called `eval`: it executes the content of a string → Windows/PowerShell/language/variable[variable]
  as → Windows/PowerShell/language/command[PowerShell command].

  The following example creates a string whose content is `write-output (3*14)` and then passes it to `invoke-expression`. Thus, when run, the example prints `42`:
  gh|about-PowerShell|/cmdlets/expression/invoke/eval.ps1||

}
{ Executing the commands in a file

 `invoke-expression` can also be used to execute the commands that are stored in a file (that is: a script).

  The following script uses → Windows/PowerShell/language/variable/automatic/myInvocation#myInvocation-dir-of-script[`split-path $myInvocation.myCommand.path`] to determine the directory where it is located and assigns the value to
  the → Windows/PowerShell/language/variable[variable] `$dir`. It then uses `$dir` to execute a powershell that is located in `$dir` and is named `commands.ps1`. Note, that the → development/filename-extensions[file extension] `.ps1` is not
  required when using the `-command` parameter:

  gh|about-PowerShell|/cmdlets/expression/invoke/source.ps1||

  I am not sure if this construct allows to do something that is not possible just using the → Windows/PowerShell/language/operator/call[call operator (`&`)].

  { Combining with get-content

    Here's a file with a simple expression: 
    gh|about-PowerShell|/cmdlets/expression/invoke/an-expression.txt||

    The content of this file is read using → Windows/PowerShell/command-inventory/noun/content/get[`get-content`] and then piped into `invoke-expression`:
    gh|about-PowerShell|/cmdlets/expression/invoke/get-content.ps1||


    When executed, it prints
code {
The number is: 42
code }

  }

  { Piping the contents of a file into invoke-expression #invoke-expression-pipe

    An expression that is stored in a file can be read with → Windows/PowerShell/command-inventory/noun/content/get[`get-content`] and then → Windows/PowerShell/pipeline[piped] into
   `invoke-expression`:
    gh|about-PowerShell|/cmdlets/expression/invoke/pipe-into/pipeline.ps1||

    The file with the expression:
    gh|about-PowerShell|/cmdlets/expression/invoke/pipe-into/expression.txt||

  }

}
{ Passing a multi-line string

  In order to evaluate an expression that is stored in a multi-line string, the ends of the continued lines need to be escaped twice:
  gh|about-PowerShell|/cmdlets/expression/invoke/multiline.ps1||

}
{ Applying a transformation on each element of an array #invoke-expression-apply-on-elements

 `invoke-expression` is handy to apply a transformation on each element of an → Windows/PowerShell/language/type/array:
  gh|about-PowerShell|/cmdlets/expression/invoke/apply-on-array-elements.ps1||

}

sa:

  The → Windows/PowerShell/language/operator/call[call operator (`&`)], especially the section → Windows/PowerShell/language/operator/call#ps-call-op-dynamic-cmd[executing «dynamic» commands]. 

  Use → Windows/PowerShell/command-inventory/noun/command/invoke[`invoke-command`] to execute a → Windows/PowerShell/language/scriptblock.

  → Windows/PowerShell/command-inventory/noun/expression
