$ PowerShell cmdLet ConvertTo-CSV
@ convertTo-CSV

`ConvertTo-CSV` creates a CSV representation from → Windows/PowerShell/language/object[PowerShell objects]: Each object becomes a row (or record), each member of the object a field (or value) in the record.

The following example uses `→ Windows/PowerShell/command-inventory/noun/process/get` to obtain a list of PowerShell objects each of which represents a process and then
→ Windows/PowerShell/pipeline[pipes] those object into `→ Windows/PowerShell/command-inventory/noun/object/select` to select the objects' properties of interest and then finally pipes the result
to `convertTo-CSV` for a CSV output:
gh|about-PowerShell|/cmdlets/csv/convertTo/processes.ps1||

{ Delimiter

  By default, `convertTo-csv` delimites the fields with a comma. The `-delimiter` option allows to specify a different character.

  Because the semicolon has a special meaning in → Windows/PowerShell, it must be put in quotes or escaped with the backslash:
code {
… | convertTo-csv -delimiter ';'
… | convertTo-csv -delimiter `;
code }

  Similarly, a tabulator can be specified with by escaping `t`:
code {
… | convertTo-csv -delimiter `t
code }

}

sa:

  → Windows/PowerShell/command-inventory/noun/CSV
