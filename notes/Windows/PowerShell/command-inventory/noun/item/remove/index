$ PowerShell cmdLet Remove-Item
@ remove-item

`remove-item` deletes the specified → Windows/PowerShell/command-inventory/noun/item[item].

{ Delete a file if it exists

  If `remove-item` is used to delete a file that does not exist, → Windows/PowerShell answers with a *Cannot find path … because it does not exist* error message.

  In order to suppress this error message, → Windows/PowerShell/command-inventory/noun/path/test[`test-path`] can be used to determine if a file exists. Combined with an → Windows/PowerShell/language/statement/if[`if` statement],
  this results in something like:
code {
if (test-path foo.txt) {
  remove-item foo.txt
}
code }

  Of course, even easier is to ignore the potential error message with the `-errorAction` option:
code {
remove-item foo.txt -errorAction ignore
code }
  
}
{ Delete directories and subdirectories

  In order to delete a directory with its subdirectories, both, the `-recurse` and the `-force` option need to be specified:
code {
remove-item subDir -force -recurse
code }

  Without `-force`, the cmdLet write the error message *Directory … cannot be removed because it is not empty*.

}
{ Deleting multiple items

  When multiple items need to be deleted, their names need to separated by a comma, unlike someone might be used to from the → Windows/dirs/Windows/System32/cmd_exe/commands/del[cmd.exe `del`] or Unix → Linux/shell/commands/rm[`rm`] command.
  This is because `remove-item` expects an → Windows/PowerShell/language/type/array for the `path` parameter.

  The following command deletes the files `foo.txt`, `bar.txt` and `baz.txt`:
code {
PS → Windows/dirs/Users/username[C:\users\rene\]> remove-item foo.txt, bar.txt, baz.txt
code }

  Without commas, the PowerShell interpreter would throw the error message
  → Windows/PowerShell/command-inventory/noun/item/remove/a-positional-parameter-cannot-be-found-that-accepts-argument[A positional parameter cannot be found that accepts argument].

}
{ Option -LiteralPath #remove-item-literalPath

  The option `-literalPath` forces `remove-item` to not interpret → Windows/PowerShell/language/wildcards[wildcards] (such as brackets):
  gh|about-PowerShell|/cmdlets/item/remove/literalPath.ps1||

}
{ Aliases

  → Windows/PowerShell/language/alias[Aliases] for `remove-item` are `erase` and `del`.

}

sa:

  → Windows/PowerShell/command-inventory/noun/item
