$ PowerShell: tab completion

Command-line items that can be tab-completed include
  • → Windows/PowerShell/language/command[command] names
  • command parameter names
  • parameters with the → Windows/PowerShell/language/statement/function/parameters/attributes/validate/Set[`validateSet`] → Windows/PowerShell/language/statement/function/parameters#ps-param-attribute[attribute] and special cmdlets that take values such as → Windows/services[service] names etc.
  • → Windows/PowerShell/language/command/history[command history] (`#textFragment` or `#42`, see also → Windows/PowerShell/command-inventory/noun/history/invoke[`invoke-history`])
  • File/directory names
  • → Windows/PowerShell/language/operator[operators]
  • → Windows/PowerShell/language/variable[variable] names
  • Member names of types (for example `[→ Microsoft/dot-net/namespaces-classes/System/Environment[Environment]]::C<tab>`)
  • Type names (`[xml<tab>`)

`ctrl+space` prints available continuations of the currently entered fragment of a command or parameter.

Microsoft refers to *tab completion* as → https://docs.microsoft.com/en-us/powershell/scripting/learn/using-tab-expansion[tab expansion].


sa:

  An unfortunate design decision of → Windows/PowerShell was to recommend to use → Windows/PowerShell/command-inventory/verb#ps-approved-verb[approved verbs] when naming a → Windows/PowerShell/language/cmdlet: in order to find
  a cmdLet with tab-completion, the tabulator has to be pressed quite a number of times.

  The function `tabExpansion2` which is called from the methods `CompleteInput` of the object
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandCompletion[`System.Management.Automation.CommandCompletion`]

  → Windows/PowerShell/command-inventory/noun/argumentCompleter/register[`register-argumentCompleter`]
