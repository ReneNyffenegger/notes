$ PowerShell module filesystem: get-openFileProcess

On Windows, the function `get-openFileProcess` of the → Windows/PowerShell/modules/personal/filesystem[PowerShell module filesystem] returns an array of
→ Microsoft/dot-net/namespaces-classes/System/Diagnostics/Process[`System.Diagnostic.Process`] that specify the → Windows/development/process[processes] that have a given file opened.

code {
PS:> → Windows/PowerShell/command-inventory/noun/item/remove[rm] .\some.dll
rm : Cannot remove item C:\…\some.dll: Access to the path 'C:\some.dll' is denied.
…
PS:> get-openFileProcess .\itext.io.dll | → Windows/PowerShell/command-inventory/noun/process/stop[stop-process]
PS:> → Windows/PowerShell/command-inventory/noun/item/remove[rm] .\some.dll
… OK …
code }

sa:
  → Windows/dirs/Windows/System32/RstrtMgr_dll[`RstrtMgr.dll`]

  This function was originally copied from → https://github.com/pldmgg/misc-powershell/blob/master/MyFunctions/PowerShellCore_Compatible/Get-FileLockProcess.ps1[Paul DiMaggio's `Get-FileLockProcess` function].

  → https://www.dima.to/blog/?p=220 has some managed and unmanaged code that seems to be able to find the Windows handle of a locked file and the use that handle to close the file.
