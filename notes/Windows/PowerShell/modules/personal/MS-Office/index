$ Powershell module: MS-Office

Functionality related to → Microsoft/Office[Microsoft Office].

{ Functions

  table { ll
    `get-msOfficeVersion` ☰ Returns the «abbreviated» → Microsoft/Office/versions[Office version number], for example `16`
    → Windows/PowerShell/modules/personal/MS-Office/enable-msOfficeDeveloperTab[`enable-msOfficeDeveloperTab`] ☰ Enable the → Microsoft/Office/GUI/Ribbon/tabs/Developer[Developer tab] on the Ribbon.
    → #ps-mod-ms-office-get-msOfficeComObject[`get-msOfficeComObject`] ☰ Gets a → Windows/development/COM/object for automation of an → Microsoft/Office application
    `→ Windows/PowerShell/modules/personal/MS-Office/grant-msOfficeVBAAccess` ☰ Grants access to the VBA object model by setting `AccessVBOM` to 1 under a certain registry key.
    → Windows/PowerShell/modules/personal/MS-Office/get-msOfficeInstallationRoot[`get-msOfficeInstallationRoot`] ☰ Returns the directory name (→ Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN[installation root]) under which Office is installed. (see also → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN[this link])
  table }

}

{ get-msOfficeComObject #ps-mod-ms-office-get-msOfficeComObject

 `get-msOfficeComObject` gets the `application` object of an Office product and allows to use the
  Object Model's COM interface:
code {
$xls = get-msOfficeComObject excel
$xls.→ Microsoft/Office/Excel/Object-Model/Workbooks[workbooks].add(…)
code }

 `get-msOfficeComObject` calls → Windows/PowerShell/modules/personal/COM#ps-mod-com-get-activeObject[`get-activeObject`] (of the → Windows/PowerShell/modules/personal/COM[`COM`] PowerShell module) to get
  a → Windows/development/COM/object[COM object] of the desired (running) office application. If the application is not running, a new
  object is created using → Windows/PowerShell/command-inventory/noun/object/new/COM[`new-object -com …`].

  The Office application is made visible unless the parameter `makeVisible` is set to `false`.

  TODO: Can this function be combined with Excel's → Microsoft/Office/Excel/Object-Model/Application/activateMicrosoftApp[`application.activateMicrosoftApp`] somehow?

}
{ Source code

  { MS-Office.psm1

    gh|ps-modules-MS-Office|/MS-Office.psm1||

  }
  { MS-Office.psd1

    gh|ps-modules-MS-Office|/MS-Office.psd1||

  }
}
{ History

  table { ll
    V.2 ☰ Add `get-msOfficeComObject`
    V.3 ☰ Add `get-msOfficeInstallationRoot`
    V.4 ☰ Add `-off` option to `enable-msOfficeDeveloperTab`.
    V.6 ☰ Add `get-msOfficeRegRoot` in → Windows/PowerShell/language/module/files/manifest[manifest].
    V.7 ☰ If `app\Options` registry key does not exist when calling `enable-msOfficeDeveloperTab`, it is created.
    V.8 ☰ Check parameter in `get-msOfficeComObject`
    V.9 ☰ Add parameter `makeVisible` in `get-msOfficeComObject
  table }

}

sa:

  → Windows/PowerShell/modules/personal
