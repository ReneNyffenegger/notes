$ Powershell: Pipelines
@ pipeline

Contrary to other → Linux/shell[shells], PowerShell pipes → Windows/PowerShell/language/object[objects] rather than text from one → Windows/PowerShell/command-inventory/noun/command[command] to another.

{ The power of pipelines

  The power of pipelines can best be demonstrated with a simple example:
code {
PS:\> → Windows/PowerShell/command-inventory/noun/service/get[get-service] | → Windows/PowerShell/command-inventory/noun/object/where[where-object] displayName → Windows/PowerShell/language/operator/comparison/match_notmatch[-match] '^SQL Server' | → Windows/PowerShell/command-inventory/noun/service/set[set-service] -startupType manual
code }

  The first cmdLet (`get-service`) produces a set (actually an → Windows/PowerShell/language/type/array[array]) of objects that each represents a
  → Windows/services[Windows service]. (Technically, the objects in the array have the → Microsoft/dot-net type → Microsoft/dot-net/namespaces-classes/System/ServiceProcess/ServiceController[`System.ServiceProcess.ServiceController`]).

  The `|` symbol indicates that these objects should be passed (aka piped) to the next cmdLet, rather than printed to the screen.

  The next cmdLet is `where-object`. It applies a required condition to the objects it receives, in our case, that the value of `displayName` (which is a member
  of the `ServiceController` object) matches the → development/regular-expressions[regular expression] `^SQL Server`.
  -
  Object that satisfy this condition are (most probably) services that are related to → development/databases/SQL-Server.
  -
  The cmdLet discards objects that do not satisfy this condition.

  Because there is yet another `|` symbol in the pipeline, PowerShell pipes the remaining object to the next cmdLet, `set-service`, to change the services'
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Services/_driver_name_#reg-services-start[startup type] to *manual*.

  Such pipelines are powerful because they allow to work on a set of objects (such as services) simultaneously. Thus, they reduce human error and save time because tasks are automatable.

}
{ Referring to objects in a pipeline

  A step in a pipeline can explicitely refer to the object it has received from its precedent step using the → Windows/PowerShell/language/variable/automatic[automatic] variable
  → Windows/PowerShell/language/variable/automatic/psItem[`$psItem`] for which `$_` is an alias:
code {
→ Windows/PowerShell/command-inventory/noun/childItem/get[get-childItem] -attr !d | → Windows/PowerShell/command-inventory/noun/object/forEach[forEach-object] { "Size of file $($_.Name) is $($_.Length)"}
code }

}
{ Last cmdlet

  PowerShell automatically pipes the objects of the last cmdLet of a pipeline into the → Windows/PowerShell/command-inventory/noun/default/out[`out-default` cmdlet].

 `out-default` will render the → Windows/PowerShell/language/object[objects] it receives according their *format definitions*.
  -
  By default, `out-default` invokes `out-host` for a stream of strings.

}
{ Pipeline parameter binding

  A (non-beginning) command within a pipeline needs to know which *parameter* will get the object from the previous command.
  -
  This is determined in a process called *pipeline parameter binding*.

  There are two means:
    • *ByValue*
    • *ByPropertyName*
    
}
{ Removing objects from the pipeline

  → Windows/PowerShell/command-inventory/noun/object/where[`where-object` cmdLet] allows to specify a condition that determines which objects are kept in the pipeline.

  Object that don't satisfy the specified conditions are discarded from the pipeline, that is, they are not passed to the next
  → Windows/PowerShell/language/cmdlet[cmdLet] in the pipeline.

}
{ Grep strings in the output of another string

  See → Windows/PowerShell/command-inventory/noun/string/out#out-string_stream[`out-string -stream`]

}
{ One at a time vs All objects at once

  { All object at once

    `get-process` returns an → Windows/PowerShell/language/type/array[array] of objects. Thus, the following statement prints the members of an array:
code {
PS C:\> get-member -inputObject (get-process)

   TypeName: System.Diagnostics.Process
   …
code }

  }
  { One object at a time

    However, when the result of `get-process` is piped into another command, the command receives one object at a time. Thus, `get-member` in the following pipeline
    prints the members of a *System.Diagnostic.Process*, which is the type of the objects returned by `get-process`.

    Because `get-member` eliminates duplicates, we only see each member only once.

code {
PS C:\> get-member -inputObject (get-process)

   TypeName: System.Object[]
   …
code }

  }
}
{ Multiple pipelines

  Technically, → Windows/PowerShell has mutliple pipelines:
    • (normal) output (mimicking → development/stdin-stdout-stderr[STDOUT])
    • errors (mimicking *STDERR*)
    • verbose command messages
    • debugging information

}
{ Output of functions is written to pipelines

  All output of → Windows/PowerShell/language/function[functions] is written to the pipeline.

  This is fundamentally different from → Windows/PowerShell/language/class/method[class methods] whose output is not written to the pipeline. In order to write a value to the pipeline from a class
  method, the → Windows/PowerShell/language/statement/return[`return`] statement is required.

}
{ Experimental features

  PowerShell Core uses → Windows/PowerShell/command-inventory/noun/experimentalFeature[experimental features] to play with the possibility to chain pipeline invocations with
  the → Windows/PowerShell/language/operator/pipeline-chain[pipeline chain operators `&&` and `||`].

  This featues can be enabled with
code {
PS C:\> enable-→ Windows/PowerShell/command-inventory/noun/experimentalFeature[experimentalFeature] PSPipelineChainOperators
code }

}
{ Error message: An empty pipe element is not allowed

  The following simple pipeline will cause an *An empty pipe element is not allowed* error message:
code {
foreach ($i in 1 .. 10) {
   "line $i"
}  |  foreach-object {$_}
code }

  This is because some → Windows/PowerShell/language/statement[PowerShell statements] cannot be used to pass → Windows/PowerShell/language/object[objects] down a pipeline:
    • `if … else`
    • `do … while`
    • `foreach`
    • `switch`
    • `while`
  
  If such statements are put into a `& { … }` block, their output *can* be piped further down the pipeline:
code {
& {
  foreach ($i in 1 .. 10) {
     "line $i"
  }
} | foreach-object {$_}
code }

}

sa:
  The `$_` → Windows/PowerShell/language/variable/automatic[automatic variable].

  → Windows/PowerShell/language/object/console-display[Formatting the output] of a pipeline

  Within a pipeline, a → Windows/PowerShell/language/scriptblock can be executed for each element in the pipeline with the → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object` cmdLet].

  If a function participates in a pipeline, the function can use the → Windows/PowerShell/language/variable/automatic[`$input` automatic variable] to refer to the
  → Windows/PowerShell/language/object that is being proessed in a → Windows/PowerShell/language/function/begin-process-end-block[`process` block].

  The functionality of a pipeline ssems to be encapsulated in the → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Runspaces/Pipeline[`System.Management.Automation.Runspaces.Pipeline`].

  The `[parameter(→ Windows/PowerShell/language/statement/function/parameters/attributes/parameter/valueFromPipeline[valueFromPipeline]=$true)]` and
  `[parameter(→ Windows/PowerShell/language/statement/function/parameters/attributes/parameter/valueFromPipelineByPropertyName[valueFromPipelineByPropertyName]=$true)]`
  → Windows/PowerShell/language/statement/function/parameters/attributes[parameter attributes].

  The time it takes to finish a pipeline can be measued with the → Windows/PowerShell/command-inventory/noun/command/measure[`measure-command` cmdlet]

  The → Windows/PowerShell/command-inventory/noun/output/write[`write-output` cmdlet] can be used to explicitely pass one or more → Windows/PowerShell/language/object[objects] down to the
  next command in the primary pipeline.

  A → Windows/PowerShell/language/error-handling#ps-error-types[terminating error] immediately terminates the execution of the current pipeline.
