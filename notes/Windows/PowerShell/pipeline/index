$ Powershell: pipelines
@ pipeline

Contrary to other → Linux/shell[shells], PowerShell pipes → Windows/PowerShell/language/object[objects] rather than text from one → Windows/PowerShell/command-inventory/noun/command[command] to another.

{ The power of pipelines

  The power of pipelines can best be demonstrated with a simple example:
code {
PS:\> → Windows/PowerShell/command-inventory/noun/service/get[get-service] | → Windows/PowerShell/command-inventory/noun/object/where[where-object] displayName → Windows/PowerShell/language/operator/comparison/match_notmatch[-match] '^SQL Server' | → Windows/PowerShell/command-inventory/noun/service/set[set-service] -startupType manual
code }

  The first cmdLet (`get-service`) produces a set (actually an → Windows/PowerShell/language/type/array[array]) of objects that each represents a
  → Windows/services[Windows service]. (Technically, the objects in the array have the → Microsoft/dot-net type → Microsoft/dot-net/namespaces-classes/System/ServiceProcess/ServiceController[`System.ServiceProcess.ServiceController`]).

  The `|` symbol indicates that these objects should be passed (aka piped) to the next cmdLet, rather than printed to the screen.

  The next cmdLet is `where-object`. It applies a required condition to the objects it receives, in our case, that the value of `displayName` matches the → development/regular-expressions[regular expression] `^SQL Server`. Object that satisfy this
  condition are (most probably) services that are related to → development/databases/SQL-Server. The cmdLet only passes the objects with the satisfied condition on.
  -
 `displayName` is a member of the `ServiceController` object.

  Because there is yet another `|` symbol in the pipeline, PowerShell pipes the remaining object to the next cmdLet, `set-service`, to change the services'
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Services/_driver_name_#reg-services-start[startup type] to *manual*.

  Such pipelines are powerful because they allow to work on a set of objects (such as services) simultanously. Thus, they reduce human error and safe time because tasks are automatable.

}
{ Pipeline parameter binding

  A (non-beginning) command within a pipeline needs to know which *parameter* will get the object from the previous command.
  -
  This is determined in a process called *pipeline parameter binding*.

  There are two means:
    • *ByValue*
    • *ByPropertyName*
    
}
{ Last cmdlet

  PowerShell automatically pipes the last command of a pipeline into the → Windows/PowerShell/command-inventory/noun/default/out[`out-default` cmdlet].

  By default, `out-default` invokes `out-host` for a stream of strings.

}
{ Removing objects from the pipeline

  → Windows/PowerShell/command-inventory/noun/object/where[`where-object` cmdLet] allows to specify a condition that determines which objects are kept in the pipeline.

  Object that don't satisfy the specified conditions are discarded from the pipeline, that is, they are not passed to the next
  → Windows/PowerShell/language/cmdlet[cmdLet] in the pipeline.

}

{ One at a time vs All objects at once

  { All object at once

    `get-process` returns an → Windows/PowerShell/language/type/array[array] of objects. Thus, the following statement prints the members of an array:
code {
PS C:\> get-member -inputObject (get-process)

   TypeName: System.Diagnostics.Process
   …
code }

  }
  { One object at a time

    However, when the result of `get-process` is piped into another command, the command receives one object at a time. Thus, `get-member` in the following pipeline
    prints the members of a *System.Diagnostic.Process*, which is the type of the objects returned by `get-process`.

    Because `get-member` eliminates duplicates, we only see each member only once.

code {
PS C:\> get-member -inputObject (get-process)

   TypeName: System.Object[]
   …
code }

  }
}

{ Multiple pipelines

  Technically, → Windows/PowerShell has mutliple pipelines:
    • (normal) output (mimicking → development/stdin-stdout-stderr[STDOUT])
    • errors (mimicking *STDERR*)
    • verbose command messages
    • debugging information

}
{ Experimental features

  PowerShell Core uses → Windows/PowerShell/command-inventory/noun/experimentalFeature[experimental features] to play with the possibility to chain pipeline invocations with `&&` and `||`.

  This featues can be enabled with
code {
PS C:\> enable-→ Windows/PowerShell/command-inventory/noun/experimentalFeature[experimentalFeature] PSPipelineChainOperators
code }

}

sa:
  The `$_` → Windows/PowerShell/language/variable/automatic[automatic variable].

  → Windows/PowerShell/pipeline/formatting[Formatting the output] of a pipeline

  Within a pipeline, a → Windows/PowerShell/language/scriptblock can be executed for each element in the pipeline with the → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object` cmdLet].

  If a function participates in a pipeline, the function can use the → Windows/PowerShell/language/variable/automatic[`$input` automatic variable] to refer to the
  → Windows/PowerShell/language/object that is being proessed in a → Windows/PowerShell/language/function/begin-process-end-block[`process` block].

  The functionality of a pipeline ssems to be encapsulated in the → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Runspaces/Pipeline[`System.Management.Automation.Runspaces.Pipeline`].
