$ Powershell: pipelines

Contrary to other → Linux/shell[shells], PowerShell pipes *objects* rather than text from one command to another.

{ Pipeline parameter binding

  A (non-beginning) command within a pipeline needs to know which *parameter* will get the object from the previous command.
  -
  This is determined in a process called *pipeline parameter binding*.

  There are two means:
    • *ByValue*
    • *ByPropertyName*
    
}
{ Last cmdlet

  PowerShell automatically pipes the last command of a pipeline into the `out-default` cmdlet.

  By default, `out-default` invokes `out-host`.

}
{ Filtering objects

  The → Windows/PowerShell/language/cmdlet[cmdlet] to *filter (remove) objects* from a pipeline is `where-object`.

}

{ One at a time vs All objects at once


  { All object at once

    `get-process` returns an → Windows/PowerShell/language/type/array[array] of objects. Thus, the following statement prints the members of an array:
code {
PS C:\> get-member -inputObject (get-process)

   TypeName: System.Diagnostics.Process
   …
code }

  }
  { One object at a time

    However, when the result of `get-process` is piped into another command, the command receives one object at a time. Thus, `get-member` in the following pipeline
    prints the members of a *System.Diagnostic.Process*, which is the type of the objects returned by `get-process`.

    Because `get-member` eliminates duplicates, we only see each member only once.

code {
PS C:\> get-member -inputObject (get-process)

   TypeName: System.Object[]
   …
code }

  }
}

{ Multiple pipelines

  Technically, → Windows/PowerShell has mutliple pipelines:
    • (normal) output (mimicking *STDOUT*)
    • errors (mimicking *STDERR*)
    • verbose command messages
    • debugging information

}

sa:
  The `$_` → Windows/PowerShell/language/variable/automatic[automatic variable].

  → Windows/PowerShell/pipeline/formatting[Formatting the output] of a pipeline
