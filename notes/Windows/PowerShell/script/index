$ PowerShell: script

{ Parameters

  { Unnamed

code {
→ Windows/PowerShell/command-inventory/noun/strictMode/set[set-strictMode] -version latest

$first_argument  = $args[0]
$second_argument = $args[1]
…
code }

  }
  { Named arguments

code {
→ Windows/PowerShell/language/statement/function/parameters#ps-parameters-param-stmt[param] (
  $username,
  $password
)

→ Windows/PowerShell/command-inventory/noun/strictMode/set[set-strictMode] -version latest

…
code }

  Using *named* arguments has the benefit that the script user can invoke the script with explicitely named argument names:
code {
.\the-script.ps1 -username rene -password theMostSecretSecret
code }

  Note: the → Windows/PowerShell/command-inventory/noun/strictMode/set[`set-strictMode`] must follow the `param` statement, otherwise, PowerShell will complain with the error message
  *param : The term 'param' is not recognized as the name of a cmdlet, function, script file, or operable program.…*.

  }

}
{ Determining name and location of a script

  The → Windows/PowerShell/language/variable/automatic/myInvocation#myInvocation-name-of-script[name] and
  → Windows/PowerShell/language/variable/automatic/myInvocation#myInvocation-dir-of-script[location] (directory) of a script can be determined within the script with the automatic variable
  → Windows/PowerShell/language/variable/automatic/myInvocation[`$myInvocation`].

}

sa:
  → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[`powershell.exe`] can be invoked with the → Windows/PowerShell#ps-cmd-line-opts[`-f` (or `--file`) command line option] to specify a script to be executed by the interpreter.
