$ PowerShell: script

{ Parameters

  { Unnamed

code {
→ Windows/PowerShell/command-inventory/noun/strictMode/set[set-strictMode] -version latest

$first_argument  = $args[0]
$second_argument = $args[1]
…
code }

  }
  { Named arguments

code {
→ Windows/PowerShell/language/statement/function/parameters#ps-parameters-param-stmt[param] (
  $username,
  $password
)

→ Windows/PowerShell/command-inventory/noun/strictMode/set[set-strictMode] -version latest

…
code }

  Using *named* arguments has the benefit that the script user can invoke the script with explicitely named argument names:
code {
.\the-script.ps1 -username rene -password theMostSecretSecret
code }

  Note: the → Windows/PowerShell/command-inventory/noun/strictMode/set[`set-strictMode`] must follow the `param` statement, otherwise, PowerShell will complain with the error message
  *param : The term 'param' is not recognized as the name of a cmdlet, function, script file, or operable program.…*.

  }

}
{ Statements and keywords at the top of a script #ps-script-top

  If a script contains → Windows/PowerShell/language/statement/using[`using`] statements, they need to be at the beginning of the script.

  If the script also contains a → Windows/PowerShell/language/statement/function/parameters#ps-parameters-param-stmt[`param`] keyword (that defines the script's → Windows/PowerShell/language/statement/function/parameters[parameters]),
  it must be after the `using` statements (if any) and before the rest of the script.

  Only after the `using` and `param` statements/keywords can the script have a → Windows/PowerShell/command-inventory/noun/strictMode/set[`set-strictMode`] cmdLet.

}
{ Abort a script when it encounters an unrecognized term #ps-script-abort-unrecognized-term

  The following script contains a typo: `elsif` instead of → Windows/PowerShell/language/statement/if[`elseif`].

  gh|about-PowerShell|/script/abort-on-unrecognized-term.ps1||

  When the interpreter encounters the corresponding line, it does not recognize `elsif` and consequently emits the error message
 *The term 'elsif' is not recognized as a name of a cmdlet, function, script file, or executable program …*

  This error is considered → Windows/PowerShell/language/error-handling/index#ps-error-types[non-terminating]. Therefore, without setting 
  the → Windows/PowerShell/language/variable/preference[preference variable `$errorActionPreference`] to stop, the script continues with its execution
  which causes this message to be printed ten times.

  In order to abort a script when it encounters an unrecognized term, `$errorActionPreference` must be set to `stop`.

}
{ Determining name and location of a script

  The → Windows/PowerShell/language/variable/automatic/myInvocation#myInvocation-name-of-script[name] and
  → Windows/PowerShell/language/variable/automatic/myInvocation#myInvocation-dir-of-script[location] (directory) of a script can be determined within the script with the automatic variable
  → Windows/PowerShell/language/variable/automatic/myInvocation[`$myInvocation`].

}

sa:
  → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[`powershell.exe`] can be invoked with the → Windows/PowerShell#ps-cmd-line-opts[`-f` (or `--file`) command line option] to specify a script to be executed by the interpreter.

  A special form of a script, targeted at its reusability, is a → Windows/PowerShell/language/module.
