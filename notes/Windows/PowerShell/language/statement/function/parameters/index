$ PowerShell: function and script parameters

In PowerShell, the declaration of parameters is similar in functions and in PowerShell scripts. A central role when declaring parameters is held by
  • → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/args[`$args`]
  • The `param` statement

This page tries to demonstrate some usages of `$args` and the `param` statement.

{ Not explicitly named parameters #ps-param-args

  It's possible to define a → Windows/PowerShell/language/statement/function[function] that does not explicitly name its parameters. The values of the parameters can
  then be accessed within the function using the → Windows/PowerShell/language/variable/automatic/args[`$args`] array.

  This is similar to the → development/languages/Perl/variables/at__parameters_passed_to_a_sub[`@_`] variable that stores the values that are passed to a  → development/languages/Perl[Perl] `sub`.

  gh|about-powershell|/language/statement/function/parameters/args.ps1||

}
{ Named parameters

  The parameters can be given a name so as to make life easier for the programmer.

  gh|about-powershell|/language/statement/function/parameters/named.ps1||

}
{ Constrained types #ps-param-constrained-type

  The → Windows/PowerShell/language/type[types] of the parameters can be constrained to make sure that the function gets what it expects.

  gh|about-powershell|/language/statement/function/parameters/typed.ps1||

}
{ The param statement #ps-parameters-param-stmt

  The parameters can be listed more explicitly in a `param` statement:

  gh|about-powershell|/language/statement/function/parameters/param.ps1||

  With the exception of a `using` statement and comments (including `#require`), the → https://stackoverflow.com/a/60696789/180275[`param(…)` block must be the first statement in a script or function] in order to work (as I found
  out the hard way when → https://stackoverflow.com/questions/60692362[got an error message] when I used → Windows/PowerShell/command-inventory/noun/strictMode/set[`set-strictMode`] *before* `param` in a script.

  { Parameter attributes #ps-param-attribute

    A special feature of the `param` statement is that it allows to «annotate» a parameter with attributes. These attributes are enclosed within brackets:
code {
param (
    [parameter(mandatory=$true)]
    [string[]                  ]
    [validateCount(2,9)        ]
    $someParameter
  ,
    [ … ]
    $anotherParameter ..
)
code }

    The list of available attributes includes
      • `parameter(…)` (for example `parameter(mandatory=$true)`)
      • `alias('xyz')`
      • `allowNull()`
      • `allowEmptyString()`
      • `allowEmptyCollection()`
      • `validateCount(minElemCnt, maxElemCnt)`
      • `validateDrive('env')`
      • `validateLength(minStringLen, maxStringLen)`
      • `validatePattern(regExp)`
      • `validateRange(valMin, valMax)`
      • `validateScript( { statement(s) } )`
      • `validateSet( 'foo', 'bar', 'baz' )`
      • `validateNotNull()`
      • `validateNotNullOrEmpty()`

    An interesting feature of annotating a parameter with `validateSet` is that it allows to «cycle through» the listed values with the tabulator (→ Windows/PowerShell/tab-completion[tab-completion]) when entering the respective parameter.
  }

}
{ Shift parameters #ps-parameters-shift

  Powershell does not have a `shift` → Windows/PowerShell/language/statement like other → Linux/shell[shells].

  However it's possible to shift an → Windows/PowerShell/language/type/array with `→ Windows/PowerShell/language/variable/automatic/null, $ary = $ary` or `$x, $ary = $ary`, where `$ary` is an array).

  Here's a demonstration of such a «shift»
  gh|about-powershell|/language/statement/function/parameters/shift.ps1||

  See also → Windows/PowerShell/language/type/array/index#ps-assign-array-to-array[assigning an array to an array].

}
{ Let PowerShell describe a function's parameters #ps-param-desc

 `→ Windows/PowerShell/command-inventory/noun/command/get[get-command] cmdName` returns a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/FunctionInfo[`System.Management.Automation.FunctionInfo`] object whose
  member `Parameters` is a collection of → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ParameterMetadata[`System.Management.Automation.ParameterMetadata`] objects which describe the parameters of
  a → Windows/PowerShell/language/command, such as the function `mkdir`. The following example prints each parameter's name, abbreviation and data type:
  gh|about-PowerShell|/language/function/parameter/info.ps1||


  Alternatively, a «real» → Windows/PowerShell/pipeline can be uses to get more or less the same information:
code {
PS C:\> (→ Windows/PowerShell/command-inventory/noun/command/get[get-command] mkdir).parameters.values | → Windows/PowerShell/command-inventory/noun/object/select[select-object] name, parameterType, switchParameter, aliases
code }

  See also → Windows/PowerShell/command-inventory/noun/command/get#get-command-query-meta-info

}
{ Script parameters

  The following PowerShell script uses the same technique to declare parameters as in scripts:
  gh|about-powershell|/language/statement/function/parameters/script.ps1||

  The following examples are all valid invocations of the script.
code {
.\script.ps1     abc
.\script.ps1     def      91 
.\script.ps1     ghi      37 -flag
.\script.ps1     jkl      19 -f
.\script.ps1 -tx mno      28
.\script.ps1 -tx pqr -opt 48
…
code }

  The script cannot be invoked like so:
code {
.\script
.\script abc def
.\script ghi  99 $true
.\script -foo bar
…
code }
}

{ TODO

  Should this page be merged with → Windows/PowerShell/language/function/parameter?

}

sa:

  → Windows/PowerShell/language/function/parameter/splatting[Parameter splatting]

  The → Windows/PowerShell/language/statement/function[function statement]
