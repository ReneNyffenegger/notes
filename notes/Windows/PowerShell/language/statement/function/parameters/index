$l PowerShell: function and script parameters

In PowerShell, the declaration of parameters is similar in functions and in PowerShell → Windows/PowerShell/script[scripts]. A central role when declaring parameters is held by
  • → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/args[`$args`]
  • The `param` statement

This page tries to demonstrate some usages of `$args` and the `param` statement.

{ Not explicitly named parameters #ps-param-args

  It's possible to define a → Windows/PowerShell/language/statement/function[function] that does not explicitly name its parameters. The values of the parameters can
  then be accessed within the function using the → Windows/PowerShell/language/variable/automatic/args[`$args`] array.

  This is similar to the → development/languages/Perl/variables/at__parameters_passed_to_a_sub[`@_`] variable that stores the values that are passed to a  → development/languages/Perl[Perl] `sub`.

  gh|about-powershell|/language/statement/function/parameters/args.ps1||

}
{ Named parameters

  The parameters can be given a name so as to make life easier for the programmer.

  gh|about-powershell|/language/statement/function/parameters/named.ps1||

}
{ Constrained types #ps-param-constrained-type

  The → Windows/PowerShell/language/type[types] of the parameters can be constrained to make sure that the function gets what it expects.

  gh|about-powershell|/language/statement/function/parameters/typed.ps1||

}
{ The param keyword #ps-parameters-param-stmt

  The parameters can be listed more explicitly within a `param` block:
  gh|about-powershell|/language/statement/function/parameters/param.ps1||

  With the exception of a → Windows/PowerShell/language/statement/using[`using` statement] and comments (including `#require`), the → https://stackoverflow.com/a/60696789/180275[`param(…)` block must be the first statement in a script or function] in order to work (as I found
  out the hard way when → https://stackoverflow.com/questions/60692362[I got an error message] when I used → Windows/PowerShell/command-inventory/noun/strictMode/set[`set-strictMode`] *before* `param` in a script).

  A `param` block is not permitted in → Windows/PowerShell/language/class/method[class methods].

  { Parameter attributes #ps-param-attribute

    A special feature of the `param` statement is that it allows to «annotate» a parameter with → Windows/PowerShell/language/statement/function/parameters/attributes[attributes]. These attributes are enclosed within brackets:
code {
param (
    [parameter(mandatory=$true)]
    [string[]                  ]
    [validateCount(2,9)        ]
    $someParameter
  ,
    [ … ]
    $anotherParameter ..
)
code }

    The list of available attributes includes
    table { ll
      `→ Windows/PowerShell/language/statement/function/parameters/attributes#ps-param-attr-parameter[parameter](…)` ☰ for example `parameter(mandatory=$true)`
      `→ Windows/PowerShell/language/statement/function/parameters/attributes/alias[alias]('xyz')` ☰
      `allowNull()` ☰
      `allowEmptyString()` ☰
      `allowEmptyCollection()` ☰
      `→ Windows/PowerShell/language/statement/function/parameters/attributes#ps-param-attr-supportsWildcards[supportsWildcards]()` ☰ → Windows/PowerShell/language/wildcards[wildcards]
      `validateCount(minElemCnt, maxElemCnt)` ☰
      `validateDrive('env')` ☰
      `validateLength(minStringLen, maxStringLen)` ☰
      `validatePattern(regExp)` ☰ → development/regular-expressions[regular expressions]
      `validateRange(valMin, valMax)` ☰ (numerical?) value must be in given range
      `→ Windows/PowerShell/language/statement/function/parameters/attributes/validate/Script[validateScript]( { statement(s) } )` ☰
      `validateSet( 'foo', 'bar', 'baz' )` ☰ Value must be one of the explicitely given elements in the list
      `validateNotNull()` ☰ Value must not be → Windows/PowerShell/language/variable/automatic/null[`$null`]
      `validateNotNullOrEmpty()` ☰
    table }

    The names of these atttributes are → Windows/PowerShell/language/object/type/accelerators[type accelerators].

    An interesting benefit of annotating a parameter with `validateSet` is that it allows to «cycle through» the listed values with the tabulator (→ Windows/PowerShell/tab-completion[tab-completion]) when entering the respective parameter.

  }

}
{ Default values

  A parameter can be declared with a *default value* which is used if the parameter is not explicitely given a value when the function is invoked:
  gh|about-powershell|/language/function/parameter/default-value.ps1||

}
{ Shift parameters #ps-parameters-shift

  Powershell does not have a `shift` → Windows/PowerShell/language/statement like other → Linux/shell[shells].

  However it's possible to shift an → Windows/PowerShell/language/type/array (`$ary`) with
    • `→ Windows/PowerShell/language/variable/automatic/null, $ary = $ary` or
    • `$x, $ary = $ary`

  Here's a demonstration of such a «shift»
  gh|about-powershell|/language/statement/function/parameters/shift.ps1||

  See also → Windows/PowerShell/language/type/array/index#ps-assign-array-to-array[assigning an array to an array].

}
{ Turn a function into a cmdlet


  `param()` can be prefixed with `[cmdletBinding()`] which causes the corresponding function to turn into a → Windows/PowerShell/language/cmdlet, thus adding
  → Windows/PowerShell/language/cmdlet#cmdlet-common-parameter[common parameters] (such as `-verbose` or `-errorAction`]) automatically to the function/cmdlet:
code {
function i-am-a-cmdlet {
   [cmdletBinding()]
    param (
      [string] $text
    )
  
   → Windows/PowerShell/command-inventory/noun/host/write[write-host]     $text
   → Windows/PowerShell/command-inventory/noun/verbose/write[write-verbose] "hello, I am a cmdlet"
    
}
code }

  This function/cmdlet can now be invoked with common parameters, for example like so:
code {
i-am-a-cmdlet -verbose
code }


}
{ Let PowerShell describe a function's parameters #ps-param-desc

 `→ Windows/PowerShell/command-inventory/noun/command/get[get-command] cmdName` returns a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/FunctionInfo[`System.Management.Automation.FunctionInfo`] object whose
  member `Parameters` is a collection of → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ParameterMetadata[`System.Management.Automation.ParameterMetadata`] objects which describe the parameters of
  a → Windows/PowerShell/language/command, such as the function `mkdir`. The following example prints each parameter's name, abbreviation and data type:
  gh|about-PowerShell|/language/function/parameter/info.ps1||

  Alternatively, a «real» → Windows/PowerShell/pipeline can be uses to get more or less the same information:
code {
PS C:\> (→ Windows/PowerShell/command-inventory/noun/command/get[get-command] mkdir).parameters.values | → Windows/PowerShell/command-inventory/noun/object/select[select-object] name, parameterType, switchParameter, aliases
code }

  See also → Windows/PowerShell/command-inventory/noun/command/get#get-command-query-meta-info

}
{ Script parameters

  The following PowerShell script uses the same technique to declare parameters as in scripts:
  gh|about-powershell|/language/statement/function/parameters/script.ps1||

  The following examples are all valid invocations of the script.
code {
.\script.ps1     abc
.\script.ps1     def      91 
.\script.ps1     ghi      37 -flag
.\script.ps1     jkl      19 -f
.\script.ps1 -tx mno      28
.\script.ps1 -tx pqr -opt 48
…
code }

  The script cannot be invoked like so:
code {
.\script
.\script abc def
.\script ghi  99 $true
.\script -foo bar
…
code }
}
{ Parameter sets

  Each parameter set must have at least one parameter that is not a member of any other parameter set.

}

{ TODO

  Should this page be merged with → Windows/PowerShell/language/function/parameter?

}

sa:

  Passing parameters → Windows/PowerShell/language/statement/function/parameters/pass-by-reference[by reference].

  → Windows/PowerShell/language/function/parameter/splatting[Parameter splatting]

  The → Windows/PowerShell/language/statement/function[function statement]

  → Windows/PowerShell/language/statement/function/parameters/switch[Switch parameters]
