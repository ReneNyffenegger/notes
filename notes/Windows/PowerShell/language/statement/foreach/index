$ PowerShell: foreach statement

{ Iterating over an array

 `foreach` can be used to iterate over an → Windows/PowerShell/language/type/array[array]:

  gh|about-powershell|/language/statement/foreach/array.ps1||

}
{ Skipping specific elements in an iteration #ps-foreach-continue

  The → Windows/PowerShell/language/statement/continue[`continue`] statement allows to skip specific iterations:
  gh|about-powershell|/language/statement/foreach/continue.ps1||

}
{ Breaking out of a foreach loop

  The  → Windows/PowerShell/language/statement/break[`break` statement] causes the `foreach` loop to be immediately terminated.

  The following example only prints the square numbers from 1 through 4.

  gh|about-powershell|/language/statement/foreach/break.ps1||

}
{ Iterating over files in a directory #ps-foreach-get-childItem

  Because → Windows/PowerShell/command-inventory/noun/childItem/get[`get-childItem`] retuns an array of objects, it can be easily combined with `foreach` to iterate over
  some files in a directory:
  gh|about-powershell|/language/statement/foreach/get-childItem.ps1||

  In a similar fashion, `foreach` can be used on any → Windows/PowerShell/language/cmdlet[cmdLet] that returns an array of objects.

}

sa:

  The → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object`] → Windows/PowerShell/language/cmdlet[cmdlet] can also be 
  → Windows/PowerShell/command-inventory/noun/object/forEach#forEach-object-abbr[abbreviated with `foreach`].

  The → Windows/PowerShell/language/statement/break[`break` statement] exits a loop.

  → Windows/PowerShell/language/statement[Others statements]
