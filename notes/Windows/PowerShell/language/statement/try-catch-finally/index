$ PowerShell: try … catch … finally statements

In a `try` … `catch` statement sequence, → Windows/PowerShell tries to execute the → Windows/PowerShell/language/statement[statements] of the `try` block.
If an exception is thrown (`throw` statement), the execution of the statements in the
`try` block is left (for good) and the statements in the `catch` block are executed.

In a `catch` block, the → Microsoft/dot-net/namespaces-classes/System/Exception[exception object] that describes the error condition can be queried through the
→ Windows/PowerShell/language/variable/automatic/psItem[automatic variable `$_` (`$psItem`)].

An optional `finally` block may follow the `catch` block. It contains the statements that need to be executed regardless of an exception was thrown in the `try` block. Usually, the `finally` block is used for
cleaning up resources that might have been allocated in the `catch` block.

gh|about-Powershell|/language/statement/try-catch-finally/simple.ps1||

{ Catch a specfic type

  If a → Windows/PowerShell/language/class (such as `ExOne` in the following example) is derived from
  → Microsoft/dot-net/namespaces-classes/System/Exception[`System.Exception`]), an object of that type can be specifically caught in the `catch` handler (`catch [ExOne]`).

  Because `ExTwo` does not derive from `System.Exception`, it is not possible to specifically catch this type.

  gh|about-Powershell|/language/statement/try-catch-finally/catch-type.ps1||

}

sa:

  In a `catch` block, the → Windows/PowerShell/language/variable/automatic/psItem[automatic variable `$_`] is an instance of of an
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ErrorRecord[`System.Management.Automation.ErrorRecord`] object that describes the error in more detail.



  The → Windows/PowerShell/language/statement/trap[`trap` statement]

  → Windows/PowerShell/language/error-handling[Error handling in PowerShell]

  → Windows/PowerShell/language/statement[Other statements]
