$ PowerShell statements
@ statement

The statement separator is a new line or semicolon.

→ Windows/PowerShell/language/statement/break[`break`] exits a loop that is controlled by the 
→ Windows/PowerShell/language/statement/for[`for`], → Windows/PowerShell/language/statement/foreach[`forEach`], → Windows/PowerShell/language/statement/while[`while`] and `do` statements.

→ Windows/PowerShell/language/statement/continue[`continue`] leaves the current iteration in a loop and starts the next one.

`data`

`do`

`exit`

→ Windows/PowerShell/language/statement/for[`for`]

→ Windows/PowerShell/language/statement/foreach[`foreach`]

→ Windows/PowerShell/language/statement/function[`function`]

Apparently, PowerShell does not have a `goto` statement.

→ Windows/PowerShell/language/statement/if[`if`] conditionally does or does not exeucute sets of other statements.

*inlinescript*

*parallel*

→ Windows/PowerShell/language/statement/return[`return`]

*sequence*

→ Windows/PowerShell/language/statement/switch[`switch`]

`throw` to raise exceptions.

→ Windows/PowerShell/language/statement/trap[`trap`]

→ Windows/PowerShell/language/statement/try-catch-finally[`try` … `catch` … `finally`] handle exceptions.

→ Windows/PowerShell/language/statement/using/namespace[`using namespace`] and
→ Windows/PowerShell/language/statement/using/assembly[`using assembly`]

→ Windows/PowerShell/language/statement/while[`while`]

sa:
  The → Windows/PowerShell/language[PowerShell language]
