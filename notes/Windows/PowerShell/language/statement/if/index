$ PowerShell: if statement
@ if

The `if` statement conditionally does or does not execute sets of other statements.

Unlike → development/languages/C-C-plus-plus/C, the curly braces are always required (even if only *one* statement is controlled by the `if` statement).

{ Simple if statement

  A simple if statement only executes a set of statements if the condition `cond` is true.

code {
if (cond) {
  statement
 [statement]
}
code }

}
{ If else statement

  An `if … else` statement executes a series of statement if the condition is true and *another* set of statement is not true.

code {
if (cond) {
  statement
 [statement]
}
else {
  statement
 [statement]
}
code }

}
{ if elseif else

  An `if`, `elseif`, …, `else` statement allows to check a series of conditions (`cond_1`, …, `cond_n`) and executes the body of the *first* condition that is true.

  If no condition is true, the `else` body is executed. The `else` body is optional.

code {
if (cond_1) {
  statement
 [statement]
}
elseif(cond_2) {
  statement
 [statement]
else {
  statement
 [statement]
}
code }

}
{ Negations

  A condition is negated with the `-not` → Windows/PowerShell/language/operator:
code {
if (-not cond) {
  statement
 [statement]
}
code }

  `-not` can be abbreviated with the exclamation mark (`!`), thus the following code fragment is equivalent to the previous one:
code {
if (! cond) {
  statement
 [statement]
}
code }

  If the return value of a → Windows/PowerShell/language/cmdlet[cmdLet] needs to be negated, the cmdLet must be in parentheses:
code {
if (-not (→ Windows/PowerShell/command-inventory/noun/path/test[test-path] $txtFile)) {
   → Windows/PowerShell/command-inventory/noun/output/write[write-output] "$txtFile does not exist"
}
code }

}

sa:

  → Windows/PowerShell/language/operator/comparison[Comparison] and
  → Windows/PowerShell/language/operator/logical[logical] operators.

  → Windows/PowerShell/language/statement[Other statements]
