$ PowerShell cmdlets
@ cmdLet

It's possible to create → Windows/PowerShell/language/alias[aliases] for cmdlets.

A cmdLet is one of the → Windows/PowerShell/language/command[PowerShell command] types which have an entry in the → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandTypes[`System.Management.Automation.CommandTypes` enum].

{ Names

  The ~name~ of a cmdlet is expected to be `verb-subject`, where the subject is singular (for example `get-process`).
  -
  This rule is not enforced, however. A list of encouraged verbs can be queried with → Windows/PowerShell/command-inventory/noun/verb/get[`get-verb`].

  In order to distinguish between cmdlets with the same name from different → Windows/PowerShell/language/cmdlet[cmdlets], the `import-module` cmdlet has a `-prefix` parameter
  that allows to specify a prefix which will then be added before a cmdlet's → Windows/PowerShell/command-inventory/noun[noun].

  A list of → Windows/PowerShell/command-inventory/verb[verbs] and → Windows/PowerShell/command-inventory/noun[nouns] can be found with the → Windows/PowerShell/command-inventory/noun/command/get[`get-command`] and → Windows/PowerShell/command-inventory/noun/object/group[`group-object`] cmdlets:
code {
get-command | group-object verb | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] count
get-command | group-object noun | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] count
code }

  cmdlets can be searched by noun or verb name with the `get-command` cmdlet:
code {
get-command -verb import
get-command -noun csv
code }

  It is also possible to search for cmdlets with → Windows/PowerShell/language/wildcards[wildcards]. The following command finds cmdlets like `get-help`, `set-hvciOptions`,
  → Windows/PowerShell/command-inventory/noun/hex/format[`format-hex`], → Windows/PowerShell/command-inventory/noun/host/out[`out-host`] etc:
code {
get-command *t-h*
code }

}
{ Parameters and aliases

  The parameters and their aliases can be shown via the `get-command` cmdlet:
code {
(get-command get-command).parameters.values | select-object name,aliases
code }

}
{ Getting a quick overview of optional and mandatory parameter variations

  With the → Windows/PowerShell/command-inventory/noun/command/get#get-command-syntax[`-syntax`] switch of → Windows/PowerShell/command-inventory/noun/command/get[`get-command`], its possible to get a quick summary of the possibilities how
  a cmdLet can be invoked:
code {
PS Users\Rene> get-command get-process -syntax

Get-Process [[-Name] <string[]>] [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process [[-Name] <string[]>] -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process -InputObject <Process[]> -IncludeUserName [<CommonParameters>]

Get-Process -InputObject <Process[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]
code }

}
{ Common parameters #cmdlet-common-parameter

  A few parameters, so-called *common parameters*, are available for any cmdlet:
  table { lll
    ☰ ~Abbr.~ ☰ ~Comment~
    `-debug` ☰ db ☰
    `→ Windows/PowerShell/language/cmdlet/parameter/common/errorAction[-errorAction`] ☰ ea ☰ Sets the value of the → Windows/PowerShell/language/variable/preference[preference] variable → Windows/PowerShell/language/variable/preference/errorActionPreference[`$errorActionPreference`] in the scope of the cmdlet.
    → Windows/PowerShell/language/cmdlet/parameter/common/errorVariable[`-errorVariable`] ☰ ev ☰ Causes an error message to be stored in the specified → Windows/PowerShell/language/variable[variable].
    `-informationAction` ☰ infa ☰
    → Windows/PowerShell/language/cmdlet/parameter/common/informationVariable[`-informationVariable`] ☰ iv ☰
    `-outVariable` ☰ ov ☰ Objects returned by a command are not only sent down the → Windows/PowerShell/pipeline but also stored in the specified → Windows/PowerShell/language/variable.
    `-outBuffer` ☰ ob ☰ Specifies the number of objects that are accumulated before they're sent down the → Windows/PowerShell/pipeline.
    `-pipelineVariable` ☰ pv ☰
    `-verbose` ☰ vb ☰ Sets the value of the → Windows/PowerShell/language/variable/preference[preference] variable → Windows/PowerShell/language/variable/preference/verbosePreference[`$verbosePreference`] to `Continue` which in turn affects the cmdLet → Windows/PowerShell/command-inventory/noun/verbose/write[`write-verbose`]
    `-warningAction` ☰ wa ☰
    `-warningVariable` ☰ wv ☰
  table }

  The so-called *risk mitigation* parameters are:
    • `-whatIf`
    • `-confirm`

  Sometimes, there is also `-passThru`. This causes a cmdlet to pass on the object it acted on. Usually, this parameter is used
  on cmdlets with the verbs `new`, `stop`, → Windows/PowerShell/command-inventory/verb/set[`set`] etc.

  The list of common parameters can be displayed in the shell like so:
code {
PS C:\> [→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCmdlet[System.Management.Automation.Cmdlet]]::CommonParameters
…
PS C:\> [→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCmdlet[System.Management.Automation.Cmdlet]]::OptionalCommonParameters
…
code }

  In order to turn a → Windows/PowerShell/language/function into a cmdlet (or possibly more accuratly referred to as → Windows/PowerShell/language/function/advanced[advanced function]) which then automatically features the common parameter, the function needs a
  `[cmdletBinding[()] param()` in its declaration:
code {
function xyz {
   [cmdletBinding()]
    param (
      … 
    )
    …
}
code }

}
{ (Predifined) cmdLet classes

  Typically, the functionality of cmdLets is stored in a → Microsoft/dot-net class (type). These classes are found in the
  → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands[`Microsoft.PowerShell.Commands` namespace].

}
{ Common base class

  All cmdLets derive from → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Cmdlet[`System.Management.Automation.Cmdlet`].

  A cmdlet can be created by deriving it directly from directly from → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Cmdlet[`System.Management.Automation.Cmdlet`]
  or, alternatively, from  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCmdlet[`System.Management.Automation.PSCmdlet`] (which itselfs inherits from `CmdLet`).

  The `Cmdlet` class provides most common used functionality of a cmdlet, such as
    • → Windows/PowerShell/language/object output
    • record processing

  If a cmdlet requires access to the *MSH Runtime*, the cmdlet must be derived from the `PSCmdlet` class

 `CmdLet` inherits from → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Internal/InternalCommand[`System.Management.Automation.Internal.InternalCommand`]

}
{ TODO

  { write-host

   gh|about-powershell|/cmdlets/write-host.ps1||

  }
  { set-executionPolicy

    gh|about-powershell|/cmdlets/set-executionPolicy.ps1||

  }
  { new-object

    gh|about-powershell|/cmdlets/new-object.ps1||

  }

  { WMI related

    cmdlets that are related to → Windows/Management-Instrumentation[WMI] are

    • get-WmiObject
    • get-CimAssociatedInstance
    • get-CimClass
    • get-CimInstance
    • get-CimSession
    • set-WmiInstance
    • set-CimInstanceInvoke-WmiMethod
    • invoke-CimMethod
    • new-CimInstance
    • new-CimSession
    • new-CimSessionOption
    • register-CimIndicationEvent
    • register-WmiEvent
    • remove-CimInstance
    • remove-WmiObject
    • remove-CimSession

    `test-wsman` checks if the → Windows/services/installed/WinRM[WinRM service] is running.

  }

  { Transactions

     Some → Windows/PowerShell/language/cmdlet[cmdlets] can be executed within a transaction (and thus be commited or rolled back).
     -
     These cmdlets have the `-useTransaction` parameter.

     A transaction is started with `start-transaction`, rolled back with `undo-transaction` and commited with `complete-transaction`.


  }

}
sa:
  The → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/PsCmdLet[`$psCmdlet`]

  The → Microsoft/dot-net classes 
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Cmdlet[`System.Management.Automation.Cmdlet`],
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CmdletInfo[`System.Management.Automation.CmdletInfo`],
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CmdletBindingAttribute[`System.Management.Automation.CmdletBindingAttribute`]

  A (→ development/languages/C-Sharp[C#] class) is identified as a cmdLet with
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CmdletAttribute[`System.Management.Automation.CmdletAttribute`].

  The time a cmdLet needs until it is finished can be measured with the → Windows/PowerShell/command-inventory/noun/command/measure[`measure-command` cmdLet].

  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ParameterAttribute[`System.Management.Automation.ParameterAttribute`]

  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Cmdlet#cmdlet-cs-example[Writing a cmdlet with C#]

  It is → Windows/PowerShell/language/alias#ps-alias-no-param[impossible to create an alias for a cmdlet to be called with a parameter].
