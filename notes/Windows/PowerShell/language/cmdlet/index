$ PowerShell cmdlets
@ cmdLet

All cmdLets derive from → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Cmdlet[`System.Management.Automation.Cmdlet`].

It's possible to create → Windows/PowerShell/language/alias[aliases] for cmdlets.

A cmdLet is one of the PowerShell command types which have an entry in the → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandTypes[`System.Management.Automation.CommandTypes` enum].

{ Names

  The ~name~ of a cmdlet is expected to be `verb-subject`, where the subject is singular (for example `get-process`).
  -
  This rule is not enforced, however. A list of encouraged verbs can be queried with → Windows/PowerShell/command-inventory/noun/verb/get[`get-verb`].

  In order to distinguish between cmdlets with the same name from different → Windows/PowerShell/language/cmdlet[cmdlets], the `import-module` cmdlet has a `-prefix` parameter
  that allows to specify a prefix which will then be added before a cmdlet's → Windows/PowerShell/command-inventory/noun[noun].

  A list of verbs and nouns can be found with the → Windows/PowerShell/command-inventory/noun/command/get[`get-command`] and → Windows/PowerShell/command-inventory/noun/object/group[`group-object`] cmdlets:
code {
get-command | group-object verb | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] count
get-command | group-object noun | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] count
code }

  cmdlets can be searched by noun or verb name with the `get-command` cmdlet:
code {
get-command -verb import
get-command -noun csv
code }

}
{ Parameters and aliases

  The parameters and their aliases can be shown via the `get-command` cmdlet:
code {
(get-command get-command).parameters.values | select-object name,aliases
code }

}
{ Getting a quick overview of optional and mandatory parameter variations

  With the → Windows/PowerShell/command-inventory/noun/command/get#get-command-syntax[`-syntax`] switch of → Windows/PowerShell/command-inventory/noun/command/get[`get-command`], its possible to get a quick summary of the possibilities how
  a cmdLet can be invoked:
code {
PS Users\Rene> get-command get-process -syntax

Get-Process [[-Name] <string[]>] [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process [[-Name] <string[]>] -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process -InputObject <Process[]> -IncludeUserName [<CommonParameters>]

Get-Process -InputObject <Process[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]
code }

}
{ Common parameters

  A few parameters, so-called *common parameters*, are available for any cmdlet:
    • `-debug` (db)
    • `-errorAction` (ea)
    • `-errorVariable` (ev)
    • `-informationAction` (infa)
    • `-informationVariable` (iv)
    • `-outVariable` (ov)
    • `-outBuffer` (ob)
    • `-pipelineVariable` (pv)
    • `-verbose` (vb)
    • `-warningAction` (wa)
    • `-warningVariable` (wv)

  The so-called *Risk mitigation* parameters are:
    • `-whatIf`
    • `-confirm`

  Sometimes, there is also `-passThru`. This causes a cmdlet to pass on the object it acted on. Usually, this parameter is used
  on cmdlets with the verbs `new`, `stop`, → Windows/PowerShell/command-inventory/verb/set[`set`] etc.

}
{ cmdLet classes

  Typically, the functionality of cmdLets is stored in a → Microsoft/dot-net class (type). These classes are found in the
  → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands[`Microsoft.PowerShell.Commands` namespace].

}
{ TODO

  { write-host

   gh|about-powershell|/cmdlets/write-host.ps1||

  }
  { set-executionPolicy

    gh|about-powershell|/cmdlets/set-executionPolicy.ps1||

  }
  { new-object

    gh|about-powershell|/cmdlets/new-object.ps1||

  }

  { WMI related

    cmdlets that are related to → Windows/Management-Instrumentation[WMI] are

    • get-WmiObject
    • get-CimAssociatedInstance
    • get-CimClass
    • get-CimInstance
    • get-CimSession
    • set-WmiInstance
    • set-CimInstanceInvoke-WmiMethod
    • invoke-CimMethod
    • new-CimInstance
    • new-CimSession
    • new-CimSessionOption
    • register-CimIndicationEvent
    • register-WmiEvent
    • remove-CimInstance
    • remove-WmiObject
    • remove-CimSession

    `test-wsman` checks if the → Windows/services/installed/WinRM[WinRM service] is running.

  }

  { Transactions

     Some → Windows/PowerShell/language/cmdlet[cmdlets] can be executed within a transaction (and thus be commited or rolled back).
     -
     These cmdlets have the `-useTransaction` parameter.

     A transaction is started with `start-transaction`, rolled back with `undo-transaction` and commited with `complete-transaction`.


  }

}
sa:
  The → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/PsCmdLet[`$psCmdlet`]

  The → Microsoft/dot-net classes 
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Cmdlet[`System.Management.Automation.Cmdlet`],
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CmdletInfo[`System.Management.Automation.CmdletInfo`],
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CmdletBindingAttribute[`System.Management.Automation.CmdletBindingAttribute`]

  A (→ development/languages/C-Sharp[C#] class) is identified as a cmdLet with
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CmdletAttribute[`System.Management.Automation.CmdletAttribute`].

  The time a cmdLet needs until it is finished can be measured with the → Windows/PowerShell/command-inventory/noun/command/measure[`measure-command` cmdLet].

  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ParameterAttribute[`System.Management.Automation.ParameterAttribute`]
