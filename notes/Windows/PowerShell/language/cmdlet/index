$ PowerShell cmdlets

It's possible to create → Windows/PowerShell/language/alias[aliases] for cmdlets.

{ Names

  The ~name~ of a cmdlet is expected to be `verb-subject`, where the subject is singular (for example `get-process`).
  -
  This rule is not enforced, however. A list of encouraged verbs can be queried with `get-verb`.

  In order to distinguish between cmdlets with the same name from different → Windows/PowerShell/language/cmdlet[cmdlets], the `import-module` cmdlet has a `-prefix` paramter
  that allows to specify a prefix which will then be added before a cmdlet's noun.

  A list of verbs and nouns can be found with the `get-comand` and `group-object` cmdlets:
code {
get-command | group-object verb | sort-object count
get-command | group-object noun | sort-object count
code }

  cmdlets can be searched by noun or verb name with the `get-command` cmdlet:
code {
get-command -verb import
get-command -noun csv
code }

}
{ Common parameters

  A few parameters, so-called *common parameters*, are available for any cmdlet:
    • `-debug` (db)
    • `-errorAction` (ea)
    • `-errorVariable` (ev)
    • `-informationAction` (infa)
    • `-informationVariable` (iv)
    • `-outVariable` (ov)
    • `-outBuffer` (ob)
    • `-pipelineVariable` (pv)
    • `-verbose` (vb)
    • `-warningAction` (wa)
    • `-warningVariable` (wv)

  The so-called *Risk mitigation* parameters are:
    • `-whatIf`
    • `-confirm`

  Sometimes, there is also `-passThru`. This causes a cmdlet to pass on the object it acted on. Usually, this parameter is used
  on cmdlets with the verbs `new`, `stop`, `set` etc.

}

{ TODO

  { write-host

   gh|about-powershell|/cmdlets/write-host.ps1||

  }
  { set-executionPolicy

    gh|about-powershell|/cmdlets/set-executionPolicy.ps1||

  }
  { new-object

    gh|about-powershell|/cmdlets/new-object.ps1||

  }

  { WMI related

    cmdlets that are related to → Windows/Management-Instrumentation[WMI] are

    • get-WmiObject
    • get-CimAssociatedInstance
    • get-CimClass
    • get-CimInstance
    • get-CimSession
    • set-WmiInstance
    • set-CimInstanceInvoke-WmiMethod
    • invoke-CimMethod
    • new-CimInstance
    • new-CimSession
    • new-CimSessionOption
    • register-CimIndicationEvent
    • register-WmiEvent
    • remove-CimInstance
    • remove-WmiObject
    • remove-CimSession

    `test-wsman` checks if the → Windows/services/installed/WinRM[WinRM service] is running.

  }

}
sa:
  The → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/PsCmdLet[`$psCmdlet`]
