$ PowerShell: wildcards

Wildcards are used to select strings (or «items») that meet a certain pattern.

The list of possible wildcards is
table { ll
  `*` ☰ Zero, one or more characters
  `?` ☰ Exactly one character
  `[fqR]` ☰ Matches *one* character if is is either `f`, `q` or `R`.
  `[a-f]` ☰ Maches *one* character if is in the range of `a` through `f`.
table }

Wildcards can be used, for example, in
  • the → Windows/PowerShell/command-inventory/noun/childItem/get#get-childItem-filter[`-filter`] argument of → Windows/PowerShell/command-inventory/noun/childItem/get[`get-childItem`]
  • the → Windows/PowerShell/language/operator/comparison/like[`-like` and `-notLike` operators]

Wildcards are way less powerfull than → development/regular-expressions which can be specified with the
→ Windows/PowerShell/language/operator/comparison/match_notmatch[`-match`, `-nomatch`] and `-replace` operators.

{ No default expansion in most commands #ps-no-wildcard-expansion

  Note that → Windows/PowerShell won't expand wildcards when invoking a → Windows/PowerShell/language/command as one might be used from other shells. The following command
  wll print the literal string `*.ps1`, regardless if there are any → Windows/PowerShell/script[PowerShell scripts] in the current directory:
code {
write-output *.ps1
code }

  There are, however, a few comannds that *do* expand wild cards.
  -
  These commands can be forced to not expand wildcards by using the `-literalPath` option, for example in the
  cmdlet → Windows/PowerShell/command-inventory/noun/item/remove#remove-item-literalPath[`remove-item`].
}

sa:


  The → Windows/PowerShell/language/statement/function/parameters#ps-param-attribute[`supportsWildcards` attributes] for → Windows/PowerShell/language/statement/function/parameters[parameters].

  The → Windows/PowerShell/language/statement/function/parameters/attributes#ps-param-attr-supportsWildcards[`supportsWildcards` attribute] of a → Windows/PowerShell/language/statement/function/parameters[function parameter].
