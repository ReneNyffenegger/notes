$ PowerShell: Providers
@ provider

A *provider* allows PowerShell to connect to data sources (aka data stores) as though they were file systems. Therefore, providers are especially useful if the → development/Data is hierarchical in nature, like,
for example
  • → Windows/file-system[File systems],
  • *Active Directory* or
  • the → Windows/registry[registry].



{ Providers, items, locations and drives

  A provider is called «provider» because it provides the → Windows/PowerShell environment, notably the → Windows/PowerShell/command-inventory/noun/location[`location`] and
  → Windows/PowerShell/command-inventory/noun/childItem[`childItem`] cmdLet → Windows/PowerShell/command-inventory/noun[nouns] the possibilty to access «locations» and
 «items».

  A provider implements one or more ~→ Windows/PowerShell/language/provider/drive[drives]~ each of which contains a (hierarchical) tree.

  Within a drive, the data itself is located and accessed by a ~→ Windows/PowerShell/language/provider/path[path]~.

}
{ Different capabilities #ps-provider-capabilities

  Different providers offer different capabilities. For example, the → Windows/PowerShell/command-inventory/noun/childItem/get#get-childItem-filter[`-filter`] argument of
  → Windows/PowerShell/command-inventory/noun/childItem/get[`get-childItem`] can only be used on file system providers.

  The different possible capabilities are represented by the `→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/Provider/ProviderCapabilities` enumeration.

}
{ Built-in providers

  table { ll

    ~Drive~      ☰ ~Data store~
    alias:       ☰ → Windows/PowerShell/language/alias[aliases]
    cert:        ☰ → development/security/cryptography/X_509[x509] ceritificates
    → Windows/PowerShell/language/provider/env[env:]  ☰ Windows → development/environment-variable[environment variables]
    (*)          ☰ File system (drives, directories, files)
    function:    ☰ → Windows/PowerShell/language/function[functions]
    hklm: hkcu:  ☰ → Windows/registry[registry]
    variable:    ☰ → Windows/PowerShell/language/variable[Variables]
    wsman:       ☰ WS management configuration information
  table }
  
  Arguably, the most used provider is the FileSystem provider.

}
{ Available providers

  Available providers are displayed with the → Windows/PowerShell/command-inventory/noun/psProvider/get[`get-psProvider` cmdlet].

}
{ Cmdlets

  In order to read, write or delete data in a data store, a *data item* is needed. Such an element represents, for example, a file, a directory or a → Windows/registry/tree-structure/key[registry key].
  -
  PowerShell encapuslates this functionality in the → Windows/PowerShell/command-inventory/noun/item[`item` cmdLet noun].

  Each of this items is associated with and stored in hierarchically structured location, think file system path. The → Windows/PowerShell/command-inventory/noun/location[`location` cmdLet noun]
  allows to change the current location.

  The data itself that an *item* stores can be modified with the → Windows/PowerShell/command-inventory/noun/content[`content` cmdLet noun].

  Items are also associated with properties, for example the file creation date in a drive-provider. These properties can be modified with the
  → Windows/PowerShell/command-inventory/noun/itemProperty[`itemProperty` cmdLet noun].

  Because the locations are organized in trees, an item's child items are found with the → Windows/PowerShell/command-inventory/noun/childItem[`childItem` cmdLet noun].

  The → Windows/PowerShell/command-inventory/noun/path[`path` noun] deals with the textual representation of locations and wildcard operations.

  → Windows/PowerShell/language/cmdlet[cmdlets] related to providers are
    • `get-psProvider` provides information about a *provider*
    • `get-psDrive` provides information about a → Windows/PowerShell/language/provider/drive[drive]

}
{ Showing the locations of the providers

code {
foreach ($provider in (get-psProvider).name) {
   "$provider $(→ Windows/PowerShell/language/variable/automatic/executionContext[$ExecutionContext].SessionState.Path.→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PathIntrinsics#PathIntrinsics-CurrentProviderLocation[CurrentProviderLocation]($provider))"
}
code }

}
{ Displaying content of non-filesystem providers

  With the → Windows/PowerShell/command-inventory/noun/content/get[`get-content`] cmdlet, it is possible to show the content of → Windows/PowerShell/language/item[items] that are not stored in a
  filesystem provider, such as for example a → Windows/PowerShell/language/function[function]:
code {
PS C:\> get-content function:/mkdir
code }

}
{ TODO

  `help filesystem`

}
sa:

  The → Windows/PowerShell/command-inventory/noun/psProvider[cmdLet noun `psProvider`] has the cmdLet → Windows/PowerShell/command-inventory/noun/psProvider/get[`get-psProvider`]
  which shows the currently available providers (in the current session).

 `→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/ProviderInfo` is the .NET type of which an instance corresponds to a loaded provider.

  the → Windows/PowerShell/language/variable/preference[preference variables] `$LogProviderHealthEvent` and `$LogProviderLifecycleEvent`.

  The `→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PathIntrinsics` class.
