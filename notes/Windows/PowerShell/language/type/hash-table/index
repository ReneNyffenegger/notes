$ PowerShell: hash table

A *hash table* stores key/value pairs.

In other → development/languages[programming languages], a *hash table* is also referred to as *dictionary* or *associative array*.

{ Creating hash tables

  A hash table is constructed with the `@{ … }` syntax. The key/value pairs are separated with a semicolon (`;`). Note: for one-word keys, the keys may be written unqouted.
code {
PS C:\> $ht = @{ foo = 42; bar = 99; baz = 0}
PS C:\> → Windows/PowerShell/command-inventory/noun/output/write[write-output] $ht['bar']
99
code }

  There are also ordered hash tables where keys always show up in the same order in which they were defined. Such hash tables are created like so:
code {
PS C:\> $hto = [ordered] @{ foo = 42; bar = 99; baz = 0}
code }

  Compare with `@( … )` which creates → Windows/PowerShell/language/type/array[arrays].

}
{ Adding and removing keys

  gh|about-PowerShell|/language/type/hash-table/add-remove.ps1||

}
{ .NET type

  A hash table is `System.Collections.Hashtable` → Microsoft/dot-net class:
code {
PS C:\> ( @{} ).GetType().FullName
System.Collections.Hashtable
code }

  An ordered hash table is a `System.Collections.Specialized.OrderedDictionary`:
code {
PS C:\> ( [ordered] @{} ).GetType().FullName
System.Collections.Specialized.OrderedDictionary
code }

}
{ Sorting keys or values

  The elements in a hash table can be sorted based on the value of their key or value. For a reason I don't really understand, the `GetEnumerator()` method must be called on the hash table before
  → Windows/PowerShell/pipeline[piping] the hash table into → Windows/PowerShell/command-inventory/noun/object/sort[`sort-object`]:

  gh|about-PowerShell|/language/type/hash-table/sort.ps1||

}

sa:

  The → Windows/PowerShell/command-inventory/noun/stringData/convertFrom[`convertFrom-stringData`] creates a hash table from a string that contains key/value pairs.

  → Windows/PowerShell/command-inventory/noun/object/new/psObject[`new-object psObject`]

  Some → Windows/PowerShell/language/type[PowerShell types]
