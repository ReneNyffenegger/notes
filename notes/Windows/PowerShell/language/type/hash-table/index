$ PowerShell: hash table
@ hash table

A *hash table* stores key/value pairs.

In other → development/languages[programming languages], a *hash table* is also referred to as *dictionary* or *associative array*.

Hash tables are generally (but not exclusively!) used to store a list of items where each item is uniquely identified by a name and where someone has an interest in looking up the respective item's value for a given name.
-
A good example are → Windows/development/environment-variables[environment variables]. In fact, `[System.Environment]::GetEnvironmentVariables()` returns such a hashtable:
code {
PS C:\> [System.Environment]::GetEnvironmentVariables().GetType().FullName
→ Microsoft/dot-net/namespaces-classes/System/Collections/Hashtable[System.Collections.Hashtable]
PS C:\> [System.Environment]::GetEnvironmentVariables()
Name                           Value
----                           -----
SESSIONNAME                    Console
ProgramFiles(x86)              C:\Program Files (x86)
USERDNSDOMAIN                  TQ84.LOCAL
…
code }

A hash table's underlying → Microsoft/dot-net class is → Microsoft/dot-net/namespaces-classes/System/Collections/Hashtable[`System.Collections.Hashtable`].

{ Creating hash tables #ps-create-hash-table

  A hash table is constructed with the `@{ … }` syntax.
  -
  If multiple key/value pairs are declared on the same line, they need to be separated by a semicolon (`;`).
  -
  One-word keys may be written unquoted.
code {
PS C:\> $ht = @{ foo = 42; bar = 99; baz = 0}
PS C:\> → Windows/PowerShell/command-inventory/noun/output/write[write-output] $ht['bar']
99
code }

  There are also ordered hash tables where keys always show up in the same order in which they were defined. Such hash tables are created like so:
code {
PS C:\> $hto = [ordered] @{ foo = 42; bar = 99; baz = 0}
code }

  Note: although `[ordered]` with its square brackets looks like a → Windows/PowerShell/language/object/type/accelerators[type accelerator], it is not.

  Compare with `@( … )` (the → Windows/PowerShell/language/operator/array-subexpression[array subexpression operator]) which creates → Windows/PowerShell/language/type/array[arrays] from the expression
  within its parentheses (even if the expression evaluates to zero or only one element).

}
{ Adding and removing keys

  gh|about-PowerShell|/language/type/hash-table/add-remove.ps1||

}
{ Members/properties seem to be overridden by adding keys (collissions)

  A hash table has predefined members (properties such as `keys` and methods such as `Add()`). When a key is added with the same name, the key name seems to override
  the already existing property. Of course, this is less than desirable.

  It is possible to access the original members via the → Windows/PowerShell/language/object#psobject-intrinsic-members[intrinsic member] `psBase`.

  This is demonstrated with the following scriptlet:
  gh|about-PowerShell|/language/type/hash-table/override-members.ps1||

}
{ .NET types

  A hash table is implemented using the → Microsoft/dot-net/namespaces-classes/System/Collections/Hashtable[`System.Collections.Hashtable`] → Microsoft/dot-net class:
code {
PS C:\> ( @{} ).GetType().FullName
System.Collections.Hashtable
code }

  An ordered hash table is a → Microsoft/dot-net/namespaces-classes/System/Collections/Specialized/OrderedDictionary[`System.Collections.Specialized.OrderedDictionary`]:
code {
PS C:\> ( [ordered] @{} ).GetType().FullName
System.Collections.Specialized.OrderedDictionary
code }

}
{ Sorting keys or values

  The elements in a hash table can be sorted based on the value of their key or value. For a reason I don't really understand, the `GetEnumerator()` method must be called on the hash table before
  → Windows/PowerShell/pipeline[piping] the hash table into → Windows/PowerShell/command-inventory/noun/object/sort[`sort-object`]:

  gh|about-PowerShell|/language/type/hash-table/sort.ps1||

}

sa:

  The → Windows/PowerShell/command-inventory/noun/stringData/convertFrom[`convertFrom-stringData`] creates a hash table from a string that contains key/value pairs.

  Some → Windows/PowerShell/language/cmdlet[cmdlets] require a hash table, for example
  the → Windows/PowerShell/command-inventory/noun/psReadLineOption/set#set-psReadLineOption-colors[`-colors`] option of → Windows/PowerShell/command-inventory/noun/psReadLineOption/set[`set-psReadLineOption`].

  The → Windows/PowerShell/command-inventory/noun/object/group#ps-group-object-asHashTable[`-asHashTable`] option of the cmdLet → Windows/PowerShell/command-inventory/noun/object/group[`group-object`].

  → Windows/PowerShell/command-inventory/noun/object/new/psObject[`new-object psObject`]

  Some → Windows/PowerShell/language/type[PowerShell types]

  → Windows/PowerShell/command-inventory/noun/object/new/psObject#ps-new-object-ht-2-custObj[Converting a hash table to a psCustomObject]

  → Microsoft/dot-net/namespaces-classes/System/Collections/Generic/Dictionary-TKey-TValue[`System.Collections.Generic.Dictionary<TKey, TValue>`] provides strongly typed key/value dictionary.

  The preference variable → Windows/PowerShell/language/variable/preference/psDefaultParameterValues[`$psDefaultParameterValues`] is a hashtable.
