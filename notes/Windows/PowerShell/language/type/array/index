$ PowerShell: array type

Arrays can be created with a comma (`,`) and subscripted with a bracket. Negative indices refer to the elements in the array countint from the end.

The number of elements in an array can be found via `.count` or `.length`.

code {
PS:\> $ary = 'foo', 'bar', 'baz'
PS:\> $ary.getType()
PS:\> $ary[0]
PS:\> $ary[1]
PS:\> $ary[-1]
PS:\> $ary.count
code }

{ Empty array

  An empty array is created like so:
code {
PS:\> $ary = @()
code }

}
{ Adding elements to an array

  The `+=` operator allows to add elements to an array:
code {
PS:\> $ary += 'one'
PS:\> $ary += 'two'
PS:\> $ary += 'three'
code }

}
{ Removing elements

  In order to remove an element, the `where-object` cmdlet and → Windows/PowerShell/language/operator/comparison[`-notmatch` operator] is needed:
code {
PS:\> $ary = $ary | where-object { $_ -notmatch 'two' }
code }

}
{ An array can contains different object types

code {
PS:\> $ary = 42, 'foo', (get-date)
code }

}

{ Cmdlets returning arrays

  A → Windows/PowerShell/language/cmdlet[cmdlet] might return an array:
code {
PS C:\> $services = get-service
PS C:\> $services[0].name
AeLookupSvc
PS C:\> $services[1].name
ALG
PS C:\> $services[-1].name
ZeroConfigService
code }

}


sa:

  → Windows/PowerShell/language/statement/foreach[`foreach`]

  The → Windows/PowerShell/language/variable/preference[preference] variable → Windows/PowerShell/language/variable/preference/OFS[`$OFS`].

  Some → Windows/PowerShell/language/type[PowerShell types]
