$ PowerShell: arrays
@ array

Arrays can be created with a comma (`,`) and subscripted with a bracket. Negative indices refer to the elements in the array counting from the end.

The number of elements in an array can be found via `.count` or `.length`.

gh|about-PowerShell|/language/type/array/intro.ps1||

{ Printing arrays

  By default, the elements are printed one below an another when printing an array.
  In order to print all elements on one line, the → Windows/PowerShell/language/operator/string-manipulation#ps-split-join[`-join` operator] can be used:
  gh|about-PowerShell|/language/type/array/print.ps1||

}
{ Creating arrays with the comma operator vs the plus operator

  An array can be created with the → Windows/PowerShell/language/operator/comma[comma operator] (`$ary = $foo, $bar, $baz`). If one of the elements from which the array
  is created (for example `$bar`) is itself an array, the element is not unpacked (or exploded) so that the resulting array in this example always has three elements.

  Sometimes, however, it is desired to unpack the elements of an array when a new array is created. This is possible by using the plus operator rather than the comma operator.
  -
  The following example tries to demonstrate exactly this:
  gh|about-PowerShell|/language/type/array/plus-vs-comma.ps1||

}
{ Creating an array with zero or one element

  An empty array or an array with one element can be created with the → Windows/PowerShell/language/operator/array-subexpression[array subexpression operator `@( … )`].
code {
PS C:\> $ary = @()
PS C:\> $bry = @(42)
code }

  An array with one element can alternatively also be created with a leading comma. In this case, the comma is a *unary* → Windows/PowerShell/language/operator[operator] that explicitly creates a one-element array:
code {
PS C:\> $one = ,1
PS C:\> $one -is [array]
True
PS C:\> $one.length
1
code }

   Compare with `@{ … }` which creates → Windows/PowerShell/language/type/hash-table[hash tables].

}
{ Adding elements to an array

  The `+=` operator allows to add elements to an array:
code {
PS:\> $ary += 'one'
PS:\> $ary += 'two'
PS:\> $ary += 'three'
code }

}
{ Removing elements

  In order to remove an element, the `where-object` cmdlet and → Windows/PowerShell/language/operator/comparison[`-notmatch` operator] is needed:
code {
PS:\> $ary = $ary | → Windows/PowerShell/command-inventory/noun/object/where[where-object] { $_ -notmatch 'two' }
code }

}
{ Filtering elements

  Elements can be → science/computer/Programming-paradigm/Functional-programming/First-class-function/filter[filtered] with
  → Windows/PowerShell/language/operator/comparison#ps-comparison-ops-array[some comparison operators].

  The following example returns the elemens that are (alphabetically) greater than *ghikj*:
  gh|about-PowerShell|/language/type/array/filter.ps1||

}
{ Weakly and strongly typed arrays

  PowerShell (or → Microsoft/dot-net?) distinguishes between *weakly typed* and *strongly typed* arrays:
  gh|about-PowerShell|/language/type/array/weakly-and-strongly-typed.ps1||

}
{ Sorting arrays

  A non-numeric array can be sorted numerically like so:
  gh|about-PowerShell|/language/type/array/numerically-sort-array.ps1||

}
{ An array can contain different data types

   A weakly typed array can contain different data types.

code {
PS:\> $ary = 42, 'foo', (get-date)
code }

}
{ Nested arrays

  Arrays can be nested.

  In the following example, `$ary` has four elements, the third of which is an array that has three elements:
code {
PS C:\> $ary = 0, 1, ('zero', 'one', 'two'), 3
PS C:\> $ary[2][1]
one
code }

}
{ Functional programming

  An array has a `forEach` method that is used like or at least similar to → science/computer/Programming-paradigm/Functional-programming/First-class-function/map[`map` as known in functional programming].
code {
$ary.forEach(scriptblock expression)
$ary.forEach(type convertToType)
$ary.forEach(string propertyName)
$ary.forEach(string propertyName, object[] newValue)
$ary.forEach(string methodName)
$ary.forEach(string methodName, object[] arguments)
$ary.forEach(scriptblock expression, object[] arguments)
code }

  Apparently, there are now spaces allowed between the `forEach` operator and the following opening parenthesis.

  There is also a `where` method that is similar to a functional programming's → science/computer/Programming-paradigm/Functional-programming/First-class-function/filter[`filter` function]
code {
$ary.where(scriptblock expression[, WhereOperatorSelectionMode mode [, int numberToReturn]])
code }

}
{ Unrolling an array

  The values all elements' properties with a given name can be accessed with what is called *unrolling*:
  gh|about-PowerShell|/language/type/array/unrolling.ps1||

}
{ Cmdlets returning arrays

  A → Windows/PowerShell/language/cmdlet[cmdlet] might return an array:
code {
PS C:\> $services = get-service
PS C:\> $services[0].name
AeLookupSvc
PS C:\> $services[1].name
ALG
PS C:\> $services[-1].name
ZeroConfigService
code }

  In a → Windows/PowerShell/pipeline, the elements of the returned array can be sent to a → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object` cmdlet] to process each
  element of the array individually in a → Windows/PowerShell/language/scriptblock.
  -
  Within the script block, the → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/psItem[`$_` (= `$psItem`)] refers to the
  item being processed:
code {
function doSomethingWithService {
  …
}
get-service | forEach-object { doSomethingWithService $_ }
code }

}
{ The influence of $OFS #ps-array-ofs

  The → Windows/PowerShell/language/variable/preference[preference] variable → Windows/PowerShell/language/variable/preference/OFS[`$OFS`] influences how arrays are printed:
  gh|about-PowerShell|/language/type/array/OFS.ps1||

}
{ Assigning an array to an array #ps-assign-array-to-array

  Quite similarly (but less powerfully) to → development/languages/Python/iterable/unpacking[Python's iterable unpacking], an array with *n* elements can be assigned to a an array with *m* (m <= n) elements so that the (n-m+1) elements of the array
  being assigned become the elements in the right-most element of the array being assigned to:
  gh|about-PowerShell|/language/type/array/assign.ps1||

  This code prints
code {
eins = one
zwei = two
rest = three four five
code }

  This technique can be used, for example, to → Windows/PowerShell/language/type/array/iterate-over-name-value-pairs[iterate over an array that contains name-value pairs].

  See also → Windows/PowerShell/language/statement/function/parameters#ps-param-args[shifting function parameters] and
  Perl's → development/languages/Perl/functions/shift[`shift`] function.
 
}


sa:

  Some investigations on passing arrays as → Windows/PowerShell/language/type/array/as-argument[arguments to executables and PowerShells scripts].

  → Windows/PowerShell/language/statement/foreach[`foreach`]

  The → Windows/PowerShell/language/operator/contains[`-contains` operator] can be used to check if a given value exists in an array.

  Some → Windows/PowerShell/language/type[PowerShell types]
  -
  → Windows/PowerShell/language/type/array/byte[Byte arrays in PowerShell]
  
