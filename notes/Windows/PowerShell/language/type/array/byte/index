$ PowerShell: Byte arrays

{ Creating an array of bytes

  { Creating an array from a list of numerical literals

    An → Windows/PowerShell/language/type/array[array] of bytes can simply be created by assigning an array of numbers (technically: bytes) to a typed → Windows/PowerShell/language/variable:
code {
[byte[]] $byte_array = 65,66,67,90
code }

    Of course, typically, such numbers come in hexadecimal form in which case they need to be prepended with `0x`:
code {
[byte[]] $another_array = 0x41, 0x42, 0x43, 0x5A
code }

    If the array of hexadecimal number comes from a source where it is not already prefixed and manually prefixing them is too tedious, a → Windows/PowerShell/pipeline helps to convert the hexadecimal numbers to a byte:
code {
[byte[]] $xyz = '41', '42', '43', '5A' | → Windows/PowerShell/command-inventory/noun/object/forEach[foreach-object] { → Windows/PowerShell/command-inventory/noun/expression/invoke[invoke-expression] "0x$_" }
code }

    Because some of the values of the last example contain characters, these values had to be enclosed in quotes.
    -
    To make things easier, we can put such values into a string and create an array using the → Windows/PowerShell/language/operator/string-manipulation#ps-split-join[`-split` operator]:
code {
[byte[]] $abc = "41 42 43 5A" -split ' ' | foreach-object { invoke-expression "0x$_" }
code }
  
  }
  { Create an array of n elements, each initialized to 0
  
    The following constructs create `byte` arrays, each of which has 10 elements and whose values are initialized to `0`.
code {
$array_1 = [byte[]]::new(10)
$array_2 = → Windows/PowerShell/command-inventory/noun/object/new[new-object] byte[] 10
$array_3 = [→ Microsoft/dot-net/namespaces-classes/System/Array[System.Array]]::CreateInstance([byte], 10)
code }

  }
  { Creating higher dimension arrays

    The following constructs create arrays of higher dimensions:
code {
[byte[,]] $four_by_eight = [System.Array]::CreateInstance([byte], @(4, 8))
[byte[,,,]] $b_3x4x5x6 = [byte[,,,]]::new(3,4,5,6)
code }

  }

}
{ Converting between strings and byte arrays #ps-byte-array-string

  An instance that derives from → Microsoft/dot-net/namespaces-classes/System/Text/Encoding[`System.Text.Encoding`] allows to convert between strings and byte arrays
  with the methods `GetBytes()` and `GetString()`.

  The following example gets the → development/Unicode/UTF-8[UTF-8] bytes for a given text, writes them to the console them and then converts them back to a string:
code {
$enc        = [→ Microsoft/dot-net/namespaces-classes/System/Text/Encoding[System.Text.Encoding]]::UTF8
$byte_array = $enc.GetBytes('Hello World')
→ Windows/PowerShell/command-inventory/noun/host/write[write-host]    $byte_array
$text       = $enc.GetString($byte_array)
code }

}
{ Converting between base types and byte arrays

  The → Microsoft/dot-net/namespaces-classes/System/BitConverter[.NET type `System.BitConverter`] allows to convert between base types and byte arrays (both directions).

}
{ File content as byte array

  A file can be read into a byte array with the method
  `[→ Microsoft/dot-net/namespaces-classes/System/IO/File[System.IO.File]]::→ Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllBytes-WriteAllBytes[ReadAllBytes]` and written with
  `[→ Microsoft/dot-net/namespaces-classes/System/IO/File[System.IO.File]]::→ Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllBytes-WriteAllBytes[WriteAllBytes]`.

  Alternatively, the → Windows/PowerShell/command-inventory/noun/content/get[`get-content` cmdLet] can be used with
  → Windows/PowerShell/command-inventory/noun/content/get#ps-get-content-byte-array[`-encoding byte -raw` or `-asByteStream`] to get a file's content as byte array.

}
{ Returning a byte array from a function #ps-func-return-byte-array

  When I tried to write a → Windows/PowerShell/language/function that returns a byte array, it turned out that this is not as intuitive as I hoped. Here is my
 *naive* approach:
  gh|about-PowerShell|/language/type/array/byte/return-in-function/naive.ps1||

  When executed, this function returns an array of objects (`→ Microsoft/dot-net/namespaces-classes/System/Object[System.Object][]`) rather than an array of bytes:
code {
type of byteArray: System.Byte[]
type of x: System.Object[]
code }

  Only → https://stackoverflow.com/questions/61439620[a question on StackOverlow] pointed my to the right direction. A byte array can be returned by
  prepending it with the → Windows/PowerShell/language/operator/comma#ps-unary-comma-operator[unary comma operator]:
  gh|about-PowerShell|/language/type/array/byte/return-in-function/unary-comma.ps1||

  An alternative is to use the → Windows/PowerShell/command-inventory/noun/output/write[`write-output` cmdlet] with the
  → Windows/PowerShell/command-inventory/noun/output/write#write-output-noEnumerate[`-noEnumerate`] option:
  gh|about-PowerShell|/language/type/array/byte/return-in-function/write-output.ps1||

}

sa:

  Using the → Windows/PowerShell/language/operator/string-manipulation/split[`-split` operator] to create a byte array from a
  → Windows/PowerShell/language/operator/string-manipulation/split#ps-split-pair-characters[hexadecimal representation of a byte stream].

  → Microsoft/dot-net/namespaces-classes/Microsoft/PowerShell/Commands/ByteCollection[`Microsoft.PowerShell.Commands.ByteCollection`]
