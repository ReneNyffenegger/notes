$ PowerShell: module manifest file

A PowerShell module manifest file is a text file with the extension → development/filename-extensions#psd1[`.psd1`] that contains a → Windows/PowerShell/language/type/hash-table which contains information about a
→ Windows/PowerShell/language/module.

Module manifests are optional for single → development/filename-extensions#psm1[`.psm1`] files or simple binary modules, however, they're required to export → Microsoft/dot-net/assembly[assemblies] into the
→ Microsoft/dot-net/assembly/Global-Assembly-Cache[Global Assembly Cache (GAC)] or for modules that support the *updatable help feature*.

{ Keys of the hash table

table { llll
  ~Key name~ ☰ ~Data type~ ☰ ~Description/comment~ ☰ ~Value assigned with → Windows/PowerShell/command-inventory/noun/moduleManifest/new[new-moduleManifest]~
  `RootModule`             ☰ array  ☰ Script module or binary module file associated with this manifest. ☰ 
  `ModuleVersion`          ☰ string ☰ The value of `ModuleVersion` must be convertible to a → Microsoft/dot-net/namespaces-classes/System/Version[`System.Version`] object. ☰ `'1.0'`
  `CompatiblePSEditions`   ☰ array  ☰ Supported PSEditions ☰ n/a
  `GUID`                   ☰ string ☰ The → development/UUID-GUID[GUID] that uniquely identifies *this* module ☰  `'eb260a8d-7fe9-49fa-b79d-4ad15ad55175'`
  `Author`                 ☰ string ☰ Module's autor ☰  `'René'`
  `CompanyName`            ☰ string ☰ Company or vendor of *this* module ☰ `'Unknown'`
  `Copyright`              ☰ string ☰ Copyright statement for *this* module ☰ `'(c) 2020 René. All rights reserved.'`
  `Description`            ☰ string ☰ Description of the functionality provided by this module ☰ `''`
  `PowerShellVersion`      ☰ string ☰ Minimum version of the Windows PowerShell engine required ☰ n/a
  `PowerShellHostName`     ☰ string ☰ Name of required Windows  PowerShell host ☰ n/a
  `PowerShellHostVersion`  ☰ string ☰ Minimum version of Windows PowerShell host required ☰ n/a
  `DotNetFrameworkVersion` ☰ string ☰ Minimum version of → Microsoft/dot-net/implementations/Framework required. Valid for Desktop edition only. ☰ n/a
  `CLRVersion`             ☰ string ☰ Minimum version of the → Microsoft/dot-net/Common-Language-Runtime[common language runtime (CLR)] required. Valid for Desktop edition only. ☰ n/a
  `ProcessorArchitecture`  ☰ string ☰ `None`, `X86` or `Amd64` ☰ n/a
  `RequiredModules`        ☰ array  ☰ Modules that must be imported into the *global environment* prior to importing *this* module ☰ n/a
  `RequiredAssemblies`     ☰ array  ☰ → Microsoft/dot-net/assembly[Assemblies] that must be loaded  prior to importing *this* module ☰ n/a
  `ScriptsToProcess`       ☰ array  ☰ → Windows/PowerShell/script[Script] files (→ development/filename-extensions#ps1[`.ps1`]) to be loaded when importing this module. Useful, for example, to → #ps-manifest-export-classes[export classes]. ☰ n/a
  `TypesToProcess`         ☰ array  ☰ Type Files (→ development/filename-extensions#ps1xml[`.ps1xml1`]) to be loaded when importing this module ☰ n/a
  `FormatsToProcess`       ☰ array  ☰ Format Files (→ development/filename-extensions#ps1xml[`.ps1xml1`]) to be loaded when importing this module ☰ n/a
  `NestedModules`          ☰ array  ☰ → Windows/PowerShell/language/module[Modules] to import as nested modules of the module specified in `RootModule/ModuleToProcess` ☰ n/a
  `FunctionsToExport`      ☰ array  ☰ → Windows/PowerShell/language/function[Functions] to export from this module. For performance reasons, this entry should exist and not contain wildcards. ☰ `@()`
  `CmdletsToExport`        ☰ array  ☰ → Windows/PowerShell/language/cmdlet[Cmdlets] to export from this module. For performance reasons, this entry should exist and not contain wildcards. ☰ `@()`
  `VariablesToExport`      ☰ string ☰ → Windows/PowerShell/language/variable[Variables] to export ☰ `'*'`
  `AliasesToExport`        ☰ array  ☰ → Windows/PowerShell/language/alias[Aliases] to export from this module. For performance reasons, this entry should exist and not contain wildcards. ☰ `@()`
  `DscResourcesToExport`   ☰ array  ☰ DSC resources to export from this module ☰ n/a
  `ModuleList`             ☰ array  ☰ List of all modules that are packaged with this module ☰ n/a
  `FileList`               ☰ array  ☰ List of all files that are package with this module ☰ n/a
  `PrivateData`            ☰ hash table ☰ Private data to pass to the module specified in `RootModule/ModuleToProcess`. This may also contain a `PSData` hashtable with additional module metadata used by PowerShell. ☰ see below
  `HelpInfoURI`            ☰ string ☰ → development/web/URI-URL-URN-IRI-URC#uri[URI] of HelpInfo ☰ n/a
  `DefaultCommandPrefix`   ☰ string ☰ Default prefix for → Windows/PowerShell/language/command[commands] exported from this module. Override the default prefix using `→ Windows/PowerShell/command-inventory/noun/module/import#import-module-prefix[import-Module -prefix`]. ☰ n/a

table }

  { PrivateData

code {
@{
  …
  PrivateData = @{
    PSData = @{
        # Tags = @()         # Tags applied to this module. These help with module discovery in online galleries.
        # LicenseUri   = ''  # An URL to the license for this module.
        # ProjectUri   = ''  # An URL to the main website for this project.
        # IconUri      = ''  # An URL to an icon representing this module.
        # ReleaseNotes = ''  # Release Notes of this module
    }
  }
  …
}
code }

  }

}
{ Minimalistic manifest

  A minimalistic manifest file for a module named `TQ84` might look like so:
code {
@{
   RootModule         = 'TQ84.psm1'
   ModuleVersion      = '0.0.1'

   RequiredAssemblies = @(
     'System.IO.Compression',
     'System.IO.Compression.ZipArchive'
   )

   RequiredModules    = @(
     'another-module'
   )

 #
 # List of the functions that are exported by the module.
 # Alternatively, functions can be exported more explicitly
 # with
 #    export-moduleMember -function get-foo
 # right after the definition of a function in the .psm1 file.
 #
   FunctionsToExport  = @(
     'get-foo'    ,
     'invoke-bar' ,
     'set-baz'
   )

 #
 # Aliases, that were defined in the module (.psm1) file with → Windows/PowerShell/command-inventory/noun/alias/new_set[new-alias] can be made «visible
 # to the world» with AliasesToExport:
 #
   AliasesToExport    = @(
     'intitialize-xyz'
   )

 #
 # Specify a → Windows/PowerShell/language/object/console-display/formatting-data/file[formatting file] to be imported
 # into the → Windows/PowerShell/session[current session] when the module is loaded:
 #
   FormatsToProcess   = @(
     'xyz.format.ps1xml'
   )

}
code }

}
{ Exporting classes #ps-manifest-export-classes

  Interestingly, a module manifest does not have an explicit way to export → Windows/PowerShell/language/class[classes] (with a key named for example `ClassesToExport`).
  -
  However, classes can be defined in a → Windows/PowerShell/script[script file] which is located in the same directory as the manifest file which then can be referenced
  from the manifest file with the `ScriptsToProcess` directive.

  Apparently, the canonical way to use classes that are defined in a module is the → https://channel9.msdn.com/Shows/MsftPowerShell/powershell-using-statement[`using` statement].

}

