$ PowerShell: module

→ Windows/PowerShell has two types of extensions: modules and PSSnapIns. Microsoft apparently encourages people to use modules rather than PSSnapIns.

{ Components of a module

  A module consisists of up to four optional components:
    • A *script module* (a file with the suffix `.psm1`)
    • A *binary module* (a file with the suffix `.dll`)
    • A manifest module (a file with the suffix `psd1` that basically contains a key/value hahs table)
    • A dynamic module (created by the `new-module` → Windows/PowerShell/language/cmdlet[cmdlet])

   The base name of the `.psm1` and/or `.psd1` files need to have the same name as the directory in which they are located. Such files are said to be *well-formed modules.*. 

}
{ Importing


  Modules mey be automatically loaded if they reside in a sub-directory to which one of the components of the environment variable
  → Windows/development/environment-variables#win-envvar-PSModulePath[`PSModulePath`] points to.
  -
  The behavior of autoloading is controlled by the → Windows/PowerShell/language/variable/automatic[automatic variable] `$PSModuleAutoLoadingPreference`.

  Other modules can be manually imported with the → Windows/PowerShell/language/cmdlet[cmdlet] `import-module`.

  The `import-module` has a `-prefix` parameter. If used, it adds the specified prefix to the respsective → Windows/PowerShell/language/cmdlet[cmdlet's] nouns.

}
{ Cmdlets

  `get-module -listAvailable` shows available modules.

  `get-module -all` lists the modules thare loaded in the actual PowerShell session along with their exported commands.

  `get-command -name Microsoft.PowerShell.Management` shows the commands in the module *Microsoft.PowerShell.Management*.

}
