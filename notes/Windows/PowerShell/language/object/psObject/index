$ PowerShell: the psObject object

I use → Windows/PowerShell/command-inventory/noun/object/new[`new-object`] to create a instance of a → Microsoft/dot-net `System.Int64` class:
gh|about-PowerShell|/language/object/psObject/create-object.ps1||

With → Windows/PowerShell/command-inventory/noun/member/add[`add-member`], it's possible to add user defined members to `$obj`:
gh|about-PowerShell|/language/object/psObject/add-member.ps1||

How is it possible to add members to a .NET class?

Answer: members can be added because of the → Windows/PowerShell/language/object/Extended-Type-System[Extended Type System (ETS)].

Extended members that were added to a object can be displayed with `get-member -view extended`:
gh|about-PowerShell|/language/object/psObject/obj-get-extended-members.ps1||

Technically, the .NET class is wrapped into a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSObject[`System.Management.Automation.PSObject`] object. This `PSObject` object is referenced by `$obj.psObject`:
gh|about-PowerShell|/language/object/psObject/psObject.ps1||

The `PSObject` object has a member `Properties` which stores the extended values:
gh|about-PowerShell|/language/object/psObject/psObject-properties.ps1||

Finally, there is also the `BaseObject` member which refers to the `System.Int64` that we created at the beginning:
gh|about-PowerShell|/language/object/psObject/psObject-baseObject.ps1||
