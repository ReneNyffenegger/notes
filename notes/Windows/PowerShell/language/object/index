$ PowerShell: objects
@ object

A fundamental concept in → Windows/PowerShell is that of objects. Objects are assigned to → Windows/PowerShell/language/variable[variables] and objects flow through a → Windows/PowerShell/pipeline.

Under the hood, a PowerShell object is implemented as an instance of the → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSObject[`System.Management.Automation.PSObject`],
see also → Windows/PowerShell/language/object/psObject[PSObject].

{ An object is typed

  Each object has a type that can be determined with `$obj.GetType()`:

code {
PS C:\Users\Rene> $curDir = get-item .
PS C:\Users\Rene> $curDir.GetType()

IsPublic IsSerial Name           BaseType
-------- -------- ----           --------
True     False    → Microsoft/dot-net/namespaces-classes/System/IO/DirectoryInfo[DirectoryInfo]  → Microsoft/dot-net/namespaces-classes/System/IO/FileSystemInfo[System.IO.FileSystemInfo]
code }


   PowerShell also allows to create → Windows/development/COM/object[COM objects]. Such an object's type is → Microsoft/dot-net/namespaces-classes/System/__ComObject[`System.__ComObject`].
code {
PS C:\Users\Rene> $comObj = → Windows/PowerShell/command-inventory/noun/object/new[new-object] -comObject → Windows/development/COM/Useful-object-libraries/Shell-Automation-Service[shell.application]
PS C:\Users\Rene> $comObj.GetType()

IsPublic IsSerial Name           BaseType
-------- -------- ----           --------
True     False    → Microsoft/dot-net/namespaces-classes/System/__ComObject[__ComObject]    → Microsoft/dot-net/namespaces-classes/System/MarshalByRefObject[System.MarshalByRefObject]
code }

   Of course, `$obj.GetType()` also returns an object whose type is → Microsoft/dot-net/namespaces-classes/System/RuntimeType[`System.RuntimeType`]:
code {
PS C:\Users\Rene> $typ = $curDir.GetType()
PS C:\Users\Rene> $typ.GetType().FullName
System.RuntimeType
code }

}
{ Properties and methods

  As is the case in most → development/languages[programming languages], an object exposes properties and methods.

  The names, member types and definitions of these properties and methods can be seen by → Windows/PowerShell/pipeline[piping] an object into → Windows/PowerShell/command-inventory/noun/member/get[`get-member`]:
code {
PS C:\Users\Rene> $curDir | → Windows/PowerShell/command-inventory/noun/member/get
…
code }

  In order to restrict the output to properties, the `get-member` option `-memberType` can be used:
code {
PS C:\Users\Rene> $curDir | get-member -memberType properties

   TypeName: System.IO.DirectoryInfo
Name                MemberType     Definition
----                ----------     ----------
…
FullName            Property       string FullName {get;}
LastAccessTime      Property       datetime LastAccessTime {get;set;}
LastAccessTimeUtc   Property       datetime LastAccessTimeUtc {get;set;}
…
code }

  In order to see the properties' *values*, the object can be piped into → Windows/PowerShell/command-inventory/noun/object/select[`select-object`]:
code {
PS C:\Users\Rene> $curDir | select-object -property *
…
FullName            : C:\Users\Rene
…
LastAccessTime      : 10/12/2019 9:09:47 AM
LastAccessTimeUtc   : 10/12/2019 7:09:47 AM
…
code }

   The `-property` flag is not even required so that the command can be abbreviated  with
code {
PS C:\Users\Rene> $curDir | select-object *
code }

  PowerShell allows to add properties and methods (collectively referred to as → Windows/PowerShell/language/object/member[members]) to objects dynamically, at runtime, with the → Windows/PowerShell/command-inventory/noun/member/add[`add-member` cmdLet].

}
{ Intrinsic members #psobject-intrinsic-members

  A PowerShell object has a few intrinsic members. The member type of these intrinsic members is *memberSet* (See the → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMemberTypes[`System.ManagementAutomation.PSMemberTypes`] enum),
  so, an intrinsic member is in actuality a set of other members.

  table { ll
    `psBase` ☰ The original properties of the «underlying» .NET framework object
    `psAdapted` ☰ Properties and methods that were added in the → Windows/PowerShell/language/object/Extended-Type-System.
    `psExtended` ☰ Properties and methods that were added in → Windows/PowerShell/language/variable/automatic/psHome/types_ps1xml[`types.ps1xml`] or using → Windows/PowerShell/command-inventory/noun/member/add[`add-member` cmdLet]
    `psObject` ☰ The adapter that converts the base object to a → Windows/PowerShell/language/object/psObject[psObject]
    `psTypeNames` ☰ List of objects that are used when the object is formatted. These objects are searched for in the `Format.ps1xml` file. Compare with `$obj.psObject.typeNames`
  table }

  A → Windows/PowerShell/language/object[PowerShell object's] intrinsic members are displayed using the → Windows/PowerShell/command-inventory/noun/member/get#ps-get-member-force[`-force`] option of the
  → Windows/PowerShell/command-inventory/noun/member/get[`get-member`] cmdLet.

  Compare with the → Windows/PowerShell/language/object/member#item-related-properties[properties that are related to items].

}
{ PSStandardMembers

 `PSStandardMembers` is a hidden *MemberSet*. Because it is hidden, it requires the `-force` option of → Windows/PowerShell/command-inventory/noun/member/get[`get-member`] to
  be  displayed (as is also the case to display → #psobject-intrinsic-members[intrinsic members]).

code {
PS C:\> $proc = → Windows/PowerShell/command-inventory/noun/process/get[get-process] -id → Windows/PowerShell/language/variable/automatic/PID[$pid]
PS C:\> $proc | get-member -force PSStandardMembers

   TypeName: System.Diagnostics.Process

Name              MemberType Definition
----              ---------- ----------
PSStandardMembers MemberSet  PSStandardMembers {DefaultDisplayPropertySet}
code }

 `PSStandardMembers` is interesting because it it has a property set with the name *DefaultDisplayPropertySet*, this property set defines the object's properties that
  should be displayed when the object is rendered on the console and no view is defined.

  In the case of the `$proc` (→ Microsoft/dot-net/namespaces-classes/System/Diagnostics/Process[`System.Diagnostics.Process`]) object, these properties can be queried like so:
code {
PC C:\> $proc.PSStandardMembers.DefaultDisplayPropertySet.ReferencedPropertyNames
Id
Handles
CPU
SI
Name
code }

  It turns out, that exactly those properties are displayed in the following (admittedly simple) → Windows/PowerShell/pipeline:
code {
PS C:\> $proc | → Windows/PowerShell/command-inventory/noun/list/format[format-list]

Id      : 2980
Handles : 695
CPU     : 4.953125
SI      : 1
Name    : powershell
code }

}

sa:

  An object can be serialized (persisted) with the `export-cliXML` cmdLet and later be instantiated again with the `import-cliXML` cmdLet
 (see the → Windows/PowerShell/command-inventory/noun/cliXML[command noun `cliXML`]).

  The → Windows/PowerShell/command-inventory/noun/object/select[`select-object` cmdLet]

  → Windows/PowerShell/language/object[Object creation in PowerShell]

  → Windows/PowerShell/language/object/get-property-value-by-dynamic-property-name[Get an object's property value by a dynamic property name]

  It is not possible to use → Windows/PowerShell/language/variable/automatic/psHome/_format_ps1xml[`*.format.ps1xml`] files to customize how hash tables are displayed.

  → Windows/PowerShell/language/object/psObject[The `psObject` object]
