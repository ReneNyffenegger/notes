$ PowerShell: functions
@ function

A function is one of the → Windows/PowerShell/language/command[PowerShell command] types which have an entry in the 
→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandTypes[`System.Management.Automation.CommandTypes` enum].

{ A function is a script block #ps-func-script-block

  A function seems to be a named → Windows/PowerShell/language/scriptblock:
code {
PS C:\> function dummy() { write-output 42 }
PS C:\> $function:dummy.GetType().FullName
→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/ScriptBlock[System.Management.Automation.ScriptBlock]
code }

}
{ All output goes to the pipeline

  All output that a function prodcues goes to the → Windows/PowerShell/pipeline.

  This is fundamentally different from → Windows/PowerShell/language/class[class] methods where only values go to the pipeline that are explicitly mentioned with the → Windows/PowerShell/language/statement/return[`return`] statement.

}
{ Displaying the definition of function

  The definition of function might be displayed with the → Windows/PowerShell/command-inventory/noun/content/get[`get-content`] cmdlet:
code {
PS C:\> get-content function:/mkdir
code }

}

sa:

  The → Microsoft/dot-net classes → Microsoft/dot-net/namespaces-classes/System/Management/Automation/FunctionInfo[`System.Management.Automation.FunctionInfo`] and
  → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CmdletBindingAttribute[`System.Management.Automation.CmdletBindingAttribute`].

  The existence of a function can be verified with
code {
PS C:\Users\Rene> → Windows/PowerShell/command-inventory/noun/path/test[test-path] function:\mkdir
True
code }

  Functions exist in a → Windows/PowerShell/language/scopes[scope].

  → Windows/PowerShell/language/provider[Providers]

  → Windows/PowerShell/language/variable/create-global-var-in-func[Create a] global → Windows/PowerShell/language/variable[variable] in a function.

