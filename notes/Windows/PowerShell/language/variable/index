$ PowerShell: variables

A *variable* stores a value of a specific → Windows/PowerShell/language/type[type]. The variable itself, however, is not *typed*, although it can be *constrained* to hold a specific type.

A variable to which no value was assigned has the value `$null`. The `test-path` → Windows/PowerShell/language/cmdlet[cmdlet] checks if a variable has been assigned a value.

{ Variable names

  As in a → Linux/shell[Unix shell] or in → development/languages/Perl[Perl], varibles start with a dollar sign (`$`).

  The names of variables are not case sensitive.

}
{ Categories of variables

  Variables can be categorized like so:
    • static
    • instance
    • array element
    • hashtable key/value pair
    • parameter
    • ordinary
    • provider dirves

}
{ Constraining variable types

code {
[int] $theNum = 42
code }

  See also → Windows/PowerShell/language/statement/function/parameters#ps-param-constrained-type[constrained types for function parameters].

  Variables in the `env:`, `alias:` and the *file system* namespaces are constraint to type `string`.
  -
  Variables in the `function:` namespace are constraint to the type `scriptblock`.

}
{ Listing variables

  The names and values of variables are found in the → Windows/PowerShell/language/provider/drive[drive] `variable:`. Thus, they can be displayed with
code {
get-childItem variable:
code }

}

sa:
  → Windows/PowerShell/language/variable/automatic[automatic] and
  → Windows/PowerShell/language/variable/preference[preference] variables

  The → Windows/PowerShell/language/variable/preference[preference] variable → Windows/PowerShell/language/variable/preference/MaximumVariableCount[`$maximumVariableCount`] controls
  the maximum number of variables that PowerShell keeps track of.
  
  A variable is an → Windows/PowerShell/language/item[item].
