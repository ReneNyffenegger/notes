$ PowerShell: variables
@ variable

A *variable* stores an → Windows/PowerShell/language/object[object] of a specific → Windows/PowerShell/language/type[type]. The variable itself, however, is not *typed*, although it can be *constrained* to hold a specific type.
-
The currently assigned type of a variable can be determined with `getType()`:
code {
$x = 42
$x.getType()
code }

A variable to which no value was assigned has the value → Windows/PowerShell/language/variable/automatic/null[`$null`]. The `test-path` → Windows/PowerShell/language/cmdlet[cmdlet] checks if a variable has been assigned a value.

{ Variable names

  As in a → Linux/shell[Unix shell] or in → development/languages/Perl[Perl], variables start with a dollar sign (`$`).

  The names of variables are not case sensitive.

}
{ Categories of variables

  Variables can be categorized like so:
    • static
    • instance
    • array element
    • hashtable key/value pair
    • parameter
    • ordinary
    • provider → Windows/PowerShell/language/provider/drive[drives]

}
{ Constraining variable types

  A variable can be declared to be → Windows/PowerShell/language/variable/loosly-and-strongly-typed[strongly or loosly typed].

  The following variable declaration creates a strongly typed variable:
code {
[int] $theNum = 42
code }

  See also → Windows/PowerShell/language/statement/function/parameters#ps-param-constrained-type[constrained types for function parameters].

  Variables in the `env:`, `alias:` and the *file system* namespaces are constraint to type `string`.
  -
  Variables in the `function:` namespace are constraint to the type `scriptblock`.

}
{ Listing variables

  The names and values of variables are found in the → Windows/PowerShell/language/provider/drive[drive] `variable:`. Thus, they can be displayed with
code {
→ Windows/PowerShell/command-inventory/noun/childItem/get[get-childItem] variable:
code }

}
{ Assign user-input to a variable

  The → Windows/PowerShell/language/cmdlet that allows to prompt a user for text and then assign the text to a varible is
  → Windows/PowerShell/command-inventory/noun/host/read[`read-host`].

}
{ .NET classes related to variables

  Some → Microsoft/dot-net[.NET] classes that pertain to variables are:
    • `System.Management.Automation.LocalVariable`
    • `System.Management.Automation.NullVariable`
    • `System.Management.Automation.PSVariable`
    • `System.Management.Automation.QuestionMarkVariable`
    • `System.Management.Automation.SessionStateCapacityVariable`

Such a list can be produced with
code {
→ Windows/PowerShell/command-inventory/noun/childItem/get[get-childItem] variable: | → Windows/PowerShell/command-inventory/noun/object/forEach[forEach-object] {$_.GetType().fullName} | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] -unique
code }

}


sa:
  → Windows/PowerShell/language/variable/automatic[automatic] and
  → Windows/PowerShell/language/variable/preference[preference] variables

  The → Windows/PowerShell/language/variable/preference[preference] variable → Windows/PowerShell/language/variable/preference/MaximumVariableCount[`$maximumVariableCount`] controls
  the maximum number of variables that PowerShell keeps track of.
  
  A variable is an → Windows/PowerShell/language/item[item].

  The → Windows/PowerShell/command-inventory/noun/variable[cmdLet noun `variable`]

  The → Microsoft/dot-net/namespaces-classes[.NET type] of PowerShell variables is → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSVariable[`System.Management.Automation.PSVariable`].
