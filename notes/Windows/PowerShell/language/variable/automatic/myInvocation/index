$ PowerShell: the automatic variable $myInvocation

The → Windows/PowerShell/language/variable/automatic[automatic variable] `$myInvocation` stores information about the
current → Windows/PowerShell/language/command[command] if the command is a → Windows/PowerShell/language/function[function],
a script or a → Windows/PowerShell/language/scriptblock.

{ Type of $myInvocation

  The → Microsoft/dot-net[.NET] framework type of `$myInvocation` is → Microsoft/dot-net/namespaces-classes/System/Management/Automation/InvocationInfo[`System.Management.Automation.InvocationInfo`] as can be demonstrated with
code {
PS C:\> $myInvocation.getType().fullName
code }

}
{ Properties of $myInvocation  / InvocationInfo

  table { lll
    `MyCommand` ☰ a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandInfo[`System.Management.Automation.ScriptInfo`] object  ☰
    `BoundParameters` ☰ a `System.Management.Automation.PSBoundParametersDictionary` object that stores the parameters that were bound for this script or command. ☰
    `UnboundArguments` ☰ a `→ Microsoft/dot-net/namespaces-classes/System/Collections/Generic/List-T[System.Collections.Generic.List<System.Object>`] object that lists the arguments that were not bound to any parameter. ☰
    `ScriptLineNumber` ☰ The line in the invoking script that contains the command being invoked ☰
    `OffsetInLine` ☰ ☰
    `HistoryId` ☰ ☰
    `ScriptName` ☰ ☰ What's the difference to `PSCommandPath`
    `Line` ☰ The text (of line `ScriptLineNumber`) that caused the invocation of the current command  ☰
    `PositionMessage` ☰ ☰
    `PSScriptRoot` ☰  The absolute path of the script that invoked the current command ☰ Compare with the → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/psScriptRoot-psCommandPath[`$psScriptRoot`] which stors the absolute path of the script being invoked.
    `PSCommandPath` ☰ The absolute path to the directory where where the script is located that invoked the current command ☰ Compare with the → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/psScriptRoot-psCommandPath[`$psCommandPath`] which stores the absolute path of the direcotry in which the script being invoked is located. What's the difference to `ScriptName`?
    `InvocationName` ☰ ☰
    `PipelineLength` ☰ ☰
    `PipelinePosition` ☰ ☰
    `ExpectingInput` ☰ ☰
    `CommandOrigin` ☰ ☰
    `DisplayScriptPosition` ☰ ☰
  table }

}
{ Determining the name of a script

  Arguably, one of the most interesting uses of `$myInvocation` is to figure out the name of a script within a script:
code {
$scriptName = $myInvocation.myCommand.name
code }

 `$myInvocation.myCommand.name` always evaluates to a file name only, without any path components added to it, regardless if the script was invoked with a relative or absolute path name or from a
  different directory.

  In order to get the full and absolute path name of a script, the expression `$myInvocation.myCommand.path` must be used.

  Outside of a script, the expression `$myInvocation.myCommand.path` is → Windows/PowerShell/language/variable/automatic/null[`$null`].

}
{ Determining the directory in which a script is located #myInvocation-dir-of-script

  Another interesting case of `$myInvocation` is that it allows to determine the directory in which an script is located
code {
$dir = → Windows/PowerShell/command-inventory/noun/path/split[split-path] $myInvocation.myCommand.path
code }

}


sa:

  Other → Windows/PowerShell/language/variable/automatic[automatic variables]
