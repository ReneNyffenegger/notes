$ PowerShell: the automatic variable $myInvocation

The → Windows/PowerShell/language/variable/automatic[automatic variable] `$myInvocation` stores information about the
current → Windows/PowerShell/language/command[command] if the command is a → Windows/PowerShell/language/function[function],
a → Windows/PowerShell/script[script] or a → Windows/PowerShell/language/scriptblock.

{ Type of $myInvocation

  The → Microsoft/dot-net[.NET] framework type of `$myInvocation` is → Microsoft/dot-net/namespaces-classes/System/Management/Automation/InvocationInfo[`System.Management.Automation.InvocationInfo`] as can be demonstrated with
code {
PS C:\> $myInvocation.getType().fullName
code }

}
{ Properties of $myInvocation  / InvocationInfo

  table { lll
    ~Property~ ☰ ~Comment~ ☰ ~Misc~
    `MyCommand` ☰ An object that inherits from → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandInfo[`System.Management.Automation.CommandInfo` object. In the case of a → Windows/PowerShell/script[script], it's a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandInfo[`System.Management.Automation.ScriptInfo`] or `System.Management.Automation.ExternalScriptInfo`] object and `MyCommand.Name` evaluates to the → #myInvocation-name-of-script[filename] of the current → Windows/PowerShell/script[script], `MyCommand.Path` to its → #myInvocation-dir-of-script[directory]. ☰ See also → Windows/PowerShell/script#ps-script-name-dir[determining the name and directory] of a → Windows/PowerShell/script[PowerShell script] within the script itself.
    `BoundParameters` ☰ a `System.Management.Automation.PSBoundParametersDictionary` object that stores the parameters that were bound for this script or command. ☰
    `UnboundArguments` ☰ a `→ Microsoft/dot-net/namespaces-classes/System/Collections/Generic/List-T[System.Collections.Generic.List<System.Object>`] object that lists the arguments that were not bound to any parameter. ☰
    `ScriptLineNumber` ☰ The line in the invoking script that contains the command being invoked ☰
    `OffsetInLine` ☰ ☰
    `HistoryId` ☰ ☰
    `ScriptName` ☰ The name of the script that *contains* the cmdLet ☰ What's the difference to `PSCommandPath`
    `Line` ☰ The text (of line `ScriptLineNumber`) that caused the invocation of the current command  ☰
    `PositionMessage` ☰ ☰
    `PSScriptRoot` ☰  The absolute path of the script that invoked the current command ☰ Compare with the → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/psScriptRoot-psCommandPath[`$psScriptRoot`] which stores the absolute path of the script being invoked.
    `PSCommandPath` ☰ The absolute path to the directory where where the script is located that invoked the current command ☰ Compare with the → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/psScriptRoot-psCommandPath[`$psCommandPath`] which stores the absolute path of the directory in which the script being invoked is located. What's the difference to `ScriptName`?
    `InvocationName` ☰ ☰
    `PipelineLength` ☰ ☰
    `PipelinePosition` ☰ ☰
    `ExpectingInput` ☰ ☰
    `CommandOrigin` ☰ A → Microsoft/dot-net/namespaces-classes/System/Management/Automation/CommandOrigin[`System.Management.Automation.CommandOrigin`] enum, either *Runspace* or *Internal*. ☰
    `DisplayScriptPosition` ☰ ☰
  table }

}
{ Determining the name of a script #myInvocation-name-of-script

  Arguably, one of the most interesting uses of `$myInvocation` is that it allows to determine the  the name of a → Windows/PowerShell/script[script] within the script:
code {
$scriptName = $myInvocation.myCommand.name
code }

 `$myInvocation.myCommand.name` always evaluates to a file name only, without any path components added to it, regardless if the script was invoked with a relative or absolute path name or from a
  different directory.

  In order to get the full and absolute path name of a script, the expression `$myInvocation.myCommand.path` must be used.

  Outside of a script, the expression `$myInvocation.myCommand.path` is → Windows/PowerShell/language/variable/automatic/null[`$null`].

}
{ Determining the directory in which a script is located #myInvocation-dir-of-script

  Another interesting case of `$myInvocation` is that it allows to determine the directory in which an script is located.
  -
 `myInvocation.myCommand.path` contains the full path (directory and script file name), therefore, in order to obtain the directory, the value of `$myInvocation.mycommand.path` must be passed
  to → Windows/PowerShell/command-inventory/noun/path/split[`split-path`]:
code {
$dir = → Windows/PowerShell/command-inventory/noun/path/split[split-path] $myInvocation.myCommand.path
code }

  Compare this value with that of → Windows/PowerShell/language/variable/automatic/psScriptRoot-psCommandPath[`$psScriptRoot`]

}
{ Script to demonstrate some values of myInvocation

  The following script is intended to display some values the properties of `$myInvocation`. The script body calls the function `func-1` which calls the function `func-2`. 
  -
  The script body as well as the functions print the (imho) interesting values:
  gh|about-PowerShell|/language/variable/automatic/myInvocation/script.ps1||

  


}


sa:

  Other → Windows/PowerShell/language/variable/automatic[automatic variables]
