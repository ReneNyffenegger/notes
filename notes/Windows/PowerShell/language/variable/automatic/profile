$ PowerShell: The automatic variable $PROFILE
@ $profile

The value of the → Windows/PowerShell/language/variable/automatic[automatic variable] `$profile` is the file name of a → Windows/PowerShell[PowerShell] profile
for the current user and the current host application. This profile is executed automatically when → Windows/PowerShell is started (unless
PowerShell is invoked with the → Windows/PowerShell#ps-cmd-line-opts[command line option] `-noProfile`).

{ Type of $profilej

  The type of `$profile` *seems* to be a string:
code {
PS → Windows/dirs/Users/username[C:\Users\Rene]> $profile.getType().fullName
→ Microsoft/dot-net/namespaces-classes/System/String[System.String]
code }


  { Four profile locations

    It turns out, though, that `$profile` is not a excatly a string as this variable actually stores four profile locations by means of the → Windows/PowerShell/language/object/Extended-Type-System:
code {
PS → Windows/dirs/Users/username[C:\Users\Rene]> → Windows/PowerShell/command-inventory/noun/output/write[write-output] $profile
→ Windows/dirs/Users/username/Documents/WindowsPowerShell/Modules[C:\Users\Rene\Documents\WindowsPowerShell]\Microsoft.PowerShell_profile.ps1

PS → Windows/dirs/Users/username[C:\Users\Rene]> → Windows/PowerShell/command-inventory/noun/output/write[write-output] $profile.currentUserCurrentHost
→ Windows/dirs/Users/username/Documents/WindowsPowerShell[C:\Users\Rene\Documents\WindowsPowerShell]\Microsoft.PowerShell_profile.ps1

PS → Windows/dirs/Users/username[C:\Users\Rene]> → Windows/PowerShell/command-inventory/noun/output/write[write-output] $profile.currentUserAllHosts
→ Windows/dirs/Users/username/Documents/WindowsPowerShell[C:\Users\Rene\Documents\WindowsPowerShell]\profile.ps1

PS → Windows/dirs/Users/username[C:\Users\Rene]> → Windows/PowerShell/command-inventory/noun/output/write[write-output] $profile.allUsersCurrentHost
→ Windows/dirs/Windows/System32/WindowsPowerShell/vn_m[C:\Windows\System32\WindowsPowerShell\v1.0]\Microsoft.PowerShell_profile.ps1

PS → Windows/dirs/Users/username[C:\Users\Rene]> → Windows/PowerShell/command-inventory/noun/output/write[write-output] $profile.allUsersAllHosts
→ Windows/dirs/Windows/System32/WindowsPowerShell/vn_m[C:\Windows\System32\WindowsPowerShell\v1.0]\profile.ps1
code }

    Note: *host* in this context does not refer to a computer or server, but rather to the program that is hosting → Windows/PowerShell, compare with the
    → Windows/PowerShell/command-inventory/noun/host[cmdLet noun `host`].

    The four profile location values can also be shown by → Windows/PowerShell/pipeline[piping] the `$profile` «object» into `→ Windows/PowerShell/command-inventory/noun/list/format` with the `-force` option or by explicitely asking
    for the `→ Windows/PowerShell/language/object/member/intrinsic/psExtended` member:
code {
C:\> $profile | → Windows/PowerShell/command-inventory/noun/list/format -force
C:\> $profile.→ Windows/PowerShell/language/object/member/intrinsic/psExtended
code }


  }
}
{ PowerShell Core

  In PowerShell core, the directory name `WindowsPowerShell` is replaced with simply `PowerShell`, for example `C:\Users\Rene\Documents\PowerShell\Microsoft.PowerShell_profile.ps1`

}

sa:

  In order to bypass the execution of the profile file when PowerShell is started, it needs to be started with → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[`powershell.exe -noProfile`].
  -
  If PowerShell is started without the → Windows/PowerShell#ps-cmd-line-opts[command line option] `-noLogo` *and* the execution of the profile script takes longer than a certain amount of time
 (I believe this threshold to be 500 ms), PowerShell will also display the message
 *Loading personal and system profiles took xyz ms.*. 

  The profile is not executed if the → Windows/PowerShell/execution-policy[execution policy] is set to → Windows/PowerShell/execution-policy#ps-exec-policy-restricted[restricted].

  Other → Windows/PowerShell/language/variable/automatic[automatic variables]

  This (simple) → development/tools/scripts/personal/profile_ps1[`profile.ps1`] script.

  The profile is a good place to define default value in the → Windows/PowerShell/language/variable/preference/psDefaultParameterValues[`$psDefaultParameterValues`] automatic variable.

  The → Linux/fhs/home/username/_profile[`.profile`] file in → Linux/shell/bash.
