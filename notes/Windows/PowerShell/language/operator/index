$ PowerShell: operators
@ operator


The → Windows/PowerShell/language/operator/subexpression[subexpression operator `$(…)`]

`@(…)`

`,` (two variants: unary and binaray)

`-not` (two variants: → Windows/PowerShell/language/operator/logical[logical] and bitwise)

→ Windows/PowerShell/language/operator/arithemtic[Arithmetic] operators: `+`, `-` `*`, `/`, `%`, `++`, `--`, `+=`, `-=`, `*=`, `/=`, `-shl`, `-shr`, `-band`, `-bnot`, `-bor`, `-xor`
-
Note that the → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object`] → Windows/PowerShell/language/cmdlet[cmdlet] can also be 
→ Windows/PowerShell/command-inventory/noun/object/forEach#forEach-object-abbr[abbreviated with `%`].

→ Windows/PowerShell/language/operator/string-manipulation[String manipulation] (`-join`, `-split` (unary and binary) and `-replace`)

cast

The → Windows/PowerShell/language/operator/as[`-as`] operator casts a value into a different type.

*range operator*. It creates an unconstrained one dimensional → Windows/PowerShell/language/type/array[array]. (see also `..`)

format

The format operator (→ Windows/PowerShell/language/operator/f[`-f`]) formats strings.

→ Windows/PowerShell/language/operator/in[`-in`]

The → Windows/PowerShell/language/operator/call[call (or invoke)] operator `&` executes script files, → Windows/PowerShell/language/scriptblock[script blocks],
→ Windows/development/Portable-Executable/EXE[executables] etc. with *child scope*. Thus, they cannot
modify the current → Windows/PowerShell/language/scopes[scope].
-
The → Windows/PowerShell/language/operator/dot[dot sourcing operator] (`.`) runs a script in the *current* scope and thus can add, delete or modify
→ Windows/PowerShell/language/function[functions], → Windows/PowerShell/language/alias[aliases], → Windows/PowerShell/language/variable[variables] etc.


shift

→ Windows/PowerShell/language/operator/logical[logical]: `-and`, `-or`, `-xor`, `-not`, `!`

assignment

redirection

→ Windows/PowerShell/language/operator/comparison[Comparison operators] (`-eq`, `-gt`, …)

{ Order of precedence

  table { ll

    `$()` / `@()` / `()`	☰
    `.`	☰ Member access operator
    `::` 	☰ Static operator
    `[…]` ☰ Index operator
    `[→ Windows/PowerShell/language/type[datatype]]` ☰ cast operator
    `-split` ☰ Split operator (This is a *unary* operator and has higher precedence than the binary split operator)
    `-join` 	☰ Join operator (This is a *unary* operator and has higher precedence than the binary join operator)
    `,` ☰ Comma operator
    `++` / `--`	☰ Increment and decrement (These operators are considered *assignment operators*)
    `!` / `-not`	☰ Logical operators
    `..`☰ Range operator
    `-f` ☰ → Windows/PowerShell/language/operator/f[Format operator]
    `-`	☰ Unary (negative) operator
    `*` / `/` / `%` ☰
    `+` / `-`	☰
    `-split` / `-join` / `-is` / `-isNot` / `-as` / `-eq`/ `-ne` / `-ne` / `-gt` / `-gt` / `-lt` / `-le` / `-like` / `-notLike` / `-match` / `-notMatch` / `-in` / `-notIn` / `-contains` / `-notContains` / `-replace` ☰  The `-split` and -`join` operator with this precedence are binary opeators. There is also a *unary* version that has higher precedence.
    `-band` / `-bnot` / `-bor` / `-bxor` ☰
    `-and` / `-or` `-xor` ☰
    `.` ☰ → Windows/PowerShell/language/operator/dot[Dot source operator]
    `&` ☰ → Windows/PowerShell/language/operator/call[Call operator]
    `|` ☰ Pipeline operator
    `>` / `>>` / `2>` / `2>>` / `2>&1`☰ Redirection operators
    `=` / `+=` / `-=` `*=` / `/=` / `%=` ☰ 

  table }

}
{ Experimental operators

  PowerShell Core uses → Windows/PowerShell/command-inventory/noun/experimentalFeature[experimental features] to introduce some experimental operators:
    • ternary operator
    • `&&` and `||` between → Windows/PowerShell/pipeline[pipeline] invocations

  These operators can be enabled with
code {
PS C:\> enable-→ Windows/PowerShell/command-inventory/noun/experimentalFeature[experimentalFeature] PSTernaryOperator
PS C:\> enable-→ Windows/PowerShell/command-inventory/noun/experimentalFeature[experimentalFeature] PSPipelineChainOperators
code }

}
{ Misc

  Operators cannot be → Windows/PowerShell/language/alias[aliased].

}

sa:
  The → Windows/PowerShell/language[PowerShell language]
