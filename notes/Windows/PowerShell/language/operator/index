$ PowerShell: operators
@ operator


The → Windows/PowerShell/language/operator/subexpression[subexpression operator `$(…)`]

`@(…)`

`,` (two variants: unary and binaray)

`-not` (two variants: → Windows/PowerShell/language/operator/logical[logical] and bitwise)

Arithmetic operators: `+`, `-` `*`, `/`, `%`, `++`, `--`, `+=`, `-=`, `*=`, `/=`
-
Note that the → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object`] → Windows/PowerShell/language/cmdlet[cmdlet] can also be 
→ Windows/PowerShell/command-inventory/noun/object/forEach#forEach-object-abbr[abbreviated with `%`].

→ Windows/PowerShell/language/operator/string-manipulation[String manipulation] (`-join`, `-split` (unary and binary) and `-replace`)

cast

The → Windows/PowerShell/language/operator/as[`-as`] operator casts a value into a different type.

*range operator*. It creates an unconstrained one dimensional → Windows/PowerShell/language/type/array[array]. (see also `..`)

format

→ Windows/PowerShell/language/operator/f[`-f`] formats strings.

→ Windows/PowerShell/language/operator/in[`-in`]

The → Windows/PowerShell/language/operator/call[call (or invoke)] operator `&`.

shift

→ Windows/PowerShell/language/operator/logical[logical]: `-and`, `-or`, `-xor`, `-not`, `!`

assignment

redirection

→ Windows/PowerShell/language/operator/comparison[Comparison operators] (`-eq`, `-gt`, …)

{ Misc

  Operators cannot be → Windows/PowerShell/language/alias[aliased].

}

sa:
  The → Windows/PowerShell/language[PowerShell language]
