$ PowerShell: operators
@ operator


The → Windows/PowerShell/language/operator/subexpression[subexpression operator `$(…)`]

`@(…)`

`,` (two variants: unary and binaray)

`-not` (two variants: → Windows/PowerShell/language/operator/logical[logical] and bitwise)

→ Windows/PowerShell/language/operator/arithemtic[Arithmetic] operators: `+`, `-` `*`, `/`, `%`, `++`, `--`, `+=`, `-=`, `*=`, `/=`, `-shl`, `-shr`, `-band`, `-bnot`, `-bor`, `-xor`
-
Note that the → Windows/PowerShell/command-inventory/noun/object/forEach[`forEach-object`] → Windows/PowerShell/language/cmdlet[cmdlet] can also be 
→ Windows/PowerShell/command-inventory/noun/object/forEach#forEach-object-abbr[abbreviated with `%`].

→ Windows/PowerShell/language/operator/string-manipulation[String manipulation] (`-join`, `-split` (unary and binary) and `-replace`)

cast

The → Windows/PowerShell/language/operator/as[`-as`] operator casts a value into a different type.

*range operator*. It creates an unconstrained one dimensional → Windows/PowerShell/language/type/array[array]. (see also `..`)

format

→ Windows/PowerShell/language/operator/f[`-f`] formats strings.

→ Windows/PowerShell/language/operator/in[`-in`]

The → Windows/PowerShell/language/operator/call[call (or invoke)] operator `&` executes script files, → PowerShell/language/scriptblock[script blocks], → Windows/development/Portable-Executable/EXE[executables] etc. with *child scope*. Thus, they cannot
modify the current scope.
-
The → Windows/PowerShell/language/operator/dot[dot sourcing operator] (`.`) runs a script in the *current* scope and thus can add, delete or modify
→ Windows/PowerShell/language/function[functions], → Windows/PowerShell/language/alias[aliases], → Windows/PowerShell/language/variable[variables] etc.


shift

→ Windows/PowerShell/language/operator/logical[logical]: `-and`, `-or`, `-xor`, `-not`, `!`

assignment

redirection

→ Windows/PowerShell/language/operator/comparison[Comparison operators] (`-eq`, `-gt`, …)

{ Experimental operators

  PowerShell Core uses → Windows/PowerShell/command-inventory/noun/experimentalFeature[experimental features] to introduce some experimental operators:
    • ternary operator
    • `&&` and `||` between → Windows/PowerShell/pipeline[pipeline] invocations

  These operators can be enabled with
code {
PS C:\> enable-→ Windows/PowerShell/command-inventory/noun/experimentalFeature[experimentalFeature] PSTernaryOperator
PS C:\> enable-→ Windows/PowerShell/command-inventory/noun/experimentalFeature[experimentalFeature] PSPipelineChainOperators
code }

}
{ Misc

  Operators cannot be → Windows/PowerShell/language/alias[aliased].

}

sa:
  The → Windows/PowerShell/language[PowerShell language]
