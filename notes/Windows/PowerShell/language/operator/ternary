$ PowerShell: Ternary operator

The *ternary operator* allows to rewrite a simple → Windows/PowerShell/language/statement/if[`if ($cond) { $expr_true } else { $expr_false}`] statement like so (and thus save a few key strokes, the most expensive resource in a programmer's life):
code {
$cond ? $expr_true : $expr_false
code }

Simple example:
code {
$flag = $true

$val = $flag ? 'true' : 'false'

write-output "val  = $val"
code }

{ Workaround for Unexpected token '?' in expression or statement

  The ternary operator was included in (I believe) PowerShell 7.1. In earlier versions, trying to use the ternary operator would fail with the error message
 *Unexpected token '?' in expression or statement.*.

  A workaround in such version sis to use the evaluation value of an → Windows/PowerShell/language/statement/if[`if` statement]: 
code {
$flag = $false

$val  = → Windows/PowerShell/language/statement/if ($flag) { 'true' } else { 'false' }

→ Windows/PowerShell/command-inventory/noun/output/write "val  = $val"
code }

  In some earlier versions of *PowerShell Core*, it was possible to enable the ternary operator as an *experimental operator*:
code {
PS C:\> enable-→ Windows/PowerShell/command-inventory/noun/experimentalFeature[experimentalFeature] PSTernaryOperator
code }

}
 
sa:

  → Windows/PowerShell/language/operator[operators]
