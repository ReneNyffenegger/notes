$ PowerShell: -f operator

The `-f` → Windows/PowerShell/language/operator[operator] formats strings.
-
`-f` is a shorthand form for the → Microsoft/dot-net/namespaces-classes/System/String/Format[`String.Format`] function.

{ Syntax

  The `-f` operator is a binary operator with the format string on the left side and the values (→ Windows/PowerShell/language/type/array[array]) to be formatted on its right side:

code {
'format string' -f → Windows/PowerShell/language/type/array[array]
code }

  In the format string, curly braces denote the locations where the elements of the array will be formatted.
  -
  In the simplest form, such curly braces contain the index of the element in the array that will be formatted. Note: in the following
  example, the second element is printed first with other two elements following:
code {
PS C:\> '{2} {0} {1}' -f 'zero', 'one', 'two'
two zero one
code }

   Specifing ~width and alignment~
   -
   The width of the formatted string can be controlled by separating the position number from the width by a comma. This allows for nicely formated tables with numbers:
code {
foreach ($i in  5,111,71) {
foreach ($j in 42,321, 9) {
  '{0,3} * {1,3}   = {2,5}' -f ($i, $j, ($i*$j))
}}
  5 *  42   =   210
  5 * 321   =  1605
  5 *   9   =    45
111 *  42   =  4662
111 * 321   = 35631
111 *   9   =   999
 71 *  42   =  2982
 71 * 321   = 22791
 71 *   9   =   639
code }

  In order to left align a value, the width needs to be prepended by a minus sign:
code {
foreach ($i in ('five', 5), ('forty-two', 42), ('three', 3)) {
  ' {1,2}: {0,-9}' -f $i
}
  5: five
 42: forty-two
  3: three
code }

  A ~formatting instruction~ can be given with the colon. For example, `:x` formats a number as hexadecimal (compare with → Windows/PowerShell/command-inventory/noun/hex/format[`format-hex`]). Formatting instructions can be specified with or without a width:
code {
(3,255,2048).foreach( { '{0,3:x} = {0,4} | {0:x} = {0}' -f $_ } )
  3 =    3 | 3 = 3
 ff =  255 | ff = 255
800 = 2048 | 800 = 2048
code }

  ~Leading zeros~ can be specified as follows
code {
(1,23,456,7890).forEach( { '{0,6:00000}' -f $_ } )
 00001
 00023
 00456
 07890
code }

  Alternatively, leading zeroes can also be given with the `d` instruction:

code {
(1,23,456,7890).forEach( { '{0,6:d5}' -f $_ } )
 00001
 00023
 00456
 07890
code }

}

{ Positional arguments and alignment

  The following script demonstrates the positional arguments and alignment:

  gh|about-Powershell|/language/operator/string-manipulation/f/positional-arguments-and-alignment.ps1||

}
{ Escape curly braces

  Because curly braces (`{` and `}`) have a special meaning when used with the `-f` operator, there needs to be a way to escape that meaning in order to have curly braces
  in the created string (for example when used to create → development/languages/JavaScript/JSON objects).

  In order to escape a curly brace, it needs to be doubled:
code {
'{{"message": "{0}", "data:{1} }}' -f 'foo', 'bar'
code }

}
{ Formatting a System.DateTime object

  A → Microsoft/dot-net/namespaces-classes/System/DateTime[`System.DateTime`] object can be formatted with `-f` like so:

  gh|about-Powershell|/language/operator/string-manipulation/f/DateTime.ps1||

}

sa:
  → Windows/PowerShell/language/operator[operators]

  → development/languages/printf[printf].
