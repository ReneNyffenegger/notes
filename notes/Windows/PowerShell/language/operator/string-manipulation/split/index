$ PowerShell: -Split Operator

The `-split` operator splits a string into an → Windows/PowerShell/language/type/array[array] of strings.

There is a unary and a binary variant of the operator;

The unary variant splits on consecutive whitespaces:
code {
PS C:\> -split "one two     three`tfour`t `tfive"
one
two
three
code }

For the binary variant, the first operand is the string to be split, the second argument the pattern on which to split:
code {
PS C:\> 'one two   three' -split ' '
one
two


three
code }

It's possible to use → development/regular-expressions[regular expressions] in the second operand
code {
PS C:\> "one two   three`t `tfour" -split '\s+'
one
two
three
four
code }

In order to retain the value that separates the splitted parts, a regexp-capturing group (the sub-pattern within the parantheses) needs to be used;
code {
PS C:\> '12+345/6*78-9' -split '([+/\-*])'
12
+
345
/
6
*
78
-
9
code }

The result of a split can be joined, for example to produce a nicer string:
code {
PS C:\> '12+345/6*78-9' -split '([+/\-*])' -join ' '
12 + 345 / 6 * 78 - 9
code }

{ Splitting a string into its characters

  Using the empty character to split a string produces an array that consists of the characters of the string plus one empty string at either end of the array:
code {
PS: > ('abc' -split '') -join '*'
*a*b*c*
code }

  A string can be split into an array of its characters without such empty characters using the string's `ToCharArray()` method:
code {
PS:> 'abcde'.ToCharArray() -join '*'
a*b*c*d*e
code }

}
{ Splitting a string into pairs of characters #ps-split-pair-characters

  A string can be split into pairs of characters like so:
code {
'abcdef' -split '(..)' -ne ''
code }

  This is especially useful if the string contains a hexadecimal representation of a binary stream and a
  → Windows/PowerShell/language/type/array/byte[byte array] should be produced from it.

code {
[byte[]] $hex_values = 'DeadBeef11Cafe' -split '(..)' -ne '' | → Windows/PowerShell/command-inventory/noun/object/forEach[foreach-object] { → Windows/PowerShell/command-inventory/noun/expression/invoke[invoke-expression] "0x$_" }
code }


}

sa:

  → Microsoft/dot-net/namespaces-classes/System/String/Split
