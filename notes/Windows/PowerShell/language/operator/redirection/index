$ PowerShell: redirection operators

The redirection → Windows/PowerShell/language/operator[operators] (`>`, `>>`, `2>`, `2>>`, `2>&1`) send a → Windows/PowerShell/language/command[command's] or an expression's output
to a file.

With Powershell 5.1, the redirection operators are effectively aliases for the → Windows/PowerShell/command-inventory/noun/file/out[`out-file` cmdlet].

{ Encoding

  It turns out that files are created with defferent → development/Unicode/character-encoding[encoding] when using `>` in PowerShell 5.1 and PowerShell 7.1.
  -
  This is demonstrated with the following test script. It creates a file `abc.txt` and then displays each byte in the file that was created:
  gh|about-PowerShell|/language/operator/redirection/encoding.ps1||

  In «ordinary» PowerShell, the file is created with a → development/endianness[little-endian] → development/Unicode/BOM[Byte Order Mark (BOM)] and each characters is stored as UTF-16, thus requires two(!) bytes:
code {
 ff ÿ
 fe þ
 61 a
 00
 62 b
 00
 63 c
 00
 0d
 00
 0a

 00
code }

  PowerShell Core is more reasonable and does not create the file with a BOM and uses → development/Unicode/UTF-8[UTF-8](?)
code {
 61 a
 62 b
 63 c
 0d
 0a
code }

  Because the redirection operators are aliased to `out-file`, the encoding for the files that are produced with the redirection operators can be controlled with the
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/DefaultParameterDictionary[`$psDefaultParameterValues`] variable:
code {
$psDefaultParameterValues['out-file:encoding'] = 'utf8'
code }

}
 
sa:

  In order to express smaller than (`<`) or greater than (`>`), the → Windows/PowerShell/language/operator/comparison[`comparison operators -lt` or `-gt`] should be used.
  
  → Linux/shell/bash/redirection[The redirection operators in bash]

  → Windows/PowerShell/language/operator[operators]
