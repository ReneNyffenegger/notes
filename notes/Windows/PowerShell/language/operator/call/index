$ PowerShell: call operator (&)

The *call operator* executes code in *child scope*. Thus, any modification that are made to → Windows/PowerShell/language/function[functions], → Windows/PowerShell/language/alias[aliases], → Windows/PowerShell/language/variable[variables] etc. have
no effect to the calling scope.
-
This is in contrast to the → Windows/PowerShell/language/operator/dot[dot sourcing operator] which executes code in the current context and thus allows modifications of it.


{ Run a command stored in a string

  gh|about-PowerShell|/language/operator/call/printSomething.ps1||

}
{ Script block #ps-call-operator-script-block

 `&` also executes the content of a → Windows/PowerShell/language/scriptblock.
  gh|about-PowerShell|/language/operator/call/script-block/Hello-world.ps1||

  With the `param` statement, it's possible to pass values to the → Windows/PowerShell/language/scriptblock:
  gh|about-PowerShell|/language/operator/call/script-block/param.ps1||

  A script block can reference → Windows/PowerShell/language/variable[variables] of the scope that invoked the scriptblock.
  The value of the variable will be that of its value at the time the script block was invoked, not at the time the script block
  was created.

  This example also demonstrates that modifiying a variable's value has no effect in the calling scope:
  gh|about-PowerShell|/language/operator/call/script-block/variables.ps1||


}
{ Execute an executable

   The call operator can also be used to execute an → Windows/development/Portable-Executable/EXE[exe]. Parts of the path can be stored in a
  → Windows/PowerShell/language/variable[variable]:
code {
PS C:\> & $home\bin\foo.exe
code }

}


sa:
  → Windows/PowerShell/language/operator[operators]
