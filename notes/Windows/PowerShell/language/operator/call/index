$ PowerShell: call operator (&)

The *call operator* executes code in *child → Windows/PowerShell/language/scopes[scope]*. Thus, any modification that are made to → Windows/PowerShell/language/function[functions], → Windows/PowerShell/language/alias[aliases], → Windows/PowerShell/language/variable[variables] etc. have
no effect to the calling scope.
-
This is in contrast to the → Windows/PowerShell/language/operator/dot[dot sourcing operator] which executes code in the current context and thus allows modifications of it.

If an ampersand is used at the end of a → Windows/PowerShell/pipeline, the ampersand does not act as the call operator, instead the pipeline will be run as a PowerShell → Windows/PowerShell/command-inventory/noun/job[job].


{ Run a command stored in a string

  gh|about-PowerShell|/language/operator/call/printSomething.ps1||

}
{ Script block #ps-call-operator-script-block

 `&` also executes the content of a → Windows/PowerShell/language/scriptblock.
  gh|about-PowerShell|/language/operator/call/script-block/Hello-world.ps1||

  With the `param` statement, it's possible to pass values to the → Windows/PowerShell/language/scriptblock:
  gh|about-PowerShell|/language/operator/call/script-block/param.ps1||

  A script block can reference → Windows/PowerShell/language/variable[variables] of the scope that invoked the scriptblock.
  The value of the variable will be that of its value at the time the script block was invoked, not at the time the script block
  was created.

  This example also demonstrates that modifiying a variable's value has no effect in the calling scope:
  gh|about-PowerShell|/language/operator/call/script-block/variables.ps1||


}
{ Execute an executable

   The call operator can also be used to execute an → Windows/development/Portable-Executable/EXE[exe]. Parts of the path can be stored in a
  → Windows/PowerShell/language/variable[variable]:
code {
PS C:\> & $home\bin\foo.exe
code }

}
{ No new process is spawned

  Although a called script runs in its own scope, → Windows/PowerShell does not create a new
  → Windows/development/process to run the script (as might be expected from other → Linux/shell[(Unix) shells]).

  This is demonstrated with the following two scriptlets:
  { call-script.ps1

   `call-script.ps` just prints the → Windows/development/process/identifer[process identifier] (→ Windows/PowerShell/language/variable/automatic/PID[`$PID`]) and then
    calls `the-script.ps`.
 
    gh|about-PowerShell|/language/operator/call/no-new-process/call-script.ps1||

  }
  { the-script.ps1

    This is the script that is called by the script above:
    gh|about-PowerShell|/language/operator/call/no-new-process/the-script.ps1||

  }
  { Output

    The output demonstrates that both script's process identifiers are equal, so no new process was created:
code {
My PID is 161944
the-script.ps1 runs with PID = 161944
code }

  }

}
{ Executing «dynamic» commands #ps-call-op-dynamic-cmd

  The call operator does not try to parse the argument that is given to it
code {
$a = 12
$b = 21
$cmd = "write-host ($a+$b)"
& $cmd
code }
  The sequence above results in the error message *The term 'write-host (12+21)' is not recognized as a name of a cmdlet, function, script file, or executable program.*.

  In order to execute such dynamic commands, → Windows/PowerShell/command-inventory/noun/expression/invoke[`invoke-expression`] can be used:
code {
invoke-expression $cmd
code }

}


sa:
  → Windows/PowerShell/language/operator[operators]
