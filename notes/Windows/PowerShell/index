
{ Environment variables #ps-env-variables

  PowerShell accesses the values of → development/environment-variable[environment variables] by prefxing their name with `$env:` (technically: `$env` is a *PowerShell drive*).
code {
PS> echo $env:userprofile
code }

  The values of environment variables stored in the → Windows/registry[registry] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Environment[`HKEY_CURRENT_USER\Environment`] and
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Session-Manager/Environment[`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment`] can be read and written like
  so:
code {
PS C:\> echo [environment]::getEnvironmentVariable("PATH", "user"    )
PS C:\> echo [environment]::getEnvironmentVariable("PATH", "machine" )
PS C:\> [environment]::setEnvironmentVariable("A_VAR"      , "a value"      , "user") 
PS C:\> [environment]::setEnvironmentVariable("ANOTHER_VAR", "another value", "machine") 
code }


}
{ Tilde

  Apparently, the PowerShell, in the spirit of a → Linux/shell[Unix shell], expands the tilde (`~`) to the → Windows/dirs/Users/username[`%UserProfile%`] directory:
code {
PS  C:\> dir ~
code }

}
{ Show version
 
  Print PowerShell's version with `$PSversionTable` …
code {
PS C:\> $PSversionTable
code }

  … or use `get-host`.
code {
get-host | select-object version
code }

}

sa:
  → Windows/PowerShell/examples[Examples]

  The appearance and functionality of PowerShell is controlled by the → Windows/console-host.

  → Windows/PowerShell/script-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system[Script cannot be loaded because running scripts is disabled on this system]

  → Windows/PowerShell/alias/unix-and-cmd-exe-like[Unix and cmd.exe like default aliases]

links:
  → https://github.com/ReneNyffenegger/about-powershell[about powershell @ github]
