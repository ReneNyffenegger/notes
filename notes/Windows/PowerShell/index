
{ Environment variables #ps-env-variables

  PowerShell accesses the values of → development/environment-variable[environment variables] by prefxing their name with `$env:` (technically: `$env` is a *PowerShell drive*).
code {
PS> echo $env:userprofile
code }

  The values of environment variables stored in the → Windows/registry[registry] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Environment[`HKEY_CURRENT_USER\Environment`] and
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Session-Manager/Environment[`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment`] can be read and written like
  so:
code {
PS C:\> echo [environment]::getEnvironmentVariable("PATH", "user"    )
PS C:\> echo [environment]::getEnvironmentVariable("PATH", "machine" )
PS C:\> [environment]::setEnvironmentVariable("A_VAR"      , "a value"      , "user") 
PS C:\> [environment]::setEnvironmentVariable("ANOTHER_VAR", "another value", "machine") 
code }

   It's noteworthy that with this construct, it's not necessary to → Windows/registry/environment-variables#reg-wm_settingchange[send a `WM_SETTINGCHANGE`] after changing or creating a variable because
   PowerShell is smart enough to do that without being asked.

}
{ Tilde

  Apparently, the PowerShell, in the spirit of a → Linux/shell[Unix shell], expands the tilde (`~`) to the → Windows/dirs/Users/username[`%UserProfile%`] directory:
code {
PS  C:\> dir ~
code }

? However, it seems that it stumbles if a → Windows/PowerShell/language/variable[variable] contains a tilde …

}
{ Show version

  The version of the PowerShell installation is revealed in the
  → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/PsVersionTable[`$psVersionTable`].
 
}
{ Nice features

  { Create a file

    The following line creates a text file whose first (and only) line reads `Hello world.`:
code {
PS C:\> ${→ Windows/dirs/Users/username[c:\users\Rene]\tq84.txt}="Hello World"
code }

  }
  { adminsitrative constants

code {
1kb
2mb
3gb
4tb
5pb
code }

  The adminsitrative constants are not consistent with the IEC recommendations (kibabite etc…)

 }

}

{ TODO

  What is the significance of the environment variable `__PSLockdownPolicy` and its relationship to → Windows/dirs/Windows/System32/wldp_dll.

  → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Windows/PowerShell/PSreadline/ConsoleHost_history_txt

  The equivalent of VBS's → development/languages/VBA/language/statements/option/explicit[`option explicit`] seems to be `set-strictMode -version 2`.

  The environment variable → Windows/development/environment-variables#win-envvar-PSModulePath[`PSModulePath`].

  { Line continuation 

    A command can be spread over multiple lines by ending a line with a space folloed by a grave accent (aka backtick)
code {
write-host `
foo `
bar `
baz 

code }

    Compare with the → Windows/dirs/Windows/System32/cmd_exe/line-continuation[caret in `cmd.exe`].

  }
}
sa:
  → Windows/PowerShell/examples[Examples]

  → Windows/PowerShell/pipeline[Pipelines]

  The appearance and functionality of PowerShell is controlled by the → Windows/console-host.

  → Windows/PowerShell/script-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system[Script cannot be loaded because running scripts is disabled on this system]

  → Windows/PowerShell/alias/unix-and-cmd-exe-like[Unix and cmd.exe like default aliases]

  → Windows/PowerShell/language

   When a PowerShell → Windows/development/process[process] is started, it spawns → Windows/dirs/Windows/System32/conhost_exe[`conhost.exe`] as child process.

   → Microsoft/Office/Word/configure-options[Configuring the options of MS-Word] with PowerShell.

links:
  → https://github.com/ReneNyffenegger/about-powershell[about powershell @ github]
