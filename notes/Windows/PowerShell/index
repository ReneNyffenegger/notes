
→ Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[`powershell.exe`] is basically an interpreter for the → Microsoft/dot-net/assembly[.NET assembly] `System.Management.Automation`.
-
This assembly is loaded by → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[`powershell.exe`].

{ Environment variables #ps-env-variables

  PowerShell accesses the values of → development/environment-variable[environment variables] by prefixing their name with `$env:` (technically: `$env` is a *PowerShell drive*).
code {
PS> echo $env:userprofile
code }

  The values of environment variables stored in the → Windows/registry[registry] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Environment[`HKEY_CURRENT_USER\Environment`] and
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Session-Manager/Environment[`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment`] can be read and written like
  so:
code {
PS C:\> echo [environment]::getEnvironmentVariable("PATH", "user"    )
PS C:\> echo [environment]::getEnvironmentVariable("PATH", "machine" )
PS C:\> [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]("A_VAR"      , "a value"      , "user") 
PS C:\> [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]("ANOTHER_VAR", "another value", "machine") 
code }

   It's noteworthy that with this construct, it's not necessary to → Windows/registry/environment-variables#reg-wm_settingchange[send a `WM_SETTINGCHANGE`] after changing or creating a variable because
   PowerShell is smart enough to do that without being asked.

}
{ Tilde

  Apparently, the PowerShell, in the spirit of a → Linux/shell[Unix shell], expands the tilde (`~`) to the → Windows/dirs/Users/username[`%UserProfile%`] directory:
code {
PS  C:\> dir ~
code }

? However, it seems that it stumbles if a → Windows/PowerShell/language/variable[variable] contains a tilde …

}
{ Show version

  The version of the PowerShell installation is revealed in the
  → Windows/PowerShell/language/variable/automatic[automatic] variable → Windows/PowerShell/language/variable/automatic/PsVersionTable[`$psVersionTable`].
 
}
{ (Some interesting) command line options/parameters #ps-cmd-line-opts

  table { lll

   `-file` ☰ `-f` ☰ Specify a script to be run by the Powershell interpreter. Value can be `-` which reads script from → development/stdin-stdout-stderr[stdin].
   `-command` ☰ `-c` ☰ Specify a command to be executed, then exit (unless `-noExit` is specified). Value can be a string, a → Windows/PowerShell/language/scriptblock or `-`.
   `-configurationName` ☰ `-config` ☰ Specify configuration endpoint in which PowerShell is run.
   `-customPipeName` ☰ ☰ Name for an additional IPC server (named pipe), used for debugging or other cross-process communication.
   `-encodedCommand` ☰ `-e`, `-ec` ☰ Command is → development/Base64 encoded.
   `-executionPolicy` ☰ `-ex`, `-ep` ☰ Sets the → Windows/PowerShell/command-inventory/noun/executionPolicy[execution policy] (which is stored in the → Windows/development/environment-variables[environment variable] `$env:psExecutionPolicyPreference`.)
   `-inputFormat` ☰ `-inp`, `-if` ☰ Description of → development/Data/exchange/formats[data format] that is sent to PowerShell. Possible values: `text` or `xml` (which is serliazed CLIXML format).
   `-interactive` ☰ `-i` ☰ Opens an interactive PowerShell session. (See also `-nonInteractive`)
   `-login` ☰ `-l` ☰ Starts PowerShell as a *login shell* using → Linux/fhs/bin/sh[`/bin/sh`]. Only useful on → Linux and macOS. Must be first parameter when used.
   `-MTA` ☰ ☰ Start the shell using a multi-threaded apartment. Windows only.
   `-noExit` ☰ `-noe` ☰ Do not exit after running startup commands.
   `-noLogo` ☰ `-nol` ☰ Do not show copyright banner at startup.
   `-nonInteractive` ☰ `-noni` ☰  Non-interactive prompt
   `-noProfile` ☰ `-nop` ☰ Do not load the PowerShell profile. (see → Windows/PowerShell/language/variable/automatic/profile[the automatic variable `$profile`])
   `-outputFormat` ☰ `-o`, `-of` ☰ Specifies output format. Possible valueare `text` and `XM`" (serialized CLIXML format).
   `-settingsFile` ☰  `-settings` ☰ Overrides system-wide → Windows/PowerShell/language/variable/automatic/psHome/powershell_config_json[`powershell.config.json`] file (which, by default, is tored in the directory that is pointed at by → Windows/PowerShell/language/variable/automatic/psHome[`$psHome`])
   `-STA` ☰ ☰ Use single-threaded apartment (which is the default). Windows only
   `-version` ☰ `-v` ☰ Show used version of PowerShell. See also the → Windows/PowerShell/language/variable/automatic/PsVersionTable[automatic variable `$psVersionTable`].
   `-windowStyle` ☰ `-w` ☰ Window style for the session. Possible values are `normal`, `minimized`, `maximized` and `hidden`.
   `-workingDirectory` ☰ `-wd` ☰ Sets the initial *working directory* by executing `→ Windows/PowerShell/command-inventory/noun/location/set[set-location] -literalPath …`.
   `-help` ☰ `-?`, `/?` ☰ Show help
  table }

  If PowerShell is invoked with no options (but values are present in the command line), the default options is `-file`.

  { -command (or -c) to execute command(s)

  `-c statement(s)` creates a new process in which to execute one or more → Windows/PowerShell/language/statement[PowerShell statement(s)]:

  The value for `-c` can be:
    • a string, or
    • a → Windows/PowerShell/language/scriptblock, or
    • `-` (the commands are read from → development/stdin-stdout-stderr[stdin]

code {
powershell -c '→ Windows/PowerShell/command-inventory/noun/host/write[write-host] going to loop; → Windows/PowerShell/language/statement/foreach[foreach] ($i in 1..10) { $i }; write-host loop is finished'
code }
  }
  { -noExit

   When using `-c`, the new PowerShell session is terminated when it has finished evaluating the statements. This termination can be prevented by using the `-noExit` parameter instead of the `-c` parameter:

code {
PS C:\> → Windows/PowerShell/language/variable/automatic/PID[$PID] 
95420
PS C:\> pwsh -c '$PID'
87390
PS C:\> $PID
95420
PS C:\> pwsh -noExit '$PID'
14464
PS C:\> $PID
14464
PS C:\> exit
PS C:\> $PID
95420
code }

  }
  { -wd (initial working directory)

  `-wd` sets the initial working directory.

  }
  { -noLogo (hide startup banner)

   `-noLogo` hides the startup banner.

  }
  { Specifying boolean values

    Switchable options can be given a boolean value with the following syntax:
code {
pwsh … {-all:$false}
code }

  }
  

}
{ 32-bit vs 64-bit executable #ps-32-64

  On a 64-bit → Windows installation, the 32-bit executable of Powershell is located under `→ Windows/dirs/Windows/SysWOW64[C:\Windows\SysWOW64]\WindowsPowerShell\v1.0\powershell.exe` while the 64-bit executable is found at
  → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe[`C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe`].

  In a running PowerShell session, the bitness of the running PowerShell host can be determined with
code {
PS C:\> $([→ Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices/Marshal[System.Runtime.InterOpServices.Marshal]]::SizeOf([→ Microsoft/dot-net/namespaces-classes/System/IntPtr[System.IntPtr]]::Zero)*8)
code }

  I was forced to use the 32-bit executable when I used PowerShell with → development/databases/ADO[ADO DB] to
  → development/databases/ADO/ADODB-examples/PowerShell/MS-Access[interact with MS Access].

  → development/tools/scripts/personal/ps32_bat[This simple cmd.exe batch file] starts the 32-bit executable of PowerShell.

}
{ Nice features

  { Create a file

    The following line creates a text file whose first (and only) line reads `Hello world.`:
code {
PS C:\> ${→ Windows/dirs/Users/username[c:\users\Rene]\tq84.txt}="Hello World"
code }

  }
  { adminsitrative constants

code {
1kb
2mb
3gb
4tb
5pb
code }

  The adminsitrative constants are not consistent with the IEC recommendations (→ development/misc/kibi-mebi-gibi-bytes[kibibite] etc…), `1kb` evaluates to `1024`, `1mb` to `1048576` etc.

 }

}
{ Starting PowerShell

  PowerShell can be started
    • Via → Windows/configuration/Power-User-Menu[Power User Menu]: `windows+x` -> `i`
    • From → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] simply by entering `powershell`
    • …

}
{ PowerShell Core and PowerShell 7 #ps-core-7

? PowerShell Core *seems* to be PowerShell 6.x.

 *PowerShell Core* does not intend to replace or upgrade the «regular» PowerShell, rather, it tries to solve different tasks.

  PowerShell 7.x dropped the *Core* from its name (but it is still displayed in `→ Windows/PowerShell/language/variable/automatic/PsVersionTable[psVersionTable].psEdition`).

  The → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ClrFacade[`System.Management.Automation.ClrFacade`] class contains all divergin code for «FullCLR» and «CoreCLR».

}
{ Misc

  The ampersand (`&`) is the → Windows/PowerShell/language/operator/call[call operator].

}

{ TODO

  What is the significance of the environment variable `__PSLockdownPolicy` and its relationship to → Windows/dirs/Windows/System32/wldp_dll.

  → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Windows/PowerShell/PSreadline/ConsoleHost_history_txt

  The equivalent of  seems to be → Windows/PowerShell/command-inventory/noun/strictMode[`set-strictMode -version 2`].

 `help about_common*`, `-confirm`, `-whatIf`.

 `.psc` files are ~PowerShell console~ files. They specify one or more PSSnapIns to load into memory at startup.

 `[object]`, `[psobject]`, `[pscustomobject]`


   The `prompt` and `tabCompletion` functions. BTW: is `tabCompletion` replaced by `psReadLine`?
  

  { Line continuation #ps-line-continuation

    A command can be spread over multiple lines by ending a line with a space followed by a grave accent (aka backtick)
code {
→ Windows/PowerShell/command-inventory/noun/host/write[write-host] `
foo `
bar `
baz 
code }

    Compare with the → Windows/dirs/Windows/System32/cmd_exe/line-continuation[caret in `cmd.exe`].

  }

  { Command types

    Command types are
      • → Windows/PowerShell/language/alias[alias]
      • application
      • → Windows/PowerShell/language/cmdlet[cmdlet]
      • filter
      • → Windows/PowerShell/language/statement/function[function]
      • script

    These correspond to the possible values for the `-commandType` parameter of the `get-command` → Windows/PowerShell/language/cmdlet[cmdlet].

  }

  { The tilde in short file names

     → Windows has a concept of (DOS) short file names where an arbitrary long filename is shortened to eight characters (without suffix). It uses a tilde for that. Unfortunately, in PowerShell, the tilde has a special meaning (home directory).
     So, if an → Windows/development/environment-variables[environment variable] contains a tilde, it is wrongly recognized in PowerShell.

  }

}
sa:
  → Windows/PowerShell/examples[Examples]

  → Windows/PowerShell/pipeline[Pipelines]

  When a PowerShell → Windows/development/process[process] is started, it spawns → Windows/dirs/Windows/System32/conhost_exe[`conhost.exe`] as child process (which
  is the → Windows/dirs/Windows/System32/conhost_exe[console-host] and controls the appearance and functionality of PowerShell).

  → Windows/PowerShell/script-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system[Script cannot be loaded because running scripts is disabled on this system]

  → Windows/PowerShell/alias/unix-and-cmd-exe-like[Unix and cmd.exe like default aliases]

  → Windows/PowerShell/language

  → Microsoft/Office/Word/configure-options[Configuring the options of MS-Word] with PowerShell.

  The → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PowerShell[`System.Management.Automation.PowerShell`]

  → Windows/versions/10/S does not have a PowerShell.

  PowerShell integrates with → Windows/security/Antimalware-Scan-Interface.

links:
  → https://github.com/ReneNyffenegger/about-powershell[about powershell @ github]
