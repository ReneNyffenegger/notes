$ PowerShell: read and write from/to the registry

{ Two default drives #powershell-two-default-registry-drives

  By default, → Windows/PowerShell defines two → Windows/PowerShell/language/provider/drive[drives] to access the
  → Windows/registry[registry]:
    • `HKCU:` for → Windows/registry/tree/HKEY_CURRENT_USER[`HKEY_CURRENT_USER`]
    • `HKLM:` for → Windows/registry/tree/HKEY_LOCAL_MACHINE[`HKEY_LOCAL_MACHINE`]

  In order to add a new drive, the `new-psDrive` → Windows/PowerShell/language/cmdlet[cmdlet] can be used:
code {
PS C:\> new-psDrive -name HKCR -psProvider registry -root → Windows/registry/tree/HKEY_CLASSES_ROOT[HKEY_CLASSES_ROOT]
code }

}
{ Examples

  The following simple examples attempt to demonstrate how the → Windows/registry[registry] can be read and written to with → Windows/PowerShell[PowerShell].

  { Create a new key

    A new → Windows/registry/tree-structure/key[registry key] can be created with the
    → Windows/PowerShell/command-inventory/noun/item/new[`new-item`].

    If the item being created is a registry key, the cmdlet returns a
    → Microsoft/dot-net/namespaces-classes/Microsoft/Win32/RegistryKey[`Microsoft.Win32.RegistryKey`] object. This
    object is assigned to the Windows/PowerShell/language/variable[variable] `$key_tq84`:
    gh|about-powershell|/examples/registry/create-new-key.ps1||

  }
  { Set key's default value #ps-reg-ex-def-value

    A key's → Windows/registry/tree-structure/default-value[default value] can be set with
    → Windows/PowerShell/command-inventory/noun/item/set[`set-item`]:
    gh|about-powershell|/examples/registry/default-value.ps1||

  }
  { Add a named value

    A value can be added to a key with the cmdlet
    → Windows/PowerShell/command-inventory/noun/itemProperty/set[`set-itemProperty`].
    gh|about-powershell|/examples/registry/add-value-txt.ps1||

  }
  { Add another value

    Another value is added. Although the value is «numeric», without explicitly stating its
    data type, the value is added as a → Windows/registry/data-types[string (`REG_SZ`)]:
    gh|about-powershell|/examples/registry/add-another-value.ps1||

  }
  { Add a numeric value
 
    This type, the data type of the added value is explicitly specified with the `-propertyType` flag as `REG_DWORD`:
    gh|about-powershell|/examples/registry/add-value-num.ps1||

  }
  { Using .NET Objects to create values

    Registry values and keys can not only be created with → Windows/PowerShell/language/cmdlet[cmdLets]. It's also
    possible with the methods `SetValue()` and `CreateSubKey()` of the → Microsoft/dot-net class
    → Microsoft/dot-net/namespaces-classes/Microsoft/Win32/RegistryKey[`Microsoft.Win32.RegistryKey`] (of which
    an instance is already assigned to the variable `$key_tq84`):
    gh|about-powershell|/examples/registry/use-object.ps1||

  }
  { Values created

    The registry values that were created look like this in → Windows/dirs/Windows/regedit_exe[`regedit.exe`]
    gh|about-powershell|/examples/registry/img/inserted-values.png||

  }
  { Read a value

    A value in the registry can be read with → Windows/PowerShell/command-inventory/noun/itemPropertyValue/get[`get-itemPropertyValue`]:
    gh|about-powershell|/examples/registry/get-itemPropertyValue.ps1||

    It is also possible to read one or more values at once with the
    → Windows/PowerShell/command-inventory/noun/itemProperty/get[`get-itemProperty` cmdlet] which returns
    a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCustomObject[`System.Management.Automation.PSCustomObject`] object:
    gh|about-powershell|/examples/registry/get-itemProperty.ps1||

  }
  { Reading the default value

    A key's default value can be read by reading its property named `(default)`:
    gh|about-powershell|/examples/registry/read-default-value.ps1||

  }
  { Check if a value or key exists

    The existence of a registry key can be checked with → Windows/PowerShell/command-inventory/noun/path/test[`test-path`]. The existence of a value can be checked by calling
   `$regKey.GetValue()`: if it returns → Windows/PowerShell/language/variable/automatic/null[`$null`], the value does not exist.

    The first key tested is the one we just created, the second key (`→ Windows/registry/tree/HKEY_CURRENT_USER[HKCU]:\a\path\that\likely\does\not\exist`)
    does (most probably) not exits.

    gh|about-powershell|/examples/registry/check-if-key-or-value-exists.ps1||

  }
  { Cleaning up

    Time to clean up the mess…
    gh|about-powershell|/examples/registry/delete-keys-and-values.ps1||

  }
}
{ Binary data

  Binary data might be written by specifying an array of bytes and using the `-type binary` option:
code {
new-itemProperty -path HKCU:\Software\tq84 -value  0xab, 0xcd, 0xef -name abcdef -type binary
code }

  Alternatively, a → Windows/PowerShell/language/type/array/byte[byte array] can be passed as value:
code {
[byte[]] $byte_array = 65,66,67
new-itemProperty -path HKCU:\Software\tq84 -value  $byte_array -name byte_array
code }

}
{ Deleting an existing default value

  A key's → Windows/registry/tree-structure/default-value[default value] can be deleted like so (*if* it exists):
code {
(→ Windows/PowerShell/command-inventory/noun/item/get/index[get-item] '→ Windows/registry/tree/HKEY_CURRENT_USER/Software[hkcu:\Software]\tq84').OpenSubKey('', → Windows/PowerShell/language/variable/automatic/true-false[$true]).DeleteValue('')
code }


}

sa:

  Other → Windows/PowerShell/examples
