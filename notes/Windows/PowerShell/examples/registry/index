$ PowerShell: accessing the registry

{ Two default drives #powershell-two-default-registry-drives

  By default, → Windows/PowerShell defines two → Windows/PowerShell/language/provider/drive[drives] to access the
  → Windows/registry[registry]:
    • `HKCU:` for → Windows/registry/tree/HKEY_CURRENT_USER[`HKEY_CURRENT_USER`]
    • `HKLM:` for → Windows/registry/tree/HKEY_LOCAL_MACHINE[`HKEY_LOCAL_MACHINE`]

  In order to add a new drive, the `new-psDrive` → Windows/PowerShell/language/cmdlet[cmdlet] can be used:
code {
PS C:\> new-psDrive -name HKCR -psProvider registry -root → Windows/registry/tree/HKEY_CLASSES_ROOT[HKEY_CLASSES_ROOT]
code }

}
{ Examples

  The following simple examples attempt to demonstrate how the → Windows/registry[registry] can be accessed with → Windows/PowerShell[PowerShell].

  { Get a value from the registry

    The following example gets the value for the → Windows/development/environment-variables#win-envvar-path[`PATH` environment variable]:
code {
$regKey = → get-→ Windows/PowerShell/language/item[item] → Windows/registry/tree/HKEY_CURRENT_USER/Environment[HKCU:\Environment]
$regKey.getValue('PATH')
code }


  }
  { Create keys and values

    First, we create a new key under → Windows/registry/tree/HKEY_CURRENT_USER/Software[`HKEY_CURRENT_USER\Software`]. The name of the key is `tq84`.

    Then, we assign a value to this new key's default value and create three new values, named `value one` through `value three`. For the last key,
    we use `-propertyType` to specify the values data type.

    gh|about-powershell|/examples/registry/create-keys-and-values.ps1||

  }
  { Check for the existence of keys and values

    This script uses `test-path` to check whether a key exists. The first key tested is the one we just created, the second key (`→ Windows/registry/tree/HKEY_CURRENT_USER[HKEY_CURRENT_USER]/HKCU:\a\path\that\likely\does\not\exist`
    does (probably) not exits.

    Under `tq84`, we use a key's method `getValue()` to get the value of `value one` (which exists) and `unobtainium` (which does not exist).

    gh|about-powershell|/examples/registry/check-if-key-or-value-exists.ps1||

  }
  { Delete keys and values

    Finally, we use `remove-itemProperty` to remove a specific value and `remove-item` to remove an entire key altogether.

    gh|about-powershell|/examples/registry/delete-keys-and-values.ps1||

  }

}
