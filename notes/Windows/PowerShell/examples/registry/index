$ PowerShell: accessing the registry

The following simple examples attempt to demonstrate how the → Windows/registry[registry] can be accessed with → Windows/PowerShell[PowerShell].

{ Create keys and values

  First, we create a new key under → Windows/registry/tree/HKEY_CURRENT_USER/Software[`HKEY_CURRENT_USER\Software`]. The name of the key is `tq84`.

  Then, we assign a value to this new key's default value and create three new values, named `value one` through `value three`. For the last key,
  we use `-propertyType` to specify the values data type.

  gh|about-powershell|/examples/registry/create-keys-and-values.ps1||

}
{ Check for the existance of keys and values

  This script uses `test-path` to check whether a key exists. The first key tested is the one we just created, the second key (`→ Windows/registry/tree/HKEY_CURRENT_USER[HKEY_CURRENT_USER]/HKCU:\a\path\that\likely\does\not\exist`
  does (probably) not exits.

  Under `tq84`, we use a key's method `getValue()` to get the value of `value one` (which exists) and `unobtainium` (which does not exist).

  gh|about-powershell|/examples/registry/check-if-key-or-value-exists.ps1||

}
{ Delete keys and values

  Finally, we use `remove-itemProperty` to remove a specific value and `remove-item` to remove an entire key altogether.

  gh|about-powershell|/examples/registry/delete-keys-and-values.ps1||

}
