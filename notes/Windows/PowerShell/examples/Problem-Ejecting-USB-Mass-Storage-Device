$ PowerShell: determine which application prevents an USB drive from being ejected

When trying to eject an external → hardware/USB drive («Safely remove hardware and eject media»), Windows might respond with the message ~Problem Ejecting USB Mass Storage Device~
(This device is currently in use. Close any programs or windows that might be using the device, and then try again):
gh|about-PowerShell|/examples/Problem-Ejecting-USB-Mass-Storage-Device/img/msgBox.png||

Unfortunately, the message does not reveal which program or application uses the USB drive. With → Windows/PowerShell, it is possible to determine this application with the
→ Windows/PowerShell/command-inventory/noun/eventLog/get[`get-eventLog` cmdLet]:
gh|about-PowerShell|/examples/Problem-Ejecting-USB-Mass-Storage-Device/readEventLog.ps1||

This simple → Windows/PowerShell/pipeline might print something like
code {
TimeGenerated       Message
-------------       -------
2020-09-07 10:36:50 The application → Windows/dirs/ProgramData/Microsoft/Windows-Defender/Platform/_version_/MsMpEng_exe[\Device\HarddiskVolume2\ProgramData\Microsoft\Windows Defender\Platform\4.18.2008.9-0\MsMpEng.exe] with process id 2684 stopped the removal or ejection for the device USB\VID_0480&PID_A200\20160603001495C.
code }

If `MsMpEng.exe` is preventing the disk from being ejected, the disk might be → Windows/dirs/Windows/System32/diskpart_exe#diskpart-take-offline[taken offline with `diskpart.exe`]

{ Same thing, but with the event viewer

  BTW, this information can also be determined with the → Windows/dirs/Windows/System32/eventvwr_exe[Event viewer (`eventvwr.exe`)]
  by going to *Windows Logs* -> *System* -> *Filter Current Log* and the setting the *Event ID* to 225:
  gh|about-PowerShell|/examples/Problem-Ejecting-USB-Mass-Storage-Device/img/eventVwr_filter-current-log.png||

}

{ Using System call NtQueryInformationFile() with parameter FileProcessIdsUsingFileInformation 

  The blocking process can also be found by calling `NtQueryInformationFile()` (`Windows/dirs/Windows/System32/ntdll_dll`) with the parameter → https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ne-wdm-_file_information_class[`FileProcessIdsUsingFileInformation`] (=47).

  A → Windows/PowerShell script that does exactly that is → https://github.com/gtworek/PSBits/blob/master/Misc2/Get-PidsForOpenFile.ps1[here].

}

sa:
  → Windows/dirs/Windows/System32/openfiles_exe[`openfiles.exe`]
