$ Windows Subsystem for Linux (WSL)

The WSL was introduced in 2016. It promises to run *unmodified* → Linux[Linux] binaries in → Windows/versions/10[Windows 10].

{ WSL versions

  As of this writing there are two WSL versions: *WSL 1* and *WSL 2*.

  WSL 2 has the following three features that are not present in WSL 1:
    • Managed VM (Virtual Machine)
    • Full → Linux/kernel[Linux kernel]
    • Full → Linux/kernel/sys-calls[system calls]
  On the other hand, WSL 2 lacks *Performance across OS file systems*.

  Generally, Microsoft recommends to use WSL 2 if possible. However, accessing the Windows file system from WSL 2 is slower than if accessed from WSL 1.

}
{ Enabling WSL in a console

  WSL (Version 1?) is enabled in → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] with
code {
C:\> → Windows/dirs/Windows/System32/Dism_exe[dism] /online /enable-Feature /featureName:Microsoft-Windows-Subsystem-Linux
code }

  In → Windows/PowerShell, it can be enabled with
code {
C:\> → Windows/PowerShell/command-inventory/noun/windowsOptionalFeature/enable[enable-WindowsOptionalFeature] -online -featureName microsoft-Windows-Subsystem-Linux
code }

}
{ Distribution

? After the Subsystem for Linux is installed, a distribution needs to be chosen:
code {
C:\Users\Rene> → Windows/dirs/Windows/System32/bash_exe[bash]
Windows Subsystem for Linux has no installed distributions.
Distributions can be installed by visiting the → Microsoft/Store:
https://aka.ms/wslstore
code }

}
{ Update WSL 1 to WSL 2

  In order to be able to use WSL 2, the *Virtual Machine Platform* → Windows/optional-features[optional feature]:
code {
C:\users\rene> → Windows/dirs/Windows/System32/wsl_exe[wsl] --set-default-version 2
Please enable the Virtual Machine Platform Windows feature and ensure virtualization is enabled in the → hardware/BIOS
For information please visit → https://aka.ms/wsl2-install
code }

  The *Virtual Machine Platform* can be enabled like so (with elevated privileges):
code {
C:\users\rene> → Windows/dirs/Windows/System32/Dism_exe[dism] /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
code }

  However, I still receive an error:
code {
C:\users\rene> → Windows/dirs/Windows/System32/wsl_exe[wsl] --set-default-version 2
Error: 0x1bc
For information on key differences with WSL 2 please visit → https://aka.ms/wsl2
code }

  → https://github.com/microsoft/WSL/issues/5651[This thread] seems to contain some information on how to get around this issue. It is suggested that the kernel needs to be installed into
  ­ → Windows/dirs/Windows/System32/lxss/tools[`C:\Windows\System32\lxss\tools`]:
code {
rem → Windows/PowerShell/command-inventory/noun/webRequest/invoke[invoke-webRequest] -uri → https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi -outFile WSLUpdate.msi -useBasicParsing
    → Windows/PowerShell/command-inventory/noun/webRequest/invoke[invoke-webRequest] -uri → https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi                        -useBasicParsing
rem → Windows/dirs/Windows/System32/msiexec_exe[msiexec] /package WSLUpdate.msi     /quiet
    → Windows/dirs/Windows/System32/msiexec_exe[msiexec] /package wsl_upate_x64.msi /quiet
code }

  Installing the kernel seemed to work, setting the default version to 2 works now:
code {
C:\users\rene> → Windows/dirs/Windows/System32/wsl_exe[wsl] --set-default-version 2
For information on key differences with WSL 2 please visit → https://aka.ms/wsl2
code }


}
{ Install distro

  Download links for the distros can be found → https://docs.microsoft.com/en-us/windows/wsl/install-manual[here] and → https://docs.microsoft.com/en-us/windows/wsl/install-win10[here].

code {
    $ProgressPreference = 'SilentlyContinue'   ## Does this make the download time shorter???
rem invoke-webRequest -Uri https://aka.ms/wsl-ubuntu-1604    -outFile Ubuntu.appx -useBasicParsing
    invoke-webRequest -Uri https://aka.ms/wsl-kali-linux-new -outFile kali.appx   -useBasicParsing

    add-→ Windows/PowerShell/command-inventory/noun/appxPackage[appxPackage] .\kali.appx
code }

  Unfortunately, even after executing `add-appxPackage …`, there is no distribution installed:
code {
C:\Users\Rene> wsl
Windows Subsystem for Linux has no installed distributions.
Distributions can be installed by visiting the Microsoft Store:
https://aka.ms/wslstore
code }

}
{ Reset password

  In Windows (not Linux!) command line
code {
C:\users\rene> debian config --default-user root
C:\users\rene> debian
root@DESKTOP-1SDJMCL:~# passwd rene
…
root@DESKTOP-1SDJMCL:~# exit
C:\users\rene> debian config --default-user rene
code }

  Replace `debian` with the name of the distro for which the password needs to be reset.

}
{ Starting a distribution

  The parameter `-d` of `wsl` specifies the distribution to be started. (The distribution must have been installed beforehand)
code {
C:> wsl -d Debian
code }

  Alternatively, a distribution can be started like so:
code {
C:\> kali
code }

}
{ Accessing WSL Filesystem from Windows

  It's possible to map a network drive to a started WSL distribution:
code {
C:\> → Windows/dirs/Windows/System32/net_exe/use L: \\wsl$\Debian
The command completed successfully.

C:\> L:
L:\> → Windows/dirs/Windows/System32/cmd_exe/commands/dir
…
2020-09-03  01:56 AM    <DIR>          → Linux/fhs/bin[bin]
2020-07-10  11:04 PM    <DIR>          → Linux/fhs/boot[boot]
2022-06-01  12:41 AM    <DIR>          → Linux/fhs/dev[dev]
2022-06-01  12:30 AM    <DIR>          → Linux/fhs/etc[etc]
…
L:\> → Windows/dirs/Windows/System32/cmd_exe/commands/cd etc
L:\> → Windows/dirs/Windows/System32/notepad_exe[notepad] → Linux/fhs/etc/wsl_conf[wsl.conf]
code }

  This mapping is possible because WSL runs a → https://en.wikipedia.org/wiki/9P_%28protocol%29[9P protocol] file server which Windows uses as a client (See for example the output of
 `→ Linux/shell/commands/dmesg | → Linux/shell/commands/grep 9p`).
  -
  The communication between WSL and Windows runs over AF_UNIX sockets.

}
{ Accessing the Windows Filesystem from WSL

  A Windows drive is mounted to `/mnt/<drive>`:
code {
$ ls → Linux/fhs/mnt[/mnt]/c
$ ls → Linux/fhs/mnt[/mnt]/d
…
code }

}
{ Environment variables

  { $WSL_DISTRO_NAME

    A shell started with `wsl` defines the environment variable `$WSL_DISTRO_NAME`.

    For example, when stared in → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`]:
code {
C:\> wsl -d kali-linux -- echo $WSL_DISTRO_NAME
kali-linux
code }

  Or in → Windows/PowerShell:
code {
PS C:\> wsl -d Debian -- echo `$WSL_DISTRO_NAME
Debian
code }

  }
  { $WSL_INTEROP #WSL_INTEROP

    See `→ Linux/fhs/run/WSL`

  }
  { $WSLENV

    …

  }

}
{ TODO

  { Developer mode

    It seems that → Windows/development/developer-mode[developer mode] was needed (but is not anymore) to enable the WSL.

  }
  { wsl.exe

    → Windows/dirs/Windows/System32/wsl_exe[`wsl.exe`] apparently allows to *run → Linux[Linux] binaries* from the Windows Command Prompt (→ Windows/dirs/Windows/System32/cmd_exe[cmd.exe], → Windows/PowerShell):
code {
C:\> wsl → Linux/shell/commands/ls[ls -l]
code }

  }
  { Change display language of WSL

code {
$ sudo update-locale LANG=en_US.UTF8
code }

  }

}

sa:
 
  → Windows/dirs/Windows/System32/lxss[`%SYSTEMROOT%\System32\lxss`]

  → Windows/dirs/Windows/System32/wslapi_dll[`wslapi.dll`]

 `→ Linux/fhs/run/WSL`

links:
  → https://dev.to/smashse/wsl-chocolatey-powershell-winget-1d6p[Anderson Gama's blog] was quite helpful to demonstrate how the kernel can be installed from the command line.

  → https://wiki.ubuntu.com/WSL has some hints on using WSL 2 and also has links to → Linux/X Servers that can be used with WSL.
