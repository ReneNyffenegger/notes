$ Event Tracing for Windows (ETW)

Event Tracing for Windows is a logging infrastructure.

? ETW provices applications and → Windows/services[services] an interface with which these can log events.

These logged events can later be analyzed with tools such as
  • Windows Performance Monitor
  • PerfView
  • → Windows/dirs/Windows/System32/eventvwr_exe[Event Viewer (`eventvwr.exe`)]
  • → Windows/PowerShell (for example with the → Windows/PowerShell/command-inventory/noun/winEvent[PowerShell command noun `winEvent`])

ETW is primarily used in diagnostic and performance analysis.

Two important functions for ETW are `NtTraceControl` (manage tracing functions) and `NtTraceEvent` (write events)
code {
NTSTATUS
NtTraceControl (
    ULONG FunctionCode,
    PVOID InBuffer,
    ULONG InBufferLen,
    PVOID OutBuffer,
    ULONG OutBufferLen,
    ULONG *ReturnSize);

NTSTATUS
NtTraceEvent (
    HANDLE TraceHandle,
    ULONG Flags,
    ULONG FieldSize,
    PVOID Fields);
code }

sa:
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/WINEVT[`HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\WINEVT`]

links:

  → https://github.com/wbenny/EtwConsumerNT[EtwConsumerNT (github)] is simple project that demonstrates how an ETW consumer can be created just by using
  → Windows/dirs/Windows/System32/ntdll_dll[`ntdll.dll`].

  The → https://github.com/wbenny[author's (Petr Beneš)] goal was to understand how functions like `StartTrace`, `OpenTrace`, `EnableTrace` and `ProcessTrace` work internally.
