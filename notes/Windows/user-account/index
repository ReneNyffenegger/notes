$ Windows: user account
@ user

→ Windows requires a *user account* for someone that accesses a → Windows system.

User accounts are stored in the → Windows/registry[registry] under
→ Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/ProfileList[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList`].
-
More sensitive information (such as passwords) is stored in the → Windows/registry[registry] under
→ Windows/registry/tree/HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account[`HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account`]
-
A list of the names of the users of a Windows installation is found under
→ Windows/registry/tree/HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/Names[`HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names`]

Windows treats user names *case insensitively*:
"
  Microsoft views case-sensitivity as an unnecessary burden on the administrator that can lead to mistakes.
" [ → https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-authsod/5bb3e0c3-f6c1-4e2c-8c6d-0f54553b4ed9 ]

{ Opening the user account window in a command line

  The user account window (= → Windows/control-panel[Control Panel] applet?) can be opened in the command line (→ Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] or → Windows/PowerShell) like so
code {
C:\> → Windows/dirs/Windows/System32/control_exe userpasswords
code }

}
{ Logging in #win-user-log-in

  A user is → Windows/security/authentication[authenticated] by either
    • interactive logon or
    • network logon

    At least when logging in with a → Windows/user-account/domain[domain], a user's logon time is recorded and can be queried with → Windows/dirs/Windows/System32/net_exe/user#net-user-domain[`net user USERNAME /domain`].

  { Creating access tokens

    When a user logs in, Windows (the *Local Security Authority Subsystem* → Windows/dirs/Windows/System32/lsass_exe[`lsass.exe`]) creates a logon session and an → Windows/security/access-token[access token] for this user.

    If this user is an *administrator*, an additional (second) access token is created. Thus, an administrator session has two access tokens: a standard user access token and a
    an administrator access token.

  }
  { Load the user's registry hive

    Windows loads the user's → Windows/registry/tree-structure/hive[registry hive] which is stored in → Windows/dirs/Users/username/NTUSER_DAT[`%UserProfile%\NTUSER.DAT`] and places it under the
    registry key → Windows/registry/tree/HKEY_CURRENT_USER[`HKEY_CURRENT_USER`].
    -
    It also updates the hives that are stored under → Windows/dirs/Windows/System32/config[`%SYSTEMROOT%\System32\config`].

    The following → Windows/registry[registry] keys are parsed for applications and commands to run when when the system boots up and a user logs in:
      • `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce`
      • `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run`
      • → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Run[`HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run`]
      • `HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\Run`
      • `HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run`
      • `HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce`
    The 2nd and 4th key are not run when another user logs in after the first one (see KB 137367
    and → https://support.microsoft.com/en-us/help/179365/info-run-runonce-runservices-runservicesonce-and-startup[here])

?   Apparently, *before* (?) → Windows/dirs/Windows/explorer_exe[`explorer.exe`] is started, the (Active-X ?) components under
    → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Active-Setup/Installed-Componenents[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Active Setup\Installed Components`] are loaded.

  }
  { Start explorer.exe

    `explorer.exe` is started with the created (standard user) access token.

    `explorer.exe` then becomes (directly and indirectly) the parent process for all user-initiated → Windows/development/process[processes].

  }
  { Logging out

    The current user can log him/herself out on the command line with
code {
C:\> → Windows/dirs/Windows/System32/shutdown_exe[shutdown] /L
code }

  }
  { TODO

     During the logon process, the *Group Policy engine* loads → Windows/dirs/Windows/System32/fdeploy_dll[`fdeploy.dll`].

  }
   
}
{ First user

  When Windows is installed, a user is also created.

  This *first user* will belong to the → Windows/user-account/group/Administrators[Administrators group]. So, the user has the highest set of → Windows/security/privileges[privileges] (but still doesn't seem able to
  open → Windows/registry/tree/HKEY_LOCAL_MACHINE/SAM[`HKLM\SAM`] or → Windows/registry/tree/HKEY_LOCAL_MACHINE/SECURITY[`HKLM\SECURITY`].

  But see also → Windows/user-account/local#windows-default-local-user-accounts[default local user accounts]

}
{ SID

  A user's → Windows/security/SID[SID] always starts with `S-1-5-21-…` and has an RID (last part of SID) that is greater or equal to 1000.

  A user can query his SID with
code {
→ Windows/dirs/Windows/System32/whoami_exe#win-whoami-user[whoami] /user
code }

}
{ Adminstrator accounts vs standard accounts

  Each account is either an
    • *administrator account* or a
    • *standard user account*

  The *administrator account* has full (in Linux parlance: root) access over all ressources that are controlled by the local server. Such an account is needed, for example, to
    • Install or remove executables (»apps«?)
    • Create, modify or delete other accounts
    • Access system files or files that belong to another user
    • Change all users' settings
    • Change → Windows/security[security] reated options


  This account's → Windows/security/SID[SID] is `S-1-5-domain-500` and has the display name *Administrator*.

  At least in Windows, the administrator account is hidden by default.

  A standard user account can be further divided into
    • an *adult account* or a
    • *child account*.

  In order to see which accounts belong to the *users* and to the *administrators* group, → Windows/dirs/Windows/System32/net_exe/localgroup[`net localgroup`] can be used:
code {
C:\> net localgroup Users
C:\> net localgroup Administrators
code }

}
{ Microsoft accounts vs local accounts

  An account is either
   • a *Microsoft accounts* or
   • a *Local accounts* (aka *offline accounts*?).

   A *Microsoft account* is identified with an email address.

   A → Windows/user-account/local[local account] exists on one particular computer only.


}
{ SYSTEM account #win-user-SYSTEM

  Apparently, processes running under the SYSTEM account (such as → Windows/dirs/Windows/System32/SearchFilterHost_exe[`SearchFilterHost.exe`])
  cannot access → Windows/registry/tree/HKEY_CURRENT_USER[`HKEY_CURRENT_USER`] for logged on users.

}
{ TODO

code {
c:\> → Windows/dirs/Windows/System32/wbem/WMIC_exe[wmic] useraccount get name,sid
C:\> wmic useraccount where "localAccount='true'" get caption, disabled, domain, lockout, passwordExpires, SID, status
code }

code {
c:\> start → Windows/settings[ms-settings:otherusers]
code }

  { Query information about the current user with PowerShell

  The (DotNet) `WindowsIdentity` class, located in the `System.Security.Principal` namespace represents a Windows user:
code {
PS C:\> [security.principal.windowsIdentity]::getCurrent()
AuthenticationType : Kerberos
ImpersonationLevel : None
IsAuthenticated    : True
IsGuest            : False
IsSystem           : False
IsAnonymous        : False
Name               : FOO\RENE
Owner              : S-1-5-21-1234567890-1234567890-1234567890-969913
User               : S-1-5-21-1234567890-1234567890-1234567890-969913
Groups             : {S-1-5-21-1234567890-1234567890-1234567890-513, S-1-1-0, S-1-5-32-545, S-1-5-4...}
Token              : 1176
code }

    See also a similar → Windows/PowerShell command to → Windows/user-account/group/Administrators#ps-check-if-in-admin-group[check if PowerShell is executing in the Adminstrators group].

  }

  { User account control

    The `__COMPAT_LAYER` variable.

    The → Windows/registry[registry] key → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Policies/System[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System`].

  }

  { Special predefined local accounts

    Special predefined local accounts (that are not recognized by the security subsystem and don't have a password) are
      • LocalService
      • NetworkService
      • LocalSystem

    *LocalSystem* seems to be the user with the most rights: it includes the *NT AUTHORITY\SYSTEM* and *BUILTIN\Administrators* → Windows/security/SID[SIDs].
    -
    With these rights, among others, it can access the → Windows/registry[registry] key
    → Windows/registry/tree/HKEY_LOCAL_MACHINE/SECURITY[`HKEY_LOCAL_MACHINE\SECURITY`].

  }

}


sa:
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/Winlogon#reg-enable-automatic-logon[Enable automatic logon] in the → Windows/registry[registry].

  → Windows/dirs/Users/Default

  → Windows/dirs/Windows/System32/quser_exe displays information about users that are currently logged in.

  A user's profile is stored in the directories below → Windows/dirs/Users/username[`%USERPROFILE%`].

  → Windows/registry/tree/HKEY_LOCAL_MACHINE/SAM[`HKEY_LOCAL_MACHINE\SAM`] 

  → Windows/security/User-account-control[User account control (UAC)]

  → Windows/dirs/Windows/System32/net_exe/user[`net user`]

  The values of `LastLoggedOnUser` and `LastLoggedOnSAMUser` under
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Authentication/LogonUI[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI`].

  Local users (and → Windows/user-account/group[groups]) can be viewed with → Windows/dirs/Windows/System32/lusrmgr_msc[`lusrmgr.msc`]

  Change → Windows/security/User-account-control[User Access Control (UAC)] settings with → Windows/dirs/Windows/System32/UserAccountControlSettings_exe[`UserAccountControlSettings.exe`]

  → Windows/dirs/Windows/System32/Netplwiz_exe[`Netplwiz.exe`], the *advanced user account → Windows/control-panel[control panel]*.

? → Windows/security/privileges[Privileges] can be assigned to or taken away from a user with → Windows/dirs/Windows/System32/secpol_msc[`secpol.msc`].

  In → Microsoft/dot-net, a Windows user is represented by the → Microsoft/dot-net/namespaces-classes/System/Security/Principal/WindowsIdentity[`System.Security.Principal.WindowsIdentity`] class.

  The → Windows/registry/tree-structure/key[subkeys] under the → Windows/registry/tree-structure/hive[registry hive] → Windows/registry/tree/HKEY_USERS[`HKEY_USERS`].

  → Windows/dirs/Windows/System32/LogonUI_exe

  The → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Security/Principal/NTAccount[`System.Security.Principal.NTAccount`]
