$ After installing Windows

rem {
{ Create a System Recovery Disc (?)

  A *System Recovery Disc* might be useful.

  Apparently, a *System Recovery Disc* can be created with → Windows/dirs/Windows/System32/recdisc_exe[`recdisc.exe`].

}
rem }
{ Check what's already installed 

  Some interesting things that might already be installed after a fresh installation include
    • VLC (→ Windows/dirs/Program-Files/VideoLAN/VLC[`C:\Program Files\VideoLAN\VLC`])
    • … 

}
{ Change execution policy of PowerShell

  In order to be able to run → Windows/PowerShell scripts, the *execution policy* for PowerShell needs to be changed.

  Without changing this policy, trying to execute a script results in the error message:
  → Windows/PowerShell/script-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system[script cannot be loaded because running scripts is disabled on this system].

  The current value of the execution policy is found in the → Windows/registry/tree-structure/key[registry key] 
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/PowerShell/1/ShellIds/Microsoft_PowerShell[`HKEY_CURRENT_USER\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell`]
 (value `ExecutionPolicy`). This value should be set to `RemoteSigned`.

  Interestingly, PowerShell provides the → Windows/PowerShell/command-inventory/noun/executionPolicy/set[`set-executionPolicy` cmdLet] that does exactly that:
code {
set-executionPolicy removeSigned -scope currentUser
code }

  *2019-04-01* it turned out that the mentioned key does not exist after a fresh installation of Windows - but it is created with the cmdLet.

  *2020-03-09* On a Windows 7 (PowerShell 2.0) installation, the option `removeSigned` was not understood. I had to change it to `bypass`.


}
{ Activate webRequest-invoke

 → Windows/PowerShell/command-inventory/noun/webRequest/invoke[`invoke-webRequest`] throws the error message
  "
    invoke-webrequest : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete.
    -
    Specify the UseBasicParsing parameter and try again.
  "

  What needs to be done in order for `webRequest-invoke` to work?

}
{ Install PowerShell profile

  → development/tools/scripts/personal/profile_ps1#profile-install[Install] the profile script → development/tools/scripts/personal/profile_ps1[`profile.ps`].

}
{ Check hostname

  Is hostname ok?
code {
PS:\> → Windows/dirs/Windows/System32/HOSTNAME_EXE[hostname]
code }

}
{ Start PowerShell as administrator

  If a PowerShell is needed with *administrator privileges*, the → Windows/PowerShell/command-inventory/noun/process/start/index[`start-process`] → Windows/PowerShell/language/cmdlet[cmdlet] can be used:
code {
start-process powershell -verb runAs
code }

 *2020-03-17* this is now in the `admin` function in the → development/tools/scripts/personal/profile_ps1[`profile.ps1` script].

  { TODO

    How do I determine if I am currently running → Windows/PowerShell as Administrator?

    Is it possible with `→ Windows/dirs/Windows/System32/whoami_exe[whoami] /priv`?

  }

}
{ Activate Windows

  Check current license state and, if available, expiration date:
code {
PS C:\users\rene> → Windows/dirs/Windows/System32/_xscript_exe[cscript] -nologo $env:→ Windows/development/environment-variables/windir[windir]\system32\→ Windows/dirs/Windows/System32/slmgr_vbs -xpr
Windows(R), Professional edition:
    Windows is in Notification mode
code }

  Uninstall previous product key
code {
PS C:\users\rene> → Windows/dirs/Windows/System32/_xscript_exe[cscript] -nologo $env:→ Windows/development/environment-variables/windir[windir]\system32\→ Windows/dirs/Windows/System32/slmgr_vbs -upk
Uninstalled product key successfully.
code }


  Activate new product key
code {
PS C:\users\rene> → Windows/dirs/Windows/System32/_xscript_exe[cscript] -nologo $env:→ Windows/development/environment-variables/windir[windir]\system32\→ Windows/dirs/Windows/System32/slmgr_vbs → Windows/dirs/Windows/System32/slmgr_vbs#win-reinstall-product-key[-ipk] → Windows/settings/product-key[xxxxx-xxxxx-xxxxx-xxxxx-xxxxx]
Installed product key xxxxx-xxxxx-xxxxx-xxxxx-xxxxx successfully.
code }

  In a previous attempt to execute this command, Settings->Activation told me: *A known error with Windows activation is: We can't activate Windows on this device as we can't connect to your organization's activation server.*
  (or something similar to that). So, I had also to enter the following to fix that:
code {
… slmgr.vbs /dlv
code }

  Check current license state again
code {
PS C:\users\rene> → Windows/dirs/Windows/System32/_xscript_exe[cscript] -nologo $env:→ Windows/development/environment-variables/windir[windir]\system32\→ Windows/dirs/Windows/System32/slmgr_vbs -xpr
    The machine is permanently activated.
code }

  { TODO

     Does `slmgr.vbs` have something to do with → Windows/dirs/Windows/System32/changepk_exe[`changepk.exe`] or → Windows/dirs/Windows/System32/slui_exe[`slui.exe`] (under → Windows/dirs/Windows/System32)?

  }

}
{ Change default keyboard layout

  *Capslock* needs to be swapped with *esc*, the *right Windows* key needs to function as *control* key:
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Keyboard-Layout#reg-keyboard-layout-ps[execute this PowerShell script].

}
{ Configure Text Services and Input Methods

  { Language list

    A language list can be created with the → Windows/PowerShell/command-inventory/noun/winUserLanguageList[`winUserLanguageList` cmdLet noun]:
code {
$preferredLanguages = → Windows/PowerShell/command-inventory/noun/winUserLanguageList/new[new-winUserLanguageList] 'en-US'
$preferredLanguages.add('de-CH')
→ Windows/PowerShell/command-inventory/noun/winUserLanguageList/set[set-winUserLanguageList] -force $preferredLanguages
code }

   Before I knew that there were such PowerShell cmdLets, I tried to configure the language list directly in the → Windows/registry.
code {
#
# No substitutes
#    Remove entire key `HKCU\Keyboard Layout\Substitutes' and add an empty one
#
  remove-item        -path 'HKCU:\Keyboard Layout\Substitutes'
  $eatMe = → Windows/PowerShell/command-inventory/noun/item/new[new-item]  -path 'HKCU:\Keyboard Layout\Substitutes'

#
# Remove HKCU\Keyboard Laoyout\Preload
#   Strangly, this remove-item does not seem to entirely remove
#   the specified key:
#
  remove-item        -path 'HKCU:\Keyboard Layout\Preload'

#
# Add US and Swiss German keyboard layouts
#
  new-itemProperty -path 'HKCU:\Keyboard Layout\Preload' -name  1 -value ('0000' + '0409') # US
  new-itemProperty -path 'HKCU:\Keyboard Layout\Preload' -name  2 -value ('0000' + '0807') # German (Switzerland)
code }

  }
  { Language bar

code {
#
# Language Bar
#
  $eatMe = new-itemProperty -path 'HKCU:\Software\Microsoft\CTF\LangBar' -name  ShowStatus             -value 4  -propertyType DWord -force   # Docked in the → Windows/Appearance/Taskbar
  $eatMe = new-itemProperty -path 'HKCU:\Software\Microsoft\CTF\LangBar' -name  Label                  -value 1  -propertyType DWord -force   # Show text labels on the Language Bar
  $eatMe = new-itemProperty -path 'HKCU:\Software\Microsoft\CTF\LangBar' -name  ExtraIconsOnMinimized  -value 0  -propertyType DWord -force   # Don't »Show additional Language bar icons in the taskbar«
code }

  }
  { Hotkeys to switch between keyboard layouts

code {
#
# Hotkeys to switch between keyboard layouts
#

  $mod_leftAlt = 0x01
  $VK_0        = 0x30
  $VK_9        = 0x39

  $valKeyModifiers      = [byte[]]( $mod_leftAlt , 0xc0 , 0x00 , 0x00 )
  $valLayoutUS          = [byte[]](         0x09 , 0x04 , 0x09 , 0x04 )
  $valLayoutSwissGerman = [byte[]](         0x07 , 0x08 , 0x07 , 0x08 )
  $valVK_0              = [byte[]](        $VK_0 , 0x00 , 0x00 , 0x00 )
  $valVK_9              = [byte[]](        $VK_9 , 0x00 , 0x00 , 0x00 )
 
  remove-item        -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100'
  remove-item        -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101'
  $eatMe = → Windows/PowerShell/command-inventory/noun/item/new[new-item]  -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100'
  $eatMe = → Windows/PowerShell/command-inventory/noun/item/new[new-item]  -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101'

  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100' -name 'Virtual Key'   -value $valVK_9                 -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100' -name 'Key Modifiers' -value $valKeyModifiers         -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100' -name 'Target IME'    -value $valLayoutUS             -propertyType binary

  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101' -name 'Virtual Key'   -value $valVK_0                 -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101' -name 'Key Modifiers' -value $valKeyModifiers         -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101' -name 'Target IME'    -value $valLayoutSwissGerman    -propertyType binary
code }

  }
  { Registry links
  
  See also
    • → Windows/registry/tree/HKEY_CURRENT_USER/Keyboard-Layout/Substitutes[`HKEY_CURRENT_USER\Keyboard Layout\Substitutes`]
    • → Windows/registry/tree/HKEY_CURRENT_USER/Keyboard-Layout/Preload[`HKEY_CURRENT_USER\Keyboard Layout\Preload`]
    • → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/CTF/LangBar[`HKEY_CURRENT_USER\Software\Microsoft\CTF\LangBar`]
    • → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Input-Method/Hot-Keys[`HKEY_CURRENT_USER\Control Panel\Input Method\Hot Keys`]

  }
  { TODO

What is the relationship to the → Windows/PowerShell/language/cmdlet[PowerShell cmdlets]
code {
set-culture             en-GB
set-winSystemLocale     en-GB
→ Windows/PowerShell/command-inventory/noun/winUserLanguageList/set[set-winUserLanguageList] en-GB
set-winHomeLocation -geoId 242
code }

    Check the values under the → Windows/registry[registry] key → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/International/User-Profile[`HKEY_CURRENT_USER\Control Panel\International\User Profile`],
    especially the value of
    → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/International/User-Profile#reg-user-profile-languages[Languages].

    Should the
      → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Desktop#reg-deskop-WheelScrollLines[value `WheelScrollLines` under `HKEY_CURRENT_USER\Control Panel\Desktop`] be
      adjusted?

    Should Windows be put into → Windows/development/developer-mode[developer mode]?

  }

}
{ Check default values in registry

  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/RegisteredApplications#reg-registeredApplications-default[`HKEY_LOCAL_MACHINE\SOFTWARE\RegisteredApplications`]

}
{ Change mouse speed

  → Windows/PowerShell/examples/WinAPI/modify-mouse-speed

}
{ Install Chocolatey

  → Windows/Chocolatey#chocolatey-install[Install chocolatey]

}
{ explorer

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced#reg-show-hidden-files-and-extensions[Show hidden files and file extensions]
  in → Windows/dirs/Windows/explorer_exe[`explorer.exe`].

  In order for this change to take effect, → Windows/dirs/Windows/explorer_exe#restart-explorer[explorer needs to be restarted].

}
{ Change the AcceptLanguage for Edge in the browser

  In order to make it easier to download *english* software (because some «clever» sites almost force me to download their software in the language of the browser),
  the → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/International#ie-accept-language[`AcceptLanguage`] → development/web/HTTP[HTTP] header should be changed under
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/International[`HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\International`].

} 
{ Create variables, functions etc for installation

  { Download folder

    Stuff to be downloaded might go into the → Windows/dirs/Users/username/Downloads[Downloads] directory.

    The location of the download directory can be determined with the → Windows/development/WinAPI function `SHGetKnownFolderPath`.
    -
    In PowerShell, this function can be → Windows/dirs/_known-folders#win-known-folder-ps[accessed by running this P/Invoke class]. After running the linked script, the download
    folder name can be assigned to a → Windows/PowerShell/language/variable[variable] with
code {
PS C:\> $downloadFolder = $([shell32]::GetKnownFolderPath('{374DE290-123F-4565-9164-39C4925E467B}'))
code }

    It seems easier, however, to directly set the variable like so:
code {
$downloadFolder="→ Windows/PowerShell/language/variable/automatic/home[$home]\Downloads\"
code }

  }
  { Function addDirToPath

    A function to add directories to the → Windows/development/environment-variables/PATH[`PATH` environment variable].

    Because the change in the → Windows/registry does not take immediate effect, the function also modifes the variable directly.

code {
function addDirToPath($dir) {
   $userPath   = [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-GetEnvironmentVariable[getEnvironmentVariable]('PATH', 'user'   )
   $systemPath = [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-GetEnvironmentVariable[getEnvironmentVariable]('PATH', 'machine')

   [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('PATH', "$dir;$userPath", 'user')
   $env:PATH = "$systemPath;$dir;$userPath"
}
code }

  }
  { Create bin directory

  Create a `bin` directory under → Windows/dirs/Users/username[`%UserProfile%`] to store executables and scripts so that they can be called from the command line (such as → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] or PowerShell).
  -
  With → Windows/PowerShell[PowerShell]:
code {
$binPath = "$home\bin"
→ Windows/PowerShell/language/variable/automatic/null[$null] = mkdir $binPath -errorAction silentlyContinue
code }

  Add the newly created directory to the `PATH` → development/environment-variable[environment variable]:
code {
# $userPath = [environment]::getEnvironmentVariable("PATH", "user")
# [environment]::setEnvironmentVariable("PATH", "$binPath;$userPath", 'user') 
addDirToPath $binPath
code }

  }
  { User Agent

    Create a → development/web/HTTP/User-Agent[User Agent] to download files from the internet.
code {
$ua = → Windows/PowerShell/command-inventory/noun/object/new[new-object] → Microsoft/dot-net/namespaces-classes/System/Net/WebClient[System.Net.WebClient]
code }

  Prevent error: *The request was aborted: Could not create SSL/TLS secure channel.*
code {
[→ Microsoft/dot-net/namespaces-classes/System/Net/ServicePointManager[net.servicePointManager]]::securityProtocol = [net.securityProtocolType]::Tls12
code }

  }
}
{ Add additional environment variables

 `rn_root`:
code {
[environment]::setEnvironmentVariable('rn_root', "$home\renenyffenegger.ch\", 'user')
code }

}
{ Change date format etc.

  Date formats etc. are stored in the → Windows/registry under the key → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/International[`HKEY_CURRENT_USER\Control Panel\International`].

}
{ Install a non-edge browser

  { Chrome

    As per → https://superuser.com/a/577602/16610[this superuser answer], Chrome  can be silently installed by
    downloading the → http://dl.google.com/chrome/install/375.126/chrome_installer.exe[Downloading the chrome installer] and then useing the following switches:
code {
chrome_installer.exe /silent /install
code }

    Alternatively, it seems it can be installed from an elevated command shell with → Windows/Chocolatey with
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install googlechrome
code }

  }
  { Firefox

    → development/web/browser/Firefox#ff-install[Install Firefox]

 { Configure Firefox

   Create a → development/web/browser/Firefox/profile-folder[Profile folder] with a fixed name:
   -
   → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/Profiles/_profile_[`%APPDATA%\Mozilla\Firefox\Profiles\tq84`].

   Make the → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/profiles_ini[`profiles.ini`] file point to this *fixed* profile filder by copying the following
   into → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/profiles_ini[`%APPDATA%\Mozilla\Firefox\profiles.ini`]:
code {
[General]
StartWithLastProfile=1

[Profile0]
Name=default
IsRelative=1
Path=→ Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/Profiles/_profile_[Profiles/tq84]
Default=1
code }

   TODO: This might also be achieved by using the `-CreateProfile` command line option of FireFox.

 }
 { Configure Firefox - Addons

   → http://bernaerts.dyndns.org/linux/74-ubuntu/271-ubuntu-firefox-thunderbird-addon-commandline[Install addons from command line] says to
     • Download XPI (=zip) archive
     • Find UID in archive
     • Extract XPI to *extensions\UID* directory (under → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/Profiles/_profile_[profile directory])


Does `user.js` need to contain something like:
code {
user_pref("extensions.autoDisableScopes", 14);
code }

    { vimium

     Install → https://addons.mozilla.org/de/firefox/addon/vimium-ff[Vimium-FF] (and compare with → https://github.com/philc/vimium[vimium]).

     Download → https://addons.mozilla.org/firefox/downloads/file/1192087[the xpi file (file number = 1192087)].
code {
#
#  1 - Download xpi archive (and rename to zip in one go)
#
$ua = new-object system.net.webClient

# mkdir "$env:appdata\Mozilla\Firefox\Profiles\tq84\{EC8030F7-C20A-464F-9B0E-13A3A9E97384}"
  mkdir "$env:appdata\Mozilla\Firefox\Extensions\{EC8030F7-C20A-464F-9B0E-13A3A9E97384}"

# $ua.downloadFile("https://addons.mozilla.org/firefox/downloads/file/1192087", "$env:appdata\Mozilla\Firefox\Profiles\tq84\\{d7742d87-e61d-4b78-b8a1-b469842139fa}.xpi")
  $ua.downloadFile("https://addons.mozilla.org/firefox/downloads/file/1192087", "$env:appdata\Mozilla\Extensions\{EC8030F7-C20A-464F-9B0E-13A3A9E97384}\{d7742d87-e61d-4b78-b8a1-b469842139fa}.xpi")
# $ua.downloadFile("https://addons.mozilla.org/firefox/downloads/file/1192087/vimium_ff-1.64.3-fx.xpi" , "$env:appdata\Mozilla\Firefox\Profiles\tq84\{d7742d87-e61d-4b78-b8a1-b469842139fa}.xpi"
)

#
#   2- Unzip xpi archive
#
$shell = new-object -comObject shell.application
mkdir $env:temp\vimium
$shell.nameSpace("$env:temp\vimium").copyHere($shell.nameSpace("$env:temp\vimium.zip").items())
code }

     }
     { UserAgent Switcher

       Install → https://github.com/ray-lothian/UserAgent-Switcher/[UserAgent-Switcher]

       Download → https://github.com/chrispederick/user-agent-switcher/blob/master/development/builds/user-agent-switcher.xpi[xpi]

     }
     { Add blocker

       → https://addons.mozilla.org/de/firefox/addon/ublock-origin/[U Origin Plus]

     }
   }
 }

}
{ Download Sysinternal tools

  → Windows/tools/Sysinternals#download[Download] interesting → Windows/tools/Sysinternals tools and → Windows/tools/Sysinternals#accept-eula[accept their EULA].

  2019-03-02: It turns out that at least → Windows/tools/Sysinternals/Procmon[Procmon] comes with the command line option `/AcceptEula` which does that, too.

}
{ Install the WDK

  Install the → Windows/development/Kits/Driver so that interesting tools such as
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Tools/arch/devcon_exe[`devcon.exe`] or
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Tools/arch/usbview_exe[`usbview.exe`] are available.


}
{ Enable telnet feature

  → Windows/dirs/Windows/System32/telnet_exe[`telnet.exe`] is apparently an → Windows/optional-features[optional feature] («telnetClient») that needs to be enabled to be run. This is possible
  in an elevated PowerShell prompt:
code {
→ Windows/PowerShell/command-inventory/noun/windowsOptionalFeature/enable[enable-windowsOptionalFeature] telnetClient -featureName telnetClient
code }

}
{ Enable Clipboard History

  The → Windows/clipboard#win-clipboard-history[clipboard history] should be enabled.

}
{ Activate Administrator account

  Check current accounts (`wmic useraccount`) and → Windows/registry/tree/HKEY_USERS[`HKEY_USERS`].
  -
  What about → Windows/dirs/Windows/System32/lusrmgr_msc

  Check if Administrator is already activated:
code {
→ Windows/dirs/Windows/System32/net_exe/user[net user] administrator | Windows/dirs/Windows/System32/findstr_exe[findstr] /c:"Account active"
code }

  In → Windows/dirs/Windows/System32/cmd_exe[cmd.exe].
code {
C:\> wmic useraccount where (name='administrator' and domain='%computername%') get name,sid
code }

  Activate and/or enable the administrator → Windows/user-account[account] and assign a password
code {
c:\> → Windows/dirs/Windows/System32/net_exe/user[net user] administrator MYSECRETPASSWORD /active:yes
code }
   Apparently, this changes byte 0x38
   in → Windows/registry/tree/HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/000001F4[`HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001F4\V`].

  In PowerShell, the current adminstrator password status can apperently be determined like so:
code {
$computerInfo = get-cimInstance win32_computerSystem

switch ( $computerInfo.adminPasswordStatus ) {
  0        { 'disabled'            }
  1        { 'enabled'             }
  2        { 'not implemented'     }
  3        { 'unknown'             }
  default  { 'unable to determine' }
}
code }

}
{ Install newest PowerShell release

  Should → https://github.com/PowerShell/PowerShell/releases[the newest PowerShell version installed, anyway]?

 ~TODO~: the following download takes quite a bit of time, and → Microsoft/dot-net/namespaces-classes/System/Net/WebClient[`System.Net.WebClient`] is deprecated anyway. So, try to use
 `downloadFile()`, found in the `temp-scripts-and-utilities` repository.

code {
# $ua.downloadFile('https://github.com/PowerShell/PowerShell/releases/download/v7.0.3/PowerShell-7.0.3-win-x64.zip'                     , "$downloadFolder/PowerShell.zip")
  $ua.downloadFile('https://github.com/PowerShell/PowerShell/releases/download/v7.1.0-preview.6/PowerShell-7.1.0-preview.6-win-x64.zip' , "$downloadFolder/PowerShell.zip")

$newestPsDir = "$binPath/PowerShell7"
if (→ Windows/PowerShell/command-inventory/noun/path/test[test-path] $newestPsDir) {
   → Windows/PowerShell/command-inventory/noun/item/remove[remove-item] -recurse $newestPsDir
}

→ Windows/PowerShell/command-inventory/noun/archive/expand[expand-archive] $downloadFolder/PowerShell.zip $newestPsDir
code }

code {
addDirToPath $newestPsDir
code }

code {
remove-item "$downloadFolder/PowerShell.zip"
code }

  { TODO: set-slipboardText set-clipboard

    Does the newest PowerShell version come with either `set-→ Windows/PowerShell/command-inventory/noun/clipboard[clipboard]` or `set-clipboardText`? Otherwise, it might be added with
code {
→ Windows/PowerShell/command-inventory/noun/module/install[install-module] -name ClipboardText -force
code }

  }

}
{ Install Perl

  Install a *portable* → development/languages/Perl[Perl]. Strawberry's portable Perl claims that it does not need admin privileges.

  Strawberry recommends to put into path without spaces. However,  the value of `$env:programFiles` is → Windows/dirs/Program-Files[`C:\Program Files`] which contains spaces - and I seem to remember
  that I was able to successfully install Perl below that directory.

code {
# $strawberryPerlDestDir="$env:programFiles\StrawberryPerl"
  $strawberryPerlDestDir="$home\StrawberryPerl"
$null = mkdir $strawberryPerlDestDir

#
# Find perl version under strawberryperl.com/releases.html
#
$perlVersion='5.30.3.1'
if ([environment]::is64BitOperatingSystem) {
  $ua.downloadFile("http://strawberryperl.com/download/$perlVersion/strawberry-perl-$perlVersion-64bit-PDL.zip" , "$downloadFolder\StrawberryPerl.zip")
} else {
  $ua.downloadFile("http://strawberryperl.com/download/$perlVersion/strawberry-perl-$perlVersion-32bit-PDL.zip" , "$downloadFolder\StrawberryPerl.zip")
}

#
# Unzip zip file with COM object shell.application
#
$shell = new-object -comObject shell.application
$shell.nameSpace($strawberryPerlDestDir).copyHere($shell.nameSpace("$downloadFolder\StrawberryPerl.zip").items())

#
# Other dissapointing trials to unzip zipfile were:
#
#   extrac32 $home\Downloads\StrawberryPerl.zip "$env:programFiles\StrawberryPerl"
#  &rundll32.exe zipfldr.dll,RouteTheCall $home\Downloads\StrawberryPerl.zip

rm $home\Downloads\StrawberryPerl.zip

#
# Set env variables
#
#   portableshell.bat also sets these variables:
#     set TERM=
#     set HOME=%~dp0data
#

$envTarget = 'user' # or 'machine'

addDirToPath $strawberryPerlDestDir\perl\site\bin
addDirToPath $strawberryPerlDestDir\perl\bin
addDirToPath $strawberryPerlDestDir\c\bin
# $envPath = [environment]::getEnvironmentVariable('PATH', $envTarget)
# [environment]::setEnvironmentVariable('PATH'          , "$strawberryPerlDestDir\perl\site\bin;$strawberryPerlDestDir\perl\bin;$strawberryPerlDestDir\c\bin;$envPath", $envTarget) 

[environment]::setEnvironmentVariable('PLPLOT_LIB'    , "$strawberryPerlDestDir\c\share\plplot", $envTarget) 
[environment]::setEnvironmentVariable('PLPLOT_DRV_DIR', "$strawberryPerlDestDir\c\share\plplot", $envTarget) 
code }

  { Associate .pl extension with Perl executable

    Before proceeding with the following snippets, first check if the → Windows/registry/tree-structure/key[registry key]
    `→ Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/FileExts[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts]\.pl` already exists.

code {
$null = new-psDrive -name HKCR -psProvider registry -root HKEY_CLASSES_ROOT

#
# TODO: In Zicke, the .pl key was already existent with a default
# value of 'pl_auto_file' and a subkey, named 'PersistentHandler'
# and default value '{5e941d80-bf96-11cd-b579-08002b30bfeb}'
#
$null = new-item -path HKCR:\.pl
→ Windows/PowerShell/command-inventory/noun/item/set[set-item] -path HKCR:\.pl -value PerlScript

# Alternatively:
→ Windows/PowerShell/command-inventory/noun/item/new[new-item] -path HKCU:\Software\Classes\.pl
→ Windows/PowerShell/command-inventory/noun/item/set[set-item] -path HKCU:\Software\Classes\.pl -value PerlScript


#
# Did not work in Zicke:
#
# new-item -path HKCR:\PerlScript

$null = new-item -path HKCU:\Software\Classes\PerlScript
$null = new-item -path HKCU:\Software\Classes\PerlScript\shell
$null = new-item -path HKCU:\Software\Classes\PerlScript\shell\Open
$null = new-item -path HKCU:\Software\Classes\PerlScript\shell\Open\Command
# $null = set-item -path HKCU:\Software\Classes\PerlScript\shell\Open\Command -value "`"$strawberryPerlDestDir\perl\bin\perl.exe`" `"%1`""
$null = → Windows/PowerShell/command-inventory/noun/item/set[set-item] -path HKCU:\Software\Classes\PerlScript\shell\Open\Command -value "`"$strawberryPerlDestDir\perl\bin\perl.exe`" %1 %*"
code }

  }

    Add some modules 
code {
→ development/languages/Perl/installation/directory/perl/bin/cpan → development/languages/Perl/modules/File/Touch
cpan Net::FTP
cpan Net::FTP::File
cpan Digest::MD5::File
code }

  Apparently used for the test case for → https://github.com/ReneNyffenegger/perl-GraphViz-Graph[`GraphViz::Graph`]:
code {
cpan File::MMagic
code }

  The following is also used for the the test case of `GraphViz::Graph`, but failed with an error message (at least on 2020-09-01):
code {
cpan Test::Files
code }


code {
# git clone https://github.com/ReneNyffenegger/RN                   ~/github/github
  git clone https://github.com/ReneNyffenegger/RN                   "$($env:github_root)RN"
# git clone → https://github.com/ReneNyffenegger/tq84-PerlModules     ~/github/lib
  git clone → https://github.com/ReneNyffenegger/tq84-PerlModules     "$($env:github_top_root)lib/tq84-PerlModules"
code }
  TODO: at least the RN module name and installation location need to be changed.
  

}
{ Install git

    Install → development/version-control-systems/git[git].

    Download end extract the self extracting executable. Find newest version number → https://github.com/git-for-windows/git/releases[here].
code {
$gitVersion = '2.28.0'  # Find newest version number under https://github.com/git-for-windows/git

if ([environment]::is64BitOperatingSystem) {
  $ua.downloadFile("https://github.com/git-for-windows/git/releases/download/v$gitVersion.windows.1/Git-$gitVersion-64-bit.exe"    , "$($downloadFolder)Git.exe")

#
# There would also be a .tar.bz2 file:
#
# $ua.downloadFile("https://github.com/git-for-windows/git/releases/download/v$gitVersion.windows.1/Git-$gitVersion-64-bit.tar.bz2", "$($downloadFolder)Git.exe")

  # LFS Git does not seem necessary enymore
  # $ua.downloadFile("https://github.com/git-lfs/git-lfs/releases/download/v2.7.2/git-lfs-windows-amd64-v2.7.2.zip", "$home\Downloads\git-lfs-windows-amd64.zip")

#
# TODO does the downloaded file really need to have the *amd64* thingy?
#
# $ua.downloadFile("https://github.com/git-lfs/git-lfs/releases/download/v/git-lfs-windows-amd64-v2.7.1.zip", "$home\Downloads\git-lfs-windows-amd64.zip")

} else {
  # echo "64 bit expected"
  $ua.downloadFile("https://github.com/git-for-windows/git/releases/download/v$gitVersion.windows.1/Git-$gitVersion-32-bit.exe", "$($downloadFolder)Git.exe")
}
code }

  Run the downloaded executable (which installes the git executable under → Windows/dirs/Program-Files/Git/cmd).
code {
& "$($downloadFolder)Git.exe" /SP- /SUPPRESSMSGBOXES /SILENT /CURRENTUSER
code }

  The meaning of the used command line flags is (see → https://jrsoftware.org/ishelp/index.php?topic=setupcmdline):
  table { ll
   `/SP-`               ☰ Disables «This will install.. Do you wish to continue?» prompt at the beginning of Setup
   `/SUPPRESSMSGBOXES`  ☰ Supress message boxes
   table }

    Do long paths have to be enabled on → Windows/versions/10[Windows 10] with git?
code {
git config --system core.longpaths true
code }

    Possibly, username and password need to be configured, too:
code {
git config --global user.email "…"
git config --global user.name  "René Nyffenegger"
code }

   For some reason that is beyond my intelligence, `core.autocrlf` seems to be `true` by default. Therefore, set it to `false`:
code {
git config --global core.autocrlf false
code }

  { Add github_root and github_top_root variables

    Add the environment variables `github_top_root` and `github_root`
code {
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]("github_top_root", "$home\github\"       , "user")
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]("github_root"    , "$home\github\github\", "user")
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]("git_work_dir"   , "$home\localgit\"     , "user")
code }


   Because the change does not take effect in the current session, the variables also need to be set manually:
code {
$env:github_top_root = "$home\github\"
$env:github_root     = "$home\github\github\"
$env:git_work_dir    = "$home\localgit\"
code }


  }
  { Create git directories

code {
$null = mkdir $env:github_top_root
$null = mkdir $env:github_top_root\github
$null = mkdir $env:github_top_root\about
$null = mkdir $env:github_top_root\lib
$null = mkdir $env:github_top_root\temp
code }

  }

  { Install git lfs
code {
cd ... data.stadt-zuerich.ch
git lfs install --local
code }

  }

}
{ Clone some git repositories

  { localgit

code {
# git clone e:\git $env:userprofile\localgit
git clone e:\git $env:git_work_dir
code }

    { Add new script directory to path environment variable

code {
addDirToPath "$($env:git_work_dir)scripts"
code }

    }
  
  }
  { github script repository

code {
# git clone https://github.com/ReneNyffenegger/scripts-and-utilities $env:userprofile/github/lib/scripts
git clone https://github.com/ReneNyffenegger/scripts-and-utilities "$($env:github_top_root)lib\scripts"
code }

    { Add new script directory to path envioronment variable

code {
addDirToPath "$($env:github_top_root)lib\scripts"
code }

    }

   }

}
{ Configure cmd.exe

  Check if → Windows/registry[registry] key → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`] exists and
  what the values of `CompletionChar`, `PathCompletionChar` and `EnableExtensions` are.
  -
  If the key does not exist, create it with
code {
new-item -path 'hkcu:\Software\Microsoft\Command Processor'
code }

  Make sure that → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe[`HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe`] exists, otherwise create it with
code {
new-item -path 'hkcu:\Console\%SystemRoot%_system32_cmd.exe'
code }

  Set the → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe#reg-cmd-set-size[window and buffer size of cmd.exe],
  → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe#reg-cmd-set-font[font size] and
  → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe#reg-cmd-quick-edit[allow copying text (quick edit)].


  { Environment variable PROMPT

  → Windows/versions/10[Windows 10] comes with → Linux/shell/ANSI-escape-sequences, thus, the prompt can be colored:
code {
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('PROMPT', '$e[38;5;6m$t$s$e[38;5;10m$p$_$e[38;5;9m$+$g$s$e[38;5;15m', 'user')
code }

  Set the → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%`] environment variable (without ANSI colors):
code {
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]("PROMPT", '$t$s$p$_$+$g$s', 'user') 
code }


  }
  { Environment variable DIRCMD

  Set the → Windows/dirs/Windows/System32/cmd_exe/commands/dir#cmd-exe-dircmd[`DIRCMD`] variable to specify the default behaviour of → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir`]:
code {
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('DIRCMD', '/ogn /a', 'user')
code }

  }
  { autorun.bat

    Assign a → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch file] to be run when cmd.exe is started (Value of → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor#reg-cmd-exe-autorun[`autorun`]
    under → Windows/registry[registry] key
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`]).

code {
PS C:\> # new-itemProperty -path 'hkcu:\Software\Microsoft\Command Processor' -name autorun -value "$($env:userprofile)\github\lib\scripts\autorun.bat" -force
PS C:\>   → Windows/PowerShell/command-inventory/noun/itemProperty/new[new-itemProperty] -path 'hkcu:\Software\Microsoft\Command Processor' -name autorun -value "$($env:github_top_root)\lib\scripts\autorun.bat" -force
code }

    The → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/autorun.bat[`autorun.bat`] was installed previously in *Clone github repositories*.


  }
  { Transparent cmd.exe

    With → Windows/versions/10[Windows 10], `cmd.exe` can be made transparent - not sure, though, if I really want that!

  }


}
{ gvim / vim

  { Compiling

  Strawberry Perl comes with a → development/languages/C-C-plus-plus/C[C compiler] which can be used to → development/vim/compiling[compile vim].

  Make sure that the setting of the variable `github_top_root` has already taken effect.
code {
cd $env:github_top_root
git clone https://github.com/vim/vim
# cd $env:github_top_root\vim\src
cd vim\src
code }

Edit `feature.h` to match preferences.

If Perl is installed under → Windows/dirs/Program-Files[C:\Program Files] (which contains spaces), the installation directory's short name needs to be determined:
code {
$fso = new-object -comObject scripting.fileSystemObject
$perlShortPath = $fso.getFolder("$env:programFiles\StrawberryPerl\perl").shortPath
code }

The `ARCH=native` option is passed to gcc via the → development/languages/C-C-plus-plus/GCC/options/m_lowercase/arch[`-march`] option. Additionally,
it prevents the make file from trying to invoke → development/languages/sed[sed] which is not yet installed.

Define `XPM=no` to prevent *fatal error: xpm.h: no such file or directory*.

The option `TERMINAL=yes` builds vim with *terminal support* (winpty, `:help terminal`)

   Using short path:
code {
gmake -f Make_ming.mak PERL=$perlShortPath DYNAMIC_PERL=yes PERL_VER=528 ARCH=native XPM=no
code }

  Alternative build-execution using the variable `$strawberryPerlDestDir`:
code {
gmake -f Make_ming.mak PERL=$($strawberryPerlDestDir -replace '\\', '/')/perl DYNAMIC_PERL=yes PERL_VER=530 ARCH=x86-64 TERMINAL=yes
code }

code {
cp gvim.exe     $home\bin
cp vimrun.exe   $home\bin
cp xxd\xxd.exe  $home\bin
code }

 
   Set the `VIMRUNTIME` environment variable
code {
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('VIMRUNTIME', "$($env:github_top_root)vim\runtime", 'user') 
code }

   Clone `.vim`
code {
git clone https://github.com/ReneNyffenegger/.vim $home\vimfiles
code }

  }
  { Installing from the self extracting exe

    Alternatively, gvim might be installed with an installer, downloadable from → https://ftp.nluug.nl/pub/vim/pc/gvim81.exe.

    The default installation folder is `→ Windows/dirs/Program-Files-x86[C:\Program Files (x86)]\Vim`. Without administrator rights,
    another installation folder is needed, for example `%homedrive%%homepath%\Vim`.
    -
    Apparently, the installer does not set adjust the → Windows/development/environment-variables/PATH[`PATH` variable]. So, it needs
    to be set manually:
code {
PS C:\> $userPath = [environment]::getEnvironmentVariable("PATH", "user"    )
PS C:\> [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('PATH', "$($env:HOMEDRIVE)$($env:HOMEPATH)Vim\vim81;$userPath", "user") 
code }

    TODO:
      • The *Edit-with-Vim* context menu entry
      • The _vimrc file which is installed if it does not exist
      • The plugin directory in HOME or VIM
      

  }

}
{ create .netrc

  Create a → Linux/fhs/home/username/_netrc[`.netrc`] file in → Windows/dirs/Users/username.

}
{ Install portable apps

  → https://portableapps.com/apps[Portable apps] to install:
    • → https://portableapps.com/apps/development/database_browser_portable[Database Browser Portable]
    • → https://portableapps.com/apps/development/frhed_portable[Frhed] (hex editor)
    • → https://portableapps.com/apps/graphics_pictures/gimp_portable[Gimp]
    • → https://portableapps.com/apps/graphics_pictures/inkscape_portable[Inkscape]
    • → https://portableapps.com/apps/graphics_pictures/irfanview_portable[irfanview]
    • → https://portableapps.com/apps/music_video/vlc_portable[VLC] (TODO: was already installed under 
    • → https://portableapps.com/apps/office/dia_portable[Dia]

}
{ Install RemoveDrive

code {
$ua.downloadFile('https://www.uwe-sieber.de/files/removedrive.zip', "$home\Downloads\removedrive.zip");
#
#  Extract only exe from zip file. Note: there is also a 32-bit version
#
$removedrive_exe=$shell.namespace("$home\Downloads\removedrive.zip").items().item('x64\RemoveDrive.exe');
$shell.nameSpace("$home\bin").copyHere($removedrive_exe);
code }

  See also → development/tools/scripts/personal/ejusb_bat[`ejusb.bat`]

}
{ AutoHotKey

  A → development/web/HTTP/User-Agent[user agent] needs to be specified in order to prevent *The remote server returned an error: (403) forbiddden.*

code {
$ua = new-object system.net.webClient
$ua.headers.add('User-Agent', 'Mozilla/5.0 (the-OS)')
$ua.downloadFile("https://www.autohotkey.com/download/1.1/AutoHotkey_1.1.30.03.zip"        , "$home\Downloads\AutoHotkey_1.1.zip"     )
$ua.downloadFile("https://www.autohotkey.com/download/2.0/AutoHotkey_2.0-a103-56441b52.zip", "$home\Downloads\AutoHotkey_v2.0-x64.zip")

$shell = new-object -comObject shell.application

#
# TODO: V 1.1 also contains a compiler and some *.ahk files.
#
$shell.nameSpace("$home\bin").copyHere("$home\Downloads\AutoHotKey_1.1.zip\AutoHotkeyU64.exe")
$shell.nameSpace("$home\bin").copyHere("$home\Downloads\AutoHotKey_1.1.zip\WindowSpy.ahk"    ) # TODO: should the spy really be copied here?
mv $home\bin\AutoHotkeyU64.exe $home\bin\ahk.exe

$shell.nameSpace("$home\bin").copyHere("$home\Downloads\AutoHotkey_v2.0-x64.zip\AutoHotkeyU64.exe")
mv -force $home\bin\AutoHotkeyU64.exe   $home\bin\ahk2.exe

rm $home\Downloads\AutoHotkey_1.1.zip
rm $home\Downloads\AutoHotkey_v2.0-x64.zip
code }


   Also: add an filetype association for the `.ahk2` suffix:
code {
# new-psDrive -name HKCR -psProvider registry -root HKEY_CLASSES_ROOT
# $classRoot = 'HKCR:\'
$classRoot = 'HKCU:\Software\Classes'
$ext_ahk2 = new-item -path $classRoot -name .ahk2
#
# Set default value
#
$ext_ahk2.setValue('', 'AHK2Script')

$ahk2script         = new-item -path $classRoot -name AHK2Script
$ahk2script_command = $ahk2script.createSubKey('Shell\Open\Command')
$ahk2script_command.setValue('', "$home" + '\bin\ahk2.exe "%1" %*')
code }

}
{ R and RStudio

  Find link for RStudio → https://www.rstudio.com/products/rstudio/download/#download[here].

code {
[net.servicePointManager]::securityProtocol = [net.securityProtocolType]::Tls12
$ua = new-object system.net.webClient
# $ua.headers.add('User-Agent', 'Mozilla/5.0 (the-OS)')
$ua.downloadFile("https://cran.rstudio.com/bin/windows/base/R-3.6.0-win.exe"         , "$downloadFolder\R.exe"       )
$ua.downloadFile("https://download1.rstudio.org/desktop/windows/RStudio-1.2.1335.exe", "$downloadFolder\RStudio.exe" )

& $home\Downloads\R.exe
& $home\Downloads\RStudio.exe
code }

}
{ Graphviz

  Install → tools/Graphviz: a zip file can be found at → https://graphviz.gitlab.io/_pages/Download/Download_windows.html.

code {
PS C:\> $ua.downloadFile('https://graphviz.gitlab.io/_pages/Download/windows/graphviz-2.38.zip', "$downloadFolder\graphviz.zip")
PS C:\> → Windows/dirs/Windows/System32/tar_exe[tar] -C $env:temp -xf $downloadFolder\graphviz.zip release/bin/*
PS C:\> → Windows/PowerShell/command-inventory/noun/item/move[move-item] $env:temp\release\bin\* $binPath
PS C:\> → Windows/PowerShell/command-inventory/noun/item/remove[remove-item] -recurse $env:temp\release
code }

}
{ After installing Office

  Grant access to VBA Object Model (for example under the → Windows/registry[registry] key
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Excel/Security[`HKCU\Software\Microsoft\Office\x.y\Excel\Security`]).

  Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/application_name/Options#DeveloperTools[Add the developer tab to the ribbon].

  Change options:
    → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Excel/Options[Excel] and
    → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Word/Options[Word].


  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Common/Graphics#reg-office-DisableAnimations[Disable animations].


  Stop the → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Outlook/Preferences#NewMailDesktopAlerts[annoying desktop alert when new eMails arrive].

}
{ (After) installing Oracle

  Clone the scripts that go into the → development/databases/Oracle/SQL-Plus/sqlpath[$env:SQLPATH] location.

code {
PS C:\> git clone https://github.com/ReneNyffenegger/oracle_scriptlets "$($env:github_root)oracle_scriptlets"
code }

code {
PS C:\> [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('SQLPATH', "$($env:github_root)oracle_scriptlets\sqlpath", "user") 
code }

}
{ Add User accounts

  Add another → Windows/user-account[user account]:
code {
C:\> → Windows/dirs/Windows/System32/net_exe/user[net user] john johnsPassword /add
code }

  When logged in as that user, change the desktop background image:
code {
PS:\> set-→ Windows/PowerShell/command-inventory/noun/itemProperty[itemProperty] -path '→ Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Desktop[HKEY_CURRENT_USER\Control Panel\Desktop]' -name → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Desktop#reg-deskop-wallpaper[wallpaper] -value $env:userProfile\Pictures\IMG_2104.JPG
PS:\> → Windows/dirs/Windows/System32/rundll32_exe[rundll32.exe] → Windows/dirs/Windows/System32/user32_dll[user32.dll],UpdatePerUserSystemParameters
code }

}
{ Misc

  Install → development/languages/Python#py-install-win[Python]

  Install → tools/wget#wget-install-windows[`wget`].

  Use → Windows/dirs/Windows/System32/powercfg_exe[`powercfg.exe`] to change *power settings* so that computer does not go to sleep anymore.

  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Policies/Microsoft/Windows/WindowsUpdate/AU#reg-dont-reboot

  { Download youtube-dl #after-installing-windows-youtube-dl

    Download → tools/youtube-dl[`youtube-dl.exe`], needed for → development/tools/scripts/personal/yt2mp3_bat[`yt2mp3.bat`] and → development/tools/scripts/personal/yt2mp3_ps1[`yt2mp3.ps1`].

    The → development/web/URI-URL-URN-IRI-URC#url[URL] of the newest release can be found at → https://github.com/ytdl-org/youtube-dl/releases.

code {
$ua.downloadFile('https://github.com/ytdl-org/youtube-dl/releases/download/2020.03.24/youtube-dl.exe', "$binPath\youtube-dl.exe")
code }

? youtube-dl needs → tools/ffmpeg to convert audio to mp3. ffmpeg is installed with Image Magick (see below).

  }
  { Download and install Image Magick

    → tools/ImageMagick[Image Magick] comes in handy from time to time.

    The download links can be found → https://imagemagick.org/script/download.php[here].

code {
# 64 Bit:
  $ua.downloadFile('https://imagemagick.org/download/binaries/ImageMagick-7.0.10-2-portable-Q16-x64.zip', "$downloadFolder\ImageMagick-portable.zip")
# 32 Bit
# $ua.downloadFile('https://imagemagick.org/download/binaries/ImageMagick-7.0.10-2-portable-Q16-x86.zip', "$downloadFolder\ImageMagick-portable.zip")
→ Windows/dirs/Windows/System32/tar_exe[tar] -xf $downloadFolder\ImageMagick-portable.zip  -C $binPath convert.exe identify.exe mogrify.exe ffmpeg.exe
code }

   Alternatively, the `.zip` file can also be extracted with → Windows/PowerShell
code {
expand-archive $downloadFolder\ImageMagick-portable.zip  $binPath\ImageMagick
code }

    Modify the → Windows/development/environment-variables/PATH[`PATH` environment variable]:
code {
addDirToPath $binPath\ImageMagick
code }

  }
  { Download and install openssl

    TODO: Strawberry Perl already has an openssl executable.

    TODO: `$binPath` might already have a `libeay32.dll` and a `ssleay32.dll`.

code {
$ua.downloadFile('https://indy.fulgan.com/SSL/openssl-1.0.2t-x64_86-win64.zip', "$downloadFolder\openssl.zip")
tar xf $downloadFolder\openssl.zip -C $binPath
code }

  }

}
{ TODO

  Use the → Windows/PowerShell/command-inventory/noun/startLayout[`startLayout` cmdLet noun] to configure the → Windows/configuration/Start-menu.

  Should → http://wincdemu.sysprogs.org/[WinCDEmu] be used? It allows to mount `.iso` files with a right click in → Windows/dirs/Windows/explorer_exe[`explorer.exe`].

  Values under → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Active-Setup/Installed-Componenents[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Active Setup\Installed Components`]

  How do I → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem#reg-long-paths-enabled[enable long paths]?

  Enable → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/Winlogon#reg-enable-automatic-logon[auto logon]?

  → Windows/dirs/Windows/System32/devmgmt_msc#devmgmt-disable-webcam[Disable the webcam]

  Install → Windows/development/Visual-Studio and add `/nologo` to the `CL` and `LINK` → development/environment-variable[environment variables].

  What is a users logon id (`→ Windows/dirs/Windows/System32/whoami_exe[whoami /logonid]`)?

  Create → Windows/PowerShell[PowerShell] profile
code {
if ( -not ( test-path $profile ) ) {

   write-output "$profile does not exist. Creating it"
   new-item -itemType file -path $profile -force

}
else {

   write-output "$profile already exists"

}
code }

  Copy → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/profile.ps1[`profile.ps``] to profile path `$profile`.

  Change → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Desktop#reg-deskop-wallpaper[wallpaper]

  Should the → Windows/PowerShell module `clipboardText` be installed (when using PowerShell Core?)
  -
 `install-module -name ClipboardText`

  Which → Windows/development/process[processes] are seen to run after installation?
    • → Windows/dirs/Windows/System32/audiodg_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/ApplicationFrameHost_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/backgroundTaskHost_exe
    • → Windows/dirs/Windows/System32/browser_broker_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • CCC.exe (ATI?)
    • → Windows/dirs/Windows/System32/csrss_exe
    • → Windows/dirs/Windows/System32/ctfmon_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/dllhost_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/dwm_exe (Child of → Windows/dirs/Windows/System32/winlogon_exe)
    • → Windows/dirs/Windows/explorer_exe
    • SkypeApp.exe
    • SkypeAppBackgroundHost.exe
    • → Windows/dirs/Windows/System32/fontdrvhost_exe
    • Interrupts (handling *hardware interrupts and DPCs, child of *System* process
    • → Windows/dirs/Windows/System32/lsass_exe
    • Memory Compression (Child of *System* process)
    • → Windows/dirs/Program-Files/Windows-Defender/MSASCuiL_exe
    • MOM.exe (ATI?)
    • → Windows/dirs/ProgramData/Microsoft/Windows-Defender/Platform/_version_/MsMpEng_exe
    • → Windows/dirs/ProgramData/Microsoft/Windows-Defender/Platform/_version_/NisSrv_exe
    • OneDrive.exe (why…?)
    • Registry
    • → Windows/dirs/Windows/System32/RuntimeBroker_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/SearchFilterHost_exe
    • → Windows/dirs/Windows/System32/SearchIndexer_exe (Parent process of → Windows/dirs/Windows/System32/SearchProtocolHost_exe and SearchFilterHost.exe)
    • → Windows/dirs/Windows/System32/SearchProtocolHost_exe
    • → Windows/dirs/Windows/SystemApps/Microsoft_Windows_Cortana_cw5n1h2txyewy/SearchUI_exe
    • → Windows/dirs/Windows/System32/smartscreen_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/smss_exe (The first *user mode* process, child of *System* process)
    • → Windows/dirs/Windows/System32/spoolsv_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/taskhostw_exe
    • → Windows/dirs/Program-Files/rempl/sedlauncher_exe
    • → Windows/dirs/Windows/System32/SecurityHealthService_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/services_exe (Parent process of quite a few → Windows/dirs/Windows/System32/svchost_exe[`svchost.exe`] processes)
    • SgmBroker.exe
    • → Windows/dirs/Windows/System32/sihost_exe
    • → Windows/dirs/Windows/System32/svchost_exe (all of which seem to be a child process of → Windows/dirs/Windows/System32/services_exe[`services.exe`])
    • System (always with PID = 4?)
    • System Idle Process
    • → Windows/dirs/Windows/System32/wininit_exe (Parent process of → Windows/dirs/Windows/System32/services_exe, → Windows/dirs/Windows/System32/lsass_exe and → Windows/dirs/Windows/System32/fontdrvhost_exe)
    • → Windows/dirs/Windows/System32/winlogon_exe
    • → Windows/dirs/Windows/System32/wbem/WmiPrvSE_exe
    • → Windows/dirs/Windows/System32/wsqmcons_exe
    • → Windows/dirs/Windows/System32/WWAHost_exe
    • → Windows/dirs/Windows/System32/OptionalFeatures_exe (also PS: `get-windowsOptionalFeatures`, → Windows/dirs/Windows/System32/Fondue_exe[`Fondue.exe`])

  Which → Windows/services[services] are installed?

  Which programs do *autorun*?
  -
  → Windows/dirs/Windows/System32/msconfig_exe[`msconfig.exe`], *Startup* tab.
  -
  What about `HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon`, value of `ParseAutoexec`?

  Where does → Windows/tools/Sysinternals[Sysinternals's] → Windows/tools/Sysinternals/Procmon[Process Monitor] store its settings?

  Copy → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/profile.ps1[`profile.ps`] to profile path `$profile`.

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/Main#reg-iexplorer-change-start-page[Changing the start page] of
  → development/web/browser/Internet-Explorer[Internet Explorer] (respectively
  → Windows/registry/tree/HKEY_CLASSES_ROOT/Local-Settings/Software/Microsoft/Windows/CurrentVersion/AppContainer/Storage/microsoft-microsoftedge_8wekyb3d8bbwe/MicrosoftEdge/Main#reg-edge-startpage[that of Edge]).

  Remove unnecessary directories under → Windows/dirs/Users/username[`%UserProfile%`].


  What is auto-run? Why is *OneDrive.exe* started?

  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem#reg-long-paths-enabled[Enable long file paths]

  Can *Cortana* be turned off/disabled?

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/VisualEffects[`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects`],
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/DWM[`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\DWM`] and
  → Windows/dirs/Windows/System32/SystemPropertiesAdvanced_exe

  Enable → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Input-Method#reg-EnableHexNumpad[entering Unicode characters].


  Does → Windows/dirs/Windows/Installer need to be cleaned up with → http://www.homedev.com.au/free/patchcleaner[PatchCleaner]?

  Check Start -> Settings -> Privacy -> Diagnostics & Feedback

  Does the `DefaultSecureProtocols` value have to be changed under
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Internet-Settings/WinHttp[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp`]?

  Can I use → https://boxstarter.org/[Boxstarter] to post-install applications and environments on Windows?

  { Sounds

    This → Windows/dirs/Windows/System32/cmd_exe/batch-files to → Windows/registry/tree/HKEY_CURRENT_USER/AppEvents/Schemes/Apps#reg-turn-off-sounds[remove sounds in the registry]
    -
    This → Windows/PowerShell script → Windows/registry/tree/HKEY_CURRENT_USER/AppEvents/Schemes/Apps/_Default#reg-remove-all-sounds[to also remove sound].

    Should `DisableStartupSound` under 
    → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Authentication/LogonUI/BootAnimation[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\BootAnimation`]
    (or under → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Policies/System[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System`]?)
    be set to `1`?

    Should `Beep` and `ExtendedSound` under the → Windows/registry[registry] key → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Sound[`HKEY_CURRENT_USER\Control Panel\Sound`] be set to `no`?

  }
  { Install Subsystem for Linux

    Install the → Windows/Subsystem-for-Linux[Subsystem for Linux].

 }
 { JDK

code {
$systemPath = [environment]::getEnvironmentVariable("PATH", "machine")

[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('PATH'     , "c:\Program Files\Java\jdk-12\bin;$systemPath", "machine")
[environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]('JAVA_HOME', "c:\Program Files\Java\jdk-12"                , "machine")
code }

 }
 { Backup, restore and recovery

    table { ll

      Create a System image ☰ 
      File History ☰ → Windows/dirs/Windows/System32/fhcpl_dll[Control Panel -> System and Security -> File History]
      … ☰ 

    table }

    See also
      • → Windows/dirs/Windows/System32/sdclt_exe[`sdclt.exe`]: Backup and Restore (Windows 7)
      • → Windows/dirs/Windows/System32/sdcpl_dll[`sdcpl.dll`]; Backup and Restore (Windows 7) → Windows/control-panel[Control Panel]
      • → Windows/dirs/Windows/System32/wbadmin_exe[`wbadmin.exe`]
      • → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/BackupAndRestoreSettings[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\BackupAndRestoreSettings`]

  }
  { Install NuGet package provider

code {
→ Windows/PowerShell/command-inventory/noun/packageProvider/install[install-packageProvider] -name NuGet                           -force
→ Windows/PowerShell/command-inventory/noun/packageProvider/install[install-packageProvider] -name NuGet -minimumVersion 2.8.5.201 -force
code }

  }
  { install PowerShell module psWindowsUpdate

    Install the → Windows/PowerShell module `psWindowsUpdate` so that → Windows/update#windows-update-ps[Windows updates] can be performed from the command line.

    Apparently, after installing the *NuGet package provider*, a new session needs to be started for the following operation to succeed:

code {
→ Windows/PowerShell/command-inventory/noun/module/install[install-Module] psWindowsUpdate -force
code }

  }

}
links:
  Martin Willey: → https://martinwilley.com/dev/windows.html[Setting up a new Machine]
