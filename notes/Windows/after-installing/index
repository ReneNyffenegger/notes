$ After installing Windows

{ Change execution policy of PowerShell


  Change the value of `ExecutionPolicy` under
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/PowerShell/1/ShellIds/Microsoft_PowerShell[`HKEY_CURRENT_USER\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell`]
  in order to be able to run → Windows/PowerShell[PowerShell] scripts and not receive error
  → Windows/PowerShell/script-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system[script cannot be loaded because running scripts is disabled on this system] anymore.


}
{ Change default keyboard layout

  *Capslock* needs to be swapped with *esc*, the *right Windows* key needs to function as *control* key:
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Keyboard-Layout#reg-keyboard-layout-ps[execute this PowerShell script].

}
{ Check default values in registry

  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/RegisteredApplications#reg-registeredApplications-default[`HKEY_LOCAL_MACHINE\SOFTWARE\RegisteredApplications`]

}
{ Create bin directory

  Create a `bin` directory under → Windows/dirs/Users/username[`%UserProfile%`] to store executables and scripts so that they can be called from the command line (such as → Windows/cmd-exe[cmd.exe] or PowerShell).
  -
  With → Windows/PowerShell[PowerShell]:
code {
$binPath = "$env:userprofile\bin"
mkdir $binPath
code }

  Add the newly created directory to the `PATH` → development/environment-variable[environment variable]:
code {
$userPath = [environment]::getEnvironmentVariable("PATH", "user"    )
[environment]::setEnvironmentVariable("PATH", "$binPath;$userPath", "user") 
code }


}
{ Download Sysinternal tools

  → Windows/tools/Sysinternals#download[Download] interesting → Windows/tools/Sysinternals tools and → Windows/tools/Sysinternals#accept-eula[accept their EULA].

  2019-03-02: It turns out that at least → Windows/tools/Sysinternals/Procmon[Procmon] comes with the command line option `/AcceptEula` which does that, too.

}

{ Activate Administrator account

  Check current accounts (`wmic useraccount`) and → Windows/registry/tree/HKEY_USERS[`HKEY_USERS`].
  -
  What about → Windows/dirs/Windows/System32/lusrmgr_msc


  In → Windows/cmd-exe[cmd.exe].
code {
C:\> wmic useraccount where (name='administrator' and domain='%computername%') get name,sid
code }

  Activate and/or enable the administrator → Windows/user-account[account] and assign a password
code {
c:\> → Windows/dirs/Windows/System32/net_exe/user[net user] administrator /active:yes
c:\> → Windows/dirs/Windows/System32/net_exe/user[net user] administrator MYSECRETPASSWORD
code }

}
{ Install Perl

  Install a *portable* → development/languages/Perl[Perl]. Strawberry's portable Perl claims that it does not need admin privileges.

code {
#
#   Strawberry recommends to put into path without spaces... let's see, if it
#   is possible nevertheless…
#
$strawberryPerlDestDir="$env:programFiles\StrawberryPerl"
$eatOutput = mkdir $strawberryPerlDestDir

$ua = new-object system.net.webClient
# [net.servicePointManager]::securityProtocol = [net.securityProtocolType]::Tls12

if ([environment]::is64BitOperatingSystem) {
  $ua.downloadFile("http://strawberryperl.com/download/5.28.1.1/strawberry-perl-5.28.1.1-64bit-PDL.zip" , "$home\Downloads\StrawberryPerl.zip")
} else {
  $ua.downloadFile("http://strawberryperl.com/download/5.28.1.1/strawberry-perl-5.28.1.1-32bit-PDL.zip" , "$home\Downloads\StrawberryPerl.zip")
}

#
# Unzip zip file with COM object shell.application
#
$shell = new-object -comObject shell.application
$shell.nameSpace($strawberryPerlDestDir).copyHere($shell.nameSpace("$home\Downloads\StrawberryPerl.zip").items())

#
# Other dissapointing trials to unzip zipfile were:
#
#   extrac32 $home\Downloads\StrawberryPerl.zip "$env:programFiles\StrawberryPerl"
#  &rundll32.exe zipfldr.dll,RouteTheCall $home\Downloads\StrawberryPerl.zip

rm $home\Downloads\StrawberryPerl.zip


#
# Set env variables
#
#   portableshell.bat also sets these variables:
#     set TERM=
#     set HOME=%~dp0data
#

$systemPath = [environment]::getEnvironmentVariable("PATH", "machine")
[environment]::setEnvironmentVariable("PATH"          , "$strawberryPerlDestDir\perl\site\bin;$strawberryPerlDestDir\perl\bin;$strawberryPerlDestDir\c\bin;$systemPath", "machine") 

[environment]::setEnvironmentVariable("PLPLOT_LIB"    , "$strawberryPerlDestDir\c\share\plplot", "machine") 
[environment]::setEnvironmentVariable("PLPLOT_DRV_DIR", "$strawberryPerlDestDir\c\share\plplot", "machine") 
code }

}
{ Install git

    Install the PortableGit version of → development/version-control-systems/git[git].

    Download end extract the self extracting executable:
code {
$ua = new-object system.net.webClient
[net.servicePointManager]::securityProtocol = [net.securityProtocolType]::Tls12

if ([environment]::is64BitOperatingSystem) {
  $ua.downloadFile("https://github.com/git-for-windows/git/releases/download/v2.21.0.windows.1/PortableGit-2.21.0-32-bit.7z.exe" , "$home\Downloads\PortableGit.exe")
} else {
  $ua.downloadFile("https://github.com/git-for-windows/git/releases/download/v2.21.0.windows.1/PortableGit-2.21.0-64-bit.7z.exe" , "$home\Downloads\PortableGit.exe")
}
code }

  It seems that an output directory cannot be specified with the `-o` flag. Therefore some detouring:
code {
& $home\Downloads\PortableGit.exe
move-item $home\Downloads\PortableGit $env:programFiles
code }

  Add new path to (global) environment variables:
code {
$systemPath = [environment]::getEnvironmentVariable("PATH", "machine")
[environment]::setEnvironmentVariable("PATH", "$env:programFiles\PortableGit\cmd;$systemPath", "machine") 
code }

   Cleaning up
code {
rm $home\Downloads\PortableGit.exe 
code }


    Do long paths have to be enabled on → Windows/versions/10[Windows 10] with git?
code {
git config --system core.longpaths true
code }

    Possibly, username and password need to be configured, too:
code {
git config --global user.email "…"
git config --global user.name  "René Nyffenegger"
code }

  { Add github_root and github_top_root variables

    Add the environment variables `github_top_root` and `github_root`
code {
[environment]::setEnvironmentVariable("github_top_root", "$env:userprofile\github\"       , "user")
[environment]::setEnvironmentVariable("github_root"    , "$env:userprofile\github\github\", "user")
[environment]::setEnvironmentVariable("git_work_dir"   , "$env:userprofile\localgit\"     , "user")
code }

  }
  { Create git directories

code {
$eatOutput = mkdir ~\github\github
$eatOutput = mkdir ~\github\about
$eatOutput = mkdir ~\github\lib
$eatOutput = mkdir ~\github\temp
$eatOutput = mkdir ~\localgit
code }

  }
  { Add new github script path variables

code {
$userPath = [environment]::getEnvironmentVariable("PATH", "user"    )
[environment]::setEnvironmentVariable("PATH", "$env:userprofile\localgit\scripts;$env:userprofile\github\lib\scripts;$userPath", "user") 
code }

  }


}
{ Compile vim

  Strawberry Perl comes with a → development/languages/C-C-plus-plus/C[C compiler] which can be used to → development/vim/compiling[compile vim].

  Make sure that the setting of the variable `github_top_root` has already taken effect.
code {
cd $env:github_top_root
git clone https://github.com/vim/vim
cd $env:github_top_root\vim\src
code }

Edit `feature.h` to match preferences.

Find the short path of the perl directory because → Windows/dirs/Program-Files[C:\Program Files] contains spaces:
code {
$fso = new-object -comObject scripting.fileSystemObject
$perlShortPath = $fso.getFolder("$env:programFiles\StrawberryPerl\perl").shortPath
code }

The `ARCH=native` option is passed to gcc via the → development/languages/C-C-plus-plus/GCC/options/m_lowercase/arch[`-march`] option. Additionally,
it prevents the make file from trying to invoke → development/languages/sed[sed] which is not yet installed.

Define `XPM=no` to prevent *fatal error: xpm.h: no such file or directory*.

code {
gmake -f Make_ming.mak gvim.exe PERL=$perlShortPath DYNAMIC_PERL=yes PERL_VER=528 ARCH=native XPM=no gvim.exe
code }

code {
cp gvim.exe   $home\bin
cp vimrun.exe $home\bin
code }

 
   Set the `VIMRUNTIME` environment variable
code {
[environment]::setEnvironmentVariable("VIMRUNTIME", "$($env:github_top_root)vim\runtime", "user") 
code }

   TOOD: build with *terminal support* (winpty, `:help terminal`)
code {
gmake -f … TERMINAL=yes
code }

}
{ TODO

  How do I determine if I started → Windows/PowerShell as Administrator?
  -
  Try `→ Windows/dirs/Windows/System32/whoami_exe[whoami] /priv`.

  How do I → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem#reg-long-paths-enabled[enable long paths]?

  Enable → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/Winlogon#reg-enable-automatic-logon[auto logon]?

  Install → Windows/development/Visual-Studio and add `/nologo` to the `CL` and `LINK` → development/environment-variable[environment variables].

  What is a users logon id (`→ Windows/dirs/Windows/System32/whoami_exe[whoami /logonid]`)?

  Create → Windows/PowerShell[PowerShell] profile
code {
if ( -not ( test-path $profile ) ) {

   write-output "$profile does not exist. Creating it"
   new-item -itemType file -path $profile -force


}
else {

   write-output "$profile already exists"

}
code }

  Copy → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/profile.ps1[`profile.ps`] to profile path `$profile`.

  Which → Windows/development/process[processes] are seen to run after installation?
    • → Windows/dirs/Windows/System32/audiodg_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/ApplicationFrameHost_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/backgroundTaskHost_exe
    • → Windows/dirs/Windows/System32/browser_broker_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • CCC.exe (ATI?)
    • → Windows/dirs/Windows/System32/csrss_exe
    • → Windows/dirs/Windows/System32/ctfmon_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/dllhost_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/dwm_exe (Child of → Windows/dirs/Windows/System32/winlogon_exe)
    • → Windows/dirs/Windows/explorer_exe
    • SkypeApp.exe
    • SkypeAppBackgroundHost.exe
    • → Windows/dirs/Windows/System32/fontdrvhost_exe
    • Interrupts (handling *hardware interrupts and DPCs, child of *System* process
    • → Windows/dirs/Windows/System32/lsass_exe
    • Memory Compression (Child of *System* process)
    • → Windows/dirs/Program-Files/Windows-Defender/MSASCuiL_exe
    • MOM.exe (ATI?)
    • → Windows/dirs/ProgramData/Microsoft/Windows-Defender/Platform/_version_/MsMpEng_exe
    • → Windows/dirs/ProgramData/Microsoft/Windows-Defender/Platform/_version_/NisSrv_exe
    • OneDrive.exe (why…?)
    • Registry
    • → Windows/dirs/Windows/System32/RuntimeBroker_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/SearchFilterHost_exe
    • → Windows/dirs/Windows/System32/SearchIndexer_exe (Parent process of → Windows/dirs/Windows/System32/SearchProtocolHost_exe and SearchFilterHost.exe)
    • → Windows/dirs/Windows/System32/SearchProtocolHost_exe
    • → Windows/dirs/Windows/SystemApps/Microsoft_Windows_Cortana_cw5n1h2txyewy/SearchUI_exe
    • → Windows/dirs/Windows/System32/smartscreen_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/smss_exe (The first *user mode* process, child of *System* process)
    • → Windows/dirs/Windows/System32/spoolsv_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/taskhostw_exe
    • → Windows/dirs/Program-Files/rempl/sedlauncher_exe
    • → Windows/dirs/Windows/System32/SecurityHealthService_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/services_exe (Parent process of quite a few → Windows/dirs/Windows/System32/svchost_exe[`svchost.exe`] processes)
    • SgmBroker.exe
    • → Windows/dirs/Windows/System32/sihost_exe
    • ShellExperienceHost.exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/svchost_exe (all of which seem to be a child process of → Windows/dirs/Windows/System32/services_exe[`services.exe`])
    • System (always with PID = 4?)
    • System Idle Process
    • → Windows/dirs/Windows/System32/wininit_exe (Parent process of → Windows/dirs/Windows/System32/services_exe, → Windows/dirs/Windows/System32/lsass_exe and → Windows/dirs/Windows/System32/fontdrvhost_exe)
    • → Windows/dirs/Windows/System32/winlogon_exe
    • → Windows/dirs/Windows/System32/wbem/wmiprvse_exe
    • → Windows/dirs/Windows/System32/wsqmcons_exe
    • → Windows/dirs/Windows/System32/WWAHost_exe
    • → Windows/dirs/Windows/System32/OptionalFeatures_exe (also PS: `get-windowsOptionalFeatures`)

  Which → Windows/services[services] are installed?

  Which programs do *autorun*?
  -
  What about `HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon`, value of `ParseAutoexec`?

  Where does Sysinternals's Process Monitor store its settings?

  Copy → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/profile.ps1[`profile.ps`] to profile path `$profile`.

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced#reg-show-hidden-files-and-extensions

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/Main#reg-iexplorer-change-start-page[Changing the start page] of
  → development/web/browser/Internet-Explorer[Internet Explorer] (respectively
  → Windows/registry/tree/HKEY_CLASSES_ROOT/Local-Settings/Software/Microsoft/Windows/CurrentVersion/AppContainer/Storage/microsoft-microsoftedge_8wekyb3d8bbwe/MicrosoftEdge/Main#reg-edge-startpage[that of Edge]).


  Remove unnecessary directories under → Windows/dirs/Users/username[`%UserProfile%`].

  Activate Windows
  -
  Does it have something to do with → Windows/dirs/Windows/System32/changepk_exe[changepk.exe] or → Windows/dirs/Windows/System32/slui_exe(under → Windows/dirs/Windows/System32)?
  -
  Can it be done with → Windows/dirs/Windows/System32/slmgr_vbs[`slmgr.vbs`]? Possibly with the `/ato` option?

  What is auto-run? Why is *OneDrive.exe* started?

→ Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/FileSystem#reg-long-paths[Enable long file paths]

Swap keys




Can *Cortana* be turned off/disabled?

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/VisualEffects[`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects`],
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/DWM[`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\DWM`] and
  → Windows/dirs/Windows/System32/SystemPropertiesAdvanced_exe

  Enable → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Input-Method#reg-EnableHexNumpad[entering Unicode characters].

  Should `Beep` and `ExtendedSound` under the → Windows/registry[registry] key → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Sound[`HKEY_CURRENT_USER\Control Panel\Sound`] be set to `no`?

  Does → Windows/dirs/Windows/Installer need to be cleaned up with → http://www.homedev.com.au/free/patchcleaner[PatchCleaner]?

  { Install Subsystem for Linux

    → https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/[bash]

code {
PS C:\> enable-windowsOptionalFeature -online -featureName Microsoft-Windows-Subsystem-Linux
code }

  }
  { cmd.exe

  → Windows/cmd-exe[cmd.exe]: check values under → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`], particularly
   `CompletionChar`, `PathCompletionChar` and `EnableExtensions`.

    Set the → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe#reg-cmd-set-size[window and buffer size of cmd.exe].

  }

}
