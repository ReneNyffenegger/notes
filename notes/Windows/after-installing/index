$ After installing Windows

{ Change execution policy of PowerShell

  Change the value of `ExecutionPolicy` under
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/PowerShell/1/ShellIds/Microsoft_PowerShell[`HKEY_CURRENT_USER\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell`]
  in order to be able to run → Windows/PowerShell[PowerShell] scripts and not receive error
  → Windows/PowerShell/script-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system[script cannot be loaded because running scripts is disabled on this system] anymore.

  2019-04-01: There was no such key and an according change didn't seem necessary.

}
{ Start powershell as administrator

  If a powershell is needed with *administrator privileges*, the `start-process` → Windows/PowerShell/language/cmdlet[cmdlet] can be used:
code {
start-process powershell -verb runAs
code }

}
{ Change default keyboard layout

  *Capslock* needs to be swapped with *esc*, the *right Windows* key needs to function as *control* key:
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Keyboard-Layout#reg-keyboard-layout-ps[execute this PowerShell script].

}
{ Configure Text Services and Input Methods

  { Keyboard layouts

code {
#
#
# No substitutes
#    Remove entire key `HKCU\Keyboard Layout\Substitutes' and add an empty one
#
  remove-item        -path 'HKCU:\Keyboard Layout\Substitutes'
  $eatMe = new-item  -path 'HKCU:\Keyboard Layout\Substitutes'

#
# Remove HKCU\Keyboard Laoyout\Preload
#   Strangly, this remove-item does not seem to entirely remove
#   the specified key:
#
  remove-item        -path 'HKCU:\Keyboard Layout\Preload'

#
# Add US and Swiss German keyboard layouts
#
  new-itemProperty -path 'HKCU:\Keyboard Layout\Preload' -name  1 -value ('0000' + '0409') # US
  new-itemProperty -path 'HKCU:\Keyboard Layout\Preload' -name  2 -value ('0000' + '0807') # German (Switzerland)
code }

  }
  { Language bar

code {
#
# Language Bar
#
  $eatMe = new-itemProperty -path 'HKCU:\Software\Microsoft\CTF\LangBar' -name  ShowStatus             -value 4  -propertyType DWord -force   # Docked in the taskbar
  $eatMe = new-itemProperty -path 'HKCU:\Software\Microsoft\CTF\LangBar' -name  Label                  -value 1  -propertyType DWord -force   # Show text labels on the Language Bar
  $eatMe = new-itemProperty -path 'HKCU:\Software\Microsoft\CTF\LangBar' -name  ExtraIconsOnMinimized  -value 0  -propertyType DWord -force   # Don't »Show additional Language bar icons in the taskbar«
code }

  }
  { Hotkeys to switch between keyboard layouts

code {
#
# Hotkeys to switch between keyboard layouts
#

  $mod_leftAlt = 0x01
  $VK_0        = 0x30
  $VK_9        = 0x39

  $valKeyModifiers      = [byte[]]( $mod_leftAlt , 0xc0 , 0x00 , 0x00 )
  $valLayoutUS          = [byte[]](         0x09 , 0x04 , 0x09 , 0x04 )
  $valLayoutSwissGerman = [byte[]](         0x07 , 0x08 , 0x07 , 0x08 )
  $valVK_0              = [byte[]](        $VK_0 , 0x00 , 0x00 , 0x00 )
  $valVK_9              = [byte[]](        $VK_9 , 0x00 , 0x00 , 0x00 )
 
  remove-item        -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100'
  remove-item        -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101'
  $eatMe = new-item  -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100'
  $eatMe = new-item  -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101'

  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100' -name 'Virtual Key'   -value $valVK_9                 -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100' -name 'Key Modifiers' -value $valKeyModifiers         -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000100' -name 'Target IME'    -value $valLayoutUS             -propertyType binary

  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101' -name 'Virtual Key'   -value $valVK_0                 -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101' -name 'Key Modifiers' -value $valKeyModifiers         -propertyType binary
  $eatMe = new-itemProperty -path 'HKCU:\Control Panel\Input Method\Hot Keys\00000101' -name 'Target IME'    -value $valLayoutSwissGerman    -propertyType binary
code }

  }
  { Registry links
  
  See also
    • → Windows/registry/tree/HKEY_CURRENT_USER/Keyboard-Layout/Substitutes[`HKEY_CURRENT_USER\Keyboard Layout\Substitutes`]
    • → Windows/registry/tree/HKEY_CURRENT_USER/Keyboard-Layout/Preload[`HKEY_CURRENT_USER\Keyboard Layout\Preload`]
    • → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/CTF/LangBar[`HKEY_CURRENT_USER\Software\Microsoft\CTF\LangBar`]
    • → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Input-Method/Hot-Keys[`HKEY_CURRENT_USER\Control Panel\Input Method\Hot Keys`]

  }

}
{ Check default values in registry

  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/RegisteredApplications#reg-registeredApplications-default[`HKEY_LOCAL_MACHINE\SOFTWARE\RegisteredApplications`]

}
{ explorer

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced#reg-show-hidden-files-and-extensions[Show hidden files and file extensions]
  in → Windows/dirs/Windows/explorer_exe[`explorer.exe`].

  In order for this change to take effect, → Windows/dirs/Windows/explorer_exe#restart-explorer[explorer needs to be restarted].

}
{ Create bin directory

  Create a `bin` directory under → Windows/dirs/Users/username[`%UserProfile%`] to store executables and scripts so that they can be called from the command line (such as → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] or PowerShell).
  -
  With → Windows/PowerShell[PowerShell]:
code {
$binPath = "$env:userprofile\bin"
mkdir $binPath
code }

  Add the newly created directory to the `PATH` → development/environment-variable[environment variable]:
code {
$userPath = [environment]::getEnvironmentVariable("PATH", "user"    )
[environment]::setEnvironmentVariable("PATH", "$binPath;$userPath", "user") 
code }

}
{ Download Sysinternal tools

  → Windows/tools/Sysinternals#download[Download] interesting → Windows/tools/Sysinternals tools and → Windows/tools/Sysinternals#accept-eula[accept their EULA].

  2019-03-02: It turns out that at least → Windows/tools/Sysinternals/Procmon[Procmon] comes with the command line option `/AcceptEula` which does that, too.

}

{ Activate Administrator account

  Check current accounts (`wmic useraccount`) and → Windows/registry/tree/HKEY_USERS[`HKEY_USERS`].
  -
  What about → Windows/dirs/Windows/System32/lusrmgr_msc


  In → Windows/dirs/Windows/System32/cmd_exe[cmd.exe].
code {
C:\> wmic useraccount where (name='administrator' and domain='%computername%') get name,sid
code }

  Activate and/or enable the administrator → Windows/user-account[account] and assign a password
code {
c:\> → Windows/dirs/Windows/System32/net_exe/user[net user] administrator /active:yes
c:\> → Windows/dirs/Windows/System32/net_exe/user[net user] administrator MYSECRETPASSWORD
code }

  In PowerShell, the current adminstrator password status can apperently be determined like so:
code {
$computerInfo = get-cimInstance win32_computerSystem

switch ( $computerInfo.adminPasswordStatus ) {
  0        { 'disabled'            }
  1        { 'enabled'             }
  2        { 'not implemented'     }
  3        { 'unknown'             }
  default  { 'unable to determine' }
}
code }

}
{ Install Perl

  Install a *portable* → development/languages/Perl[Perl]. Strawberry's portable Perl claims that it does not need admin privileges.

code {
#
#   Strawberry recommends to put into path without spaces... let's see, if it
#   is possible nevertheless…
#
$strawberryPerlDestDir="$env:programFiles\StrawberryPerl"
$eatOutput = mkdir $strawberryPerlDestDir

$ua = new-object system.net.webClient
# [net.servicePointManager]::securityProtocol = [net.securityProtocolType]::Tls12

if ([environment]::is64BitOperatingSystem) {
  $ua.downloadFile("http://strawberryperl.com/download/5.28.1.1/strawberry-perl-5.28.1.1-64bit-PDL.zip" , "$home\Downloads\StrawberryPerl.zip")
} else {
  $ua.downloadFile("http://strawberryperl.com/download/5.28.1.1/strawberry-perl-5.28.1.1-32bit-PDL.zip" , "$home\Downloads\StrawberryPerl.zip")
}

#
# Unzip zip file with COM object shell.application
#
$shell = new-object -comObject shell.application
$shell.nameSpace($strawberryPerlDestDir).copyHere($shell.nameSpace("$home\Downloads\StrawberryPerl.zip").items())

#
# Other dissapointing trials to unzip zipfile were:
#
#   extrac32 $home\Downloads\StrawberryPerl.zip "$env:programFiles\StrawberryPerl"
#  &rundll32.exe zipfldr.dll,RouteTheCall $home\Downloads\StrawberryPerl.zip

rm $home\Downloads\StrawberryPerl.zip


#
# Set env variables
#
#   portableshell.bat also sets these variables:
#     set TERM=
#     set HOME=%~dp0data
#

$systemPath = [environment]::getEnvironmentVariable("PATH", "machine")
[environment]::setEnvironmentVariable("PATH"          , "$strawberryPerlDestDir\perl\site\bin;$strawberryPerlDestDir\perl\bin;$strawberryPerlDestDir\c\bin;$systemPath", "machine") 

[environment]::setEnvironmentVariable("PLPLOT_LIB"    , "$strawberryPerlDestDir\c\share\plplot", "machine") 
[environment]::setEnvironmentVariable("PLPLOT_DRV_DIR", "$strawberryPerlDestDir\c\share\plplot", "machine") 
code }

}
{ Install git

    Install the PortableGit version of → development/version-control-systems/git[git].

    Download end extract the self extracting executable:
code {
$ua = new-object system.net.webClient
[net.servicePointManager]::securityProtocol = [net.securityProtocolType]::Tls12

if ([environment]::is64BitOperatingSystem) {
  $ua.downloadFile("https://github.com/git-for-windows/git/releases/download/v2.21.0.windows.1/PortableGit-2.21.0-32-bit.7z.exe" , "$home\Downloads\PortableGit.exe")

#
# TODO does the downloaded file really need to have the *amd64* thingy?
#
  $ua.downloadFile("https://github.com/git-lfs/git-lfs/releases/download/v2.7.1/git-lfs-windows-amd64-v2.7.1.zip", "$home\Downloads\git-lfs-windows-amd64.zip")

} else {
  $ua.downloadFile("https://github.com/git-for-windows/git/releases/download/v2.21.0.windows.1/PortableGit-2.21.0-64-bit.7z.exe" , "$home\Downloads\PortableGit.exe")
}
code }

  It seems that an output directory cannot be specified with the `-o` flag. Therefore some detouring:
code {
& $home\Downloads\PortableGit.exe
move-item $home\Downloads\PortableGit $env:programFiles
code }

  Extract `git-lfs.exe`. This file is also extracted into the `PortableGit\cmd` directory so as not need to add more paths to the respective environment variable.
code {
$shell = new-object -comObject shell.application
$shell.nameSpace("$env:programFiles\PortableGit\cmd").copyHere("$home\Downloads\git-lfs-windows-amd64.zip\git-lfs.exe")
code }

  Add new path to (global) environment variables:
code {
$systemPath = [environment]::getEnvironmentVariable("PATH", "machine")
[environment]::setEnvironmentVariable("PATH", "$env:programFiles\PortableGit\cmd;$systemPath", "machine") 
code }

   Cleaning up
code {
rm $home\Downloads\PortableGit.exe 
rm $home\Downloads\git-lfs-windows-amd64.zip
code }


    Do long paths have to be enabled on → Windows/versions/10[Windows 10] with git?
code {
git config --system core.longpaths true
code }

    Possibly, username and password need to be configured, too:
code {
git config --global user.email "…"
git config --global user.name  "René Nyffenegger"
code }

  { Add github_root and github_top_root variables

    Add the environment variables `github_top_root` and `github_root`
code {
[environment]::setEnvironmentVariable("github_top_root", "$env:userprofile\github\"       , "user")
[environment]::setEnvironmentVariable("github_root"    , "$env:userprofile\github\github\", "user")
[environment]::setEnvironmentVariable("git_work_dir"   , "$env:userprofile\localgit\"     , "user")
code }

  }
  { Create git directories

code {
$eatOutput = mkdir ~\github
$eatOutput = mkdir ~\github\github
$eatOutput = mkdir ~\github\about
$eatOutput = mkdir ~\github\lib
$eatOutput = mkdir ~\github\temp
code }

  }

  { Install git lfs
code {
cd ... data.stadt-zuerich.ch
git lfs install --local
code }

  }

}
{ Clone localgit

code {
git clone e:\git $env:userprofile\localgit
code }

}
{ Clone github script repository

code {
git clone https://github.com/ReneNyffenegger/scripts-and-utilities $env:userprofile/github/lib/scripts
code }

  { Add new github script path variables

code {
$userPath = [environment]::getEnvironmentVariable("PATH", "user"    )
[environment]::setEnvironmentVariable("PATH", "$env:userprofile\localgit\scripts;$env:userprofile\github\lib\scripts;$userPath", "user") 
code }

  }

}
{ Configure cmd.exe

  Check if → Windows/registry[registry] key → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`] exists and
  what the values of `CompletionChar`, `PathCompletionChar` and `EnableExtensions` are.
  -
  If the key does not exist, create it with
code {
new-item -path 'hkcu:\Software\Microsoft\Command Processor'
code }

  Assign a → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch file] to be run when cmd.exe is started (Value of → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor#reg-cmd-exe-autorun[`autorun`]
  under → Windows/registry[registry] key
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`]).
  -
  The → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/autorun.bat[`autorun.bat`] was installed previoulsly in *Clone github repositories*.
code {
new-itemProperty -path 'hkcu:\Software\Microsoft\Command Processor' -name autorun -value "$($env:userprofile)\github\lib\scripts\autorun.bat" -force
code }

  Make sure that → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe[`HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe`] exists, otherwise create it with
code {
new-item -path 'hkcu:\Console\%SystemRoot%_system32_cmd.exe'
code }

  Set the → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe#reg-cmd-set-size[window and buffer size of cmd.exe],
  → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe#reg-cmd-set-font[font size] and
  → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe#reg-cmd-quick-edit[allow copying text (quick edit)].

  Set the → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%`] environment variable:
code {
[environment]::setEnvironmentVariable("PROMPT", '$t$s$p$_$+$g$s', 'user') 
code }

  → Windows/versions/10[Windows 10] comes with → Linux/shell/ANSI-escape-sequences, thus, the prompt can be colored:
code {
[environment]::setEnvironmentVariable("PROMPT", '$e[38;5;6m$t$s$e[38;5;10m$p$_$e[38;5;9m$+$g$s$e[38;5;15m', 'user')
code }

  With → Windows/versions/10[Windows 10], `cmd.exe` can be made transparent - not sure, though, if I really want that!

  Set the → Windows/dirs/Windows/System32/cmd_exe/commands/dir#cmd-exe-dircmd[`DIRCMD`] variable to specify the default behaviour of → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir`]:
code {
[environment]::setEnvironmentVariable("DIRCMD", '/ogn /a', 'user')
code }


}
{ Compile vim

  Strawberry Perl comes with a → development/languages/C-C-plus-plus/C[C compiler] which can be used to → development/vim/compiling[compile vim].

  Make sure that the setting of the variable `github_top_root` has already taken effect.
code {
cd $env:github_top_root
git clone https://github.com/vim/vim
cd $env:github_top_root\vim\src
code }

Edit `feature.h` to match preferences.

Find the short path of the perl directory because → Windows/dirs/Program-Files[C:\Program Files] contains spaces:
code {
$fso = new-object -comObject scripting.fileSystemObject
$perlShortPath = $fso.getFolder("$env:programFiles\StrawberryPerl\perl").shortPath
code }

The `ARCH=native` option is passed to gcc via the → development/languages/C-C-plus-plus/GCC/options/m_lowercase/arch[`-march`] option. Additionally,
it prevents the make file from trying to invoke → development/languages/sed[sed] which is not yet installed.

Define `XPM=no` to prevent *fatal error: xpm.h: no such file or directory*.

code {
gmake -f Make_ming.mak PERL=$perlShortPath DYNAMIC_PERL=yes PERL_VER=528 ARCH=native XPM=no
code }

code {
cp gvim.exe     $home\bin
cp vimrun.exe   $home\bin
cp xxd\xxd.exe  $home\bin
code }

 
   Set the `VIMRUNTIME` environment variable
code {
[environment]::setEnvironmentVariable("VIMRUNTIME", "$($env:github_top_root)vim\runtime", "user") 
code }

   Clone `.vim`
code {
git clone https://github.com/ReneNyffenegger/.vim $env:userprofile\vimfiles
code }

   TODO: build with *terminal support* (winpty, `:help terminal`)
code {
gmake -f … TERMINAL=yes
code }

}
{ Install portable apps

  → https://portableapps.com/apps[Portable apps] to install:
    • → https://portableapps.com/apps/development/database_browser_portable[Database Browser Portable]
    • → https://portableapps.com/apps/development/frhed_portable[Frhed] (hex editor)
    • → https://portableapps.com/apps/graphics_pictures/gimp_portable[Gimp]
    • → https://portableapps.com/apps/graphics_pictures/inkscape_portable[Inkscape]
    • → https://portableapps.com/apps/graphics_pictures/irfanview_portable[irfanview]
    • → https://portableapps.com/apps/music_video/vlc_portable[VLC]
    • → https://portableapps.com/apps/office/dia_portable[Dia]

}
{ AutoHotKey

  A → development/web/HTTP/User-Agent[user agent] needs to be specified in order to prevent *The remote server returned an error: (403) forbiddden."*

code {
$ua = new-object system.net.webClient
$ua.headers.add('User-Agent', 'Mozilla/5.0 (the-OS)')
$ua.downloadFile("https://www.autohotkey.com/download/1.1/AutoHotkey_1.1.30.03.zip", "$home\Downloads\AutoHotkey_1.1.zip"     )
$ua.downloadFile("https://autohotkey.com/download/2.0/AutoHotkey_v2.0-a075_x64.zip", "$home\Downloads\AutoHotkey_v2.0-x64.zip")

$shell = new-object -comObject shell.application

#
# TOOD: V 1.1 also contains a compiler and some *.ahk files.
#
$shell.nameSpace("$home\bin").copyHere("$home\Downloads\AutoHotKey_1.1.zip\AutoHotkeyU64.exe")
mv $home\bin\AutoHotkeyU64.exe $home\bin\ahk.exe

$shell.nameSpace("$home\bin").copyHere("$home\Downloads\AutoHotkey_v2.0-x64.zip\AutoHotkey.exe")
mv $home\bin\AutoHotkey.exe    $home\bin\ahk2.exe

rm $home\Downloads\AutoHotkey_1.1.zip
rm $home\Downloads\AutoHotkey_v2.0-x64.zip
code }

}
{ TODO

  Should → http://wincdemu.sysprogs.org/[WinCDEmu] be used? It allows to mount `.iso` files with a right click in → Windows/dirs/Windows/explorer_exe[`explorer.exe`].

  Values under → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Active-Setup/Installed-Componenents[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Active Setup\Installed Components`]

  How do I determine if I started → Windows/PowerShell as Administrator?
  -
  Try `→ Windows/dirs/Windows/System32/whoami_exe[whoami] /priv`.

  How do I → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem#reg-long-paths-enabled[enable long paths]?

  Enable → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/Winlogon#reg-enable-automatic-logon[auto logon]?

  Install → Windows/development/Visual-Studio and add `/nologo` to the `CL` and `LINK` → development/environment-variable[environment variables].

  What is a users logon id (`→ Windows/dirs/Windows/System32/whoami_exe[whoami /logonid]`)?

  Create → Windows/PowerShell[PowerShell] profile
code {
if ( -not ( test-path $profile ) ) {

   write-output "$profile does not exist. Creating it"
   new-item -itemType file -path $profile -force


}
else {

   write-output "$profile already exists"

}
code }

  Copy → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/profile.ps1[`profile.ps`] to profile path `$profile`.

  Change → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Desktop#reg-deskop-wallpaper[wallpaper]

  Which → Windows/development/process[processes] are seen to run after installation?
    • → Windows/dirs/Windows/System32/audiodg_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/ApplicationFrameHost_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/backgroundTaskHost_exe
    • → Windows/dirs/Windows/System32/browser_broker_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • CCC.exe (ATI?)
    • → Windows/dirs/Windows/System32/csrss_exe
    • → Windows/dirs/Windows/System32/ctfmon_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/dllhost_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/dwm_exe (Child of → Windows/dirs/Windows/System32/winlogon_exe)
    • → Windows/dirs/Windows/explorer_exe
    • SkypeApp.exe
    • SkypeAppBackgroundHost.exe
    • → Windows/dirs/Windows/System32/fontdrvhost_exe
    • Interrupts (handling *hardware interrupts and DPCs, child of *System* process
    • → Windows/dirs/Windows/System32/lsass_exe
    • Memory Compression (Child of *System* process)
    • → Windows/dirs/Program-Files/Windows-Defender/MSASCuiL_exe
    • MOM.exe (ATI?)
    • → Windows/dirs/ProgramData/Microsoft/Windows-Defender/Platform/_version_/MsMpEng_exe
    • → Windows/dirs/ProgramData/Microsoft/Windows-Defender/Platform/_version_/NisSrv_exe
    • OneDrive.exe (why…?)
    • Registry
    • → Windows/dirs/Windows/System32/RuntimeBroker_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/SearchFilterHost_exe
    • → Windows/dirs/Windows/System32/SearchIndexer_exe (Parent process of → Windows/dirs/Windows/System32/SearchProtocolHost_exe and SearchFilterHost.exe)
    • → Windows/dirs/Windows/System32/SearchProtocolHost_exe
    • → Windows/dirs/Windows/SystemApps/Microsoft_Windows_Cortana_cw5n1h2txyewy/SearchUI_exe
    • → Windows/dirs/Windows/System32/smartscreen_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/smss_exe (The first *user mode* process, child of *System* process)
    • → Windows/dirs/Windows/System32/spoolsv_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/taskhostw_exe
    • → Windows/dirs/Program-Files/rempl/sedlauncher_exe
    • → Windows/dirs/Windows/System32/SecurityHealthService_exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/services_exe (Parent process of quite a few → Windows/dirs/Windows/System32/svchost_exe[`svchost.exe`] processes)
    • SgmBroker.exe
    • → Windows/dirs/Windows/System32/sihost_exe
    • ShellExperienceHost.exe (Child of a → Windows/dirs/Windows/System32/svchost_exe)
    • → Windows/dirs/Windows/System32/svchost_exe (all of which seem to be a child process of → Windows/dirs/Windows/System32/services_exe[`services.exe`])
    • System (always with PID = 4?)
    • System Idle Process
    • → Windows/dirs/Windows/System32/wininit_exe (Parent process of → Windows/dirs/Windows/System32/services_exe, → Windows/dirs/Windows/System32/lsass_exe and → Windows/dirs/Windows/System32/fontdrvhost_exe)
    • → Windows/dirs/Windows/System32/winlogon_exe
    • → Windows/dirs/Windows/System32/wbem/WmiPrvSE_exe
    • → Windows/dirs/Windows/System32/wsqmcons_exe
    • → Windows/dirs/Windows/System32/WWAHost_exe
    • → Windows/dirs/Windows/System32/OptionalFeatures_exe (also PS: `get-windowsOptionalFeatures`, → Windows/dirs/Windows/System32/Fondue_exe[`Fondue.exe`])

  Which → Windows/services[services] are installed?

  Which programs do *autorun*?
  -
  → Windows/dirs/Windows/System32/msconfig_exe[`msconfig.exe`], *Startup* tab.
  -
  What about `HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon`, value of `ParseAutoexec`?


  Where does Sysinternals's Process Monitor store its settings?

  Copy → https://github.com/ReneNyffenegger/scripts-and-utilities/blob/master/profile.ps1[`profile.ps`] to profile path `$profile`.

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Internet-Explorer/Main#reg-iexplorer-change-start-page[Changing the start page] of
  → development/web/browser/Internet-Explorer[Internet Explorer] (respectively
  → Windows/registry/tree/HKEY_CLASSES_ROOT/Local-Settings/Software/Microsoft/Windows/CurrentVersion/AppContainer/Storage/microsoft-microsoftedge_8wekyb3d8bbwe/MicrosoftEdge/Main#reg-edge-startpage[that of Edge]).


  Remove unnecessary directories under → Windows/dirs/Users/username[`%UserProfile%`].

  Activate Windows
  -
  Does it have something to do with → Windows/dirs/Windows/System32/changepk_exe[changepk.exe] or → Windows/dirs/Windows/System32/slui_exe(under → Windows/dirs/Windows/System32)?
  -
  Can it be done with → Windows/dirs/Windows/System32/slmgr_vbs[`slmgr.vbs`]? Possibly with the `/ato` option?
  -
  Or something like
code {
slmgr.vbs /ipk → Windows/settings/product-key[xxxxx-xxxxx-xxxxx-xxxxx-xxxxx]
code }

  What is auto-run? Why is *OneDrive.exe* started?

→ Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/FileSystem#reg-long-paths[Enable long file paths]

  Can *Cortana* be turned off/disabled?

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/VisualEffects[`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects`],
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Windows/DWM[`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\DWM`] and
  → Windows/dirs/Windows/System32/SystemPropertiesAdvanced_exe

  Enable → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Input-Method#reg-EnableHexNumpad[entering Unicode characters].

  Should `Beep` and `ExtendedSound` under the → Windows/registry[registry] key → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Sound[`HKEY_CURRENT_USER\Control Panel\Sound`] be set to `no`?

  Does → Windows/dirs/Windows/Installer need to be cleaned up with → http://www.homedev.com.au/free/patchcleaner[PatchCleaner]?

  Check Start -> Settings -> Privacy -> Diagnostics & Feedback

  { Install Subsystem for Linux

    → https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/[bash]

code {
PS C:\> enable-windowsOptionalFeature -online -featureName Microsoft-Windows-Subsystem-Linux
code }

  }
 { Install Firefox

 }
 { Configure Firefox

   Create a → development/web/browser/Firefox/profile-folder[Profile folder] with a fixed name:
   -
   → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/Profiles/_profile_[`%APPDATA%\Mozilla\Firefox\Profiles\tq84`].

   Make the → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/profiles_ini[`profiles.ini`] file point to this *fixed* profile filder by copying the following
   into → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/profiles_ini[`%APPDATA%\Mozilla\Firefox\profiles.ini`]:
code {
[General]
StartWithLastProfile=1

[Profile0]
Name=default
IsRelative=1
Path=→ Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/Profiles/_profile_[Profiles/tq84]
Default=1
code }

   TODO: This might also be achieved by using the `-CreateProfile` command line option of FireFox.

 }
 { Configure Firefox - Addons

   → http://bernaerts.dyndns.org/linux/74-ubuntu/271-ubuntu-firefox-thunderbird-addon-commandline[Install addons from command line] says to
     • Download XPI (=zip) archive
     • Find UID in archive
     • Extract XPI to *extensions\UID* directory (under → Windows/dirs/Users/username/AppData/Roaming/Mozilla/Firefox/Profiles/_profile_[profile directory])


Does `user.js` need to contain something like:
code {
user_pref("extensions.autoDisableScopes", 14);
code }

     

   { vimium

     Install → https://addons.mozilla.org/de/firefox/addon/vimium-ff[Vimium-FF] (and compare with → https://github.com/philc/vimium[vimium]).

     Download → https://addons.mozilla.org/firefox/downloads/file/1192087[the xpi file (file number = 1192087)].
code {
#
#  1 - Download xpi archive (and rename to zip in one go)
#
$ua = new-object system.net.webClient

# mkdir "$env:appdata\Mozilla\Firefox\Profiles\tq84\{EC8030F7-C20A-464F-9B0E-13A3A9E97384}"
  mkdir "$env:appdata\Mozilla\Firefox\Extensions\{EC8030F7-C20A-464F-9B0E-13A3A9E97384}"

# $ua.downloadFile("https://addons.mozilla.org/firefox/downloads/file/1192087", "$env:appdata\Mozilla\Firefox\Profiles\tq84\\{d7742d87-e61d-4b78-b8a1-b469842139fa}.xpi")
  $ua.downloadFile("https://addons.mozilla.org/firefox/downloads/file/1192087", "$env:appdata\Mozilla\Extensions\{EC8030F7-C20A-464F-9B0E-13A3A9E97384}\{d7742d87-e61d-4b78-b8a1-b469842139fa}.xpi")
# $ua.downloadFile("https://addons.mozilla.org/firefox/downloads/file/1192087/vimium_ff-1.64.3-fx.xpi" , "$env:appdata\Mozilla\Firefox\Profiles\tq84\{d7742d87-e61d-4b78-b8a1-b469842139fa}.xpi"
)

#
#   2- Unzip xpi archive
#
$shell = new-object -comObject shell.application
mkdir $env:temp\vimium
$shell.nameSpace("$env:temp\vimium").copyHere($shell.nameSpace("$env:temp\vimium.zip").items())

code }

   }

   { UserAgent Switcher

     Install → https://github.com/ray-lothian/UserAgent-Switcher/[UserAgent-Switcher]

     Download → https://github.com/chrispederick/user-agent-switcher/blob/master/development/builds/user-agent-switcher.xpi[xpi]

   }
   { Add blocker

     → https://addons.mozilla.org/de/firefox/addon/ublock-origin/[U Origin Plus]

   }

 }
   { JDK

code {
$systemPath = [environment]::getEnvironmentVariable("PATH", "machine")

[environment]::setEnvironmentVariable("PATH"     , "c:\Program Files\Java\jdk-12\bin;$systemPath", "machine")
[environment]::setEnvironmentVariable("JAVA_HOME", "c:\Program Files\Java\jdk-12"                , "machine")
code }

   }

}
