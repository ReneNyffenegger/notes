$ MS Build project file

→ Windows/development/Microsoft-Build-Engine[MS Build] uses *project files* to describe building instructions.
-
Additionally, it also allows to describe build-rules that then can be reused on various targets.

These project files are → development/XML files and similar in nature to *Apache Ant* or *Nant*.

The MS Build project file format is used by → Windows/development/Visual-Studio to store information about projects it manages.

Project files can be evaluated (or run) on the command line (→ Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`], → Windows/PowerShell) with `msbuild.exe`.

{ Most simple project file

  A project file (with suffix `.csproj`) needs at least a `<Project>` and a `<Target>` tag and a `Name` attribute.
  -
  Thus the (possibly) *most simple* project file becomes
  gh|about-MSBuild|/project-files/most-simple/file.csproj||

  Apparently, the `<Project>` tag can be augmented with a namespace:
code {
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
code }

}
{ Compiling a C-Sharp file

  The `<Csc>` tag as a child of `<Target>` compiles the file(s) indicated in its `Sources` attribute with a → development/languages/C-Sharp[C#] compiler.

  In the following example, the source file `prog.cs` will be compiled:
  gh|about-MSBuild|/project-files/compile-a-file/compile.csproj||

}
{ Specifying source files (Item types / Items / <ItemGroup>)

  An `<ItemGroup>` contains items (that typically represent files to be compiled etc.). The value of these items
  is later referred to with the `@(item-name)` syntax.

  The following `*.csproj` file compiles `src_1.cs` and `src_2.cs`. Note: the individual source file names need to be separated with semicolons (`;`).
  gh|about-MSBuild|/project-files/variables/proj.csproj||

  Alternatively, each file can be specified in its own tag (that share the same name):
  gh|about-MSBuild|/project-files/ItemGroup/same-named-items/proj.csproj||

  It also possible to use wildcards to specify the source files:
  gh|about-MSBuild|/project-files/ItemGroup/wildcards/proj.csproj||

  Possible wildcards are: `*`, `?`, `/**/*.cs` etc.

}
{ Printing messages

  The `<Message>` task allows to print information:
  gh|about-MSBuild|/project-files/tasks/Message/say-things.csproj||

  When executed, it prints the messages as shown in the image balow.
  -
  Note, that by default, messages with low importance are not printed. Messages with high importance are rendered slightly brighter than normally important messages:
  gh|about-MSBuild|/project-files/tasks/Message/img/say-things.png||

}
{ Targets

  A `<Target>` allows to bundle multiple tasks. A project file might contain mutliple targets.

  The following project file defines three targets. By default, (only) the first target es executed:
  gh|about-MSBuild|/project-files/Target/simple/proj.csproj||

  However, `msbuild.exe` has the `-t` command line option that allows to execute another target:
code {
P:\ath\to\project msbuild
P:\ath\to\project msbuild -t:tgt_2
P:\ath\to\project msbuild -t:tgt_2 -t:tgt_1
code }


}
{ Properties / <PropertyGroup>

  The `<PropertyGroup>` tag contains *properties*. A property is simply a key/value pair. The tag-names within `<PropertyGroup>` correspond to the proporty names, their data to the property values.

  The following `<PropertyGroup>` defines a property named *BuildDir* whose value is *bin*:
code {
<PropertyGroup>
    <BuildDir>bin</BuildDir>
</PropertyGroup>
code }

  { Conditional property values

    It's possible to put a condition on a property. The property only is assigned the respective value if the condition is true.

    In the following example, the value of *BuildDir* is set to *Debug\bin* if the value of the property *Configuration* is equal to *Debug*:
code {
<PropertyGroup>
    <BuildDir Condition=" '$(Configuration)' == 'Debug' ">debug\bin</BuildDir>
</PropertyGroup>
code }

  }

}
{ Tasks and Targets

  Tasks to be executed appear as child-tags in a `<Target>` tag:
code {
<Target Name="…">
  <Csc Sources="@(src)" />
  <AnotherTaskName …    />
</Target>
code }

  Typically, a task implements the `ITask` interface.

}
