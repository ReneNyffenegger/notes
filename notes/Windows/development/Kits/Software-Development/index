$ Windows: Software Development Kit (SDK)
@ SDK

The Windows SDK provides the necessary stuff to build Windows 10 apps (UWP and Win32)
  • header files
  • libraries
  • tools
  • metadata


The Windows SDK is the successor of the Platform SDK and the .NET Framework SDK.

Unfortunately, the *Visual C++ Compilers and C Runtime* → https://stackoverflow.com/questions/18078755[were removed in SDK 8]. In order to install them,
→ Windows/development/Visual-Studio must be installed.

{ Features

  table { lll
   ☰ Feature id ☰

    Windows Performance Toolkit ☰ OptionID.WindowsPerformanceToolkit ☰  Tools to record system events buyusing Event Tracing for Windows, and a t ool to analyze performance data in a graphical user interface
    → Windows/development/Debugging/tools ☰ OptionID.WindowsDesktopDebuggers ☰ Kernel and user-mode debuggers as well as help and tips for using Debugging Tools for Windows
    Application Verifier for Windows ☰ OptionID.AvrfExternal ☰ A runtime verification tool for → Microsoft/dot-net/managed-code/un that helps find subtle programming errors
   .NET Framework x.y Software Development Kit ☰ OptionID.NetFxSoftwareDevelopmentKit ☰ Components to develop → Microsoft/dot-net/managed-code[managed code] applications
    Windows App Certification Kit ☰ OptionID.WindowsSoftwareLogoToolkit ☰  Pre-certify apps before onboarding to the → Microsoft/Store
    Windows IP Over USB ☰ OptionID.IpOverUsb ☰ Communication between the Windows SDK and a Windows Device
    MSI Tools ☰ OptionID.MSIInstallTools ☰ Tools for creating and editing MSI installer packages. Needed to install `→ Windows/dirs/Program-Files-x86/Orca/Orca_exe`
    Windows SDK Signing Tools for Desktop Apps ☰ OptionID.SigningTools ☰
    Windows SDK for UWP Managed Apps ☰ OptionID.UWPManaged ☰ 
    Windows SDK for UWP C++ Apps ☰ OptionID.UWPCPP ☰
    Windows SDK for UWP Appls Localization ☰ OptionID.UWPLocalized ☰
    Windows SDK for Desktop C++ x86 Apps ☰ OptionID.DesktopCPPx86 ☰
    Windows SDK for Desktop C++ x86 Apps ☰ OptionID.DesktopCPPx64 ☰
    Windows SDK for Desktop C++ amd64 Apps ☰ ?☰
    Windows SDK for Desktop C++ arm Apps ☰ OptionID.DesktopCPParm64 ☰
    Windows SDK for Desktop C++ arm64 Apps ☰ ? ☰

  table}

  The feature id can be passed as argument to `/features`, see command line options below

}
{ Installation

  → https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/[This link] offers
    • an → https://go.microsoft.com/fwlink/?linkid=2317808[installer], and
    • an .iso file

code {
PS C:\> $progressPreference = 'SilentlyContinue'
PS C:\> invoke-webRequest https://go.microsoft.com/fwlink/?linkid=2317808 -o $env:temp\sdk-installer.exe
PS C:\> & $env:temp\sdk-installer.exe /quiet /norestart /features OptionId.MSIInstallTools
code }

   { Command line options of sdk-installer.exe

     table { ll
       `/features` ☰ Can be combined with with `/uninstall`
       `/forcerestart` ☰
       `/?` ☰
       `/installpath` ☰ Directory where features are installed into. If `/installpath` and `/layout` is omitted, the features are installed to `→ Windows/dirs/Program-Files-x86/Windows-Kits/n`.
       `/layout` ☰
       `/list` ☰ List the available features.
       `/log` ☰ If not specifed, `%TEMP%\WindowsSDK` will be used.
       `/norestart` ☰
       `/promptrestart` ☰
       `/quiet` ☰
       `/repair` ☰
       `/uninstall` ☰ Removes the specified features (see `/features`)
       `/ceip` ☰
     table }

   }

}

sa:

  The installation directory for the 64-bit *Windows SDK* is → Windows/dirs/Program-Files-x86/Windows-Kits/n[`C:\Program Files (x86)\Windows Kits\10`] for the 32-bit version
 `C:\Program Files\Windows Kits\10`. This directory is referenced by the → Windows/development/Visual-Studio/environment-variables[Visual Studio environment variable] `%WindowsSdkDir%`.

  The SDK comes with the feature → Windows/development/Debugging/tools which can be installed
  without the rest of the SDK.
