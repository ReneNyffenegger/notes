
Every COM object needs an → Windows/development/COM/IUnknown[`IUnknown`] interface. In fact, a COM object is a
→ development/languages/C-C-plus-plus/C/language/struct[`struct`] whose first member (or element) is a pointer to a
IUnknown or IUnknown-derived vTable.

All COM objects are eidentified by a → development/UUID-GUID[GUID]: the CLSID (= class identifier). Some are additionally identified by *ProgIds*.

{ Registry

  Some relevant → Windows/registry[registry] keys for COM are:
    • → Windows/registry/tree/HKEY_CLASSES_ROOT/AppID[`HKCR\AppID`]
    • → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[`HKCR\<ProgId>`]
    • → Windows/registry/tree/HKEY_CLASSES_ROOT/CLSID[`HKCR\CLSID`] (where the the CLSIDs are stored)
    • → Windows/registry/tree/HKEY_CLASSES_ROOT/Interface[`HKCR\Interface`]

}
{ Reserved/Well known DISPIDs #com-dispid

  Four DISPIDs are reserved:
    • `DISPID_VALUE` (0): This DISPID is used to identify an object's *default member*.
    • `DISPID_UNKNOWN` (-1): *Must* be returned by `GetIDsOfNames` to indicate that a member is not found.
    • `DISPID_PROPERTYPUT` (-3)
    • `DISPID_NEWENUM` (-4): The `_NewEnum` method

    Apparently, in → development/languages/VBA[VBA] → development/languages/VBA/language/classes[classes], a method can be decorated with the `→ development/languages/VBA/attribute[attribute] … vb_userMemId` construct
    to assign such predefined disp ids to such a member.

}
{ Object creation

  { PowerShell

    With → Windows/PowerShell, a COM object can be created like so
code {
PS C\> $comObj = new-object -comObject → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[prog.id]
code }

    After creating the object, its method can be displayed
code {
PS C:\> $comObj | get-member -mem method
code }

  }
  { VBA - Visual Basic for Applications

    In VBA, a COM object can be created with → development/languages/VBA/functions/createObject[`createObject(…)`].

  }
  { Autohotkey

    In → tools/autohotkey[AutoHotKey], a COM object can be created with `comObjCreate(…)`.

  }
}
{ TODO

   → https://www.codeproject.com/Articles/13601/COM-in-plain-C[COM in plain C] (CodeProject).
   → https://www.codeproject.com/Articles/13862/COM-in-plain-C-Part-2[Part 2],
   → https://www.codeproject.com/Articles/14037/COM-in-plain-C-Part-3[3],
   → https://www.codeproject.com/Articles/14117/COM-in-plain-C-Part-4[4],
   → https://www.codeproject.com/Articles/14117/COM-in-plain-C-Part-5[5],
   → https://www.codeproject.com/Articles/14117/COM-in-plain-C-Part-6[6],
   → https://www.codeproject.com/Articles/14117/COM-in-plain-C-Part-7[7] and
   → https://www.codeproject.com/Articles/14117/COM-in-plain-C-Part-8[8].

   → http://progtutorials.tripod.com/COM.htm

  { Running Object Table

    The *Running Object Table* (ROT) is a look-up table that keeps track of (registered?) objects. These are identified by a moniker. The form of the entries is
   `(pmkObjectName, pUnkObject)`. `pmkObjectName` is a pointer to the moniker.

    The goal of the ROT is that a client can bind a moniker to an already running object instead of creating a new object.

?   A registered(!) object can be looked up in → development/languages/C-C-plus-plus/C[C] with the → Windows/development/WinAPI function `GetActiveObject()` and in
    → development/languages/VBA[Visual Basic for Application] with `GetObject()`.

    An → Microsoft/Office application does not register itself right after starting to optimize the startup process. Instead, the registration only takes place
    when the application looses focus.


  }

}

sa:

   → Windows/development/COM/Useful-object-libraries

   → development/languages/VBA/Win-API/ole

   → Windows/dirs/Windows/System32/dllhost_exe[dllhost.exe],
   → Windows/dirs/Windows/System32/ole32_dll[ole_32.dll]

links:
  → https://github.com/Kriegel/ComPower[ComPower] is a → Windows/PowerShell module to work with COM.
