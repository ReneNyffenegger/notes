$ COM object

Every → Windows/development/COM[COM] object needs an → Windows/development/COM/IUnknown[`IUnknown`] interface. In fact, a COM object is a
→ development/languages/C-C-plus-plus/C/language/struct[`struct`] whose first member (or element) is a pointer to a
IUnknown or IUnknown-derived vTable.

All COM objects are identified by a → development/UUID-GUID[GUID]: the CLSID (= class identifier). Some are additionally identified by *ProgIds*.

{ Creation of COM objects

  table { ll

    → Windows/PowerShell ☰ → Windows/PowerShell/command-inventory/noun/object/new[`new-object -com …`]
    → development/languages/VBA[VBA] ☰ → development/languages/VBA/functions/createObject[`createObject`]
    → tools/autohotkey[AutoHotKey] ☰ `comObjCreate(…)`

  table }

  { PowerShell

    With → Windows/PowerShell, a COM object can be created like so
code {
PS C\> $comObj = new-object -comObject → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[prog.id]
code }

    After creating the object, its methods can be displayed
code {
PS C:\> $comObj | get-member -mem method
code }

    See also → Windows/PowerShell/command-inventory/noun/object/new/COM

  }
  { VBA - Visual Basic for Applications

    In VBA, a COM object can be created with → development/languages/VBA/functions/createObject[`createObject(…)`].

  }
  { Autohotkey

    In → tools/autohotkey[AutoHotKey], a COM object can be created with `comObjCreate(…)`.

  }

}

sa:
  → Windows/development/COM

  Machine readable Information about an object's methods or argument names can be stored in a → Windows/development/COM/type-library.
