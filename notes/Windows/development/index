$ Windows development


{ PE (Portable Executable) format #win-pe

  Windows binaries follow the *PE format* (while → Linux binaries follow the *ELF* format).

  Common suffixes of PE-files are `.exe`, `.dll` or `.sys`.

  See also: → Windows/development/Portable-Executable

}
{ Console application vs Windows application

  A windows executable is linked for a specific → Windows/development/Portable-Executable/subsystem[subsystem]. In most cases, this is either a 
  → Windows/development/Portable-Executable/subsystem/console[console application] or a *Windows application* (apparently aka SFU or native application) 

  In case of a console application, the `CreateProcess` → Windows/development/WinAPI function will create a console window and attach `STDIN`, `STDOUT` and `STDERR` streams to the console.
  -
  These streams will be closed for windows applications.

}
{ Threads

  Each → Windows/development/process/thread[thread] has its own *input queue*.
  -
  The *current thread's* window that receives input can be obtained with `GetActiveWindow` (Or ist it `GetFocus()`???). (Compare with `GetForegroundWindow` which reterns the window that currently is receiving input).

}
{ Misc / TODO

  { NtAPI - Syscalls

    Unlike in Unix, Windows applications don't call → Linux/kernel/sys-calls[sys calls]. Rather, they call the → Windows/development/WinAPI which in turn calls
    functions from the *native API* (NtAPI) which in turn do the sys calls.

    The NtAPI is implemented in → Windows/dirs/Windows/System32/ntdll_dll and is not documented.

    However, there *are* sys calls in Windows. The → https://j00ru.vexillium.org/syscalls/nt/32/[Windows X86 System Call Table] (for NT/2000/XP/2003/Vista/2008/7/8/10) shows how instable the syscall numbers are accross
    Windows versions. (See also → https://github.com/hfiref0x/SyscallTables)

    See also: Adventures in Windows debugging and → development/Reverse-engineering[reverse engineering] - → http://www.nynaeve.net/?p=48[http://www.nynaeve.net/?p=48].

  }
  { No MSVCRT

    → https://github.com/henkman/no-msvcrt: a few modules that require no msvcrt: console, args, bstr and regexp.

    Stefan Kanthak's → https://skanthak.homepage.t-online.de/nomsvcrt.html[Minimalist Runtime Library for Microsoft® C Compiler]

  }
  { Subsystems

    There are two main *subsystems* to program for: CONSOLE and WINDOWS.


  }

}
sa:

   → Windows/development/memory[memory]

   → Windows/development/process[processes] and → Windows/development/process/thread[threads]

   → Windows/development/WinAPI

   → Windows/development/MinGW

     Using the → development/make/variables[`make` variable] `$(OS)` to → development/make/detect-os[detect the operating system] under which `make` is running.

   → Windows/development/Visual-Studio[Visual Studio]

links:
  → https://docs.microsoft.com/en-us/[docs.microsoft.com]: documentation for end users, developers and IT professionals.
