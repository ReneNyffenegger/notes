$ Microsoft Visual Studio
@ Visual Studio

{ Installation root #vs-installation-root

  Up to → Windows/development/Visual-Studio/versions[Visual Studio version 2015] (?), Visual Studio was
  installed under → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio-version[`C:\Program Files (x86)\Microsoft Visual Studio <version>`].

  Beginning with Visual Studio 2017 (?), it is (by default) installed under
  → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition[`C:\Program Files (x86)\Microsoft Visual Studio\<version>\<edition>`] for
  example `C:\Program Files (x86)\Microsoft Visual Studio\2017\Community`.


}
{ Environment variables

  In order to run build tools from the command line (→ Windows/dirs/Windows/System32/cmd_exe[cmd.exe]), some → Windows/development/Visual-Studio/environment-variables[Visual Studio specific environment variables] need
  to → Windows/development/Visual-Studio/environment-variables#vs-set-env-vars[be set].

   The value of the environment variables `CL` and `CL_` are automatically used as
   → Windows/development/Visual-Studio/cl/options[options] when → Windows/development/Visual-Studio/cl[`cl`] is invoked. It might therefore be set to
   at least the value of `/nologo`.

}
{ Shortcut keys

  Some interesting shortcut keys, imho, are:
  -
  `F5` start debugging
  -
  `ctrl+F5` start without debugging
  -
  `F9` set breakpoint

}
{ Show building command lines

  Visual Studio makes it possible to see the actual commands that are executed for a build. The amount (verbosity) can be set in the menu under
  Tools -> Options -> Projects and Solutions -> Build and Run and then adjusting the value of *MSBuild project build output verbosity*:
  gh|about-Visual-Studio|/menu/Tools/Options/Project-and-Solutions/Build-and-Run/img/MSBuild-project-build-output-verbosity.png||

}
{ TODO


  The scripts are found under
    `c:\Program Files (x86)\Microsoft Visual Studio\20xx\name of edition\VC\Auxiliary\Build`
 
   The headers for the *vcruntime* are found under
     `c:\Program Files (x86)\Microsoft Visual Studio\20xx\name of edition\VC\Tools\MSVC\lib-version\include`

  The link libraries are found under
    `c:\Program Files (x86)\Microsoft Visual Studio\20xx\name of edition\VC\Tools\MSVC\lib-version\lib\architecture`

  The → Windows/development/Visual-Studio/versions[version number] of VS 2017 is 15.0, the VC++ version of 2017 is 14.xx (!). Compare with the values of the `_MSC_VER` and `_MSC_FULL_VER` → development/languages/C-C-plus-plus/preprocessor/macros[preprocessor macros].

  → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/Installer/vs_installer_exe[`vs_installer.exe`] is the *Visual Studio installer*,
  → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/Installer/vswhere_exe[`vswhere.exe`] is the *Visual Studio Locator*.

  The IDE of Visual Studio is started with → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition/Common7/IDE/devenv_exe[`devenv.exe`]

 There is also the directory `"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\vsdevcmd\core"` which contains
   • `dotnet.bat`
   • `msbuild.bat`
   • `parse_cmd.bat`
   • `vsdevcmd_end.bat`
   • `vsdevcmd_start.bat`
   • `winsdk.bat`


  → Windows/dirs/Windows/System32/vsjitdebugger_exe[`vsjitdebugger.exe`]: the Just-in-Time debugger

  Workloads?


  { Solution files and project files #vs-solution-project-file


    A *project file* is an → development/XML file has the suffix `.vcxproj` (or `.csproj`?) (in earlier versions, the suffix was `.vcproj` or even `.dsp`). The project file contains the information
    needed to build a C++ project.

    One or more projects can be organized into a solution (which is a container of projects). The respective solution file has the suffix `.sln`.

    A `*.sqlproj` file corresponds to a *SQL Server Data Tools (SSDT)* project. The SSDT functionality can be separately enabled with the → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/Installer/vs_installer_exe[Vistual Studio Installer].
    -
    If SSDT is not installed and a solution contains an `.sqlproj` file, Visual Studio reports it as the project being *incompatible* and *The application is not installed*.

   `msbuild.exe`

   `→ Windows/dirs/Program-Files/dotnet/dotnet_exe[dotnet.exe] sln` adds, removes or lists projects in a solution file.

  }

}


sa:
  → Windows/development/Visual-Studio/cl[cl]

  → Windows/development/Visual-Studio/masm[Macro Assembler (masm)]

  → Windows/development/Visual-Studio/versions

  → Windows/development/Visual-Studio/platform-toolset[Platform toolset]

  → Windows/development/Visual-Studio/environment-variables[Environment variables]

  → Windows/development/Microsoft-Build-Engine[Microsoft Build Engine (aka MSBuild)]: Visual Studio uses the
  → Windows/development/Microsoft-Build-Engine/project-file[Ms Build project file format] to store information about projects that it manages.

  → Windows/registry/tree-structure/key[Registry keys]:
    • `HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\VisualStudio`
    • → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/VisualStudio[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio`]
    • → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Wow6432Node/Microsoft/VisualStudio[`HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\VisualStudio`]

  → Windows/dirs/ProgramData/Microsoft/VisualStudio[`%ProgramData%\Microsoft\VisualStudio`]
