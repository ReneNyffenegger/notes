$ cl /w …


`/wLWNUM` sets the the warning level for warning number `WNUM` to `L` (`L` = 1 … 4)

`/weWNUM` treats warning `WNUM` as an error.

`/woWNUM` emits the warning for `WNUM` only once.

{ /wd : supress warnings #cl-wd


  `/wdnnnn` supresses the compiler warning for the number `nnnn`.

  In the following simple example, the parameter `argc` is not referenced which causes the compiler to complain with the warning  *C4100: 'argc': unreferenced formal parameter*
  when compiling with `cl → Windows/development/Visual-Studio/cl/options/W[/W4] unreferenced-formal-parameter.c`.
  gh|about-cl|/options/w_/d/unreferenced-formal-parameter.c||

  The temptation is near to just remove `argc` so that the function signature looks like `int main(int, char* argv[])`, but this results in the error *C2055: expected formal parameter list, not a type list*.

  The solution(?) is to suppress the warning (`/wd4100`) and compile the program like so:
code {
cl /wd4100 .\unreferenced-formal-parameter.c
code }

   Compare with the → Windows/development/Visual-Studio/link/options/ignore[`/IGNORE`] option of the linker (`link.exe`).

}

sa:
  → Windows/development/Visual-Studio/cl/options/W[`/W`] controls the level of warnings that are emitted by the compiler.

  → Windows/development/Visual-Studio/cl/options[cl options]
