$ cl options

→ Windows/development/Visual-Studio/cl/options/c[`/c`] to compile without linking object files.

→ Windows/development/Visual-Studio/cl/options/D[`cl /D`] to define a → development/languages/C-C-plus-plus/preprocessor/macros[preprocessor macro].

→ Windows/development/Visual-Studio/cl/options/dn[`/d1`] and `/d2` to forward specific options to the
→ Windows/development/Visual-Studio/cl#cl-frontend-backend[frontend] and backend.

→ Windows/development/Visual-Studio/cl/options/F[`/F…`] to specify options for output files.

→ Windows/development/Visual-Studio/cl/options/GS[`/GS`]

→ Windows/development/Visual-Studio/cl/options/Gs_/[`/Gs`]

`/nologo`

→ Windows/development/Visual-Studio/cl/options/E-P-EP[`/E`, `/P` or `/EP`] to → development/languages/C-C-plus-plus/preprocessor[preprocess] only.

→ Windows/development/Visual-Studio/cl/options/O[`/O…`] to control how the generated code is optimized.

→ Windows/development/Visual-Studio/cl/options/T[`/T…`] to specify the language (→ development/languages/C-C-plus-plus/C or → development/languages/C-C-plus-plus/CPP[C++]) of the compilation unit.

→ Windows/development/Visual-Studio/cl/options/utf-8[`/utf-8`]

→ Windows/development/Visual-Studio/cl/options/W[`/W…`] to control the level of warnings emitted when compiling

→ Windows/development/Visual-Studio/cl/options/Z/l[`/Zl`]

`/Z7`, `/Zi`, `/ZI` to set up the created code for → Windows/development/WinAPI/Debugging[debugging].
-
`Zi` and `/ZI` create → Windows/development/Visual-Studio/PDB-files[PDB files]

`/Za` disables all → Microsoft[Microsoft] specific extensions to → development/languages/C-C-plus-plus/CPP[C++]. This option is therefore recommended for compiling code that is intended to run
on other platforms, too.

`B…` options such as → Windows/development/Visual-Studio/cl/options/B/1[`/B1`] or → Windows/development/Visual-Studio/cl/options/B/d[`/Bd`].

{ Environment variables and command files

  The content of the → development/environment-variable[environment variables] `CL` and `CL_` are automatically used as options when `cl` is invoked.

  Additionally, a *command file* that contains options can be specified by prepending the file's name with `@` when `cl` is invoked:
code {
cl @opts
code }


}

sa:
  → Windows/development/Visual-Studio/cl

links:
  Lectem's list of → https://lectem.github.io/msvc/reverse-engineering/build/2019/01/21/MSVC-hidden-flags.html[hidden flags].
