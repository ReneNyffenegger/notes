$ cl /T…

The `/T…` option of the → Windows/development/Visual-Studio/cl[Visual C compiler] allows to specify the filetype/language
(→ development/languages/C-C-plus-plus/C and → development/languages/C-C-plus-plus/CPP[C++]) of the source being compiled.

`/Tc` specifies a C file, `/Tp` a C++ file, `/TC` specifies that files by default are C files and `/TP` that files by default
are C++ files.

This can be demonstrated with the following simple source file:
gh|about-cl|/options/T/invalid-cpp-but-valid-c||

Because it has a variable that is named `new` and `new` is a keyword in C++,
the file is not valid C++.

The following invocation of the compiler specifies that the file is a C file and thus produces `invalid-cpp-but-valid-c.exe`:
code {
cl /Tc invalid-cpp-but-valid-c
code }

However, compiling it with
code {
cl /Tp invalid-cpp-but-valid-c
code }
results in
code {
invalid-cpp-but-valid-c(2): error C2059: syntax error: 'new'
invalid-cpp-but-valid-c(3): error C2059: syntax error: ';'
code }

sa:
  → Windows/development/Visual-Studio/cl/options[cl options]

  The → development/languages/C-C-plus-plus/GCC[gcc] equivalent is → development/languages/C-C-plus-plus/GCC/options/x[`gcc -x …`].
