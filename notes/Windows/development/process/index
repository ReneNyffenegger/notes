$ Windows process

In order to run an executable program (the *base image*), a process is needed.

A process is identified by its process id.

The owner of the process, his privileges and security groups are identified by an → Windows/security/access-token[access token].

The process has → Windows/development/memory#win-virtual-memory[virtual memory] for private use available.

A process consists of one ore more → Windows/development/process/thread[threads].

*Ressources* that were allocated by Windows on behalf of the processes are identified by handles.

Two importand structures for processes are
   • EPROCESS (kernel mode)
   • PEB (user mode)

{ Foreground process

  Apparently, at most one process is the *foreground process*. It seems possible that no process is the foreground process.

}
{ Services

  Background processes that require no user interaction are referred to as *services*.

  Services are controlled by *service control manager* (SCM) and run under `services.exe`.

  An important → Windows/registry[registry] key is `HKLM\System\CurrentControlSet\Services`.

  `svchost.exe` is apparently somehow user for shared processes.

}
{ explorer.exe

  The first process that is created when a → Windows/user-account[user] logs in is → Windows/dirs/Windows/explorer_exe[`explorer.exe`].
  
  This process thus is either directly or indirectly the parent process for all processes that the user then creates.

  TODO: Is this process the *shell process*?

}
{ Integrity levels #win-process-integrity-level

  Each running process is assigned an *integrity level* which is identified by a → Windows/security/SID[SID]

table { lll

   Name   ☰  SID            ☰  Example
   System ☰ `S-1-16-16384`  ☰ `svchost.exe`, → Windows/dirs/Windows/System32/winlogon_exe[`winlogon.exe`], Windows kernel
   High   ☰ `S-1-16-12288`  ☰ `mmc.exe`, `setup.exe`
   Medium ☰ `S-1-16-8196`   ☰ `explorer` (the shell process?), `ieuser.exe`, → Microsoft/Office/Excel[Excel]
   Low    ☰ `S-1-16-4096`   ☰ `iexplore.exe` (in order to prevent spreading malware)

table }

  (Source: Mario Hewardt, Daniel Pravat: *Advanced Windows Debugging*, chapter 15)

}
{ PoweSshell

  The → Windows/PowerShell/language/variable/automatic[automatic] → Windows/PowerShell[PowerShell] → Windows/PowerShell/language/variable[variable] → Windows/PowerShell/language/variable/automatic/PID[`$PID`]
  contains the *process identifier* of the process that is hosting the current Windows PowerShell session.

  The → Windows/PowerShell/language/cmdlet[cmdlet] `get-process` returns the processes that are running locally or remotely.

}
sa:
  → development/languages/VBA/Win-API/PSAPI/EnumProcessModules

  → Windows/dirs/Windows/System32/Taskmgr_exe

  All programs (processes) in Windows are ultimately started with the → Windows/development/WinAPI[WinAPI] function `CreateProcess()`.
  → development/languages/VBA/Win-API/examples/CreateProcess[This is an VBA example] to use `CreateProcess`.

  → Windows/cmd-exe/commands/taskkill[`taskkill`] to kill processes in → Windows/cmd-exe[cmd.exe].

  → Windows/development/process/thread[Threads]

  Each process has a → Windows/development/memory/page/table[page table] that maps → Windows/development/memory#win-virtual-memory[virtual addresses] to their corresponding physical addresses.

  → Windows/development/process/PEB[PEB]



