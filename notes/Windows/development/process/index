$ Windows process
@ process

In order to run an executable program (the *base image*), a process is needed.

A process roughly consists of:
  • Private virtual address space
  • An executable (binary) which is mapped into the virtual address space
  • Handles: semaphores, synchronization objects, files …
  • A security context

A process also consists of modules which are → Windows/development/Portable-Executable/EXE[executables] and → Windows/development/Portable-Executable/DLL[DLLs].

A process is identified by its → Windows/development/process/identifer[process id].

The owner of the process, his privileges and security groups are identified by an → Windows/security/access-token[access token].

The process has → Windows/development/memory#win-virtual-memory[virtual memory] for private use available.

A process consists of one ore more → Windows/development/process/thread[threads] (empty processes are possible, but not useful).

*Ressources* that were allocated by Windows on behalf of the processes are identified by handles (and such handles
can be shown with the → Windows/tools/Sysinternals tools → Windows/tools/Sysinternals/handle).

Two importand structures for processes are
   • EPROCESS (kernel mode)
   • PEB (user mode)

{ User mode processes

  User processes can be divided into four categories
    • User processes
    • → Windows/services[Service] processes
    • System processes (Such as → Windows/dirs/Windows/System32/wininit_exe[`wininit.exe`] and → Windows/dirs/Windows/System32/winlogon_exe[`winlogon.exe`])
    • Environment subystem server processes


}
{ Foreground process

  Apparently, at most one process is the *foreground process*. It seems possible that no process is the foreground process.

}
{ Services

  Background processes that require no user interaction are referred to as → Windows/services[services].

  Services are controlled by → Windows/dirs/Windows/System32/services_exe[Service Control Manager (SCM)] (whose executable is `services.exe`).

  An important → Windows/registry[registry] key is → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Services[`HKLM\System\CurrentControlSet\Services`].

  → Windows/dirs/Windows/System32/svchost_exe[`svchost.exe`] is apparently somehow used for shared processes.

}
{ explorer.exe

  The first process that is created when a → Windows/user-account[user] logs in is → Windows/dirs/Windows/explorer_exe[`explorer.exe`].
  
  This process thus is either directly or indirectly the parent process for all processes that the user then creates.

  TODO: Is this process the *shell process*?

}
{ Process creation

  A process is created by the → Windows/development/WinAPI[WinAPI] function `CreateProcess()`.

 `CreateProcess()` 
   • creates a *process object* 
   • allocates memory for the new process.
   • maps → Windows/dirs/Windows/System32/ntdll_dll[`ntdll.dll`] and the `.exe` image into the new allocated memory
   • creates the first → Windows/development/process/thread[thread]
   • allocates memory for the → Windows/development/process/thread/stack[stack of the thread]
   • transfers control for this thread to the function `LdrpInitialize` in `ntdll.dll`

  `LdrpInitialize` recursively traverses the → Windows/development/Portable-Executable/EXE[EXE's] import tables and maps the found executables into memory.
   Then, it calls `LdrpRunInitializeRoutines` which in turn calls the *entry points* of the DLLs that were mapped into memory (using the parameter `DLL_PROCESS_ATTACH`).
 
   After initialzing the DLLs, `LdrpInitialize` calls `BaseProcesStart` (in → Windows/dirs/Windows/System32/kernel32_dll[`kernel32.dll`]) which eventually calls
   the exe's *entry point* which (probably) eventually calls `main` or `WinMain`.

}
{ Integrity levels #win-process-integrity-level

  Each running process is assigned an *integrity level* which is identified by a → Windows/security/SID[SID]

table { lll

  ~Name~   ☰  ~SID~            ☰  ~Example or comments~
   Untrusted(?) ☰ `S-1-16-0` ☰
   Low    ☰ `S-1-16-4096`   ☰ `iexplore.exe` (in order to prevent spreading malware)
   Medium ☰ `S-1-16-8192`   ☰ → Windows/dirs/Windows/explorer_exe[`explorer`] (the shell process?), `ieuser.exe`, → Microsoft/Office/Excel[Excel]
   Medium+Mandatory ☰ `S-1-16-8448`   ☰ 8448 = 8192 + 256
   High   ☰ `S-1-16-12288`  ☰ → Windows/dirs/Windows/System32/mmc_exe[`mmc.exe`], `setup.exe`  (12288 = 8448 + 2048 + 1024 + 512 + 256, that is: 256 is counted twice!)
   System ☰ `S-1-16-16384`  ☰ → Windows/dirs/Windows/System32/svchost_exe[`svchost.exe`], → Windows/dirs/Windows/System32/winlogon_exe[`winlogon.exe`], → Windows/kernel[Windows kernel]
   Protected-Process(?) ☰ `S-1-16-20480`  ☰
   Secure-Process(?) ☰ `S-1-16-28672`  ☰
table }

  (Source: Mario Hewardt, Daniel Pravat: *Advanced Windows Debugging*, chapter 15)

}
{ PowerShell

  The → Windows/PowerShell/language/variable/automatic[automatic] → Windows/PowerShell[PowerShell] → Windows/PowerShell/language/variable[variable] → Windows/PowerShell/language/variable/automatic/PID[`$PID`]
  contains the *process identifier* of the process that is hosting the current Windows PowerShell session.

  The → Windows/PowerShell/command-inventory/noun/process/get[`get-process` cmdLet] returns the processes that are running locally or remotely.

  Processes can be started with `start-process`.

}
{ Special processes

  Special processes are
    • the *System process* whose process id is 0
    • the *Idle process*
    • the → Windows/dirs/Windows/System32/csrss_exe[`csrss.exe`] processes

}
{ Querying processes

  Existing processes can be queried with → Windows/dirs/Windows/System32/wbem/WMIC_exe[`WMIC.exe`]:

  Show process id and name:
code {
→ Windows/development/process[wmic process] get processId,name
code }

  Show parent process id and process id of → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] processes:
code {
wmic process where "name='cmd.exe'" get parentProcessId,ProcessId
code }

   Another possibility to query running (or stopped) processes is provided by → Windows/dirs/Windows/System32/tasklist_exe[`tasklist.exe`].

}
{ Getting a process' parent PID

  In → Windows/PowerShell, a process' parent PID can be queried like so:
code {
get-cimInstance win32_Process -filter "name = 'oracle.exe'" | select parentProcessId
code }


}
{ Error mode

  Each process has an associated error mode that indicates how to react to serious errors.

  The error mode is set with `SetErrorMode(…)`. MSDN recommends to call `SetErrorMode` with the parameter `SEM_FAILCRITICALERRORS`.

}
{ Terminating processes #kill-win-proc

  → Windows/dirs/Windows/System32/taskkill_exe[`taskkill.exe`] kills processes in → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] (and → Windows/PowerShell)

   PowerShell has a specific → Windows/PowerShell/language/cmdlet[cmdLet] to termianate processes: → Windows/PowerShell/command-inventory/noun/process/stop[`stop-process`]
   -  
   This cmdLet is used in the simple PowerShell script → development/tools/scripts/personal/kil_ps1[`kil.ps1`].

   Then, there is also → Windows/dirs/Windows/System32/tskill_exe[`tskill.exe`], the Remote Desktop Services End Process Utility.

   → Windows/dirs/Program-Files-x86/Windows-Kits/n/Tools/arch/kill_exe[`kill.exe`]

   
}
{ Number of processes

  In → Windows/PowerShell, the number of processes can be determined with the → Windows/PowerShell/command-inventory/noun/counter/get[`get-counter`] cmdlet:
code {
"Number of processes: $((get-counter '\Objects\Processes').counterSamples.cookedValue)"
code }

}
{ Misc

  A process can be put into *suspended state* with the undocumented `NtSuspendProcess` *native API*.

  A list of running processec can be obptained with `NtQuerySystemInformation()`.

  { Impersonation #win-process-impersonation

    Impersonation is the ability of a process to take on the security attributes of another process.

    See also the → Windows/security/access-token#impersonation-access-token[impersonation access token]

  }

}
sa:
  → development/languages/VBA/Win-API/PSAPI/EnumProcessModules

  Each process has an → Windows/development/Internationalization/locale#windows-input-locale[input locale].

  The → Microsoft/dot-net class → Microsoft/dot-net/namespaces-classes/System/Diagnostics/Process[`System.Diagnostics.Process`]

  → Windows/dirs/Windows/System32/Taskmgr_exe

  All programs (processes) in Windows are ultimately started with the → Windows/development/WinAPI[WinAPI] function `CreateProcess()`.
  → development/languages/VBA/Win-API/examples/CreateProcess[This is an VBA example] to use `CreateProcess`.

  → Windows/dirs/Windows/System32/tasklist_exe[`tasklist.exe`] to show the currently running processes in → Windows/dirs/Windows/System32/cmd_exe[cmd.exe].

  → Windows/development/process/thread[Threads]

  The → Windows/PowerShell/command-inventory/noun/process[PowerShell command noun `process`]

  Each process has a → Windows/development/memory/page/table[page table] that maps → Windows/development/memory#win-virtual-memory[virtual addresses] to their corresponding physical addresses.

  The → Windows/dirs/Windows/System32/cmd_exe/commands[`cmd.exe` built-in `start`].

  → Windows/development/process/PEB[PEB]

  → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition/Common7/Tools[`spyxx.exe`]

  → Linux/kernel/process[Linux processes]

  Processes that are using a CLR (Common Language Runtime) can be displayed with `clrver.exe`.

  Processes are → Windows/kernel/objects.

  Determining the number of processes with → Windows/dirs/Windows/System32/wbem/WMIC_exe[`WMIC.exe`]
code {
→ Windows/dirs/Windows/System32/wbem/WMIC_exe/alias/os[wmic oc] get numberOfProcesses
code }

  In → development/languages/Java, a new process can be started with the method → development/languages/Java/classes/java/lang/Runtime/exec[`exec` of the class `java.lang.Runtime`].
  -
  In → development/languages/Python, a new process can be created («spawned») with the
  → development/languages/Python/standard-library/subprocess[standard library module `subprocess`].

  Process crashes are hanled by → Windows/dirs/Windows/System32/WerFault_exe[`WerFault.exe`]
