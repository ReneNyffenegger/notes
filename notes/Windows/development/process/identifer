$ Windows Process ID

Each → Windows/development/process is identified by a numberical (integer value), named *ID*, *process id*, *process identifer* or simply *PID*.

These process IDs are always multiple of 4 because they (somehow) relate to handles in the Kernel which themselves are always multiple of 4.

  This statement can be «verified» with the follwing → Windows/PowerShell/pipeline[PowerShell pipeline]:
code {
→ Windows/PowerShell/command-inventory/noun/process/get[get-process] | → Windows/PowerShell/command-inventory/noun/object/where[where-object] { [→ Microsoft/dot-net/namespaces-classes/System/Math[Math]]::Round($_.id /4 ) → Windows/PowerShell/language/operator/comparison[-ne] ($_.id/4) }
code }

{ Processes with PID 0 and 4

  The process with the PID 0 is the *System Idle Process*. Technically, it is not a process, and it never exists.

  The process with PID 4 is the first process that is created (and becuase PIDs are always multiple of 4). This process is the
 *System Process*.

}

sa:

  The → Windows/dirs/Windows/System32/NETSTAT_EXE#netstat-exe-o[`-o` or `/o`] option of → Windows/dirs/Windows/System32/NETSTAT_EXE[`NETSTAT.EXE`] displays a connection's local endpoint's
  PID.

  Process identifiers can be used in → Windows/dirs/Windows/System32/taskkill_exe[`taskkill.exe`] to specifically terminate (kill) a process with a given PID.

  Apparently, in → development/languages/VBA, the GUI that belongs to a process ID can be brought to the front with → development/languages/VBA/language/statements/appActivate[`appActivate`].
