$ WinAPI: Structured Exception Handling

Each → Windows/development/process/thread[thread] can set up its own variant of *Structured Exception Handling* (SEH).

{ Recovering from an access violation

  gh|WinAPI|/Diagnostics/Structured-Exception-Handling/recover-from-access-violation.c||

}
{ Trap breakpoint and resume execution

  gh|WinAPI|/Diagnostics/Structured-Exception-Handling/trap-int-3.c||

}

{ TODO

  { Exception handlers


 
  When an application encounters a *user mode* (software?) exception, the kernel traps the exception (via the *Interrupt Descriptor Table (IDT)*) and passes it to the (user mode) *exception dispatcher*.

  The user mode exception handler checks if a → Windows/development/WinAPI/Debugging[debugger] is attached. If this is the case, it notifies the debugger
  of the exception. This is the *first chance* exception.

  If the debugger does not handle the the exception or there is no debugger attached, the *user mode dispatcher* checks for one (or more)
  installed *vectored exception handlers* (VEHs) and calls them until one handles the exception.

  If none of the VEHs handled the exception, the (stack based) chain of *structured exception handlers* (SEH) is traversed until
  a SEH is found that handles the exception.

  If none of the SEHs handles the exception, the exception is raised again. If there is a debugger, the debugger now ges a *second chance* to handle the exception.

  If the debugger didn't handle the 2nd chance exception or if there was no debugger, the process is terminated.

  Thus, VEH takes precedence over SEH.

  The first item of the SEH chain is stored in the first element of the → Windows/development/process/thread/TIB[TIB].


  }
  { SEH handlers

    The *exception handlers* form a linked list on the stack.

    When an exception occurs, Windows picks the first element of that list and walks the list until it finds a handler that is able to properly deal with the exception.

  ? Is the head of this linked pointed at in the first element of the → Windows/development/process/thread/TIB[TIB]?

  }

}

sa:
  → Windows/development/WinAPI

links:
  Matt Pietrek: → http://bytepointer.com/resources/pietrek_crash_course_depths_of_win32_seh.htm[A Crash Course on the Depths of Win32™ Structured Exception Handling]

  Win32Easy: → http://win32easy.blogspot.com/2011/03/exception-handling-inform-your-users.html[Exception Handling - Inform your users!] which explains the difference between
 `AddVectoredExceptionHandler` and `SetUnhandledExceptionFilter`.

  Oleg Krivtsov: → https://www.codeproject.com/Articles/207464/Exception-Handling-in-Visual-Cplusplus[Exception Handling in Visual C++]
