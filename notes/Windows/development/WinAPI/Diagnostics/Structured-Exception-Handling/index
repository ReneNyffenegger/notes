$ WinAPI: Structured Exception Handling

Each → Windows/development/process/thread[thread] can set up its own variant of *Structured Exception Handling* (SEH).

{ Recovering from an access violation

  gh|WinAPI|/Diagnostics/Structured-Exception-Handling/recover-from-access-violation.c||

}
{ Trap breakpoint and resume execution

  gh|WinAPI|/Diagnostics/Structured-Exception-Handling/trap-int-3.c||

}

{ TODO

  { Exception handlers

    The *exception handlers* form a linked list on the stack.

    When an exception occurs, Windows picks the first element of that list and walks the list until it finds a handler that is able to properly deal with the exception.

  ? Is the head of this linked pointed at in the first element of the → Windows/development/process/thread/TIB[TIB]?

  }

}

sa:
  → Windows/development/WinAPI

links:
  Matt Pietrek: → http://bytepointer.com/resources/pietrek_crash_course_depths_of_win32_seh.htm[A Crash Course on the Depths of Win32™ Structured Exception Handling]

  Win32Easy: → http://win32easy.blogspot.com/2011/03/exception-handling-inform-your-users.html[Exception Handling - Inform your users!] which explains the difference between
 `AddVectoredExceptionHandler` and `SetUnhandledExceptionFilter`.

  Oleg Krivtsov: → https://www.codeproject.com/Articles/207464/Exception-Handling-in-Visual-Cplusplus[Exception Handling in Visual C++]
