n Debugging Windows applications

Most Windows → development/debugging[debuggers] use the *debug API* that is provided by → Windows/dirs/Windows/System32/dbghelp_dll[`dbghelp.dll`].
The most interesting functions of this
→ Windows/development/Portable-Executable/DLL[DLL] are
  • `DebugActiveProcess()` to establish a connection between the debugger and the debugee
  • → Windows/development/WinAPI/Debugging/api/WaitForDebugEvent[`WaitForDebugEvent()`]
  • `DebugBreakProcess()`

Other functions that allow the debugger to interact with the target process include
  • `GetThreadContext()` and `SetThreadContext()`
  • `GetThreadSelectorEntry()`
  • `ReadProcessMemory()` and `WriteProcessMemory()`
  • `FlushInstructionCache()`

A process can determine if it being debugged by calling `IsDebuggerPresent()`.
-
If a process is being debugged, it can communicate with the debugger with functions like
  • `OutputDebugString()`
  • `DebugBreak()`
  • `FatalExit()`

{ Exceptions
 
  When an application that is debugged encounters an *exception* in user mode, the kernel traps the exception and passes it to the (user mode) *exception dispatcher*.
  
  the debugger.
  This seems to be the *first chance* exception.

  If the debugger does not handle the the exception, the *user mode dispatcher* checks for one (or more)
  installed *vectored exception handlers* (VEHs) and calls them until one handles the exception.

  If none of the VEHs handled the exception, the chain of *structured exception handlers* is traversed until
  a SEH is found that handles the exception.

  If none of the SEHs handles the exception, the exception is raised again 


}
{ Kernel mode debugging #win-kernel-mode-debugging

  The two (Microsoft) debuggers that allow kernel mode debugging are → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/kd_exe[`kd.exe`] and → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/windbg_exe[`windbg.exe`].

  Two computers, a target and a host, are needed for kernel mode debugging. These are connect by a
   • null cable,
   • IEEE 1394 cable,
   • a USB 2.0/3.0 cable
   • a local network or
   • named pipe (if connected to a hypervisor)

  The target computer must be → Windows/booting[booted] in debugging mode which can be configured with
  → Windows/dirs/Windows/System32/bcdedit_exe[`bcdedit.exe`] or
  → Windows/dirs/Windows/System32/msconfig_exe[`msconfig.exe`].

  TODO: is the ability to connect to the debugged computer with a local network related to the → Windows/dirs/Windows/System32/drivers/kdnic_sys[`kdnic.sys`] driver?

}
{ TODO

  `PSRVTABLE`, `KeServiceDescriptorTable` (As found in *RegMon* source → https://github.com/weixu8/RegMon/blob/master/DD/REGSYS.C[REGSYS.C]).

  → Windows/development/Debugging/tools/DbgShell, a → Windows/PowerShell front-end for the → Windows/dirs/Windows/System32/dbgeng_dll[Windows debugger engine (`dbgeng.dll`)].

  { CreateRemoteThread to inject a thread into a process

   `CreateRemoteThread` is commonly used to inject a thread into a process that is being debugged in order to issue a break or query heap and other process information.

    This technique is however not recommended because extra thread is confusing to the person debugging the application and there are several side effects to using this technique, including
      • Conversion of single thread applications to mutlithreaded ones
      • Changing the timing and memory layout of the process
      • Calling the entry point of each DLL in the process

  }
  { LdrpDoDebuggerBreak

    What's the thing with `LdrpDoDebuggerBreak`, as often seen when using → Windows/development/Debugging/tools[Debugging tools for Windows]:
code {
… ntdll!LdrpDoDebuggerBreak+0x30
… ntdll!LdrpInitializeProcess+0x1f42
… ntdll!LdrpInitialize+0x15f
… ntdll!LdrpInitialize+0x3b
… ntdll!LdrInitializeThunk+0xe
code }

  }


}

sa:
  
  the → development/languages/assembler/x86/instructions[x86 instruction] → development/languages/assembler/x86/instructions/int/3[`int 3`],
  The → Windows/development/Visual-Studio/cl/intrinsic[cl intrinsic] function → Windows/development/Visual-Studio/cl/intrinsic/__debugbreak[`__debugbreak()`] and
  the → Windows/development/WinAPI[WinAPI] function `DebugBreak()`

  → Windows/dirs/Windows/System32/dbghelp_dll

  The → Windows/development/Visual-Studio/cl/options[`cl` options `/Z7`, `/Zi` and `/ZI`].

  → Windows/development/Debugging/tools

links:
  → https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/[Debugging Tools for Windows (WinDbg, KD, CDB, NTSD)],
  → Windows/dirs/Windows/System32/dbgeng_dll[`dbgeng.dll`]

  The Sysinternals tool → https://docs.microsoft.com/en-us/sysinternals/downloads/debugview[DebugView].
