$ WinAPI data types

The definition of WinAPI data types can be made visible by → development/languages/C-C-plus-plus/preprocessor[preprocessing] `#include <windows.h>`:
code {
c:\> cl /E include-windows.c > include-windows.preprocessed
code }

Even better is using → development/languages/C-C-plus-plus/GCC[gcc]:
code {
c:\> gcc -dD -E -H include-windows.c > winclude-windows.E
code }


{ basetsd.h

  Type definitions for the basic sized types.

code {
typedef unsigned int UINT_PTR,*PUINT_PTR;
code }


}

{ oaidl.h

  Definitions for interfaces.

  This include file seems to be generated by a *MIDL* compiler.

code {
typedef LONG DISPID;
code }


code {
typedef struct tagDISPPARAMS {
  VARIANTARG *rgvarg;
  DISPID *rgdispidNamedArgs;
  UINT cArgs;
  UINT cNamedArgs;
} DISPPARAMS;
code }


code {
typedef struct tagEXCEPINFO {
  WORD wCode;
  WORD wReserved;
  BSTR bstrSource;
  BSTR bstrDescription;
  BSTR bstrHelpFile;
  DWORD dwHelpContext;
  PVOID pvReserved;
  HRESULT (__attribute__((__stdcall__)) *pfnDeferredFillIn)(struct tagEXCEPINFO *);
  SCODE scode;
} EXCEPINFO,*LPEXCEPINFO;
code }


code {
typedef struct tagVARIANT VARIANT;

struct tagVARIANT {
    __extension__ union {
      __extension__ struct
      {
 VARTYPE vt;
 WORD wReserved1;
 WORD wReserved2;
 WORD wReserved3;
 __extension__ union {
   LONGLONG     llVal;
   LONG         lVal;
   BYTE         bVal;
   SHORT        iVal;
   FLOAT        fltVal;
   DOUBLE       dblVal;
   VARIANT_BOOL boolVal;

   SCODE         scode;
   CY            cyVal;
   DATE          date;
   BSTR          bstrVal;
   IUnknown     *punkVal;
   IDispatch    *pdispVal;
   SAFEARRAY    *parray;
   BYTE         *pbVal;
   SHORT        *piVal;
   LONG         *plVal;
   LONGLONG     *pllVal;
   FLOAT        *pfltVal;
   DOUBLE       *pdblVal;
   VARIANT_BOOL *pboolVal;

   SCODE        *pscode;
   CY           *pcyVal;
   DATE         *pdate;
   BSTR         *pbstrVal;
   IUnknown    **ppunkVal;
   IDispatch   **ppdispVal;
   SAFEARRAY   **pparray;
   VARIANT      *pvarVal;
   PVOID         byref;
   CHAR          cVal;
   USHORT        uiVal;
   ULONG         ulVal;
   ULONGLONG     ullVal;
   INT           intVal;
   UINT          uintVal;
   DECIMAL      *pdecVal;
   CHAR         *pcVal;
   USHORT       *puiVal;
   ULONG        *pulVal;
   ULONGLONG    *pullVal;
   INT          *pintVal;
   UINT         *puintVal;
   struct {
     PVOID        pvRecord;
     IRecordInfo *pRecInfo;
   } ;
 } ;
      } ;
      DECIMAL decVal;
    } ;
  };

typedef VARIANT *LPVARIANT;
typedef VARIANT  VARIANTARG;
typedef VARIANT *LPVARIANTARG;
code }

}

{ windef.h


code {
typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;

typedef float               FLOAT;
typedef FLOAT              *PFLOAT;
typedef BOOL               *PBOOL;
typedef BOOL               *LPBOOL;
typedef BYTE               *PBYTE;
typedef BYTE               *LPBYTE;
typedef int                *PINT;
typedef int                *LPINT;
typedef WORD               *PWORD;
typedef WORD               *LPWORD;
typedef long               *LPLONG;
typedef DWORD              *PDWORD;
typedef DWORD              *LPDWORD;
typedef void               *LPVOID;
typedef const void         *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int       *PUINT;

typedef WORD                ATOM;

typedef DWORD COLORREF;

#define CALLBACK __stdcall
#define WINAPI   __stdcall


struct HACCEL__       { int unused; }; typedef struct HACCEL__       *HACCEL;
struct HBITMAP__      { int unused; }; typedef struct HBITMAP__      *HBITMAP;
struct HBRUSH__       { int unused; }; typedef struct HBRUSH__       *HBRUSH;
struct HCOLORSPACE__  { int unused; }; typedef struct HCOLORSPACE__  *HCOLORSPACE;
struct HDC__          { int unused; }; typedef struct HDC__          *HDC;
struct HGLRC__        { int unused; }; typedef struct HGLRC__        *HGLRC;
struct HDESK__        { int unused; }; typedef struct HDESK__        *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__        { int unused; }; typedef struct HFONT__        *HFONT;
struct HICON__        { int unused; }; typedef struct HICON__        *HICON;
struct HMENU__        { int unused; }; typedef struct HMENU__        *HMENU;
struct HMETAFILE__    { int unused; }; typedef struct HMETAFILE__    *HMETAFILE;
struct HINSTANCE__    { int unused; }; typedef struct HINSTANCE__    *HINSTANCE;

typedef HINSTANCE HMODULE;

struct HPALETTE__      { int unused; }; typedef struct HPALETTE__      *HPALETTE;
struct HPEN__          { int unused; }; typedef struct HPEN__          *HPEN;
struct HRGN__          { int unused; }; typedef struct HRGN__          *HRGN;
struct HRSRC__         { int unused; }; typedef struct HRSRC__         *HRSRC;
struct HSTR__          { int unused; }; typedef struct HSTR__          *HSTR;
struct HTASK__         { int unused; }; typedef struct HTASK__         *HTASK;
struct HWINSTA__       { int unused; }; typedef struct HWINSTA__       *HWINSTA;
struct HKL__           { int unused; }; typedef struct HKL__           *HKL;
struct HMONITOR__      { int unused; }; typedef struct HMONITOR__      *HMONITOR;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct HUMPD__         { int unused; }; typedef struct HUMPD__          *HUMPD;

code }

}

{ winnt.h


code {
typedef LONG HRESULT;
code }

code {
typedef DWORD LCID;
code }

code {
typedef BYTE    BOOLEAN;

typedef char    CCHAR;
typedef char    CHAR;

typedef wchar_t WCHAR;

#ifdef  UNICODE

   typedef WCHAR TCHAR, *PTCHAR;
   #define __TEXT(quote) L##quote

#else

   typedef char TCHAR, *PTCHAR;
   #define __TEXT(quote) quote

#endif
code }

}

{ guiddef.h

  GUID definitions

code {
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
code }


`GUID`, `IID` and `CLSID` are essentially the same thing!
code {
typedef GUID   IID;
typedef GUID   CLSID;

typedef IID   *LPIID;
typedef CLSID *LPCLSID;
code }

code {
#define IID_NULL            GUID_NULL
#define CLSID_NULL          GUID_NULL
code }

code {
#define IsEqualIID  (riid1  , riid2  ) IsEqualGUID(riid1  , riid2  )
#define IsEqualCLSID(rclsid1, rclsid2) IsEqualGUID(rclsid1, rclsid2)
code }



code {
#ifdef __midl_proxy
  #define __MIDL_CONST
#else
  #define __MIDL_CONST const
#endif
code }

code {
#ifdef __cplusplus
  #define REFGUID  const GUID &
  #define REFIID   const IID  &
  #define REFCLSID const IID  &
  #define REFFMTID const IID  &
#else
  #define REFGUID  const GUID * __MIDL_CONST
  #define REFIID   const IID  * __MIDL_CONST
  #define REFCLSID const IID  * __MIDL_CONST
  #define REFFMTID const IID  * __MIDL_CONST
#endif
code }


}

{ cguid.h

code {
extern const IID GUID_NULL;
code }

}

{ objbase.h

  Component object model definitions.

 `interface` is just a fancy term for an ordinary `struct`:
code {
#if defined(__cplusplus) && !defined(CINTERFACE)

  #define __STRUCT__    struct
  #define interface   __STRUCT__

#else

  #define interface               struct

#endif
code }

}

{ unknwn.h

  `unknwn.h` defines the c `struct` for → Windows/development/COM/IUnknown[IUnknown].
code {
#if defined(__cplusplus) && !defined(CINTERFACE)
#else

    typedef struct IUnknownVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUnknown * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUnknown * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUnknown * This);
        
        END_INTERFACE
    } IUnknownVtbl;

    interface IUnknown
    {
        CONST_VTBL struct IUnknownVtbl *lpVtbl;
    };

#endif

code }

}

{ oleauto.h
  
Constants for the 5th (including `this`) argument in `IDispatch->pVtbl->Invoke` (`wFlags`)
code {
#define DISPATCH_METHOD         0x1
#define DISPATCH_PROPERTYGET    0x2
#define DISPATCH_PROPERTYPUT    0x4
#define DISPATCH_PROPERTYPUTREF 0x8
code }

}


