
*WinAPI* is the OS-interface for applications running on Windows.

The default calling convention for the Win32 API is → development/languages/C-C-plus-plus/calling-convention#stdcall[stdcall].

{ DLLs

  The documented WinAPI functions are implemented in → Windows/dirs/Windows/System32/kernel32_dll[kernel32.dll],
  → Windows/dirs/Windows/System32/advapi32_dll[advapi32.dll], → Windows/dirs/Windows/System32/gdi32_dll[gdi32.dll],
  → Windows/dirs/Windows/System32/user32_dll[`user32.dll`] (and others?).
  -
  These → Windows/development/Portable-Executable/DLL[DLLs] forward calls to WinAPI functions to the appropriate and undocumented (for user mode)
 *Native API* functions that are exported in → Windows/dirs/Windows/System32/ntdll_dll[`ntdll.dll`] (and still run in user mode).
  -
 `ntdll.dll` then forwards such calls to → Windows/dirs/Windows/System32/ntoskrnl_exe[`ntoskrnl.exe`] and
  → Windows/dirs/Windows/System32/win32k_sys[`win32k.sys`].

  Base services for accessing the file system, managing processes and handling devices are implemented in → Windows/dirs/Windows/System32/kernel32_dll[`kernel32.dll`].
  -
  Apparently, with Windows 7, these system libraries were refactored into → Windows/dirs/Windows/System32/KernelBase_dll[`Kernelbase32.dll`].

}
{ WOW64
 
 *WOW64* allows to run 32 bit processes on 64-bit Windows.

 → Windows/dirs/Windows/SysWOW64[`\Windows\SysWOW64`]

}
{ Native System Services / Kernel support functions 

  WinAPI functions must be distinguished from *native system services* and *→ Windows/kernel support functions*: Only WinAPI functions are documented.
  
 *Native system services* are functions that are callable from *user mode*. For example, an application might call the WinAPI `CreateProcess()` function which in turn
  calls the native system service function `NtCreateService()`.

  A *Kernel support function* can only be called from within *kernel mode*, very possibly by *device drivers*
  -
  An example is `ExAllocatePoolWithTag` to allocate memory.


}
{ Strings

  The Win32 API expects strings to be NULL-terminated while the Native API expects the length of a string.

  For example, → http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FKey%2FNtCreateKey.html[`NtCreateKey`] gets a pointer to a
  → https://docs.microsoft.com/en-us/windows/win32/api/subauth/ns-subauth-unicode_string[`UNICODE_STRING` struct] which has the member `Length`, while
  → https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regcreatekeyexw[`RegCreateKeyExW`] gets an «ordinary» `LPCWSTR`.

  This has the interesting consquence that → https://stackoverflow.com/a/1721639/180275[`RegCreateKeyExW` cannot be used to create a registry key with a zero character] although
  such keys are possible if created with `NtCreateKey`.

  This behavior also gives rise to the → Windows/tools/Sysinternals tool → https://docs.microsoft.com/en-us/sysinternals/downloads/reghide[`RegHide`].

}
{ No hooking functionality

  Windows does not natively provide a system call → development/Reverse-engineering/Hooking[hooking] facility like → Linux/kernel/syscalls/ptrace[`ptrace`] on → Linux.

  Some skilled developers have therefore developped kernel drivers (rootkits) that hooked the *System Service Descriptor Table (SSDT)* which then allowed to trace system calls on Windows.
  -
  With 64-bit versions of Windows, patching the SSDT has become more difficult because of → https://en.wikipedia.org/wiki/Kernel_Patch_Protection[Kernel Patch Protection].

}
{ Querying functions

   → https://github.com/reverseame/winapi-categories[reverseame/winapi-categories] is a github repository that classifies WinAPI functions and syscalls.

   For a given function, query the DLL where it is located, the header file where it is defined, the return type and its arguments:
code {
$winApiFunc = (invoke-RestMethod -useBasicParsing https://raw.githubusercontent.com/reverseame/winapi-categories/refs/heads/main/winapi_categories.json).DrawText
$winApiFunc.dll
$winApiFunc.header
$winApiFunc.return_type
$winApiFunc.n_arguments
foreach ($arg in $winApiFunc.arguments) { $arg }
code }

   Find a function's category. Make sure to run this jq script in PowerShell 7.2 (because → https://github.com/cli/cli/issues/3425[earlier versions of PowerShell seem to mangle double quotes within single quotes]).
code {
(invoke-webRequest -useBasicParsing https://raw.githubusercontent.com/reverseame/winapi-categories/refs/heads/main/winapi_functions_by_category.json).content | jq -r 'to_entries[] | select(.value[] == "d") | .key'
code }

  Display all functions of a given category: 
code {
(invoke-RestMethod -useBasicParsing https://raw.githubusercontent.com/reverseame/winapi-categories/refs/heads/main/winapi_functions_by_category.json)."Font and Text"
code }

  Find categories:
code {
invoke-restMethod https://raw.githubusercontent.com/reverseame/winapi-categories/refs/heads/main/categories.txt | findstr.exe /i management | sort.exe
code }

  Find functions that match a given regular expression and print their associated category in tabular form:
code {
(invoke-webrequest -useBasicParsing https://raw.githubusercontent.com/reverseame/winapi-categories/refs/heads/main/winapi_categories.json).content |
   jq -r '["Key", "Category"], (to_entries | map(select(.key | test("font"; "i"))) | map([.key, .value.category] ) | .[] ) | @tsv'
code }

}
{ TODO

  { WinRT

   *Windows Runtime* (=WinRT) is an alternative API, implemented in → development/languages/C-C-plus-plus/CPP, within the Win32 subsystem.

    WinAPI is the underlying technology of WinRT

    WinRT must not be confused with → https://en.wikipedia.org/wiki/Windows_RT[Windows RT] (a deprecated mobile operating system).

  }

}

sa:

  → Windows/development/WinAPI/Diagnostics/Structured-Exception-Handling[Structered Exception Handling]

  → Windows/development/WinAPI/Diagnostics/Process-Status[Process Status (PSAPI)]

  → development/languages/VBA/Win-API[Using the WinAPI in Visual Basic for Applications]

  → Windows/development/WinAPI/data-types[Data types]

  → Windows/development/WinAPI/A-and-W-functions[WinAPI A and W functions].

  → Windows/development/WinAPI/Debugging[Debugging]

  The base WinAPI → development/languages/C-C-plus-plus/C definitions are found in the
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Include/version/um/WinBase_h[`WinBase.h` header file].

  The → development/tools/Docker/Windows/Container-Base-Images[Docker Container Base Image] → https://hub.docker.com/_/microsoft-windows[Windows].

  The → development/languages/Python/code-snippets/Win-API#py-winapi-msgbox[Python `MessageBox` example] demonstrates how it is possible to call the
  → Windows/dirs/Windows/System32/user32_dll[`user32.dll`] from → development/languages/Python.

  Calling the WinAPI function `MessageBox` from → Windows/PowerShell: → Windows/PowerShell/examples/message-box[here] and with → Windows/PowerShell/command-inventory/noun/type/add#add-type-winapi[the cmdLet `add-type`].

  In the world of → Microsoft/dot-net, WinAPI is «→ Microsoft/dot-net/managed-code/un[Unmanaged code]».

links:
  → https://docs.microsoft.com/en-us/windows/desktop/apiindex/windows-api-list[Windows API Index]
