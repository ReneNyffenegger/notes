
*WinAPI* is the OS-interface for applications running on Windows.

The default calling convention for the Win32 API is → development/languages/C-C-plus-plus/calling-convention#stdcall[stdcall].

{ DLLs

  The documented WinAPI functions are implemented in → Windows/dirs/Windows/System32/kernel32_dll[kernel32.dll],
  → Windows/dirs/Windows/System32/advapi32_dll[advapi32.dll], → Windows/dirs/Windows/System32/gdi32_dll[gdi32.dll],
  → Windows/dirs/Windows/System32/user32_dll[`user32.dll`] (and others?).
  -
  These → Windows/development/Portable-Executable/DLL[DLLs] forward calls to WinAPI functions to the appropriate and undocumented (for user mode)
 *Native API* functions that are exported in → Windows/dirs/Windows/System32/ntdll_dll[`ntdll.dll`] (and still run in user mode).
  -
 `ntdll.dll` then forwards such calls to → Windows/dirs/Windows/System32/ntoskrnl_exe[`ntoskrnl.exe`] and
  → Windows/dirs/Windows/System32/win32k_sys[`win32k.sys`].

  Base services for accessing the file system, managing processes and handling devices are implemented in → Windows/dirs/Windows/System32/kernel32_dll[`kernel32.dll`].
  -
  Apparently, with Windows 7, these system libraries were refactored into → Windows/dirs/Windows/System32/KernelBase_dll[`Kernelbase32.dll`].

}
{ WOW64
 
 *WOW64* allows to run 32 bit processes on 64-bit Windows.

 → Windows/dirs/Windows/SysWOW64[`\Windows\SysWOW64`]

}
{ Native System Services / Kernel support functions 

  WinAPI functions must be distinguished from *native system services* and *→ Windows/kernel support functions*: Only WinAPI functions are documented.
  
 *Native system services* are functions that are callable from *user mode*. For example, an application might call the WinAPI `CreateProcess()` function which in turn
  calls the native system service function `NtCreateService()`.

  A *Kernel support function* can only be called from within *kernel mode*, very possibly by *device drivers*
  -
  An example is `ExAllocatePoolWithTag` to allocate memory.


}
{ No hooking functionality

  Windows does not natively provide a system call → development/Reverse-engineering/Hooking[hooking] facility like → Linux/kernel/syscalls/ptrace[`ptrace`] on → Linux.

  Some skilled developers have, therefore developped kernel drivers (rootkits) that hooked the *System Service Descriptor Table (SSDT)* which then allowed to trace system calls on Windows.
  -
  With 64-bit versions of Windows, patching the SSDT has become more difficult because of → https://en.wikipedia.org/wiki/Kernel_Patch_Protection[Kernel Patch Protection].

}
{ TODO

  *Windows Runtime* (=WinRT?) is an alternative API within the Win32 subsystem.
  -
  WinAPI is the predecessor of WinRT.

}

sa:

  → Windows/development/WinAPI/Diagnostics/Structured-Exception-Handling[Structered Exception Handling]

  → Windows/development/WinAPI/Diagnostics/Process-Status[Process Status (PSAPI)]

  → development/languages/VBA/Win-API[Using the WinAPI in Visual Basic for Applications]

  → Windows/development/WinAPI/data-types[Data types]

  → Windows/development/WinAPI/A-and-W-functions[WinAPI A and W functions].

  → Windows/development/WinAPI/Debugging[Debugging]

  The base WinAPI → development/languages/C-C-plus-plus/C definitions are found in the
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Include/version/um/WinBase_h[`WinBase.h` header file].

  The → development/tools/Docker/Windows/Container-Base-Images[Docker Container Base Image] → https://hub.docker.com/_/microsoft-windows[Windows].

  The → development/languages/Python/code-snippets/Win-API#py-winapi-msgbox[Python `MessageBox` example] demonstrates how it is possible to call the
  → Windows/dirs/Windows/System32/user32_dll[`user32.dll`] from → development/languages/Python.

  Calling the WinAPI function `MessageBox` from → Windows/PowerShell: → Windows/PowerShell/examples/message-box[here] and with → Windows/PowerShell/command-inventory/noun/type/add#add-type-winapi[the cmdLet `add-type`].

links:
  → https://docs.microsoft.com/en-us/windows/desktop/apiindex/windows-api-list[Windows API Index]
