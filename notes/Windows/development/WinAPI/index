
*WinAPI* is the OS-interface for applications running on Windows.

The functions from WinAPI are implemented in → Windows/dirs/Windows/System32/kernel32_dll[kernel32.dll],
→ Windows/dirs/Windows/System32/advapi32_dll[advapi32.dll], → Windows/dirs/Windows/System32/gdi32_dll[gdi32.dll] and others.
-
Base services for accessing the file system, managing processes and handling devices are implemented in *kernel32.dll*.
-
Apparently, with Windows 7, these system libraries were refactored into *kernelbase32.dll*.

The default calling convention for the Win32 API is → development/languages/C-C-plus-plus/calling-convention#stdcall[stdcall].

{ WOW64
 
 *WOW64* allows to run 32 bit processes on 64-bit Windows.

 `\Windows\SysWOW64`.

}
{ Native System Services / Kernel support functions 

  WinAPI functions must be distinguished from *native system services* and *kernel support functions*: Only WinAPI functions are documented.
  
 *Native system services* are functions that are callable from *user mode*. For example, an application might call the WinAPI `CreateProcess()` function which in turn
  calls the native system service function `NtCreateService()`.

  A *Kernel support function* can only be called from within *kernel mode*, very possibly by *device drivers*
  -
  An example is `ExAllocatePoolWithTag` to allocate memory.


}
{ TODO

  *Windows Runtime* is an alternative API within the Win32 subsystem.

}

sa:

  → Windows/development/WinAPI/Diagnostics/Structured-Exception-Handling[Structered Exception Handling]

  → Windows/development/WinAPI/Diagnostics/Process-Status[Process Status (PSAPI)]

  → development/languages/VBA/Win-API[Using the WinAPI in Visual Basic for Applications]

  → Windows/development/WinAPI/data-types[Data types]

  → Windows/development/WinAPI/A-and-W-functions[WinAPI A and W functions].

  → Windows/development/WinAPI/Debugging[Debugging]

links:
  → https://docs.microsoft.com/en-us/windows/desktop/apiindex/windows-api-list[Windows API Index]
