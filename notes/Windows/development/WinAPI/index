
*WinAPI* is the OS-interface for applications running on Windows.

The functions from WinAPI are implemented in *kernel32.dll*, *advapi32.dll*, *gdi32.dll* and others.
-
Base services for accessing the file system, managing processes and handling devices are implemented in *kernel32.dll*.
-
Apparently, with Windows 7, these system libraries were refactored into *kernelbase32.dll*.

The default calling convention for the Win32 API is → development/languages/C-C-plus-plus/calling-convention#stdcall[stdcall].

{ A and W functions #winapi-A-W-functions

  Most (all?) string related WinAPI functions come in two versions: `FuncNameA` and `FuncNameW` which are the ansi and wide character
  variant of the same function.

  The `FuncNameA` variants are basically wrapper functions that convert strings from ansi to wide char representation and
  *then* call the corresponding `FuncNamew`.
  -
  I assume that the conversion from ansi to wide char is dependent on the current → Windows/development/Internationalization/Language-for-Non-Unicode-Programs[Language for Non-Unicode Programs].

}
{ WOW64
 
 *WOW64* allows to run 32 bit processes on 64-bit Windows.

 `\Windows\SysWOW64`.

}

sa:

  → Windows/development/WinAPI/Diagnostics/Structured-Exception-Handling[Structered Exception Handling]

  → Windows/development/WinAPI/Diagnostics/Process-Status[Process Status (PSAPI)]

  → development/languages/VBA/Win-API

  → Windows/development/WinAPI/data-types[Data types]

links:
  → https://docs.microsoft.com/en-us/windows/desktop/apiindex/windows-api-list[Windows API Index]
