$ Creating ANSI and UNICODE versions of Windows programs in c

This is an attempt to demonstrate the influence of the definition of `UNICODE` and `_UNICODE` on a Windows C program.

{ prog.c

  We include → Windows/development/CRT/source/tchar_h[`tchar.h`] because it defines `_tWinMain` depending on `UNICODE` to either `WinMain` or `wWinMain`. Thus, by declaring «our»
  WinMain as `_tWinMain`, depending on `_UNICODE`, either `WinMain` or `wWinMain` is called.

  The program itself is rather simple: it shows a message box that reveals which entry point was used and what the size of a `TCHAR` is and how `MessageBox` is expanded.


  gh|Windows-development|/UNICODE/WinMain/prog.c||

}
{ Makefile

  This `Makefile` creates two versions of the program: `ansi.exe` and `unicode.exe`. `unicode.exe` is produced with `_UNICODE` and `UNICODE` defined.

  gh|Windows-development|/UNICODE/WinMain/Makefile||

}
{ Running

  When `ansi.exe` is run, it prints the following message box:
  gh|Windows-development|/UNICODE/WinMain/img/ansi.png||

  And `unicode.exe` creates this message box:
  gh|Windows-development|/UNICODE/WinMain/img/unicode.png||

}
sa:
  → Windows/development/WinAPI/data-types/Definition-of-TCHAR-and-TEXT-depending-on-UNICODE[Definition of TCHAR, TEXT etc. depending on UNICODE]

  → Windows/development/WinAPI/A-and-W-functions[A and W functions in WinAPI]
