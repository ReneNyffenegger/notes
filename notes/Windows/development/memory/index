$ Windows - memory

Windows uses a *flat address space* except for the `FS` → development/languages/assembler/x86/registers[register] in *x86* and the `GS` register in *x64*.

{ Virtual memory #win-virtual-memory

  The *virtual memory* is a contiguous space of memory (-addresses) that each → Windows/development/process[process] sees. Usually, this space is larger than the available physical memory.

  A 32-bit → Windows/development/process[process] has a virtual address space of up to 4 GB, a 64-bit process up to 8 TB.

  The order of addresses in virtual memory does not correspond to the order of addresses in the physical memory.

  By default, the lower half of the virtual memory can be used for the data of a process while the upper half is used for Windows. (Only in 32-bit Windows?)

  Each process has a → Windows/development/memory/page/table[page table] that maps a process's virtual memory to the physical memory or a page in the *paging file*.

  Because the available physical memory at times cannot cover all required access to virtual memory, the memory manager paging out and in parts of the virtual memory to disk.

}
{ Working set

  The amount of virtual memory that is currently stored in physical memory is referred to as the *working set*.

}
{ Determining size of memory on the command line

  On the command line (→ Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`], → Windows/PowerShell), the size of the memory can be determined like so:
code {
C:\> → Windows/dirs/Windows/System32/systeminfo_exe[systeminfo] | → Windows/dirs/Windows/System32/findstr_exe[findstr] /c:"Total Physical Memory"
code }

  The following → Windows/PowerShell command reports the total physical memory in gigabytes (rounded to one decimal place):
code {
[→ Microsoft/dot-net/namespaces-classes/System/Math[math]]::round( (→ Windows/PowerShell/command-inventory/noun/computerInfo/get[get-computerInfo]).csTotalPhysicalMemory / 1gb, 1 )
code }

  The amount of available memory can be determined with
code {
(→ Windows/PowerShell/command-inventory/noun/counter/get[get-counter] '\Memory\Available MBytes').counterSamples
(→ Windows/PowerShell/command-inventory/noun/counter/get[get-counter] '\Memory\Available KBytes').counterSamples
code }

  With → Windows/dirs/Windows/System32/wbem/WMIC_exe[`WMIC.exe`]:
code {
→ Windows/dirs/Windows/System32/wbem/WMIC_exe/alias/os[wmic os] get FreePhysicalMemory,FreeSpaceInPagingFiles,FreeVirtualMemory,MaxProcessMemorySize,TotalVirtualMemorySize,TotalVisibleMemorySize
code }


  { Typeperf

    With → Windows/dirs/Windows/System32/typeperf_exe[`typeperf.exe`], the amount of available memory (bytes) can be shown like so:
code {
C:\> → Windows/dirs/Windows/System32/typeperf_exe[typeperf] "\memory\Available Bytes" -sc 1 
code }


    Other memory related performance counters can be listed with
code {
→ Windows/dirs/Windows/System32/typeperf_exe[typeperf] -qx memory
code }

  }

}
{ TODO

  → Windows/development/WinAPI[WinAPI] functions `HeapAlloc`, `VirtualAlloc`, `GlobalAlloc`, `LocalAlloc`, `CoTaskMemAlloc`; → development/languages/C-C-plus-plus/C/libc[libc] functions → development/languages/C-C-plus-plus/C/libc/alloc[`malloc`], `free`
  → development/languages/C-C-plus-plus/CPP[C++] operatior `new`.
  -
  Both, `GlobalAlloc` and `LocalAlloc` call `HeapAlloc`.

  In order to share memory across → Windows/development/process[processes], *file mapping* must be used (`CreateFileMapping`, `OpenFileMapping`, `MapViewOfFile`, …)

}
sa:
  → Windows/development/memory/page[Memory page]

  → development/memory[Memory (general development)]

  The amount of memory used can be limited in the → Windows/dirs/Windows/System32/msconfig_exe#msconfig-exe_limit-memory-cpu[advanced options] of the *boot* tab
  of → Windows/dirs/Windows/System32/msconfig_exe[`msconfig.exe`].

  A memory check can be executed by running → Windows/dirs/Windows/System32/MdRes_exe[`MdSched.exe`].
  -
  → Windows/dirs/Windows/System32/MdRes_exe[`MdRes.exe`]


  The value of *Installed Physical Memory (RAM)*, *Available Physical Memory*, *Total Virtual Memory* and
  *Available Virtual Memory* under → Windows/dirs/Windows/System32/System-Summary[System Summary] in
  → Windows/dirs/Windows/System32/msinfo32_exe[`msinfo32.exe`] as well as the `msinfo32.exe` subtree
  → Windows/dirs/Windows/System32/msinfo32_exe/Hardware-Resources/Memory[Hardware-Resources -> Memory].

