$ d*

The `d*` commands display the content of memory. Some sources claim that `d` stands for dump.

code {
dT [Options] [Range] 
code }

{ Displayed type (T)

  The second (and third) letter of the `d` command specifies the type of the value being displayed.
  -
  When this second letter is ommited, the most recent data type is assumed.

  table { ll
    `da`, `du` ☰ → development/Unicode/ASCII and → development/Unicode data (Compare with `ds` and `dS`)
    `db` ☰ byte values and ASCII data
    `dW`, `dc` ☰ Word and double word (=4 bytes) values, with corresponding ASCII data
    `dw`, `dd`, `dq` ☰ Word (=2 bytes), double word and quad word (= 8 bytes) values, without ASCII
    `dD`, `df` ☰ Double, single precision values
    `dp` ☰ pointers (size is dependent on platform)
    `ds`, `dS` ☰ display string *structures*, compare with `da` and `du`
    `dyb` ☰ Binary values and byte values
    `dyd` ☰ Binary values and double-word values

  table }

}
{ Options

  table { ll

    `/cWidth` ☰
    `/p` ☰ Physical address (kernel mode only). `/p[c]`: read cached memory, `/p[uc]`: read uncached memory, `/p[wc]`: read write-combined memory. (Brackets are required)

  table }

}

sa:

  The → Windows/development/Debugging/tools/commands/r[`r`] command displays or modifes → development/languages/assembler/x86/registers[register] values.

  The value of the last `d*` command is stored in the → Windows/development/Debugging/tools/pseudo-registers `$p`

  → Windows/development/Debugging/tools/commands#win-dbg-cmd-memory[Memory related commands]
