
`u` un-assembles machine code.

By default, `u` disassembles 8 instructions.

{ Specify a range

 `u` can be invoked with a range.

  The following command disassembles the first 106 (=0x6a) bytes of an → Windows/development/Portable-Executable/EXE/entry-point[exe's entry point] (which is referred to by the
→ Windows/development/Debugging/tools/pseudo-registers `$exentry`):
code {
u $exentry $exentry+6a
code }

}
{ Specify the number of instructions

  Instead of a range, the (hexadecimal) number of instructions can be specified with the `u` command. The following command disassembles 32 (=0x20) instructions:
code {
u $exentry L20
code }

}
{ uf: disassemble an entire function

`uf` un-assembles an entire function, here the entry point function:
code {
uf $exentry
code }

}

{ ub 

 `ub` disassembles backwards.

  The following command disassembles the 10 instruction that preced the instruction that the instruction pointer points at:
code {
ub $ip L10
code }

}

sa:
  `u` should not be confused with `→ Windows/development/Debugging/tools/commands/tilde[~]u` which unfreezes a thread.

