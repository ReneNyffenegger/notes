
{ Memory related #win-dbg-cmd-memory

  table { ll
    → Windows/development/Debugging/tools/commands/d[`d*`] ☰ Displays the content of memory
    → Windows/development/Debugging/tools/commands/m[`m`] ☰ Move (copy) data
    `fp` ☰ fill *physical* memory
    `c` ☰ compare
    → Windows/development/Debugging/tools/commands/s[`s`] ☰ searches for data in memory
    `!db`, `!dc`, `!dd`, `!dp`, `!du`, `!dw` ☰ read from *physical* address
    `!eb`, `!ed` ☰  write to *physical* address
    `!search` ☰ search in *physical* memory
    `!vtop`, `!pte` ☰ convert a *virtual* address to a *physical* address.
    `.holdmem` ☰
  table }

}
{ Extensions

  Commands that start with an exclamation mark (`!`) are extensions. These are exported from a DLL which users can create to extend the functionality of WinDbg.

   Displaying information about the PEB and the TEB
code {
!peb
!teb
code }

   Compare the previous two commands with:
code {
→ Windows/development/Debugging/tools/commands/d#t[dt] nt!_PEB
dt nt!_PEB -r @$peb
dt nt!_TEB
code }

  ? Apparently, there are quite a few commands that rely on information found in the PEB and TEB: → Windows/development/Debugging/tools/commands/lm[`lm`], `!dlls`, `!imgreloc`, `!tls`, `!gle`

  { Address related

   `!address addr` and `!vprot addr` display memory related information (protection, type, usage…)
code {
!address rdx
!vprot   rdx
code }

  }

}

sa:

  The initial command can be specified with the → Windows/development/Debugging/tools#windows-debugging-tools-command-line-option[`-c` command line option].

  With the → Windows/development/Debugging/tools/scripting/JavaScript[JavaScript scripting extension], it is possible to execute a command like so:
code {
if (…) {
   host.namespace.Debugger.Utility.Control.ExecuteCommand("g");
}
code }
