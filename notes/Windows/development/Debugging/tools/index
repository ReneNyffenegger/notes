$ Debugging Tools for Windows

Microsoft's *Debugging Tools for Windows* include
table { ll
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/cdb_exe[`cdb.exe`] ☰ Console debugger
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/ntsd_exe[`ntsd.exe`] ☰ The *NT symbolic debugger*, which is identical to CDB except that it spawns a new text window when it is started.
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/kd_exe[`kd.exe`] ☰ Kernel debugger
  NTKD ☰ is identical to KD except that it spawns a new text window when it is started.
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/windbg_exe[`windbg.exe`] ☰ The *Windows debugger*, which is the GUI counterpart to CDB/NTSD and to KD and NTKD.
  WinDbg Preview ☰
table }

{ Installation

  These tools are included as part of the
    • → Windows/development/Kits/Driver[WDK] (Windows Driver Kit)
    • → Windows/development/Kits/Software-Development (Windows Development Kit)

  They can also be installed without installing an entiere Kit by selecting the corresponding feature
  from the SDK installer.

  If → Windows/development/Visual-Studio is also installed on a computer, then there are 6 debugging
  environments in total.

  The default installation directory is
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/index

}
{ Command line options #windows-debugging-tools-command-line-option

   Summary of CDB

  table { lll
   ☰ ☰ CDB
   `-log{a|au|o|ou} LogFile` ☰ Log output to a log file ☰ ✓
   `-2` ☰ If target is a console application, it will run in a new console ☰ ✓
   `-d` ☰ Pass control to kernel debugger ☰ ✓
   `-ddefer` ☰  ☰ ✓
   `-g` ☰ Ignore *initial breakpoint* in target application ☰ ✓
   `-G` ☰ Ignore *final breakpoint* in target application. Same effect as command `sxd epr`. ☰ ✓
   `-hd` ☰ Don't use debug heap ☰ ✓
   `-lines` ☰ enable *source line debugging*. See also the → Windows/development/Debugging/tools/commands/dot/lines[`.lines`] and → Windows/development/Debugging/tools/commands/l_[`l…`] commands. ☰ ✓
   `-myob` ☰ continue even if version mismatch with → Windows/dirs/Windows/System32/dbghelp_dll[`dbghelp.dll`] is detected ☰ ✓
   `-bonc` ☰ break into target as soon as session begins ☰ ✓
   `-n` ☰ Load symbols noisily ☰ ✓
   `-o` ☰ Also debug processes that are started by target ☰ ✓
   `-s` ☰ Disables *lazy symbol loading* ☰ ✓
   `-v` ☰ Verbose ☰ ✓
   `-w` ☰ Debug 16-bit applications in a separated VDM. ☰ ✓
   `-cf "filename"` ☰ path to a → Windows/development/Debugging/tools/scripting[script] file. Without `-cf`, `ntds.ini`, if present in current directory, is executed. ☰ ✓
   `-cfr "filename"` ☰ similar to `-cf` but execute script when target is started *or* restarted. ☰ ✓
   `-c "command"` ☰ Specify initial → Windows/development/Debugging/tools/commands[command]. See also the `$<`, `$><`, `$$<`, `$$><` and `$$>a<` commands that execute the content of a → Windows/development/Debugging/tools/scripting[script]. ☰ ✓
   `-wake PID` ☰ ☰ ✓
   `-robp` ☰ ☰ ✓
   `-r lvl` ☰ Only meaningful on checked builds of Windows (which were available until → Windows/versions/10, 1803). Set *break error level*. `0` = NONE, `1` = ERROR, `2` = ERROR + MINORERROR, `3` = WARNING, MINORERROR, and ERROR ERROR + MINORERROR. ☰ ✓
   `-t lvl` ☰ Set error level that causes the debugger to display an error message ☰ ✓
   `-x{e|d|n|i} exception` ☰ set action for given exception (event). `exception` is either a exception number or an event code. ☰ ✓
   `-x` ☰ Disable *first chance break on access violation exceptions*. Same as `-xd av`. ☰ ✓
   `-clines lines` ☰ Set approximate number of commands in command history which can be accessed during remote debugging ☰ ✓
   `-i imagePath` ☰ Location of image that generated the fault. ☰ ✓
   `-iae` ☰ Install CDB as *post mortem* debugger. Can only be used as sole parameter and does not start CDB. ☰ ✓
   `-iaec keyString` ☰ Install CDB as *post mortem* debugger and sets *keyString* to the end of the → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/AeDebug[`HKLM\Software\Microsoft\Windows NT\CurrentVersionAeDebug`] registry key. ☰ ✓
   `-I[S]` ☰ windbg only: specify windbg as *post mortem* debugger ☰ ✗
   `-iu keyString` ☰ ☰ ✓
   `-j` ☰ windbg only(?): allow journaling ☰ ✗
   `-y symbolPath` ☰ Set *symbol search paths*, separated by a semicolon (`;`) ☰ ✓
   `-srcpath path` ☰ Set *source file search paths*, separated with a semicolon (`;`). See also the `_NT_SOURCE_PATH` environment variable and the `.srcpath` command.  ☰ ✓
   `-aExtension` ☰ Set default *extension DLL*, the default-default extension DLL is *userexts*. ☰ ✓
   `-failinc` ☰ ignore questionable symbols ☰ ✓
   `-noio` ☰  ☰ ✓
   `-noinh` ☰ Processes that are created by the debugger won't inherit the debugger's handles. ☰ ✓
   `-noshell` ☰ Prohibits all `.shell` commands ☰ ✓
   `-nosqm` ☰ Disables collection and upload of telemetry data ☰ ✓
   `-sdce` ☰ Display *file access error* dialog boxes during symbol load. ☰ ✓
   `-ses` ☰ Perform a strict evaluation of all → Windows/development/Debugging/symbol-files[symbol files]. ☰ ✓
   `-sicv` ☰ Cause symbol handler to ignore the *CV record*. ☰ ✓
   `-sins` ☰ Turn of C++ translation ☰ ✓
   `-snc` ☰ ☰ ✓
   `-snul` ☰ Disables automatic symbol loading for unqualified names ☰ ✓
   `-zp pageFile` ☰ set name of modified *page file* ☰ ✓
   `-sup` ☰ Let symbol handler search public symbol table during *every* symbol search ☰ ✓
   `-sflags 0xnnn`  ☰ Sets all symbol handler options. ☰ ✓
   `-ee {masm|c++}` ☰ Set default *expression evaluator* ☰ ✓
   `-e Event` ☰ Signal occurence of *Event*, only used when starting debugger programmatically. ☰ ✓
   `--` ☰ Debug → Windows/dirs/Windows/System32/csrss_exe[`csrss.exe`] ☰ ✓
   `-p PID` ☰ Attach to process with given → Windows/development/process/identifer[Process ID (PID)] ☰ ✓
   `-pn name` ☰ Attach to process with given name ☰ ✓
   `-psn service` ☰ Attach to given → Windows/services[service]. ☰ ✓
   `-z dumpFile` ☰ set *crash dump file to debug. ☰ ✓
   `-pb` ☰  ☰ ✓
   `-pd` ☰ ☰ ✓
   `-pe` ☰ ☰ ✓
   `-pr` ☰ start (suspended?) process if attaching to it. ☰ ✓
   `-pt secs` ☰ Break time-out, in seconds ☰ ✓
   `-pv` ☰ Attach non invasively ☰ ✓
   `-pvr` ☰ Like `-pv`, yet without suspending target ☰ ✓
   `-QR Server` ☰  ☰ ✓
   `-cimp` ☰ Start CDB/NTSD with a DbgSrv implicit command line ☰ ✓
   `-isd` ☰ Turn on *CREATE_IGNORE_SYSTEM_DEFAULT* flag for any newly created → Windows/development/process ☰ ✓
   `-kqm` ☰ ☰ ✓
   `-version` ☰ print *version string* ☰ ✓
   `-vf` ☰ Enables default *application verifier* settings ☰ ✓
   `-vf:<opts>` ☰ set given *application verifier* settings ☰ ✓
    `-netsyms:{yes|no}` ☰ (Dis-)allow loading symbols from a network path. ☰ ✓

  table }

}
{ Assembly mode / source line mode

  By default, *cdb* starts in *assembly mode*, *WinDbg* in *source line mode*.

  → Windows/development/Debugging/tools/commands/l_[`l+t`] changes to *source mode*, `l-t` back to assembly mode.

  See also the `-lines` command line option and the → Windows/development/Debugging/tools/commands/dot/lines[`.lines`] command.

}
{ Symbolig Debugger Engine

  All (? or only the non-Visual Studio ones?) of these environments use the same functionality that is provided by
  *Windows Symbolic Debugger Engine*, which is implemented in → Windows/dirs/Windows/System32/dbgeng_dll[`dbgeng.dll`].

}
{ Attaching to a running process

  It is possible to attach to a running process with the command line option `-p` (process id) or `-pn` (process name):
code {
C:\> cdb -pn notepad.exe
C:\> cdb -p 1245
code }

}
{ Scripting the Debugger with JavaScript

  The debugger can be scripted with JavaScript
code {
.load → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/winext/JsProvider_dll
code }

}
{ Additional tools

  The *Debugging Tools for Windows* include a few additional tools which are located under the → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch[installation directory].

  TODO:
  table { ll
    SymProxy ☰  Create a single HTTP symbol server on your network that all your debuggers can point to. This has the benefit of pointing to multiple symbol servers (both internal and external) with a single symbol path, handling all authentication, and increasing performance via symbol caching. Symproxy.dll is in the SymProxy folder in the installation directory.
    SymChk ☰ Compare executable files to symbol files to verify that the correct symbols are available.
  table }

}

{ Differences to Visual Studio Debugging

  *Debugging Tools for Windows* are different from the → Windows/development/Visual-Studio debugger.

}

rem {

  https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/symbols-and-symbol-files

  Visual Studio Debugger Documentation
    https://docs.microsoft.com/en-us/visualstudio/debugger/?view=vs-2019

  Tools:
    https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/extra-tools


rem }

sa:
  Extensions (→ Windows/development/Portable-Executable/DLL[DLLs]) are located under → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/winext.

  → Windows/development/Debugging/tools/scripting[Using scripts] to automate debugging.
