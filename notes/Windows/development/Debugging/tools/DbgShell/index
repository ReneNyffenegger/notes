
DbgShell is a → Windows/PowerShell front end for the *Windows debugger engine* (→ Windows/dirs/Windows/System32/dbgeng_dll[`dbgeng.dll`]).

Clone and compile DbgShell:
code {
PS C:\Users\Rene> → development/version-control-systems/git/commands/clone[git clone] https://github.com/microsoft/DbgShell
PS C:\Users\Rene> cd DbgShell
PS C:\Users\Rene\DbgShell> → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition/MSBuild/Current/Bin/MSBuild_exe[msbuild] .\DbgShell.sln -p:Configuration=Release
code }

Start DbgShell → Windows/development/Portable-Executable/EXE[executable]:
code {
PS C:\Users\Rene\DbgShell> .\bin\Release\x64\DbgShell.exe
code }

Start a → Windows/development/process and attach to it to debug it:
code {
Dbg:/> notepad
Dbg:/> → Windows/PowerShell/command-inventory/noun/process/get[get-process] notepad | connect-process
code }

In order to start the process with the debuger, `Start-DbgProcess` can be used. A dump file can be loaded with `Mount-DbgDumpFile`.

{ Additional providers and drives

  DbgShell comes with an additional → Windows/PowerShell/language/provider: `Debugger`
code {
PS: C:/> → Windows/PowerShell/command-inventory/noun/psProvider/get[get-psProvider] debugger

Name       Capabilities    Drives
----       ------------    ------
Debugger   ShouldProcess   {Dbg, procs}
code }

  The `Dbg:` → Windows/PowerShell/language/provider/drive has one directory, `Process` which seems to contain all currently running processes:
code  {
PS: C:> ls Dbg:\Process
…
code }

  It is unclear what the `procs:` drive contains as `ls procs:` results in an error.

  The file system provider comes with an additional drive: `Bin:`.
code {
PS C:\> get-psprovider fileSystem
Name           Capabilities                          Drives
----           ------------                          ------
FileSystem     Filter, ShouldProcess, Credentials    {C, Bin, D}
code }


}
{ Log files

  Some log files (→ development/filename-extensions#etl[`*.etl`]) are written to
 `→ Windows/dirs/Users/username/AppData/Local/Temp[$env:localAppData\temp]\DbgProvider` (The directory `DbgProvider` below the temp directory).

  Such log files can then later be dumped into a CSV file for analyzing with → Windows/dirs/Windows/System32/tracerpt_exe[`tracerpt.exe`]:
code {
PS:/> → Windows/dirs/Windows/System32/tracerpt_exe[tracerpt] -of CSV C:\Users\Rene\AppData\Local\Temp\DbgProvider\debugTrace_48d8e97fbc9cfa00.etl
code }

}
{ Some interesting functions

  The function `Run` in `DbgShell\ColorconsoleHost.cs` seems to implement the «REPL-loop».

  This loop calls `m_host.m_ui.ReadLineWithTabCompletion( true );` which returns the line that the user entered.

  Commands (such as those destined for the debugging engine) are routed to `RunspaceSettings._OnCommandNotFound(…)` (`DbgProvider\internal\RunspaceSettings.cs`).

 `DbgProvider\Debugger.psm1` defines some → Windows/PowerShell functions (such as `~x`) which are called (initiated?) from `_OnCommandNotFound()`.

}

links:
  → https://github.com/microsoft/DbgShell
  -
  I found the section → https://github.com/microsoft/DbgShell/blob/master/Contributing.md#a-brief-tour-of-the-source[A Brief Tour de Source] in
  → https://github.com/microsoft/DbgShell/blob/master/Contributing.md[`Contributing.md`] very helpful.
