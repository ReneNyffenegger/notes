$ Symbol Files

The extension of symbol files is → development/filename-extensions#pdb[`.pdb`] (at least when produced by the Visual C++ → Windows/development/Visual-Studio/cl[compiler] or linker).

{ Creation of PDB files

  In order to generate PDB files, → Windows/development/Visual-Studio/cl[`cl`] needs to be invoked with either the
  → Windows/development/Visual-Studio/cl/options/Z/i/[`/Zi`] or `/ZI` → Windows/development/Visual-Studio/cl/options[option] and
  the linker with the `/DEBUG` option.

  The PDB is created in the same directory as the created executable or dll.

}
{ Content of a PDB file

  The content of a symbol file is not needed to run an application. It is useful however for → Windows/development/Debugging[debugging] purpos.

  Particularly, a PDB file contains
    • Public symbols (functions, static and global variables)
    • The object files that were used to create the executable, and their respective section
    • Frame pointer optimization (FPO) information
    • Type information (variables, structs …)
    • Source file name and line numbers

  Each piece of information is called a *symbol*, hence the name *symbol files*.

  The format of a symbol files is not documented by Microsft. Yet, it is possible to read the contents of a PDB file
  with the → https://docs.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/debug-interface-access-sdk[Debug Interface Access SDK].

}
{ Symbol server #win-symbol-server

  A *symbol server* allows a debugger to find the correct symbol files without knowing product names, build numbrers or package names.

  Symbol servers are (also?) available with → Microsoft/Azure/products/Artifacts.

}
{ _NT_SYMBOL_PATH #NT_SYMBOL_PATH

  The `_NT_SYMBOL_PATH` → development/environment-variable[environment variable] is used by all → Windows/development/Debugging/tools to find symbol servers and symbol files.

  The format is:
code {
srv*[local cache]*[private symbol server]*https://msdl.microsoft.com/download/symbols
code }

   or less abstract
code {
srv*C:\ProgramData\Dbg*https://msdl.microsoft.com/download/symbols
code }

  With this value, the symbols are downloaded to → Windows/dirs/ProgramData/Dbg[`C:\ProgramData\Dbg`].

  See also the → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/windbg_exe[WinDbg] menu *File -> Symbol File Path*.
  

}
{ Windows Version

  Symbol files must match the → Windows/versions[Windows version] of the Windows installation where they're used.

}
{ Examining symbols

  In → Windows/development/Debugging/tools, symbols can be examined with the `x` (= examine) command.

  On the command line, symbols can be queried from an executable (that has a symbol file) with → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/dbh_exe[`dbh.exe`].

}
{ Misc

  These PDB files have nothing to do with → development/databases/Oracle[Oracle's] plugable databases which are also abbreviated with PDB.
 
}
{ TODO

  Symbol files have fully qualified path references to the source files. If the source files are moved to different location, the `.srcpath` command of WinDbg needs to be used to specify the new location.

  The WinDbg command `.sympath` seems to specify the location for symbol files.

}

sa:
  The `/pdb` and `/pdbstripped` linker option. (Apparently, the `/DEBUG` flag is essential for the linke to produce a PDB file.
  -
  The `Fd` compiler option names the pdb file for object files.

  The *debugging tools*
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/pdbcopy_exe[`pdbcopy`] and
  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/symchk_exe[`symchck`].

  The DIA (Debug Interface Access) SDK, under → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition[%VSINSTALLDIR%\DIA SDK].

  → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition/VC/Tools/MSVC/version/bin[`mspdbcmf.exe`], the FastLink To Full PDB Converter

  → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/srcsrv/srctool_exe[`srctool.exe`] dumps source information from a pdb (or srcsrv stream) file.

  → Windows/dirs/ProgramData/Dbg/sym[`C:\ProgramData\Dbg\sym`]

  Interesting WinDbg commands related to symbol files include
    • → Windows/development/Debugging/tools/commands/lm/vm[`lmvm`] which displays (among others) the used symbol file for a module
    • → Windows/development/Debugging/tools/commands/dot/sympath[`.sympath`] which sets, alters or displays the symbol path
