
The layout of a DLL is almost the same as that of an → Windows/development/Portable-Executable/EXE[EXE]. The difference is that the DLL contains an → Windows/development/Portable-Executable/DLL/export-table. 

When `DllMain` is called, `Kernel32.dll` is guaranteed to be already loaded into the process address space.

{ Calling DLLs from different languages

  → development/languages/VBA/Calling-DLLs[Visual Basic for Applications (VBA)]

  → tools/autohotkey#ahk-call-dll[Autohotkey 2]

}
{ Listing processes that use a given DLL on the command line

code {
→ Windows/dirs/Windows/System32/tasklist_exe[tasklist] /m QuietHours.dll
code }

}
{ Creating a DLL with C-Sharp

  In order to create a DLL with the → development/languages/C-Sharp/compiler[C-Sharp compiler (`csc`)], the
  the → development/languages/C-Sharp/compiler/options[compiler option] `-target` must be set to `library`.

}
{ TODO

  → Windows/dirs/Windows/System32/rundll32_exe[`rundll32.exe`] can be used to call functions in a DLL if the function follows a specific
  → Windows/dirs/Windows/System32/rundll32_exe#rundll32-syntax[syntax].

  Registry: → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows-NT/CurrentVersion/Windows#reg-appinit-dlls[`AppInit_DLLs`] lists DLLs to be loaded (»injected«) into
  programs that are linked with User32.dll.

  → development/filename-extensions#cpl[`.cpl`] files (→ Windows/control-panel[Control Panel]) are just DLLs with a special file name extension and the entry point `CPlApplet`.

}
sa:
  → development/languages/C-Sharp/call-dll

