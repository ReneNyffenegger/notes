$ rundll32.exe

`rundll32.exe` allows to execute functions within a → Windows/development/Portable-Executable/DLL[DLL] from → Windows/dirs/Windows/System32/cmd_exe[cmd.exe].

{ Syntax

  The syntax for using rundll32 is as follows

code {
c:\> rundll32 nameOf.DLL,entryPoint
c:\> rundll32 nameOf.DLL,entryPoint optionalArgument1
c:\> rundll32 nameOf.DLL,entryPoint optionalArgument1 optionalArgument2 
c:\> rundll32 nameOf.DLL,entryPoint optionalArgument1 optionalArgument2 …
code }

  When used that way, it loads `nameOf.DLL` with the → Windows/development/WinAPI function `LoadLibrary()` and
  determines the address of the function `entryPoint` with `GetProcAddress()`.

}
{ EntryPoint

  A (32-bit) function that can be called with `rundll32.exe` must be declared with → development/languages/C-C-plus-plus/calling-convention#stdcall[stdcall] calling convention. Apparently,
  this can be achieved with the `CALLBACK` → development/languages/C-C-plus-plus/preprocessor/macros[macro]:
code {
void CALLBACK EntryPoint (HWND hWnd, HINSTANCE hInst, LPSTR  lpszCmdLine, int nCmdShow); // Windows 95 etc.
void CALLBACK EntryPointW(HWND hWnd, HINSTANCE hInst, LPWSTR lpszCmdLine, int nCmdShow); // Windows NT, 2K XP etc.
code }

  Apparently, under Windows NT and similar, `rundll32.exe` first tries to localte `EntryPointW` (using `LPWSTR`), then `EntryPointA` (using `LPSTR`) and then `EntryPoint` (again using
 `LPSTR`).

}
{ Some useful usages

  { Open mouse control panel #open-mouse-ctrl-panel

code {
c:\> rundll32.exe shell32.dll,Control_RunDLL main.cpl @0
code }

    The mouse settings are apperently stored in the → Windows/registry[registry] under
    → Windows/registry/tree/HKEY_CURRENT_USER/Control-Panel/Mouse[HKEY_CURRENT_USER\Control Panel\Mouse].

  }

}


sa:
  → Windows/development/Portable-Executable/DLL/rundll32_exe/url_bat[`url.bat`] uses `rundll32` to open an
  → development/web/URI-URL-URN-IRI-URC#url[URL] in the default → development/web/browser[browser] (?)
  in → Windows/dirs/Windows/System32/cmd_exe[cmd.exe].
