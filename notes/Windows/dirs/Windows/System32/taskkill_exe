$ taskkill.exe

Terminate → Windows/development/process[processes] from within → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] or → Windows/PowerShell.

{ Specifying the image name

code {
C:\> taskkill /im  foo.exe
code }

}
{ Specify the PID (Process identifier)

  Process identifiers can be found with → Windows/dirs/Windows/System32/tasklist_exe[`tasklist.exe`].

code {
C:\> taskkill /pid 5711
code }

}
{ Using /f to forcefully terminate a process

  When trying to kill a process, the utility might print something like `SUCCESS: Sent termination signal to the process with PID 4128.` *even though*
  the process was not killed.

  Therefore, in order to make sure a process is killed, the `/f` might be used to forcefully terminate a process:
code {
C:\> taskkill /f /pid 5711
code }

}
{ Using a filter on the process name

 `taskkill` has a rudimentary filter function that can be applied with `/fi` which can be
  used to kill a process when I am not exactly sure what the name of the process is.
  -
  For example, if → development/Software/Oracle-SQL-Developer[SQL Developer] hangs, I might use
code {
C:\> taskkill /fi "imagename eq sqldeveloper*"
SUCCESS: Sent termination signal to the process with PID 33220.
code }

  The `/fi` option is also present in → Windows/dirs/Windows/System32/tasklist_exe#tasklist-fi[`tasklist.exe`].

}

sa:

  → Windows/dirs/Windows/System32/tasklist_exe[tasklist.exe],
  → Windows/dirs/Windows/System32/tskill_exe[tskill.exe]

  The → Linux/shell[Linux shell] command → Linux/shell/commands/kill[`kill`].

  → Windows/dirs/Windows/System32/cmd_exe/commands
