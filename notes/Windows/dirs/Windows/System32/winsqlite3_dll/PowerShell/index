$ Using winsqlite3.dll with PowerShell

→ Windows/versions/10 comes with → Windows/dirs/Windows/System32/winsqlite3_dll[`winsqlite3.dll`], a → Windows/development/Portable-Executable/DLL that hosts the interface
of the → development/databases/SQLite C API.

With → Microsoft/dot-net#dot-net-pinvoke, it is possible to access such API from → Windows/PowerShell.

Because I once had to work in a Windows environment where I was not allowed to install *anything* and had no access to a
→ development/databases[database], but needed a database anyway, I was forced to write such an SQLite wrapper so that I could store my → development/Data in a database.

The sources are hosted in → https://github.com/ReneNyffenegger/winsqlite3.dll-PowerShell[this Github repository] and consist of
  • → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/PInvoke_ps1[`PInvoke.ps1`] : the wrappers for SQLite API
  • → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/classes_ps1[`classes.ps1`] : two classes, `sqliteDB` and `sqliteStmt`
  • `kernel32.ps1` : for `GetModuleHandle` and `GetProcAddress`
  • `test/*` : Some → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/test[tests] (such as `test/simple.ps1`) to test and demonstrate the functionality of the previous three files

{ Simple test script

  The following test script tries to demonstrate how the two classes `sqliteDB` and `sqliteStmt` can be used to
    • create an SQLite database
    • create a table
    • insert values into the table with bind variables
    • select some of the values from the able
    • finalize a statement
    • close a database

  gh|winsqlite3.dll-PowerShell|/test/simple.ps1||

}

{ PInvoke.ps1

 `PInvoke.ps1` creates a the .NET class `sqlstmt` that consists of → Microsoft/dot-net#dot-net-clr[P/Invoke] wrappers for the SQLite API.

  These wrappers all look similar to
code {
[DllImport("winsqlite3.dll", EntryPoint="sqlite3_bind_null")]
 public static extern IntPtr bind_null (
        IntPtr    stmt,
        IntPtr    index
 );
code }

  The source code is → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/PInvoke_ps1[here]

}
{ classes.ps1

 `classes.ps1` defines the two PowerShell classes `sqliteDB` and `sqliteStmt`.

  It also defines two helper functions, `charPtrToString` and `strToCharPtr` which were needed because the SQLite API requires strings to be passed on the heap.
 (I am not sure if it was *really* necessary, but I found no other working way than this hack).

  The source code is → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/classes_ps1[here].

}
{ kernel32.ps1

  In order to read the `version` string from the → Windows/development/Portable-Executable/DLL[DLL], I found no other way than to use `GetModuleHandle` and `GetProcAddress` which are
  found in the → Windows/dirs/Windows/System32/kernel32_dll[`kernel32.dll`].

  gh|winsqlite3.dll-PowerShell|/kernel32.ps1||

}
{ TODO

  In certain circumstances, the `sqlite::step()` method raises → Microsoft/dot-net/namespaces-classes/System/AccessViolationException[`System.AccessViolationException`]. The reason is unknown to me. This is a serious bug and must be fixed.

  The value of `$handle` in the `sqliteStmt` class might be set to `0` when its `finalize()` method is called.

 `sqliteStmt` should probably implement → Microsoft/dot-net/namespaces-classes/System/Collections/IEnumerable[`System.Collections.IEnumerable`] so that it is possible to iterate over
  a select statement with a → Windows/PowerShell/language/statement/foreach[`foreach` statement]. 

}
{ Done

  2020-03-22: Implemented `[sqliteDB]::version()`

  2020-03-28: Implemented `sqlite3_column_count()`

  2020-04-02: Added the error message constant `SQLITE_RANGE`

  2020-04-13: Implemented `last_insert_rowid()`

  2020-04-16: Add support for 64-bit integers and doubles (reals)

  2020-04-17: Added support for → Microsoft/dot-net/namespaces-classes/System/Boolean[`System.Boolean`] (`[Bool]`) in the `bind` method of → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/classes_ps1[classes.ps1].
  → Windows/PowerShell/language/variable/automatic/true-false[`$true`] is inserted as the (32-bit) integer `1`, `$false` as `0`. Also added the respective tests in
  → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/test#ps-sqlite-test-datatypes[`datatypes.ps1` test script].

  2020-04-20: Version 0.06: Added better support for → development/Unicode/UTF-8. The respective test case is → Windows/dirs/Windows/System32/winsqlite3_dll/PowerShell/test#ps-sqlite-test-encoding[here].

}
