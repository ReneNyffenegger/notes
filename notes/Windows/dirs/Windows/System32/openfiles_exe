$ openfiles.exe

`openfiles.exe` is a command line tool that *displays the current open files list* (files that were opened by remote users for a file share) or allows to disconnect opened
files and/or folders.

code {
openfiles /query …
openfiles /disconnect …
openfiles /local on|off
code }

{ Display a list of open files

  With `/query`, `openfiles` displays the list of open files.
code {
C:\> openfiles /query /fo table

Files Opened Locally:
---------------------

ID    Process Name         Open File (Path\executable)                       
===== ==================== ==================================================
64    fontdrvhost.exe      C:\Windows\System32
64    fontdrvhost.exe      C:\Windows\System32
64    dwm.exe              C:\Windows\System32
212   dwm.exe              C:\Windows\System32\en-US\dwm.exe.mui
388   dwm.exe              C:\Windows\System32\en-US\d2d1.dll.mui
1556  dwm.exe              C:\Windows\System32\en-US\crypt32.dll.mui
2168  dwm.exe              C:\Windows\System32\en-US\KernelBase.dll.mui
2212  dwm.exe              C:\Windows\System32
…
code }

  Note that the column `ID` does not identify a → Windows/development/process/identifer[process id]?
  -
  In order to get the process id also, the `/v` (verbose) flag must be given:
code {
openfiles /query /fo table /v
Files Opened Locally:
---------------------

ID    Accessed By     PID      Process Name         Open File (Path\executable)                                                     
===== =============== ======== ==================== ================================================================================
64    UMFD-0          1000     fontdrvhost.exe      C:\Windows\System32
64    UMFD-1          1256     fontdrvhost.exe      C:\Windows\System32
64    DWM-1           1328     dwm.exe              C:\Windows\System32
212   DWM-1           1328     dwm.exe              C:\Windows\System32\en-US\dwm.exe.mui
388   DWM-1           1328     dwm.exe              C:\Windows\System32\en-US\d2d1.dll.mui
1556  DWM-1           1328     dwm.exe              C:\Windows\System32\en-US\crypt32.dll.mui
…
code }

}
{ Requirements

  Some requirements to use `openfiles.exe` include
    • Administrator privileges to run this command.
    • The system global flag *maintain objects list* needs to be enabled to see local opened files.
    • …

}
{ Options

  table { ll
   
    `/disconnect` ☰ disconnect one or more open files
    `/query` ☰ displays files opened locally or from shared folders
    `/local` ☰ enables/disables the display of local open files
    `/v` ☰ Verbose (also report *Accessed By* and *PID*)
    `/command /?` ☰  `/command` being one of `/disconnect`, `/query` or `/local`

  table }

}
{ Truncated IDs

  This → https://serverfault.com/q/757347[Serverfault question] and → https://serverfault.com/a/955972[corresponding answer] indicates that
  the value of ID is truncated when using the (default) output `/fo table`, but is correctly returned with `/fo csv` or `/fo list`.

}
{ Enabling system global flag 'maintain objects list' #win-gf-maintain-objects-list

  The system global flag *maintain objects list* must be enabled to use `openfiles /local`.
  -
  This is possible with. Note that it requires rebooting the computer to take effect.
code {
C:\> openfiles /local on
code }

  This flag can also be set with → Windows/dirs/Program-Files-x86/Windows-Kits/n/Debuggers/arch/gflags_exe[`gflags.exe`].

  The (bit-)value of *maintain objects list* is sorted in the → Windows/registry key
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Session-Manager[`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager`],
  value → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Session-Manager#system-global-flag[`GlobalFlags`].

}
{ Example

   Trying to move (rename) a directory in → Windows/PowerShell:
code {
PS C:\Users\rene> mv proj proj.old
move : Access to the path 'C:\Users\Rene\proj\' is denied.
code }

  Become administrator:
code {
PS C:\Users\rene> → Windows/PowerShell/command-inventory/noun/process/start[start-process] $( (→ Windows/PowerShell/command-inventory/noun/process/get[get-process] -pid $pid).path ) -verb runAs
code }

  Be prepared for the following command to take some time until it is finished…
code {
PS C:\Windows\System32> openfiles /query /fo table /v | select-string 'C:\\Users\\rene\\proj'
11376 Rene            60       explorer.exe         C:\Users\Rene\proj\some\sub\directory
13644 Rene            60       explorer.exe         C:\Users\Rene\proj\another\sub\directory
code }

  The third column of the output is the → Windows/development/process/identifer[process id]:
code {
stop-process -id 60
code }

  Alternatively, the blocking process can also be found with the → Windows/dirs/Windows/System32/resmon_exe[Resource Monitor (`resmon.exe`)] (See
  → https://superuser.com/a/643312/16610[this Stackoverflow answer]). It looks like this is a faster alternative to find a blocking process.

}

sa:

  → Windows/PowerShell/examples/Problem-Ejecting-USB-Mass-Storage-Device

  The PowerShell command noun → Windows/PowerShell/command-inventory/noun/smbOpenFile[`smbOpenFile`].

code {
C:\> → Windows/dirs/Windows/System32/net_exe[net] file
code }

  The → Windows/tools/Sysinternals tool → Windows/tools/Sysinternals/handle displays information about open handles for any process in the system 
