$ cmd.exe

{ Starting and quitting cmd.exe

  A way to → Windows/dirs/Windows/System32/cmd_exe/start[start `cmd.exe`] is to press `Win+R` and then type the three letters `cmd`, followed by the `ENTER` key.

  On → Windows/versions/10, it can also be started by pressing `Win+X` followed by `C`. (However, this can be changed in *Settings -> Taskbar*: the option *Replace Command Prompt with Windows → Windows/PowerShell[PowerShell] …* needs to be turned off for this.

  When `cmd.exe` is started *without* `/D`, it first executes the commands that are listed in the → Windows/registry[registry] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`] and
 `HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor` (value of `Autorun`).

  Some cmd.exe settings, such as its size or colors, are stored in the registry under
  → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe[`HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe`]


  { Options #cmd-exe-options

table { ll
 → Windows/dirs/Windows/System32/cmd_exe/options/c_k[`/c` or `/k`] ☰ Execute specified command and *stop* (`/c`) or *continue* (`/k`).
 `/s`              ☰ How string after `/c` or `/k` is treated
 `/q`              ☰ Turn → Windows/dirs/Windows/System32/cmd_exe/commands/echo[`echo`] off.
 `/d`              ☰ disable → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor#reg-cmd-exe-autorun[autorun] commands (found under → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`])
 `/a`  - `/u`      ☰ Output is ANSI - → development/Unicode.
 `/t:bf`           ☰ Set background (`b`) and foreground (`f`) color (for example `/t:4f` is white on red)
 `/f:on`, `/f:off` ☰ Enable or disable → Windows/dirs/Windows/System32/cmd_exe/file-directory-name-completion[file and directory name completion], aka *tab-completion*.
 `/e:on`, `/e:off` ☰ Enable or disable → Windows/dirs/Windows/System32/cmd_exe/command-extension[command extensions]
 `/v:on`, `/v:off` ☰ Enable or disable → Windows/dirs/Windows/System32/cmd_exe/variables/delayed-expansion[delayed environment variable expansion]
table }

  }
  { %CmdCmdLine%

    The new started cmd.exe session stores how it was started in the
    → Windows/dirs/Windows/System32/cmd_exe/variables[variable] → Windows/dirs/Windows/System32/cmd_exe/variables/CmdCmdLine[`%CmdCmdLine%`].

  }
  { Quitting cmd.exe

    The command interpreter can be terminated with the → Windows/dirs/Windows/System32/cmd_exe/commands/exit[`exit`] command.

  }

}
{ Getting some basic help

  Usually, a command can be executed with `/?` to print a short summary of the purpose and options of a command (for example
  → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir /?`]).

  Some basic help about some → Windows/dirs/Windows/System32/cmd_exe/commands[built in commands] (such as → Windows/dirs/Windows/System32/cmd_exe/commands/assoc[`assoc`]) 
  and *a handful* of executables (such as → Windows/dirs/Windows/System32/findstr_exe[`findstr.exe`])
  can be obtained with the → Windows/dirs/Windows/System32/help_exe[`help.exe`] utility.

code {
C:\> help
C:\> help → Windows/dirs/Windows/System32/cmd_exe/commands/assoc[assoc]
C:\> help findstr
code }

}
{ Changing the appearance of cmd.exe

  The color of a cmd.exe session can be adjusted with → Windows/dirs/Windows/System32/cmd_exe/commands/color[`color`].

  The text can be cleared with → Windows/dirs/Windows/System32/cmd_exe/commands/cls[`cls`].

}
{ Starting a program without suffix

  → Windows/development/environment-variables#win-envvar-pathext[`%PATHEXT%`], → Windows/registry/Configuring-Windows-with-registry#assoc_file_types.

}
{ Configuring cmd.exe

  → Windows/registry/Configuring-Windows-with-registry#cmd_exe[Configuring cmd.exe in the registry]

}
{ Environment variables

  The → Windows/development/environment-variables[environment variable] `%ComSpec%` stores the full path (directory plus filename,
  for example → Windows/dirs/Windows/System32/cmd_exe[`C:\Windows\system32\cmd.exe`]).

  → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%`] specifies how the prompt is formatted.

  `%CD%` evaluates to the current working directory.

  See also → Windows/dirs/Windows/System32/cmd_exe/variables[variables]

}
{ History

  → Windows/dirs/Windows/System32/doskey_exe[doskey]: a basic history utility.

  `F7` pops up a window that shows the most recently entered → Windows/dirs/Windows/System32/cmd_exe/commands[commands].

}
{ Windows 10

  With → Windows/versions/10[Windows 10], its possible to use `ctrl-c` and `ctrl-v`.

  Text can be searched with `ctrl-f`. If something was found, the selected region can be extended by pressing the `shift` key and navigating with the arrow keys.
  -
  Note that `ctrl-f` is also the default → Windows/dirs/Windows/System32/cmd_exe/file-directory-name-completion[completion] for file names (if enabled).

  The → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%`] environment variable has now a `$e` to insert an escape character, thus the prompt can be
  colorized with → Linux/shell/ANSI-escape-sequences[ANSI escape sequences].

}
{ Keyboard shortcuts

  { Selecting text linewise

    Text can be selected linewise with `shift` + `up/down`.

  }
  { Mark mode

    With the `ctrl`+`m` → Windows/keyboard-shortcuts[keyboard shortcut], mark mode can be entered.

    In mark mode, one can navigate through the text with the arrow keys and select portions of the text with the `shift` key and then copy/paste it.

    In mark mode, unfortunately, `ctrl+shift+right` does not jump to the end of a word.

    When a selection is started by pressing `ctrl+shift+alt`, the selection is in line wrapping mode.
    -
    If the selection is started by pressing `ctrl+shift`, the selection is in block mode.

  }

}
{ TODO


  The *actual console program* behind cmd.exe is → Windows/dirs/Windows/System32/conhost_exe[`conhost.exe`].

  → https://github.com/adoxa/ansicon[ANSICON] promises ANSI escape sequences for Windows console programs,
  similarly as ANSI.SYS did for MS-DOS.

  Starting the *management console*
code {
C:\> mmc
code }

  Starting the *device manager*:
code {
C:\> devmgmt.msc
C:\> mmc devmgmt.msc
code }

  Opening the *→ Windows/user-account[User Account] Control Settings*:
code {
C:\> UserAccountControlSettings
code }

  The default value for the → Windows/registry[registry] key
  → Windows/registry/tree/HKEY_CLASSES_ROOT/Directory/shell/cmd/command[`HKEY_CLASSES_ROOT\Directory\shell\cmd\command`] seems
  to be `→ Windows/dirs/Windows/System32/cmd_exe[cmd.exe] /s /k pushd "%V"`.

  More msc:
  table { ll

    azman.msc                  ☰ Authorization manager
    certlm.msc                 ☰ Certificates (local computer)
    certmgr.msc                ☰ Certificates (current user
    comexp.msc                 ☰ Component services
    compmgmt.msc               ☰ Computer management
    devmgmt.msc                ☰ Device manager
    DevModeRunAsUserConfig.msc ☰ Start menu and taskbar
    diskmgmt.msc               ☰ Disk management (paritions, drive paths)
    eventvwr.msc               ☰ Event viewer
    fsmgmt.msc                 ☰ Shared folders
    gpedit.msc                 ☰ Local group policy editor
    lusrmgr.msc                ☰ Local users and groups
    perfmon.msc                ☰ Performance monitor
    printmanagement.msc        ☰ 
    rsop.msc                   ☰ Resultant set of policy
    secpol.msc                 ☰ allows to configure the *elevation prompt* (Local Security Policy).
    services.msc               ☰ → Windows/services[Services]
    → Windows/dirs/Windows/System32/taskschd_msc ☰ → Windows/services/installed/Schedule[Task scheduler], compare with → Windows/dirs/Windows/System32/schtasks_exe[`schtasks.exe`]
    tpm.msc                    ☰ Trusted platform module (TPM)
    WF.msc                     ☰ Windows defender firewall
    WmiMgmt.msc                ☰ Windows management instrumentation (WMI)

  table }
  
  { Some programs

  `write`: open *wordpad*. (Compare with `notepad`).

  `calc`: simple calculator

  `psr`: *Problem steps recorder*: capture actions (mouse movements etc.) on the screen for later replay.

  → Windows/dirs/Windows/System32/Taskmgr_exe[`taskmgr.exe`]

  `control`: open → Windows/control-panel[control panel]

  → Windows/dirs/Windows/System32/mstsc_exe[`mstsc`]: open *remote desktop connection* dialog box

  }


}

sa:
  → Windows/dirs/Windows/System32/cmd_exe/commands[Commands]

  → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch-files]

  → Windows/dirs/Windows/System32/cmd_exe/variables[variables]

  → Windows/dirs/Windows/System32/cmd_exe/WinAPI

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`]

  → Windows/dirs/Windows/System32/cmd_exe/tasks/determine-if-32-or-64-bit-Windows[Determine if Windows is running in a 32 or 64 bit environment].

  The appearance and functionality of cmd.exe is controlled by the → Windows/dirs/Windows/System32/conhost_exe[console host].

  Changing the → Windows/registry such that cmd.exe can be opened from the explorer with a → Windows/registry/tree/HKEY_CLASSES_ROOT/Directory/shell#open-cmd-exe-here[context menu] on a
  directory.

  → Windows/dirs/Windows/System32/cmd_exe/line-continuation

  → Windows/dirs/Windows/System32/cmd_exe/parse-command-line[Parsing the command line]

  → Windows/dirs/Windows/System32/rundll32_exe[`rundll32`] allows to execute functions from cmd.exe.

   The complete path of `cmd.exe` (typically `C:\Windows\system32\cmd.exe`) is stored in the
  → Windows/development/environment-variables[environment variable] `ComSpec`.
  -
  Compare with the → tools/autohotkey#ahk-a_comSpec[`a_comSpec`] variable of → tools/autohotkey.
