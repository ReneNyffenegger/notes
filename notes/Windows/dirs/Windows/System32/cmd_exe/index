$ cmd.exe

{ Starting and quitting cmd.exe

  A way to → Windows/dirs/Windows/System32/cmd_exe/start[start `cmd.exe`] is to press `Win+R` and then type the three letters `cmd`, followed by the `ENTER` key.

  On → Windows/versions/10, it can also be started by pressing `Win+X` followed by `C`. (However, this can be changed in *Settings -> Taskbar*: the option *Replace Command Prompt with Windows → Windows/PowerShell[PowerShell] …* needs to be turned off for this.

  When `cmd.exe` is started *without* `/D`, it first executes the commands that are listed in the → Windows/registry[registry] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`] and
 `HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor` (value of `Autorun`).

  Some cmd.exe settings, such as its size or colors, are stored in the registry under
  → Windows/registry/tree/HKEY_CURRENT_USER/console/_SystemRoot_system32_cmd_exe[`HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe`]


  { Options #cmd-exe-options

table { ll
 → Windows/dirs/Windows/System32/cmd_exe/options/c_k[`/c` or `/k`] ☰ Execute specified command and *stop* (`/c`) or *continue* (`/k`).
 `/s`              ☰ How string after `/c` or `/k` is treated
 `/q`              ☰ Turn → Windows/dirs/Windows/System32/cmd_exe/commands/echo[`echo`] off.
 `/d`              ☰ disable → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor#reg-cmd-exe-autorun[autorun] commands (found under → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`])
 `/a`  - `/u`      ☰ Output is ANSI - → development/Unicode.
 `/t:bf`           ☰ Set background (`b`) and foreground (`f`) color (for example `/t:4f` is white on red)
 `/f:on`, `/f:off` ☰ Enable or disable → Windows/dirs/Windows/System32/cmd_exe/file-directory-name-completion[file and directory name completion], aka *tab-completion*.
 `/e:on`, `/e:off` ☰ Enable or disable → Windows/dirs/Windows/System32/cmd_exe/command-extension[command extensions]
 `/v:on`, `/v:off` ☰ Enable or disable → Windows/dirs/Windows/System32/cmd_exe/variables/delayed-expansion[delayed environment variable expansion]
table }

  }
  { %CmdCmdLine%

    The new started cmd.exe session stores how it was started in the
    → Windows/dirs/Windows/System32/cmd_exe/variables[variable] → Windows/dirs/Windows/System32/cmd_exe/variables/CmdCmdLine[`%CmdCmdLine%`].

  }
  { Quitting cmd.exe

    The command interpreter can be terminated with the → Windows/dirs/Windows/System32/cmd_exe/commands/exit[`exit`] command.

  }

}
{ Getting some basic help

  Usually, a command can be executed with `/?` to print a short summary of the purpose and options of a command (for example
  → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir /?`]).

  Some basic help about some → Windows/dirs/Windows/System32/cmd_exe/commands[built in commands] (such as → Windows/dirs/Windows/System32/cmd_exe/commands/assoc[`assoc`]) 
  and *a handful* of executables (such as → Windows/dirs/Windows/System32/findstr_exe[`findstr.exe`])
  can be obtained with the → Windows/dirs/Windows/System32/help_exe[`help.exe`] utility.

code {
C:\> help
C:\> help → Windows/dirs/Windows/System32/cmd_exe/commands/assoc[assoc]
C:\> help findstr
code }

}
{ Executing programs and internal commands

  The two main usages of `cmd.exe` is to start programs (→ Windows/development/Portable-Executable/EXE[executables]) or execute → Windows/dirs/Windows/System32/cmd_exe/commands[built-in (internal) commands].
  -
  The difference between executables and built-in commands is that executables can also be started without `cmd.exe` while the built-in commands require a running `cmd.exe` to inteprete and run them.

  If `cmd.exe` is run *interactively*, `cmd.exe` lets the user enter a line of text. As soon as the user hits enter, `cmd.exe` tries to execute what the user has entered. The first word of the entered
  line is the name of the executable or command to be executed, the remaining words are considered parameters to the command.

  The command or executable might produce text (which it writes to → development/stdin-stdout-stderr[stdout]). If this is the case, `cmd.exe` reads stdout an prints it back in the console.

  For example, → Windows/dirs/Windows/System32/cmd_exe/commands/echo[`echo`] is a built in command that simply prints the passed parameters:
code {
C:\> echo Hello world
code }

  → Windows/dirs/Windows/System32/PING_EXE[`ping.exe`], on the other hand, is an executable. Like built-in commands, executables are identified by their first word. In the following execution of `ping`, the word `localhost` is passed as a paramter to `ping`:
code {
C:\> ping localhost
Pinging pc3.tq84 [::1] with 32 bytes of data:
Reply from ::1: time<1ms
…
code }

  Note: the name of the executable is → Windows/dirs/Windows/System32/PING_EXE[`PING.EXE`], not `ping`. So, why is it that `cmd.exe` still is able to find the «correct» executable?
  -
  Answer: it is possible because `cmd.exe` consults the values of the → Windows/development/environment-variables/PATHEXT[`PATHEXT` environment variable]. It consists of a list of suffixes, separated by semicolons, that are added to the
 (supposed) name of the executable if `cmd.exe` is not able to locate the the executable by the given name at first.

  Another suffix that is present in `PATHEXT` by default is `.msc`. Thus, the *device manager* (whose complete name is → Windows/dirs/Windows/System32/devmgmt_msc[`devmgmt.msc`]) can be opened like so:
code {
C:\> devmgmt
code }

  At this point, it should be noted that `cmd.exe` is able to locate the directories where the `.exe` or `.msc` are located by the value of the environment variable
  → Windows/development/environment-variables/PATH[`PATH`]. This value consists of a set of directories, separated by semicolons. When `cmd.exe` tries to located an executable, it tries to search
  them in these specified directories.

  A convinient way to determine what `cmd.exe` would execute is → Windows/dirs/Windows/System32/where_exe[`where.exe`] (which itself is an executable). For example, if called with the argument `services`, it (typically) responds
  with two files:
code {
C:\> where services
C:\Windows\System32\services.exe
C:\Windows\System32\services.msc
code }

  This is because `PATHEXT` contains both suffixes, `.exe` *and* `.msc`, and reports both. However, if executed on the command line, only the first one that is found will actually be executed.

  If the first word of the entered text is neither a built-in command nor an executable, `cmd.exe` responds like so:
code {
C:\> doesNotExist foo bar
'doesNotExist' is not recognized as an internal or external command,
operable program or batch file.
code }

  { TODO

    → Windows/registry/Configuring-Windows-with-registry#assoc_file_types.

  }

}
{ Changing the appearance of cmd.exe

  The foreground and background color of a cmd.exe session can be set with → Windows/dirs/Windows/System32/cmd_exe/commands/color[`color`].

  The number of columns and rows of the cmd.exe window can be adjusted with → Windows/dirs/Windows/System32/mode_com[`mode.com`]:
code {
C:\> → Windows/dirs/Windows/System32/mode_com[mode] con cols=180 lines=41
code }

  The shown text can be cleared with → Windows/dirs/Windows/System32/cmd_exe/commands/cls[`cls`].

}
{ Configuring cmd.exe

  { Registry

    → Windows/registry/Configuring-Windows-with-registry#cmd_exe[Configuring cmd.exe in the registry]

  }
  { Environment variables #cmd-exe-env-vars

    Some environment variables control the behavior of some commands:
      • `DIRCMD` for → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir`].
      • `COPYCMD` for → Windows/dirs/Windows/System32/cmd_exe/commands/copy[`copy`]
      • → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] environment variable → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%`]

  }

}
{ Environment variables

  The → Windows/development/environment-variables[environment variable] `%ComSpec%` stores the full path (directory plus filename,
  for example → Windows/dirs/Windows/System32/cmd_exe[`C:\Windows\system32\cmd.exe`]).

  → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%`] specifies how the prompt is formatted.

  `%CD%` evaluates to the current working directory.

  See also → Windows/dirs/Windows/System32/cmd_exe/variables[variables]

}
{ History

  → Windows/dirs/Windows/System32/doskey_exe[doskey]: a basic history utility.

  `F7` pops up a window that shows the most recently entered → Windows/dirs/Windows/System32/cmd_exe/commands[commands].

}
{ Windows 10

  With → Windows/versions/10[Windows 10], its possible to use `ctrl-c` and `ctrl-v`.

  Text can be searched with `ctrl-f`. If something was found, the selected region can be extended by pressing the `shift` key and navigating with the arrow keys.
  -
  Note that `ctrl-f` is also the default → Windows/dirs/Windows/System32/cmd_exe/file-directory-name-completion[completion] for file names (if enabled).

  The → Windows/dirs/Windows/System32/cmd_exe/variables/PROMPT[`%PROMPT%`] environment variable has now a `$e` to insert an escape character, thus the prompt can be
  colorized with → Linux/shell/ANSI-escape-sequences[ANSI escape sequences].

}
{ Keyboard shortcuts

  { Selecting text linewise

    Text can be selected linewise with `shift` + `up/down`.

  }
  { Mark mode

    With the `ctrl`+`m` → Windows/keyboard-shortcuts[keyboard shortcut], mark mode can be entered.

    In mark mode, one can navigate through the text with the arrow keys and select portions of the text with the `shift` key and then copy/paste it.

    In mark mode, unfortunately, `ctrl+shift+right` does not jump to the end of a word.

    When a selection is started by pressing `ctrl+shift+alt`, the selection is in line wrapping mode.
    -
    If the selection is started by pressing `ctrl+shift`, the selection is in block mode.

  }

}
{ TODO


  The *actual console program* behind cmd.exe is → Windows/dirs/Windows/System32/conhost_exe[`conhost.exe`].

  → https://github.com/adoxa/ansicon[ANSICON] promises ANSI escape sequences for Windows console programs,
  similarly as ANSI.SYS did for MS-DOS.

  Starting the *management console*
code {
C:\> mmc
code }

  Starting the *device manager*:
code {
C:\> devmgmt.msc
C:\> mmc devmgmt.msc
code }

  Opening the *→ Windows/user-account[User Account] Control Settings*:
code {
C:\> UserAccountControlSettings
code }

  The default value for the → Windows/registry[registry] key
  → Windows/registry/tree/HKEY_CLASSES_ROOT/Directory/shell/cmd/command[`HKEY_CLASSES_ROOT\Directory\shell\cmd\command`] seems
  to be `→ Windows/dirs/Windows/System32/cmd_exe[cmd.exe] /s /k pushd "%V"`.

  More msc:
  table { ll

    azman.msc                  ☰ Authorization manager
    certlm.msc                 ☰ Certificates (local computer)
    certmgr.msc                ☰ Certificates (current user
    comexp.msc                 ☰ Component services
    compmgmt.msc               ☰ Computer management
    devmgmt.msc                ☰ Device manager
    DevModeRunAsUserConfig.msc ☰ Start menu and taskbar
    diskmgmt.msc               ☰ Disk management (paritions, drive paths)
    eventvwr.msc               ☰ Event viewer
    fsmgmt.msc                 ☰ Shared folders
    gpedit.msc                 ☰ Local group policy editor
    lusrmgr.msc                ☰ Local users and groups
    perfmon.msc                ☰ Performance monitor
    printmanagement.msc        ☰ 
    rsop.msc                   ☰ Resultant set of policy
    secpol.msc                 ☰ allows to configure the *elevation prompt* (Local Security Policy).
    services.msc               ☰ → Windows/services[Services]
    → Windows/dirs/Windows/System32/taskschd_msc ☰ → Windows/services/installed/Schedule[Task scheduler], compare with → Windows/dirs/Windows/System32/schtasks_exe[`schtasks.exe`]
    tpm.msc                    ☰ Trusted platform module (TPM)
    WF.msc                     ☰ Windows defender firewall
    WmiMgmt.msc                ☰ Windows management instrumentation (WMI)

  table }

}

sa:
  → Windows/dirs/Windows/System32/cmd_exe/commands[Commands]

  → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch-files]

  → Windows/dirs/Windows/System32/cmd_exe/variables[variables]

  → Windows/dirs/Windows/System32/cmd_exe/WinAPI

  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Command-Processor[`HKEY_CURRENT_USER\Software\Microsoft\Command Processor`]

  → Windows/dirs/Windows/System32/cmd_exe/tasks/determine-if-32-or-64-bit-Windows[Determine if Windows is running in a 32 or 64 bit environment].

  The appearance and functionality of cmd.exe is controlled by the → Windows/dirs/Windows/System32/conhost_exe[console host].

  Changing the → Windows/registry such that cmd.exe can be opened from the explorer with a → Windows/registry/tree/HKEY_CLASSES_ROOT/Directory/shell#open-cmd-exe-here[context menu] on a
  directory.

  → Windows/dirs/Windows/System32/cmd_exe/line-continuation

  → Windows/dirs/Windows/System32/cmd_exe/parse-command-line[Parsing the command line]

  → Windows/dirs/Windows/System32/rundll32_exe[`rundll32`] allows to execute functions from cmd.exe.

   The complete path of `cmd.exe` (typically `C:\Windows\system32\cmd.exe`) is stored in the
  → Windows/development/environment-variables[environment variable] `ComSpec`.
  -
  Compare with the → tools/autohotkey#ahk-a_comSpec[`a_comSpec`] variable of → tools/autohotkey.
