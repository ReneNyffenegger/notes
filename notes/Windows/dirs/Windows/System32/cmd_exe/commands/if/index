$ cmd.exe: if

`if` can be used to conditionally execute parts in a → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch file].

{ Simplest form

  In it's simplest form, the `if` keyword is followed by a comparison (or condition) and a command. The command is executed if the comparision is true.

  In the following example, the `if` statement is prefixed with an at sign (`@`) in order to prevent the batch file interpreter from echoing the entire if statement when executed.
  
  gh|about-cmd.exe|/commands/if/if_.bat||

}
{ if … else

  An `else` part can be added by
    • Enclosing the commnd to be executed if the condition is true into parentheses
    • Adding the `else` keyword on the same line

  gh|about-cmd.exe|/commands/if/if_else.bat||

}
{ Using parentheses

  Using parentheses also allow to add more than one command to be executed to the true or false part of
  an `if` statement. I generally find they make it easier to read `if` statements:
  gh|about-cmd.exe|/commands/if/else.bat||

}
{ if … else if  … else

  Multiple `if` … `else if` … `else` statements can be chained:

  gh|about-cmd.exe|/commands/if/else-if.bat||

}

{ Verifiying that an argument was passed to a batch file

  The previous examples assumed that the → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch files] were invoked with at least one → Windows/dirs/Windows/System32/cmd_exe/batch-files/arguments[argument].
  It generally is good practice to verify such an assumption in a batch file:
  gh|about-cmd.exe|/commands/if/neq_check-empty-variable.bat||

  Such a verification can also be achieved with `if defined`:
  gh|about-cmd.exe|/commands/if/neq_check-empty-variable_2.bat||

  See also → Windows/dirs/Windows/System32/cmd_exe/variables#cmd-exe-check-if-variable-is-defined[check if a variable is defined]

}
{ Check if a file exists

 `if` followed by the keyword `exist` (not `exists`) checks if a file exists. `if exist` can also be used on wildcards (such as `*.txt`):
  gh|about-cmd.exe|/commands/if/exist.bat||

  It is also possible to check if a file *does not* exist with `if not exist…`.

}
{ Comparison operators

  There are seven comparison operators:
  table { ll

    `equ` ☰ equal
    `neq` ☰ not equal
    `lss` ☰ less than
    `leq` ☰ less than or equal
    `gtr` ☰ greater than
    `geq` ☰ greater than or equal
    `==`  ☰ equal (always compares alphabetically?)

  table }

  If both compared values are integers (positive or negative), they're compared numerically, otherwise, they're comparred alphabetically. This is demonstrated with the following
  batch file:
  gh|about-cmd.exe|/commands/if/comparison-operators.bat||

  The batch file prints
code {
99  != 100
99 != 100
99 < 100
99 <= 100
99 > 100.1
-30 > -50
"99"  != "100"
"99" != "100"
"99" >= "100"
foo >= bar
code }

}
{ Case insensitive comparison

  `if /i …` compares strnigs case insensitively:
  gh|about-cmd.exe|/commands/if/case-insensitive.bat||

   The script prints
code {
foo != FOO
foo = FOO
code }  

}

sa:

 `if` is affected by whether → Windows/dirs/Windows/System32/cmd_exe/command-extension[command extensions] are enabled or disabled.

  → Windows/dirs/Windows/System32/cmd_exe/commands/if/lss_iterate[Iterating over a series of numbers]

