$ cmd.exe - mklink
@ mklink

{ Create symbolic links

  By default, `mklink` creates → Windows/file-system/NTFS#ntfs-links[symbolic links in NTFS].

 *administrator privileges* are required to create a symbolic link unless Windows is put into → Windows/development/developer-mode[developer mode].

  The following example uses → Windows/dirs/Windows/System32/cmd_exe/commands/echo[`echo`] and the redirection operator (`>`) to create a file (`target.txt`) whose content is *Some Text*. Then, a symbolic link
  is created with `mklink`. Using → Windows/dirs/Windows/System32/cmd_exe/commands/type[`type`] on `sym.link` shows the same content as is in `target.txt`:
  gh|about-cmd.exe|/commands/mklink/create-symbolic-link.bat||

}
{ Create hard links


  A hard link can be created with the `/h` flag:
code {
mklink /h path\to\new-link path\to\existing-file
code }

  Hard links can only be created for files, not for directories.

  No administrator privileges are required to create a hard link.

}
{ Create a junction

  A junction is created with the `/j` flag:
code {
mklink /j new\path old\path
code }

  No administrator privileges are required to create a junction.

  In → Windows/PowerShell, a junction can be created with `→ Windows/PowerShell/command-inventory/noun/item/new` and `-itemType junction`:
code {
new-item -itemType junction -path lnk -target existing-dir
code }
  
}

sa:

  → Windows/file-system/reparse-point[Reparse points]

  → Windows/dirs/Windows/System32/cmd_exe/commands
