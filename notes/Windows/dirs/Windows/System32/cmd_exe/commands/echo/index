$ cmd.exe: the echo command
@ echo

{ Four basic usages of echo

 `echo` has four basic usages:
   • `echo some text` to print `some text` to the console
   • `echo off` to turn off command echoing, compare with the `/q` → Windows/dirs/Windows/System32/cmd_exe#cmd-exe-options[options].
   • `echo on` to turn on command echoing
   • `echo` to show if command echoing is turned off or on

}
{ Printing empty lines

 `echo` prints an empty line if the command is followed by a colon:
  gh|about-cmd.exe|/commands/echo/empty-line.bat||

  As per some answers and comments in → https://stackoverflow.com/questions/132799[this stackoverflow thread], the only (?) safe way is to use `echo(`.
  -
  With `echo(`, it's also possible to print *indented text*:
code {
@echo(     1
@echo(    1 1
@echo(   1 2 1
@echo(  1 3 3 1
@echo( 1 4 6 4 1
code }

}
{ Suppress trailing new line #cmd-exe-no-newlines

  The → Linux/shell/bash/built-in/echo[bash built-in `echo` command] has the → Linux/shell/bash/built-in/echo#bash-echo-no-newlines[`-n`] options which suppresses → development/line-break[new lines].
  Unfortunately (but not so surprisingly), → Windows/dirs/Windows/System32/cmd_exe[cmd.exe's] version of `echo` does not have such an option.
  However, the new line of `echo` can be piped into → Windows/dirs/Windows/System32/cmd_exe/commands/set/p[`set /p`] to write text without trailing new lines:

  gh|about-cmd.exe|/commands/echo/suppress-new-line.bat||

  This «trick» is also used in the → development/tools/scripts/personal/pc_bat[`pc.bat` batch file] which writes the current working directory into the → Windows/clipboard[clipboard].

}

sa:
  → Windows/dirs/Windows/System32/cmd_exe/commands[Other cmd.exe commands]
