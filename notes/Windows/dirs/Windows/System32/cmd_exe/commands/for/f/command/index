$ cmd.exe: for /f %%X in ('command') do command

In a → Windows/dirs/Windows/System32/cmd_exe/commands/for/f[`for /f`] loop, a command that can be executed can be put within single quotes. In such a case, the `for /f` loop iterates over the lines produced by the quoted command.

{ Basic behaviour

  The following simple and not very useful example iterates over the lines that are produced by → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir`] and → Windows/dirs/Windows/System32/cmd_exe/commands/echo[echos] each line's first word:
  gh|about-cmd.exe|/commands/for/f/command/dir.bat||

}
{ Filtering the output of a command

  It might be more useful if the output is filtered with → Windows/dirs/Windows/System32/find_exe[`find`] and then the fourth
  → Windows/dirs/Windows/System32/cmd_exe/commands/for/f/tokens[token] (that is the directory name) is echoed.

  Note that special characters such as the pipe or ampersand need to be escaped with the caret:

  gh|about-cmd.exe|/commands/for/f/command/dir-find.bat||

  This example, of course, is for demonstration purposes only, the canonical way to display directories is
  → Windows/dirs/Windows/System32/cmd_exe/commands/dir[`dir /od`]

}
{ usebackq #cmd-for-f-usebackq

  With the special option `usebackq`, the command is not placed within single quotes but rather within backquotes:
  gh|about-cmd.exe|/commands/for/f/command/dir-find-usebackq.bat||


}
