$ cmd.exe - for
@ for

`for` is affected by whether → Windows/dirs/Windows/System32/cmd_exe/command-extension[command extensions] are enabled or disabled.

{ Iterating over items

  The `for %%a in (itemOne itemTwo itemThree) do …` construct allows to iterate over the items within the parantheses. For each item, the text of the item is assigned to
  the single letter (!) → Windows/dirs/Windows/System32/cmd_exe/variables[variable] after the `for` and then the statement after the `do` executed.

  If multiple statements are to be executed, they need to be enclosed within parantheses.

  The following example has two loops where the two variables `%%a` and `%%b` are iterated from `0` to `f`. Then, these variables are used to
  → Windows/dirs/Windows/System32/cmd_exe/commands/color[set the console's color]. After the console's colors were changed, → Windows/dirs/Windows/System32/timeout_exe[`timeout.exe`] is invoked
  to sleep for a second.

  Finally, when all 256 color combinations were iterated over, the whole process starts again (using the → Windows/dirs/Windows/System32/cmd_exe/commands/goto[`goto`] statement.

  gh|about-cmd.exe|/commands/for/iterateColors.bat||

}

{ Number of percent signs in a batch file and in the command line

  If the `for` command is used in a → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch file], the looping-variable needs to percent signs (for example `%%X`)
  On the other hand, if the `for` command is directly entered into the → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] prompt, only one percent sign is needed (for example `%X`).
  

}

sa:

  → Windows/dirs/Windows/System32/cmd_exe/commands/for/f[`for /f`]

  → Windows/dirs/Windows/System32/cmd_exe/commands/for/l[`for /l`]

  → Windows/dirs/Windows/System32/cmd_exe/commands
