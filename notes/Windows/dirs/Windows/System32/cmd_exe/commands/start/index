$ cmd.exe - start
@ start

Run another program or command from → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`].

{ Starting another cmd.exe

  `start` can be used to start another instance of `cmd.exe`:

code {
start cmd
code }

  When another `cmd.exe` is started it can be passed a command to be executed with the → Windows/dirs/Windows/System32/cmd_exe/options/c_k[`/c` or `/k`] option.
  -
  Usually, the `/k` is preferrable because the result of the command will be still visible after the command is run. (`/c` terminates the newly started cmd.exe → Windows/development/process[process].

code {
start cmd.exe date /t
code }


}
{ Starting applications that are not in PATH

  Applications that are «registered» under the → Windows/registry[registry] key
 `→ Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/App-Paths` are
  found even though their executable is not found via the
  → Windows/development/environment-variables/PATH[`%PATH%`] environment variable.

  It seems to me that this is possible because `start` uses → Windows/development/WinAPI/Shell#winapi-ShellExecuteEx[the WinAPI/Shell function `ShellExecuteEx()`] behind the scenes.

}
{ Starting executables whose path contains spaces

  Using `start` to run an executable whose path contains spaces, the path needs to be enclosed in quotes.
  
  However, if the start command encounters quotes, it interprets them as a title. Thus, a (possibly) empty title needs
  to be given in order to start the following executable:

code {
start "" "C:\Program Files\Microsoft Office\root\Office16\OUTLOOK.EXE"
code }

}
{ Using PATHEXT

 `start` uses the environment variable → Windows/development/environment-variables/PATHEXT[`PATHEXT`] to determine the suffix of an executable of script
  if it was started without suffix.

}
{ Quickly opening folders below a directory in %PATH%

  Directories immediately below a directory in `%PATH%` can be opened in explorer by typing `start` plus the name of the directory. For example, to open the → Windows/dirs/Windows/Fonts[`Fonts`] folder (which is usually below
→ Windows/dirs/Windows[`C:\Windows`], the following command might do:
code {
C:\> start fonts
code }

  In order to open the explorer and display the *current directory*, the dot can be used:
code {
C:\users\rene> start .
code }

   For completness' sake, in → Windows/PowerShell, a directory (such as `.`) can be opened in the explorer with the → Windows/PowerShell/command-inventory/noun/item/invoke[`invoke-item`] (for which `ii` is
   an → Windows/PowerShell/language/alias[alias]:
code {
PS C:\users\rene> ii .
code }

}
{ Opening settings

  The `start` command allows to open → Windows/settings[Windows settings] from the command line like so:
code {
C:\> start ms-settings:
C:\> start ms-settings:dateandtime
… etc. …
code }

}
{ shell:::{GUID} #cmd-shell-GUID

  A special syntax allows to open(?) a → development/UUID-GUID[GUID]. For example, the following opens something that is related to printers:
code {
start shell:::{2227A280-3AEA-1069-A2DE-08002B30309D}
code }

  Apparently, using `start shell:::{GUID}` is a shorthand for starting the → Windows/dirs/Windows/explorer_exe[executable of explorer] with that argument:
code {
→ Windows/dirs/Windows/explorer_exe[explorer.exe] shell:::{679F85CB-0220-4080-B29B-5540CC05AAB6}
code }

}

sa:

 `start` is affected by whether → Windows/dirs/Windows/System32/cmd_exe/command-extension[command extensions] are enabled or disabled.

  In order to execute a → Windows/dirs/Windows/System32/cmd_exe/batch-files[batch file] and wait for it to complete, The → Windows/dirs/Windows/System32/cmd_exe/commands/call[`call` command] can be used.

  → Windows/dirs/Windows/System32/cmd_exe/commands


