$ cmd.exe: batch files
@ batch file

{ Comments

  Lines in a batch file can be commented with → Windows/dirs/Windows/System32/cmd_exe/commands/rem[`rem`].
code {
rem this is a comment
code }

}
{ Exiting batch files #exit-batch-file

  If → Windows/dirs/Windows/System32/cmd_exe/commands/exit[`exit`] is used to terminate a batch file, the `/b` option must be specified in order not to terminate the
  → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] session as well.

  gh|about-cmd.exe|/batch-files/exit.bat||  

  A batch file can «return» an integer value to a caller with `exit /b N`. The caller can
  → Windows/dirs/Windows/System32/cmd_exe/commands/exit#cmd-exe_exit_pass-value-to-caller[query the returned value with `%errorlevel%`].

}
{ Good practices for batch files

  { set echo off

    I like to start a batch file with
code {
@echo off
code }

    The `→ Windows/dirs/Windows/System32/cmd_exe/commands/echo[echo] off` prevents the script file from echoing every command it encounters.

    The att sign prevents the echoing of the following command, that is echoing `echo off`.


  }
  { setlocal enableextension

    It's a good practice to have a `→ Windows/dirs/Windows/System32/cmd_exe/commands/setlocal[setlocal] enableextensions` somewhere at the top of a batch file.

   `setlocal` prevents the script from clobbering already existing → Windows/dirs/Windows/System32/cmd_exe/variables[variables] or polluting the environment with new → Windows/dirs/Windows/System32/cmd_exe/variables[variables].

   `enableextensions` turns on *command processor extensions* which usually are a good thing.

  }

}
{ Batch argument/parameter variable expansion #cmd-exe-batch-file-variable-expansion

  In a batch file, the numbered variables `%1` through `%9` store the values of the arguments (or parameters) with which the batch file was called.
  -
 `%0` stores the (relative) path and name of the batch file itself.

  With *variable expansion*, the values of these numbered variables can be subsituted for related values:

  Applying `~n` and `~x` gets the filename (with suffix) of the batch file:
  gh|about-cmd.exe|/variables/expansion/name-of-bat-file.bat||

  Similarly, the (absolute) directory can be found by applying `~dp` on a variable:
  gh|about-cmd.exe|/variables/expansion/current-directory.bat||

  Table of modifiers
  table { ll
    `%~1`       ☰ Remove quotes
    `%~f1`      ☰ Full (absolute) path (of possibly relative path)
    `%~d1`      ☰ Drive letter
    `%~p1`      ☰ Path (without drive or file)
    `%~n1`      ☰ File name
    `%~x1`      ☰ → development/filename-extensions[Extension] of file name
    `%~s1`      ☰ Like `%~f1` but with *short names*
    `%~a1`      ☰ File attributes
    `%~t1`      ☰ Date and time of file
    `%~z1`      ☰ Size of file
    `%~$PATH:1` ☰ First directory in `%PATH%` where `%1` is found

  table }

  With such modifiers, the *working directory* of a batch file can be set to the directory where the batch file is located so that the batch file can be executed from any location:
  gh|about-cmd.exe|/batch-files/run-in-own-dir.bat||  


  See also → Windows/dirs/Windows/System32/cmd_exe/variables/tilde[the tilde in variable names].

}
{ Name of bat file

  These variable expansion technique allows to assign the name of a script (without `.bat` suffix) to a variable which then can be used, for example, for debugging messages:
  gh|about-cmd.exe|/batch-files/script-name.bat||  

}
{ Pausing for a while

  Sometimes, it's necessary to pause execution of the script for a few seconds (or longer). → Windows/dirs/Windows/System32/timeout_exe[`timeout.exe`] is explicitly created for that.

  The following line pauses for 5 seconds:
code {
timeout /t 5 > nul
code }

}
{ Getting input from a user

  → Windows/dirs/Windows/System32/choice_exe[`choice.exe`] presents the user of script with a list of items from which the user can choose from.

}

sa:

  → Windows/dirs/Windows/System32/cmd_exe/batch-files/arguments[batch file arguments (stored in `%1`, `%2` etc.)] and → Windows/dirs/Windows/System32/cmd_exe/parse-command-line/bat[passing arguments to a batch file]

  → Windows/dirs/Windows/System32/WindowsPowerShell/vn_m/powershell_exe#powershell-script-in-bat-file[Execute a PowerShell script in a cmd.exe batch file]
