$ tar.exe

`tar.exe` is the *bsdtar → development/archive-files[archive] tool*.
With → Windows/versions/10 (build 17063), it comes preinstalled under → Windows/dirs/Windows/System32[`C:\Windows\System32`].


{ Commands

  When `tar.exe` is invoked, one of five commands (aka *mode specifiers*) must be specified with:
    • `-c` to create an → development/archive-files[archive].
    • `-r` to add a file to an archive or replace a file in an archive.
    • `-t` to display the contents of an archive file
    • `-u` to update an archive (Similar to `-r`, but only replaces files that are newer than those in the archive)
    • `-x` to extract files from an archive

}
{ The -f flag

  By default, without specifying a file with `-f`, `tar.exe` tries to operate on a file (device?) named `\\.\tape0`. Of course, on most (if not virtually all) Windows systems, such a file does not exist and
 `tar.exe` errors out with *tar.exe: Error opening archive: Failed to open '\\.\tape0'*.

  Therefore, it is necessary to specify the → development/archive-files[archive file] with the `-f` option.

  The `-f` can be *appended* to the mode specifier. The following two commands are equivalent:
code {
C:\path\to\directory> tar -t -f some.zip
C:\path\to\directory> tar -tf   some.zip
code }


}
{ Creating an archive

  A simple tar archive is produced with the `-c` and `-f` flags.
code {
C:\path\to\directory> tar -c -f someArchive.tar src
code }

  For convenience, the `-c` and `-f` can used without hyphen in one word like so:
code {
C:\path\to\directory> tar cf someArchive.tar src
code }

  It's possible to create a *gzip* archive by also specifying the `z` flag:
code {
C:\path\to\directory> tar czf someArchive.gzip src
code }

  Although `tar.exe` can read and extract from a development/archive-files/zip, I was unable to create a zip file.

}
{ Listing the contents of an archive file

  The contents of an archive file can be displayed with the `-t` command:
code {
C:\path\to\directory> tar -tf some.zip
code }

}
{ Extracting (untarring) a file

  In order to extract the contents of a file, the options `-x` and `-f` need to be given. `-f` specifies the filename of the tar file. `-x` tells `tar.exe` to extract all files.

code {
C:\path\to\directory> tar -xf someFile.tgz
code }

  { Keep existing files

?   In order to make sure that existing files are not overwritten when files are extracted from an archive, the `-k` flag does that.

  }

}
{ Only extracting patterns

  In the extract command, the patterns of the files to be extracted can be specified:
code {
C:\path\to\directory> tar -xf someFile.tgz foo*.exe bar*.dll
code }

}
{ Specify the extract-destination directory

  By default, `tar.exe` extracts the directory tree structure of an → development/archive-files[archive] relative to the current directory.
  The `-C` option allows to specify an alternative destination:
code {
C:\path\to\directory> tar -xf someFile.tgz -C %TEMP%
code }

  If the `-C` option is combined with file names to be extracted, the file names need to be placed *after* the `-C` option:
code {
C:\path\to\directory> tar -xf someFile.tgz -C %TEMP% readme.txt source. …
code }

}

sa:
  Linux shell: → Linux/shell/commands/tar[tar]

  → Windows/dirs/Windows/System32/archiveint_dll

  → https://devblogs.microsoft.com/commandline/tar-and-curl-come-to-windows/[Tar and Curl Come to Windows!]
