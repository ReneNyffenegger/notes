$ fsutil.exe

`fsutil.exe` is used to administer → Windows/file-system[FAT and NTFS file systems].


{ Commands and subcommands

  { 8dot3name

    8.3 name management

    table { ll

      `query` ☰   Query the current setting for the shortname behaviour on the system
      `scan` ☰    Scan for impacted registry entries
      `set` ☰     Change the setting that controls the shortname behavior on the system
      `strip` ☰   Remove the shortnames for all files within a directory

    table }


  }
  { behavior     

     Control file system behavior

     table { ll
    `query` ☰          Query the file system behavior parameters
    `set` ☰            Change the file system behavior parameters
     table }


  }
  { dax

    Direct Access (DAX) volume management

    table { ll
     `queryFileAlignment` ☰       Query file alignment on dax volume
    table }


  }
  { dirty

    Manage volume dirty bit

    table { ll
     `query` ☰          Query the dirty bit
     `set` ☰            Set the dirty bit
    table }


  }
  { file

    File specific commands

    table { ll
     `→ Windows/dirs/Windows/System32/fsutil_exe/file#fsutil-file-createNew` ☰ Creates a new file of a specified size. Compare with Linux shell command `→ Linux/shell/commands/touch`.
     `findBySID` ☰               Find a file by security identifier
     `layout` ☰                  Query all the information available about the file
     `optimizeMetadata` ☰        Optimize metadata for a file
     `queryAllocRanges` ☰        Query the allocated ranges for a file
     `queryCaseSensitiveInfo` ☰  Query the case sensitive information for a directory
     `queryEA` ☰                 Query the extended attributes (EA) information for a file
     `queryExtents` ☰            Query the extents for a file
     `queryExtentsAndRefCounts` ☰Query the extents and their corresponding refcounts for a file
     `queryFileID` ☰             Queries the file ID of the specified file
     `queryFileNameById` ☰       Displays a random link name for the file ID
     `queryOptimizeMetadata` ☰   Query the optimize metadata state for a file
     `queryValidData` ☰          Queries the valid data length for a file
     `setCaseSensitiveInfo` ☰    Set the case sensitive information for a directory
     `setShortName` ☰            Set the short name for a file
     `setValidData` ☰            Set the valid data length for a file
     `setZeroData` ☰             Set the zero data for a file
     `setEOF` ☰                  Sets the end of file for an existing file
     `setStrictlySequential` ☰   Sets ReFS SMR file as strictly sequential
    table }

  }
  { fsInfo

    File system information


    table { ll
     `drives` ☰         List all drives
     `driveType` ☰      Query drive type for a drive
     `ntfsInfo` ☰       Query NTFS specific volume information
     `refsInfo` ☰       Query REFS specific volume information
     `sectorInfo` ☰     Query sector information
     `statistics` ☰     Query file system statistics
     `volumeInfo` ☰     Query volume information
    table }

  }
  { hardlink

    Manage so called «hard links». Note, only files can be hard linked. Trying to hard link a directory throws
   *Access is denied*.

    table { ll
     `create` ☰ Create a hardlink (for example `fsutil hardlink create new.txt existing.txt`)
     `list` ☰ Enumerate hardlinks on a file (`fsutil hardlink list new.txt` or `fsutil hardlink list existing.txt`)
    table }

    Compare with `reparsepoint` subcommand. 

  }
  { objectID

    Object ID management

    table { ll
     `create` ☰         Create the object identifier
     `delete` ☰         Delete the object identifier
     `query` ☰          Query the object identifier
     `set` ☰            Change the object identifier
    table }


  }
  { quota

    Quota management

    table { ll
     `disable` ☰        Disable quota tracking and enforcement
     `enforce` ☰        Enable quota enforcement
     `modify` ☰         Set disk quota for a user
     `query` ☰          Query disk quotas
     `track` ☰          Enable quota tracking
     `violations` ☰     Display quota violations
    table }

  }
  { repair

    Self healing management

    table { ll
     `enumerate` ☰     Enumerate the entries of a volume's corruption log
     `initiate` ☰      Initiate the repair of a file
     `query` ☰         Query the self healing state of the volume
     `set` ☰           Set the self healing state of the volume
     `state` ☰         Query the corruption state of the volume(s)
     `wait` ☰          Wait for repair(s) to complete
    table }


  }
  { reparsePoint #fsutil-reparsePoint

    Management of → Windows/file-system/reparse-point[reparse points]. Compare with `hardlink` subcommand.

    table { ll
     `delete` ☰         Delete a reparse point
     `query` ☰          Query a reparse point
    table }


  }
  { storageReserve

    Storage Reserve management

    table { ll
     `query` ☰         Query storage reserve area(s) of a volume
     `repair` ☰        Repair storage reserve area(s) of a volume
     `findByID` ☰      Find files by storage reserve ID
    table }

  }
  { resource

    Transactional Resource Manager management

    table { ll
     `create` ☰         Create a Secondary Transactional Resource Manager
     `info` ☰           Display information relating to a Transactional Resource Manager
     `setAutoReset` ☰   Set whether a default Transactional Resource Manager will clean its transactional metadata on next mount
     `setAvailable` ☰   Set a Transactional Resource Manager to prefer availability over consistency
     `setConsistent` ☰  Set a Transactional Resource Manager to prefer consistency over availability
     `setLog` ☰         Change characteristics of a running Transactional Resource Manager
     `start` ☰          Start a Transactional Resource Manager
     `stop` ☰           Stop a Transactional Resource Manager
    table }

  }
  { sparse

    table { ll
     `queryFlag` ☰      Query sparse
     `queryRange` ☰     Query range
     `setFlag` ☰        Set sparse
     `setRange` ☰       Set sparse range
    table }

  }
  { tiering

    Storage tiering property management

    table { ll
     `clearFlags` ☰     Disable tiering behavior flags of a volume
     `queryFlags` ☰     Display the tiering behavior flags of a volume
     `regionList` ☰     List the regions of a volume and their respective storage tiers
     `setFlags` ☰       Enable tiering behavior flags of a volume
     `tierList` ☰       List the storage tiers associated with a volume
    table }

  }
  { transaction

    Transaction management

    table { ll
     `commit` ☰         Commit a specified transaction
     `fileinfo` ☰       Display transaction information for a specific file
     `list` ☰           Display currently running transactions
     `query` ☰          Display information on a specified transaction
     `rollback` ☰       Rollback a specified transaction
    table }

  }
  { usn

    Manage *Update Sequence Numbers* (USN) journals (`$Extend\$UsnJrnl`).

    table { ll
     `createJournal` ☰          Create a USN journal
     `deleteJournal` ☰          Delete a USN journal
     `enableRangeTracking` ☰    Enable write range tracking for a volume
     `enumData` ☰               Enumerate USN data
     `queryJournal` ☰           Query the USN data for a volume
     `readJournal` ☰            Reads the USN records in the USN journal
     `readData` ☰               Read the USN data for a file
    table }

  }
  { volume

    Volume management

    table { ll
     `allocationReport` ☰     Allocated clusters report
     `diskFree` ☰             Query the free space of a volume
     `dismount` ☰             Dismount a volume
     `fileLayout` ☰           Query all the information available about the file(s)
     `flush` ☰                Flush a volume
     `list` ☰                 List volumes
     `queryCluster` ☰         Query which file is using a particular cluster
     `queryLabel` ☰           Query the label for a volume
     `queryNumaInfo` ☰        Queries the NUMA node for the given volume
     `setLabel` ☰             Set the label for a volume
     `smrGC` ☰                Control SMR Garbage Collection
     `smrInfo` ☰              Query SMR information
     `thinProvisioningInfo` ☰ Query thin provisioning info for the given volume
    table }

  }
  { wim

    Transparent wim hosting management

    table { ll
     `enumFiles` ☰          Enumerate WIM backed files
     `enumWims` ☰           Enumerate backing WIM files
     `removeWim` ☰          Remove a WIM from backing files
     `queryFile` ☰          Query the origin of a specific file
    table }

  }

}


{ Determining file system type #fsutil-exe-deteremine-file-system

 `fsutil fsinfo volumeinfo x:` can be used to determine the file system on drive `x:`:

code {
c:\> > fsutil fsinfo volumeinfo c: | → Windows/dirs/Windows/System32/findstr_exe[findstr] /c:"File System Name"
File System Name : NTFS

c:\> fsutil fsinfo volumeinfo e: | findstr /c:"File System Name"
File System Name : FAT32
code }

  It should be noted that this (apparently) does not work on Windows XP.

}

{ Thanks

  Thanks to *stolis* (aka spyros 8) who notified me of a typo on this page.

}

sa:
  → Windows/dirs/Windows/System32/fsutil_exe/file[`fsutil file`] which can be used, for example, to create empty files or files of a given size.
