$ tasklist.exe

Lists the currently running → Windows/development/process[processes (aka tasks)], with their PIDs (process identifiers). These PIDs might be used in
→ Windows/dirs/Windows/System32/taskkill_exe[`taskkill.exe`] to terminate the respective process.

{ Command line options

  table { ll

   `/S system`         ☰  Specifies the remote system to connect to.
   `/U [domain\]user`  ☰  Specifies the user context under which the command should execute.
   `/P [password]`     ☰  Specifies the password for the given user context. Prompts for input if omitted.
   `/M [module]`       ☰  Lists all tasks currently using the given → Windows/development/Portable-Executable/EXE[exe]/→ Windows/development/Portable-Executable/DLL[dll] name. If the module name is not specified all loaded modules are displayed.
   `/SVC`              ☰  Displays services hosted in each process.
   `/APPS`             ☰  Displays Store Apps and their associated processes.
   `/V`                ☰  Displays verbose task information.
   `/FI filter`        ☰  Displays a set of tasks that match a given criteria specified by the filter.
   `/FO format`        ☰  Specifies the output format.  Valid values: `TABLE`, `LIST` and `CSV`.
   `/NH`               ☰  Specifies that the "Column Header" should not be displayed in the output. Valid only for `TABLE` and `CSV` formats.
   `/?`                ☰  Displays this help message.

  table }

}

{ Filtering #tasklist-fi

  With the `/FI` option, specific processes can be queried for (filtered).

  For example, the following command finds all processes that start with `note` (such as `notepad.exe`):
code {
C:\> tasklist /fi "imagename eq note*"
code }

  The wildcard (`*`) seems to only work at the end of the identifier, not at its beginning.

}
{ Unresponsive applications

  An interesting query is to use `status` to find applications that are not responding (hanging):
code {
C:\> tasklist /fi "status eq not responding"
code }

  Note: `eq not` is not an operator. The operator is `eq` and the queried status is `not responding`.

}
{ List all processes that use a given DLL

  The `/m` option allows to find → Windows/development/process[processes] that use a given → Windows/development/Portable-Executable/DLL:
code {
tasklist /m → Windows/dirs/Windows/System32/QuietHours_dll
code }

}

sa:
  → Windows/dirs/Windows/System32/taskkill_exe[taskkill.exe]

  The → Windows/PowerShell/language/cmdlet[PowerShell cmdlets] `get-process` and `stop-process`.
