$ sc.exe

`sc.exe` is the → Windows/dirs/Windows/System32/services_exe[Service Control Manager] Configuration Tool.

{ Querying the status of services

  The status of a *running* (active) → Windows/services[service] can be queried with `sc query service-name`:
code {
C:\> sc query CryptSvc
        TYPE               : 30  WIN32
        STATE              : 4  RUNNING
                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x0
code }

  In order to query *all* services, `sc query state=all` is needed. Without `state=all`, only running (active) services are returned.
code {
C:\> sc query state=all
code }

}
{ Insufficient buffer size returned FAILED 122

  At times, `sc.exe` fails with an error message that the buffer size was too small:

code {
C:\Windows\system32>sc qprivs beep
[SC] GetConfigInfo: Insufficient buffer size returned FAILED 122:

The data area passed to a system call is too small.

[SC] GetConfigInfo needs 8 bytes
   … …
code }

  So, we specifically add a buffer size to the command: same command, but buffer size of 8 appended (error was `GetConfigInfo needs 8 bytes`):
code {
C:\Windows\system32>sc qprivs beep 8
[SC] QueryServiceConfig2 SUCCESS


SERVICE_NAME: beep
        PRIVILEGES       :
code }

  There's also the `bufsize=` option, but this does not really seem to work in this case.

}
{ PowerShell

  Note that → Windows/PowerShell[PowerShell] has an → Windows/PowerShell/language/alias[alias] `sc` for → Windows/PowerShell/command-inventory/noun/content/set[`set-content`]. Thus, in order to use `sc` from a PowerShell
  command line, it needs to be invoked with its suffix, `sc.exe`.

}
