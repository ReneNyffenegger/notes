$ findstr.exe

A *Find String (QGREP) Utility*.

code {
findstr text *.c
code }

{ Case sensitive search

  By default, `findstr` searches case insensitively. The `/i` flag turns on case sensitiveness.

  The following `findstr` command only finds «House», but neither «house» nor «HOUSE».

code {
findstr /i House *.txt
code }

}
{ Searching for literal string (such as strings that contain spaces)

  The following search searches for lines that either contain *foo* or *bar* (or both):
code {
findstr "foo bar" *
code }

  In order to search for a literal string (that might contain spaces, such as *foo bar*), the `/c:` modifier must be used
code {
findstr /c:"foo bar" *
code }
  

}
{ Search for text in current and sub-directories

  The `/s` flag specifies to search in the current directory and its sub directories.

  `/m` might be used to print the filenames only. (This option corresponds to the `-l` option of → Linux/shell/commands/grep[`grep`]).

  Search for the text «needle» in all files:
code {
C:\path\to\some\directory> findstr /s /m needle *
code }

   Search for «needle in haystack» in *.txt files only:
code {
C:\path\to\some\directory> findstr /s /m /c:"needle in haystack" needle *.txt
code }

  It is important to specify either `*` (for all files) or `*.suffix` (or a list of suffixes). This is different to
  → Linux/shell/commands/grep[`grep -r`] (where the file wildcard is not required) and thus a constant source
  of confusion.

}
{ Regular expressions

  Very *rudimentary* → development/regular-expressions[regular expressions] are enabled with `/r`.
  -
  There is no support for
    • `\d`, `\w`, `\s` etc.
    • Alternations (→ development/regular-expressions#regexp-vertical-bar[vertical bar])
    • Curly braces
    • One or more occurences (`+`)
    • Optional occurence (`?`)

  Word boundaries, however, *can* be matched with `\<` and `\>`, respectively.

  Finding something that looks like a hexadecimal number could be achieved with *character classes*:`[0-9A-F][0-9A-F][0-9A-F]`.

  { Using word boundaries

    Word boundaries are especially useful to search for short words that might often be contained within longer words. For example, in order
    to search exactly for the word *head* (and not for header, beheaded etc.), this could be achieved with
code {
findstr /s /r /c:"\<head\>" *
code }

  }

}
sa:

  → Windows/dirs/Windows/System32/find_exe[`find.exe`] supports UTF-16 while `findstr.exe` supports → development/regular-expressions.
  -
  Also, it seems that it's not possible to use the pipe with `find` (`findstr` allows to do something like `→ Windows/dirs/Windows/System32/cmd_exe/commands/dir[dir] | findstr xyz`).

  GNU's: → Linux/shell/commands/grep[grep]

  The → Windows/PowerShell equivalent for `grep` seems to be the → Windows/PowerShell/language/cmdlet[cmdlet] → Windows/PowerShell/command-inventory/noun/string/select[`select-string`].

  `findstr` might be considered a → science/computer/Programming-paradigm/Functional-programming/First-class-function/filter[filter] operation as known in
  → science/computer/Programming-paradigm/Functional-programming[functional programming].
