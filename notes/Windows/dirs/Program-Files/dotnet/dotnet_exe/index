$ dotnet.exe

`dotnet.exe` is a (command line) tool for
  • managing → Microsoft/dot-net source code and binaries
  • running applications (`dotnet.exe anApp.dll`)

When `dotnet.exe` runs an application, it also activates the appropriate runtime for the application (see → Windows/dirs/Program-Files/dotnet/host/fxr[`DOTNET_ROOT\host\fxr`].

Apparently, `dotnet.exe` is also referred to as *the host* or *the muxer*.

`dotnet.exe` (like also `nuget.exe`) does not interact with → Windows/development/Visual-Studio projects.

{ Some command line options

  { --info #dotnet-info

    `dotnet --info` shows the relevant information about a → Microsoft/dot-net/implementations/Core installation and its machine environment.

    Some of the information is also displayed with `dotnet --list-sdks` and `dotnet --list-runtimes.`

  }
  { --list-sdks

    `dotnet --list-sdks` shows the installed .NET core runtimes:
code {
C:\> dotnet --list-sdks
2.1.701 [→ Windows/dirs/Program-Files/dotnet/sdk[C:\Program Files\dotnet\sdk]]
3.0.100 [→ Windows/dirs/Program-Files/dotnet/sdk[C:\Program Files\dotnet\sdk]]
code }

  }
  { --list-runtimes

code {
C:\> dotnet --list-runtimes
Microsoft.AspNetCore.All 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
Microsoft.AspNetCore.All 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
Microsoft.AspNetCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.NETCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.WindowsDesktop.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
code }

  }
  { --output

   `--output` specifies the directory where built binaries are put to.

   The default is `./bin/<configuration>/<framework>`.

   When using multiple target frameworks, (`TargetFramework` property), `--framework` also needs to be specified.

  }
}
{ Some Commands

  table { ll

    `add reference|package` ☰
    `build` ☰
    `build-server` ☰
    `clean` ☰
    `help` ☰
    `list reference` ☰
    `migrate` ☰
    `msbuild` ☰
    `new` ☰ 
    `nuget …` ☰
    `pack` ☰
    `publich` ☰
    `restore` ☰
    `remove reference|package` ☰
    `run` ☰
    `sln` ☰ Add, remove or list projects in a → Windows/development/Visual-Studio#vs-solution-project-file[solution (`.sln`) file].
    `store` ☰
    `test` ☰

  table }

}
{ dotnet new

  { console

  `dotnet new console` creates a boiler plate → development/languages/C-Sharp[C#] (Hello World) application:
code {
C:\users\Rene> mkdir tst
C:\users\Rene\tst> dotnet new console
C:\users\Rene\tst> dotnet run
Hello World!
code }

  }

  { wpf

   `dotnet new wpf` creates a template for a Windows Presentation Foundation (WPF) application.

  }

}
{ TODO

  `dotnet.exe add package xyz` seems to be equivalent to the → Windows/PowerShell command `→ Windows/PowerShell/command-inventory/noun/package/install[install-package] xyz`.

}
