$ choco.exe

{ Commands

  table { lll

   `find`, `search` ☰ searches remote or local packages (`find` is an alias for `search`) ☰
   `help` ☰ displays top level help information for choco ☰
   `info` ☰ retrieves package information. Shorthand for `choco search pkgname --exact --verbose` ☰
   `list` ☰ lists remote or local packages ☰ Starting in v2.0.0 the list command will be made local only and will only work with the installed packages.
   `install` ☰ installs packages using configured sources ☰
   `pin` ☰ suppress upgrades for a package ☰
   `outdated` ☰ retrieves information about packages that are outdated. Similar to `choco upgrade all --noop` ☰
   `upgrade` ☰ upgrades packages from various sources ☰
   `uninstall` ☰ uninstalls a package ☰
   `pack` ☰ packages nuspec, scripts, and other Chocolatey package resources into a nupkg file ☰
   `push` ☰ pushes a compiled nupkg to a source ☰
   `new` ☰ creates template files for creating a new Chocolatey package ☰
   `source`, `sources` ☰ view and configure default sources (`sources` is an alias for `source`) ☰
   `config` ☰ Retrieve and configure config file settings ☰
   `feature`, `features` ☰ view and configure choco features (`features` is an alias for `feature`) ☰
   `apikey`, `setapikey` ☰ retrieves, saves or deletes an apikey for a particular source. (`setapikey` is an alias for `apikey`) ☰
   `unpackself` ☰ re-installs Chocolatey base files ☰
   `export` ☰ exports list of currently installed packages ☰
   `template`, `templates` ☰ get information about installed templates (`templates` is an alias for `template`) ☰

  table }

}

{ Default options and switches

  table { lll

    `--help`  ☰ `-?`, `-h` ☰ Prints out the help menu.
    `--debug` ☰ `-d` ☰ Show debug messaging.
    `--verbose` ☰ `-v` ☰ Very verbose messaging, not supposed to be used under normal circumstances.
    `--trace` ☰ ☰ Very, very verbose trace messaging. Avoid except when needing super low-level → Microsoft/dot-net Framework debugging.
    `--nocolor`, `--no-color` ☰ ☰ Do not show colorization in logging output. This overrides the feature *logWithoutColor*, set to 'False'.
    `--acceptlicense`, `--accept-license` ☰ ☰ Accept license dialogs automatically. *Reserved for future use.*
    `--yes`, `--confirm` ☰ `-y` ☰ Respond affirmatively to prompts. Implies `--accept-license`. Compare with `allowGlobalConfirmation`
    `--force` ☰ `-f` ☰ Force the behavior. Do not use force during normal operation - it subverts some of the smart behavior for commands.
    `--noop`, `--whatif`, `--what-if` ☰ ☰ Don't actually do anything.
    `--limitoutput`, `--limit-output` ☰ ☰ Limit the output to essential information
    `--timeout`, `--execution-timeout=VALUE` ☰ ☰ The time to allow a command to finish before timing out. Overrides the default execution timeout in the configuration of 2700 seconds. '0' for infinite starting in 0.10.4.
    `--cache`, `--cachelocation`, `--cache-location=VALUE` ☰ -`c`- ☰ Location for download cache, defaults to → Windows/development/environment-variables/TEMP-TMP[`%TEMP%`] or value in `chocolatey.config` file.
    `--allowunofficial`, `--allow-unofficial`, `--allowunofficialbuild`, `--allow-unofficial-build` ☰ ☰ `choco` requires this option When not using the official build
    `--failstderr`, `--failonstderr`, `--fail-on-stderr`, `--fail-on-standard-error`, `--fail-on-error-output` ☰ ☰ Fail on standard error output (→ development/stdin-stdout-stderr[stderr]), typically received when running external commands during install providers. This overrides the feature failOnStandardError.
    `--use-system-powershell` ☰ ☰ Execute → Windows/PowerShell using an external process instead of the built-in → Windows/PowerShell/host PowerShell. Should only be used when internal host is failing.
    `--no-progress` ☰ ☰ Do not show download progress percentages.
    `--proxy=VALUE` ☰ ☰  Explicit → development/web/Proxy[proxy] location. Overrides the default proxy location of `''`.
    `--proxy-user=VALUE` ☰ ☰ Explicit proxy user (optional). Requires explicity proxy (`--proxy` or config setting).
    `--proxy-password=VALUE` ☰ ☰ Explicit proxy password (optional) to be used with username.
    `--proxy-bypass-list=VALUE` ☰ ☰ Comma separated list of regex locations to bypass on proxy. Requires explicity proxy (`--proxy` or config setting).
    `--proxy-bypass-on-local` ☰ ☰ Bypass proxy for local connections.
    `--log-file=VALUE` ☰ ☰ Log File to output to in addition to regular loggers.

  table } 

}
{ Upgrading Chocolatey

  Of course, Chocalatey itself is upgraded/update with `choco`:
code {
choco upgrade chocolatey
code }

}
{ Installing as non-admin user

  The → https://chocolatey.org/docs/installation#non-administrative-install[Chocolatey non-administrative section of the docs] gives some hints as to installing a package as non-admin → Windows/user-account[user].

  It seems to boil down to defining the → Windows/development/environment-variables[environment variable] `ChocolateyInstall` with the value of the directory into which the package needs to be installed:
code {
$env:ChocolateyInstall="→ Windows/PowerShell/language/variable/automatic/home[$home]\bin\pkg"
code }

  See also → https://superuser.com/a/1096805/16610[this superuser answer]

}
{ choco feature

  Remember parameters (that were passed with `-params "…"`) for future upgrades of an installed package:
code {
choco feature enable -n=useRememberedArgumentsForUpgrades
code }

}

sa:

  → Windows/Chocolatey

  `choco.exe` is found in the → Windows/dirs/ProgramData/chocolatey/bin[`%ALLUSERSPROFILE%\chocolatey\bin`] directory.

  A shortcut for `choco install …` is → Windows/dirs/ProgramData/chocolatey/bin/cinst_exe[`cinst`].
