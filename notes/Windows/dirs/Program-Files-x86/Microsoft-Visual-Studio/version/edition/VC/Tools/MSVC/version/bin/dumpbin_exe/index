$ dumpbin.exe

{ Command line options


`dumpbin /headers` 
  table { ll
    `/all` ☰ Display all information except disassembly. Combine with `/rawdata:none` to omit binary data as well
    `/archivemembers` ☰ 
    `/clrheader` ☰ 
    `/dependents` ☰ display names of required → Windows/development/Portable-Executable/DLL[DLLs]. Compare with `/imports`.
    `/directives` ☰ Show `.drective` → Windows/development/Portable-Executable#pe-section[section].
    `/disasm[:{bytes|nobytes}]` ☰ disassemble code → Windows/development/Portable-Executable#pe-section[sections]
    `/errorreport:{none|prompt|queue|send}` ☰ deprecated
    `/exports` ☰ `dumpbin /exports name-of.dll` prints the → Windows/development/Portable-Executable/DLL/export-table of a → Windows/development/Portable-Executable/DLL.
    `/fpo` ☰ 
    `/headers` ☰ show a → Windows/development/Portable-Executable[Portable Executable's] header information. This can be used to → Windows/development/Portable-Executable/determine-32-or-64-bit[determine if the PE is 32 or 64-bit].
    `/imports[:filename]` ☰ Shows the list of imported DLLs (both: statically linked and delay loaded) that are imported
    `/linenumbers` ☰ Shows (source code?) line numbers in an *object file*. Requires the source code to be compiled with → Windows/development/Visual-Studio/cl/options/Z/i[`/Zi`], `/Z7` or `/Zd`. In order to have line numbers in the executable as well, it must be linked with → Windows/development/Visual-Studio/link/options/debug[`/DEBUG`]
    `/linkermember[:{1|2}]` ☰ 
    `/loadconfig` ☰ Dump the → Windows/dirs/Program-Files-x86/Windows-Kits/n/Include/version/um/winnt_h#IMAGE_LOAD_CONFIG_DIRECTORY[`IMAGE_LOAD_CONFIG_DIRECTORY`] structure (which is defined in → Windows/dirs/Program-Files-x86/Windows-Kits/n/Include/version/um/winnt_h[`winnt.h`]).
    `/nologo` ☰ 
    `/nopdb` ☰ Don't load → Windows/development/Debugging/symbol-files[symbol files] (→ development/filename-extensions#pdb[`.pdb`]).
    `/out:filename` ☰ Write information to specfied file rather than → development/stdin-stdout-stderr[stdout].
    `/pdata` ☰ Print `.pdata` → Windows/development/Portable-Executable#pe-section[section(?)] (RISC processors only)
    `/pdbpath[:verbose]` ☰ Try to locate the → Windows/development/Debugging/symbol-files[symbol files] (`.pdb) the same way that → Windows/development/Debugging/tools[Windows Debugging Tools] would do.
    `/range:vamin[,vamax]` ☰ 
    `/rawdata[:{none|1|2|4|8}[,#]]` ☰ Display raw (binary) content
    `/relocations` ☰ 
    `/section:name` ☰ Restrict displayed information on → Windows/development/Portable-Executable#pe-section[sections]
    `/summary` ☰ This is the default option and displays only a short summary
    `/symbols` ☰ Displays the COFF symbol table. A COFF symbol table exists in all object files but only in executables that were linked with → Windows/development/Visual-Studio/link/options/debug[`/DEBUG`]
    `/tls` ☰  Display an executable's `IMAGE_TLS_DIRECTORY` structure
    `/unwindinfo` ☰ 
  table }

}

sa:

  → development/GNU/toolchain/binutils/objdump[`objdump`]

  → Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition/VC/Tools/MSVC/version/bin[`%VSxxxCOMNTOOLS%\MSVC\%VCToolsVersion%\bin`]
