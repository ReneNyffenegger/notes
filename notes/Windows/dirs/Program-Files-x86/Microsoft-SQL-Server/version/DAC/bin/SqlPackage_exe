$ SqlPackage.exe

`SqlPackage.exe` is a command line utility to manage DACPACs (Data-tier Application Component Packages), extract schemas or tables from a source → development/databases/SQL-Server/administration/database and
import those into a target database.

If installed with the → development/databases/SQL-Server/Management-Studio[SSMS] or/and(?) the *Dac Framework MSI:*, `SqlPackage.exe` is installed under
→ Windows/dirs/Program-Files-x86/Microsoft-SQL-Server/version/DAC/bin[`C:\Program Files (x86)\Microsoft SQL Server\nnn\DAC\bin`].
-
If installed via →development/databases/SQL-Server/Data-Tools[SSDT], `SqlPackage.exe` is installed in a path like `C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\130`.

{ Cloning a database structure

  The following `SqlPackage.exe` invocations try to demonstrate how it is possible to clone a database structure *without* → development/Data. Such a cloned database might then be used for example to load it with with → development/Data/test.

  First, `SqlPackage.exe` is used to extract the structure of a database. The following command creates a → development/filename-extensions#dacpac[`.dacpac`] file, named `extract.dacpac`:
code {
sqlPackage.exe                          ^
  /action:extract                       ^
  /sourceServerName:SrvFrom\Inst        ^
  /sourceDatabaseName:DBFrom            ^
  /targetFile:extract.dacpac            ^
  /p:extractAllTableData=true
code }

  This `extract.dacpac` file is then used to create an SQL script with the statements to create the database. The parameter `/DeployScriptPath` names the file to be created:
code {
sqlPackage.exe                          ^
  /action:script                        ^
  /sourceFile:extract.dacpac            ^
  /deployScriptPath:createDatabase.sql  ^
  /targetServerName:SrvDest\Inst        ^
  /targetDatabaseName:DbTo              ^
  /p:createNewDatabase=true
code }

  This script can now be executed on the target → development/databases/SQL-Server/architecture/instance with → development/databases/SQL-Server/tools-utilities/sqlcmd[`sqlcmd.exe`].

 `createDatabase.sql` was created with a → development/databases/SQL-Server/tools-utilities/sqlcmd/on-error-exit[`:on error exit`] statement. Thus, if it encounters an error, it does not install the remaining objects.
  If the source objects reference objects in another database (for example views), these objects would then cause such an error. If I am not concerned with such cases and still want to install the remainin objects,
  I can force `sqlcmd` to skip errors with the `-V 20` option:
code {
sqlcmd -S SrvDest\Inst -i createDatabase.sql -V 20
code }

}

sa:
  → development/databases/SQL-Server/tools-utilities/Data-tier-application
