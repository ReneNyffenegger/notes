$ Registry: environment variables

There seem to be three places that control the values of → development/environment-variable[environment variables]:
  • → Windows/registry/tree/HKEY_CURRENT_USER/Environment[`HKEY_CURRENT_USER\Environment`]
  • → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Session-Manager/Environment[`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment`]
  • → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/App-Paths[`HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\App Paths`]


{ Notifying the system after making changes

  After changing the value of an → development/environment-variable[environment variable], the system should be notified.

  This can apparently be done with the `WM_SETTINGCHANGE` message or with → Windows/dirs/Windows/System32/rundll32_exe[`rundll32.exe`].

 { WM_SETTINGCHANGE #reg-wm_settingchange

  Notify the system by ending the `WM_SETTINGCHANGE` message using the → Windows/development/WinAPI[WinAPI] function `SendMessage` or `SendMessageTimeout`, having `lParam` set to the string `"Environment"`.

  With → Windows/PowerShell, its possible to invoke a WinAPI function. The following script sends a message in order for new processes to have updated values for
  changed environment variables:

  gh|about-Windows-Registry|/HKEY_CURRENT_USER/Environment/apply-changes.ps1||

  It should be noted, however, that it's not necessary to send a `WM_SETTINGCHANGE` if an environment variable is changed with the
   → Windows/PowerShell/index#ps-env-variables[PowerShell idiom to change variables] because PowerShell is smart enough to figure out that this needs to be done:
code {
PS C:\> [environment]::→ Microsoft/dot-net/namespaces-classes/System/Environment#dotNet-System-Environment-SetEnvironmentVariable[setEnvironmentVariable]("VAR", "value", "user")`
code }

  In → development/languages/VBA[Visual Basic for Applications], a `WM_SETTINGCHANGE` can be sent with the following call. The declaration of the function and constants
  is found → development/languages/VBA/Win-API[here].

code {
call SendMessageW(HWND_BROADCAST, WM_SETTINGCHANGE, 0, byVal → development/languages/VBA/functions/xPtr[strPtr]("Environment"))
code }

 }
 { rundll32.exe

code {
c:\> → Windows/dirs/Windows/System32/rundll32_exe[rundll32.exe] user32.dll,UpdatePerUserSystemParameters 1 True
code }

 }

}
{ TODO

  The *Resource Kit 2003* `pathman.exe` promises to be able to modify environment variables. However, the RK 2003 tools are not supported on 64-bit platforms.

}
sa:

  → Windows/development/environment-variables[Windows environment variables]

  Modifying the environment variable related entries → Windows/PowerShell#ps-env-variables[with the PowerShell].

