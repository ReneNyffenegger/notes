$ GIMP Script-Fu: simple demonstration scripts (to be executed in batch mode from the command line)

The following *simple* examples try to demonstrate how it is possible to create an image with → design/graphic/GIMP *from scratch* in batch mode, that is: in a console/→ Linux/shell.

{ Setting the background

  The following script is probably one of the most simple one possible. It creates 250 pixel by 100 pixel image with a blue background
  and saves the image as *jpg* file into the directory `f:\img`:

  gh|GIMP-Fu-Scripts|/simple-demonstrations/background.scm||

  The resulting image is:
  gh|GIMP-Fu-Scripts|/simple-demonstrations/img/background.jpg||

  In → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`], this script is executed like so
code {
P:\ath\to\source> → Windows/dirs/Windows/System32/cmd_exe/commands/type background.scm | "→ Windows/dirs/Program-Files[C:\Program Files]\GIMP 2\bin\gimp-2.10.exe" -d -i -f -s -b -
code }

}
{ Line

  The following example draws two lines, one with `gimp-pencil` and once with `gimp-paintbrush`.
  -
  GIMP's → https://docs.gimp.org/2.10/en/gimp-tool-pencil.html[user manual] says the following about the
 *difference between a pencil and a paintbrush*:
  "
    The pencil and paintbrush are similar tools. The main difference between
    the two tools is that although both use the same type of brush, the pencil
    tool will not produce fuzzy edges, even with a very fuzzy brush. It does
    not even do anti-aliasing.
  "

  gh|GIMP-Fu-Scripts|/simple-demonstrations/line.scm||

  The line that goes from top left to bottom right is drawn with a pencil while the other
  one is drawn with a paintbrush. Imho, the difference of smoothness can be clearly seen:
  gh|GIMP-Fu-Scripts|/simple-demonstrations/img/line.jpg||

code {
P:\ath\to\source> → Windows/dirs/Windows/System32/cmd_exe/commands/type line.scm | "→ Windows/dirs/Program-Files[C:\Program Files]\GIMP 2\bin\gimp-2.10.exe"    -i    -s -b -
code }

}
{ Circle

  gh|GIMP-Fu-Scripts|/simple-demonstrations/circle.scm||

  gh|GIMP-Fu-Scripts|/simple-demonstrations/img/circle.jpg||

code {
P:\ath\to\source> → Windows/dirs/Windows/System32/cmd_exe/commands/type circle.scm | "→ Windows/dirs/Program-Files[C:\Program Files]\GIMP 2\bin\gimp-2.10.exe"    -i    -s -b -
code }

  Update *2020-03-08*: as David C. notified me that the `(gimp-context-set-brush (car (gimp-brush-new "non-existent brush")))` statement was needed on his
  → design/graphic/GIMP installation
 (→ Linux/distributions/Ubuntu 19.10, GMIP version 2.10.8)
  for the example to work. Interestingly, on my Windows/GIMP 2.10.18 installation, the example worked without this statement.

}
{ Filled circle

  This snippet is basically the same as the previous circle. However, it uses `gimp-drawable-edit-fill` rather than `gimp-drawable-edit-stroke-selection`.

  gh|GIMP-Fu-Scripts|/simple-demonstrations/filled-circle.scm||

  gh|GIMP-Fu-Scripts|/simple-demonstrations/img/filled-circle.jpg||

code {
P:\ath\to\source> → Windows/dirs/Windows/System32/cmd_exe/commands/type filled-circle.scm | "→ Windows/dirs/Program-Files[C:\Program Files]\GIMP 2\bin\gimp-2.10.exe" -i -s    -b -
code }

  TODO: This example is similar to → http://www.adp-gmbh.ch/misc/tools/script_fu/ex_12.html[this one], but uses `gimp-drawable-edit-fill` while the other
  one uses `gimp-edit-bucket-fill`.


}
{ Text

  Write *Hello world*:
  gh|GIMP-Fu-Scripts|/simple-demonstrations/text.scm||

  gh|GIMP-Fu-Scripts|/simple-demonstrations/img/text.jpg||

code {
P:\ath\to\source> → Windows/dirs/Windows/System32/cmd_exe/commands/type text.scm | "→ Windows/dirs/Program-Files[C:\Program Files]\GIMP 2\bin\gimp-2.10.exe" -d -i -s    -b -
code }

}
{ Brush spacing

  Using `gimp-context-set-brush-spacing` allows to set a distance between «points» where the brush is applied on a line,
  thus creating a dotted line.

  gh|GIMP-Fu-Scripts|/simple-demonstrations/brush-spacing.scm||

  gh|GIMP-Fu-Scripts|/simple-demonstrations/img/brush-spacing.jpg||

code {
P:\ath\to\source> → Windows/dirs/Windows/System32/cmd_exe/commands/type brush-spacing.scm | "→ Windows/dirs/Program-Files[C:\Program Files]\GIMP 2\bin\gimp-2.10.exe"    -i    -s -b -
code }

}
{ Using a function to draw a star

  The following example defines a function `define draw-line…` to make it (a bit) easier to draw a line.

  This function is called repeatedly to draw a star:

  gh|GIMP-Fu-Scripts|/simple-demonstrations/function-star.scm||

  gh|GIMP-Fu-Scripts|/simple-demonstrations/img/function-star.jpg||

code {
P:\ath\to\source> → Windows/dirs/Windows/System32/cmd_exe/commands/type function-star.scm | "→ Windows/dirs/Program-Files[C:\Program Files]\GIMP 2\bin\gimp-2.10.exe"    -i    -s -b -
code }

}
{ Writing (debug) messages with (gimp-message) #gimp-message

 `(gimp-message …)` writes messages, however with the prefix warning.

  By default, these messages seem to go to a message box. This is of course less than desirable. Apparently, in order to redirect
  output to the console, the `-s` (or also `-c`?) → design/graphic/GIMP#gimp-command-line-arguments[command line argument] must be used.
  -
  Alternatively, the message stream can also be redirected with `(gimp-message-set-handler 1)`.

   In → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`], the string needs to be quoted with four apostrophes or `\"` (see
   → Windows/dirs/Windows/System32/cmd_exe/parse-command-line/exe[Splitting command line into arguments when executing an exe]).
code {
C:\> "C:\Program Files\GIMP 2\bin\gimp-2.10.exe" -i -s -b "(gimp-message """"foo"""")(gimp-quit TRUE)"
script-fu.exe-Warning: foo
code }

code {
"C:\Program Files\GIMP 2\bin\gimp-2.10.exe" -i -b "(begin (gimp-message-set-handler 1) (gimp-message \"hello world\") (gimp-message (number->string 42)) (gimp-quit 0) )"
code }

}
{ Iterate over files

  The following script tries to present a template to demonstrate how it is possible to iterate over files in a directory.
code {
(define (iterate-files pattern)

  (let* (
      (filelist (cadr (file-glob pattern 1)))
  )

  (gimp-message pattern)

  (while (not (null? filelist))
        (let* (
               (filename (car filelist                                             ))
   ;
   ;  Load file, create drawable ...
   ;           (image    (car (gimp-file-load RUN-NONINTERACTIVE filename filename)))
   ;           (drawable (car (gimp-image-get-active-layer       image            )))             
              )

   ;     (gimp-message filename)


   ;     (gimp-file-save RUN-NONINTERACTIVE image drawable filename filename)
   ;     (gimp-image-delete image)
         )
     (set! filelist (cdr filelist)))
  )
; (gimp-quit TRUE)
)
code }

  With → Windows/PowerShell, this script might be copied into the user's GIMP-script directory:
code {
→ Windows/PowerShell/command-inventory/noun/item/copy[copy-item] .\gimp-glob_iterate-over-files.scm → Windows/development/environment-variables/APPDATA[$env:appdata\GIMP\2.10\scripts] 
code }

  Executing the script, for example, with one of the following two PowerShell commands:
code {
echo "(iterate-files ""$curDirEscapedBackslash\\*.jpg"")" | & 'C:\Program Files\GIMP 2\bin\gimp-2.10.exe'  -i -s -b -
code }

  For a reason I really don't understand, the string with the glob-pattern needs to be enclosed with six(!) apostrophes on either side:
code {
& 'C:\Program Files\GIMP 2\bin\gimp-2.10.exe'  -i  -b "(iterate-files """"""*.jpg"""""")"
code }


}
{ Thanks

  Thanks to David in New Zealand for his valuable feedback and improvments on these scripts.

}
{ TODO

  The following examples from my old website www.adp-gmbh.ch should be moved here, too:
    • → http://www.adp-gmbh.ch/misc/tools/script_fu/ex_09.html[ex_09: Resizing images]
    • → http://www.adp-gmbh.ch/misc/tools/script_fu/ex_10.html[ex_10: Resizing images and keeping the aspect ratio]
    • → http://www.adp-gmbh.ch/misc/tools/script_fu/ex_11.html[ex_11: Drawing on an existing image]
    • → http://www.adp-gmbh.ch/misc/tools/script_fu/ex_12.html[ex_12: Drawing a filled rectangle]
    • → http://www.adp-gmbh.ch/misc/tools/script_fu/ex_13.html[ex_13: Left-right justifying text]

  An example that demonstrates how multiple layers are merged into one image and then saved to a file. I once even asked a corresponding
  → https://stackoverflow.com/questions/26803732[question on StackOverflow].

}
