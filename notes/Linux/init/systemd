
*systemd* is a system and service manager for → Linux/index. The final d stands for → Linux/daemons[daemon], so systemd might also be a system daemon.

{ Units #systemd-unit

  A unit is an entity that allows to specify dependencies that are needed for → Linux/booting/index[booting up] Linux.

  { Type #systemd-unit-type

    A unit has one of the following 11 types
    table { ll
      service ☰
      mount point ☰
      device ☰
      socket ☰
      automount point ☰
      → Linux/swap-space[swap] file ☰
      → hardware/harddisk/partition ☰
      target ☰ Useful to group units and/or provide well-known *synchronization points* during boot up. These seem to be the systemd equivalent of the → Linux/init/System-V#system-v-run-levels[runlevels] of → Linux/init/System-V[System-V].
      timer ☰
      resource management slice ☰
      group of externally created processes ☰
    table }

    Show units of a given type:
code {
→ Linux/shell/commands/systemctl --type=service
→ Linux/shell/commands/systemctl --type=service,mount
code }

    Available unit types can be shown with
code {
→ Linux/shell/commands/systemctl --type=help
code }

  }
  { Unit state #systemd-unit-state

     A unit is either *active*, *inactive*, *activating*, *deactivating* or *failed*.

     Each state has a set of substates.

     Units are started and stopped on the command line with
code {
→ Linux/shell/commands/systemctl start …
→ Linux/shell/commands/systemctl stop  …
code }

    Check if a unit is activated or is failed::
code {
→ Linux/shell/commands/systemctl is-activated systemd-networkd
→ Linux/shell/commands/systemctl is-failed    systemd-networkd
code }

  }
  { Enabled/disabled units #systemd-unit-endisabled

    A unit is either enabled or disabled.

    An enabled unit becomes subject to automatic starting when a certain event occurs, such as booting
    the system or a specific kind of hardware is plugged in.
    -
    Thus,  unit can be active and disabled, inacative and enabled, active and enabled and inactive and disabled.

    A unit is enabled or disabled on the command line with `→ Linux/shell/commands/systemctl enable` and `systemctl disable`.

    Check if a unit is enabled:
code {
→ Linux/shell/commands/systemctl is-enabled systemd-networkd
code }


?   How a unit is enabled is specified in the `[Install]` section of the unit file.

  }
  { Unit names - Configuration files #system-d-unit-name

    Units are configured in *unit configuration files* («unit files»).
    -
    The name of the unit corresponds to that of the configuration file.

    Unit configuration files are searched for in
      • `→ Linux/fhs/etc/systemd/system`, first - and if not found in
      • `→ Linux/fhs/usr/lib/systemd/system`

    The absolute path of a unit file (here: `systemd-networkd.service`, `.service` can be omitted) can be printed on the command line with
code {
→ Linux/shell/commands/systemctl show systemd-networkd -p FragmentPath
code }

?   A unit file might contain an `[Install]` section which specifies what happens when a unit is enabled.

  }
  { Listing units per type:

    The following command lists all loaded and active target units:

code {
$ → Linux/shell/commands/systemctl list-units --type=target
code }

    With `--all`, inactive target units are shown as well.
code {
$ → Linux/shell/commands/systemctl list-units --type=target -all
code }

  }
  { See also

    `man systemd.unit`

  }

}

{ Binaries

  `systemd*` files installed under `/usr/bin`:
  table { ll

   `systemd` ☰  System and service manager. Symlink to `/lib/systemd/systemd`
   `systemd-analyze` ☰ Analyzing and debugging
   `systemd-ask-password` ☰ Query a password or a passphrase from a user.
   `systemd-cat` ☰ Connect a pipeline or program's output with the journal
   `systemd-cgls` ☰ Recursively show control group contents
   `systemd-cgtop` ☰ Show top control groups by their resource usage
   `systemd-delta` ☰ Find overridden configuration files
   `systemd-detect-virt` ☰ Detect execution in a virtualized environment
   `systemd-escape` ☰ Escape strings for usage in systemd unit names
   `systemd-hwdb` ☰ Management of hardware database
   `systemd-id128` ☰ Generate and print sd-128 identifiers
   `systemd-inhibit` ☰ Execute a program with an inhibition lock taken
   `systemd-machine-id-setup` ☰ Initialize the machine ID in `→ Linux/fhs/etc/machine-id`
   `systemd-mount`, `systemd-umount` ☰ Establish and destroy transient mount or auto-mount points. `systemd-umount` is a symlink to `systemd-mount`.
   `systemd-notify` ☰ Notify service manager about start-up completion and other daemon status changes
   `systemd-path` ☰ List and query system and user paths
   `systemd-resolve` ☰ symlink to `resolvectl`
   `systemd-run` ☰ Run programs in transient scope units, service units, or path-, socket-, or timer-triggered service units
   `systemd-socket-activate` ☰ Test socket activation of daemons
   `systemd-stdio-bridge` ☰
   `systemd-sysusers` ☰ Allocate system users and groups. See also `systemd-sysusers.service1
   `systemd-tmpfiles` ☰ Creates, deletes and cleans up volatile and temporary files and directories. (Compare with `systemd-tmpfiles`, `systemd-tmpfiles-setup.service`, `systemd-tmpfiles-setup-dev.service`, `systemd-tmpfiles-clean.service` and `systemd-tmpfiles-clean.timer`)
   `systemd-tty-ask-password-agent` ☰ List or process pending systemd password requests

  table }

}

sa:

 `→ Linux/fhs/run/systemd`,
 `→ Linux/fhs/etc/systemd`

 `→ Linux/fhs/lib/systemd/systemd`

 `→ Linux/fhs/var/tmp/systemd-private-star`

 `→ Linux/fhs/usr/lib/systemd`

 `→ Linux/shell/commands/journalctl` prints log entries from systemd's journal.

 `→ Linux/fhs/etc/systemd/system/default_target` controls what systemd is booting »into« by default.

  → Linux/init
