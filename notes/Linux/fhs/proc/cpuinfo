$ /proc/cpuinfo

For each → hardware/CPU in the system, `/proc/cpuinfo` contains the following information:
table { lll
    ☰ ~Example values~ ☰
  `processor` ☰ ☰
  `vendor_id` ☰ `GenuineIntel` ☰
  `cpu family` ☰ ☰
  `model` ☰  ☰
  `model name` ☰ ☰
  `stepping` ☰ ☰
  `microcode` ☰ ☰
  `cpu MHz` ☰ ☰
  `cache size` ☰ ☰
  `physical id` ☰ ☰ Physical package id of the logical CPU
  `siblings` ☰ ☰ Total number of logical processors (both threads and cores) in the physical package currently in use by the OS
  `core id` ☰ ☰ Core id of the logical CPU
  `cpu cores` ☰ ☰ Total number of cores in the physical package currently in use by the OS
  `apicid` ☰ ☰
  `initial apicid` ☰ ☰
  `fpu` ☰ ☰
  `fpu_exception` ☰ ☰
  `cpuid level` ☰ ☰
  `wp` ☰ ☰
  → #proc-cpuinfo-flags[`flags`] ☰ `fpu`, `vme`, `de` etc. ☰ `flags` exposes a CPU's feature bits as humanly readable strings
  `vmx flags` ☰ `vnmi`, `invvpid`, `ept_x_only` etc. ☰
  `bugs` ☰ `cpu_meltdown`, `spectre_v1`, `spectre_v2`, `spec_store_bypass`, `l1tf`, `mds`, `swapgs`, `taa`, `itlb_multihit`, `srbds`, `mmio_stale_data`, `retbleed` etc ☰
  `bogomips` ☰ ☰
  `clflush size` ☰ ☰
  `cache_alignment` ☰ ☰
  `address sizes` ☰ ☰
  `power management` ☰ ☰
table }

{ flags #proc-cpuinfo-flags

  See also
       • the → https://github.com/projg2/cpuid2cpuflags[`cpuid2cpuflags`] utility
       • The comments in `→ Linux/kernel/source/arch/x86/include/asm/cpufeatures_h` give a clue what a capability bit enables.
       • `arch/x86/kernel/cpu/capflags.c`
       • `arch/x86/boot/cpustr.h`

}

sa:

  `→ Linux/fhs/sys/devices/system/cpu`

  `→ Linux/shell/commands/lscpu`
