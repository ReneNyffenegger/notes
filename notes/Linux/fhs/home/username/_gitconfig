$ ~/.gitconfig

`~/.gitconfig` stores is the configuration file for → development/version-control-systems/git that stores a user's preferred
→ development/version-control-systems/git/options[git options]. These options can be viewed or modified with
→ development/version-control-systems/git/commands/config[`git config --user …`].

code {
[user]
        email = …
        name = Rene Nyffenegger
[core]
        → development/version-control-systems/git/options/core-autocrlf[autocrlf] = false
[alias]
  lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg = !"git lg1"
code }

{ File format

  { Sections

    A section begins with its (case insensitive) name in square brackets and continues to either the next section or end of file:
code {
[sectionOne]
   …
   …
[sectionTwo]
   …
code }

  }
  { Subsections

    A section can be divided into case-sensitive subsections:
code {
[section "subsection"}
  …
code }


  }
  { Variables

    A section contains *variables*. Variables are case-insensitively named values:
code {
[section]
    varNum = 42
    varTxt = Hello World
code }

  }
  { Comments

    Comments are introduced with a `#` or a `;` and continue to the end of the line.
code {
  #  comment
[section]
  ;  another comment
code }

  }
  { Blank lines

    Blank lines are ignored.

  }

}

sa:
  → development/version-control-systems/git/_git/config[`.git/config`]
