$ /usr/lib/gcc/x86_64-linux-gnu/VERSION

`/usr/lib/gcc/x86_64-linux-gnu/VERSION` (`VERSION` being the gcc version as reported with `→ development/languages/C-C-plus-plus/GCC/options/dump/version`) is the default installation directory of GCC.

The actual value of this directory can be queried with
code {
$ → development/languages/C-C-plus-plus/GCC/options/print/search-dirs | grep install:
install: /usr/lib/gcc/x86_64-linux-gnu/10/
code }

This directory contains files such `cc1`:
code {
$ gcc → development/languages/C-C-plus-plus/GCC/options/print/file-name[-print-file-name]=cc1
/usr/lib/gcc/x86_64-linux-gnu/10/cc1

$ gcc → development/languages/C-C-plus-plus/GCC/options/print/prog-name[-print-prog-name]=cc1
/usr/lib/gcc/x86_64-linux-gnu/10/cc1
code }

{ Some files found in this directory

code {
$ → Linux/shell/commands/ls -1 /usr/lib/gcc/x86_64-linux-gnu/$(gcc → development/languages/C-C-plus-plus/GCC/options/dump/version)
code }

table { ll
  `cc1` ☰ The → development/languages/C-C-plus-plus/GCC/cc1[compiler proper].
  `cc1plus` ☰ The C++ compiler.
  `collect2` ☰ This utility pretends to be a linker (which it *does* execute), but also arranges to include the vectors of initialization and termination functions. (This tool is used on nearly all systems)
  `crtbegin.o` ☰ Code fragments for the `.init` section. Typically compiled from `crtstuff.c`
  `crtbeginS.o` ☰ Use for shared linking?
  `crtbeginT.o` ☰
  `crtend.o` ☰ Code fragments for the `.fini` sectiion. Typically compiled from `crtstuff.c`
  `crtendS.o` ☰
  `crtfastmath.o` ☰
  `crtoffloadbegin.o` ☰
  `crtoffloadend.o` ☰
  `crtoffloadtable.o` ☰
  `crtprec32.o` ☰
  `crtprec64.o` ☰
  `crtprec80.o` ☰
  `libasan.a` ☰
  `libasan_preinit.o` ☰
  `libasan.so` ☰
  `libatomic.a` ☰ Runtime support for atomic operations (e. g. `__sync` and/or `__atomic`)
  `libatomic.so` ☰
  `libbacktrace.a` ☰ Produces backtraces when GCC crashes
  `libcc1.so` ☰ A library that allows GDB to make use of the compiler.
  `libgcc.a` ☰ This library contains internal subroutines which GCC uses to overcome shortcomings of particular machines, or special needs for some languages. This library belongs to the set of libraries that are skipped by using `-nostdlib` and `-nodefaultlibs`. The documentation recomments to specify `-lgcc` if either `-nostdlib` or `-nodefaultlibs` is used. This library seems so special that there is the command line option `→ development/languages/C-C-plus-plus/GCC/options/print/libgcc-file-name` with which `gcc` returns the path to `libgcc.a`. The location of this file can also be specified with `gcc -B…`. On some platforms, the name of this library is `libgcc_s.so.1`.
  `libgcc_eh.a` ☰
  `libgcc_s.so` ☰
  `libgcov.a` ☰
  `libgomp.a` ☰
  `libgomp.so` ☰
  `libgomp.spec` ☰
  `libitm.a` ☰
  `libitm.so` ☰
  `libitm.spec` ☰
  `liblsan.a` ☰
  `liblsan_preinit.o` ☰
  `liblsan.so` ☰
  `liblto_plugin.so` ☰
  `liblto_plugin.so.0` ☰
  `liblto_plugin.so.0.0.0` ☰
  `libquadmath.a` ☰
  `libquadmath.so` ☰
  `libsanitizer.spec` ☰
  `libssp_nonshared.a` ☰ Stack protector runtime library?
  `libstdc++.a` ☰
  `libstdc++fs.a` ☰
  `libstdc++.so` ☰
  `libsupc++.a` ☰
  `libtsan.a` ☰
  `libtsan.so` ☰
  `libubsan.a` ☰
  `libubsan.so` ☰
  `lto1` ☰
  `lto-wrapper` ☰
table }

}

sa:
  The subdirectories `include` and `plugin`
