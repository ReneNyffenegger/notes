$ Bash - history
@ history

The commands executed in → Linux/shell/bash are stored in a → Linux/fhs/home/username/_bash_history[history file].

{ Bash history expansion #bash-history-expansion

  Apparently, histexpand (`set -o histexpand`) must be in effect for history expansion to work.

  { Using !

The exclamation mark can be used to refer to portions of one of the last commands executed.

`!!` is expanded to the last command. So 
code {
$ !!
code }
repeats the last command.
-
A useful application for this construct is if → Linux/shell/commands/sudo was forgotten:
code {
$ pacman -Syu
error: you cannot perform this operation unless you are root.
$ sudo !!
code }

Repeat the most recent command that *starts with* → Linux/shell/commands/ls:
code {
$ !ls
code }

Repeat the most recent command that *contains* foo:
code {
$ !?foo
code }

`:p` does not execute the command but rather prints it:
code {
$ !ls:p
code }

  }
  { !^ and !$

`!^` is replaced with the first argument:
code {
$ echo foo bar baz
foo bar baz
$ echo abc !^ def
abc foo def
code }
Similarly, `!$` is replaced with the last argument.

The `^text^replace^` replaces *text* with *replace*:
code {
$ ls -l tmp
$ ^-l^-la^
code }


  }
  { nth argument

  Similar to `!^` and `!$`, the nth argument can be referred to with `!!:n`:
code {
$ echo one two three
one two three
$ echo !:3 !:2 !:1
three two one
code }

 `!^` and `!!:^` seem to be equivalent, as well as also `!$` and `!!:$`.

All arguments are referred to with `!!:*`.
-
Arguments n through m are referred to with `!!:n-m`
-
Arguments n and following are referred to with `!!:n*`

  }
  { Searching for commands

    `!?text?` searches for the last command that contained `text` and executes it.
    -
    Unfortunately, → development/regular-expressions[regular expressions] seem not possible.

  }
  { Substituting elements in previous commands

`!!s/text/replacement/` substitutes the first occurence of *word*:
code {
$ !!:s/foo/bar/
code }

`gs/text/replacemaent/` substitutes every occurence of *word* (`g`=global).

`:&` reuses the last substitution:
code {
!ls:&
code }

  }
  { !n and !-n

    As `!!` refers to the last command, `!-n` refers to the n-th last command and `!n` to command with number `n` (as printed with the `history` command).
    
    As a convenience, → development/environment-variable#ps1[$PS1] can be set to something like `export PS1="\!$ "` to always print the current history number which
    can be used in `!n`.



  }
  { ^text^replacement^

     `^text^replacement^` replaces `text` in the last command with `replacement`.

  }
  { Modifiers #bash-history-modifiers

    The modifiers `:h`, `:t`, `:r` and `:e` can be used to select parts of a directory and/or file path:
    gh|about-Bash|/history/modifiers||

    See also → development/vim/script/vimscript/functions/fnamemodify[vim's `fnamemodify`].

  }
  { See also

    → Linux/shell/readline/initialization-file#readline-magic-space[readline: magic space]

  }
}
{ Environment variables

  { HISTCONTROL #histcontrol

    When set to `ignorespace` (or `ignoreboth`), command lines starting with a space won't go to the history file.

  }
  { HISTIGNORE #histignore

    HISTIGNORE is a colon-delimited list of (non regexp?) patterns that should be ignored in the history file.

    The `&` is a special pattern to supress duplicate entries.

  }

}
{ histappend

  By default, bash overwrites the history when the session ends. With setting *histappend* (`shopt -s histappend`), bash appends
  the commands executed during a session when it ends.

}
sa:
  → Linux/shell/bash/fc
