$ Bash redirection
@ redirection

{ Notation

  { fd> fileName

   `cmd fd> fileName` creates a file with name `fileName` and  redirects file descriptor *fd* (which is a number) to this file.
   
    If the file existed, it's first deleted

    If *fd* is not given, it defaults to `1`.

    There must be no space betweend *fd* and the `>`. Spaces between `>` and `fileName` are possible.

  }
  { fd>> fileName

     `cmd fd>> fileName` appends file descriptor to the file with name `fileName`
     
      If the file didn't exist, it is created.

      If *fd* is not given, it defaults to `1`.
  }
  { fdA>&fdB

    `fdA>&fdB` redirects file descriptor *fdA* to file descriptor *fdB*.

     If *fdA* is omitted, it defaults to `1`.

     There must be no spaces between *fdA*, `>` and *fdB*.

  }

}

{ An example

  { Executing commands and redirect their output

    The following snippet executes the shell script `cmd` four times, each time with a different redirectios to → development/stdin-stdout-stderr[stdout] and stderr.
  
    gh|about-Bash|/redirection/exec-cmd||
  
  }
  { cmd

    This is the content of `cmd`:
    gh|about-Bash|/redirection/cmd||
  
  }

} 
{ Three angle brackets / here string #bash-here-string

  Three consecutive angle brackets (`<<<`) followed by a *word* is a so called *here string* (which is a bit similar to a → Linux/shell/bash/scripts/here-document[here document]). *word* is expanded and fed to the command on standard input.

  The following example calculates an arithmetic expression:

code {
→ Linux/shell/commands/bc[bc] <<< "7.3 * 8.2"
code }

  Here strings come in handy to assign values to → Linux/shell/bash/variables[variables] with the → Linux/shell/bash/built-in/read#bash-read-here-string[read built in].

}
{ TODO

 `sponge` soaks up all its input before writing the output file. This allows constructing pipelines that read from and write to the same file: `→ Linux/shell/commands/grep -v '^#' input | sponge input`
  -
  Compare with → development/languages/sed/in-place-editing[in place editing with `sed`] and → development/languages/Perl/in-place-editing[`Perl`] or
  → Windows/PowerShell/command-inventory/noun/content/index#ps-inplace-editing[PowerShell].

}

sa:

  → Windows/PowerShell/language/operator/redirection[PowerShell's redirection operators]

  → Linux/shell/bash
