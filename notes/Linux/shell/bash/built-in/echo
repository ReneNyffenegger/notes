$ Bash built-in: echo
@ echo

{ -e #bash-echo-e

 `-e` enables the interpretation of backslash characters.

   The following line prints *Hello, world!*
code {
echo -e "\x48\x65\x6c\x6c\x6f\x2c\x20\x77\x6f\x72\x6c\x64\x21"
code }

   Writing colored output (using → Linux/shell/ANSI-escape-sequences):
code {
echo -e "\e[1;31mTHIS TEXT IS RED\e[0m" 
code }

  See also → Linux/shell/ANSI-escape-sequences[ANSI Escape Codes] and → Linux/shell/bash#bash-hex-chars-in-string[embedding hexadecimal characters in a string].

}
{ Supressing new lines #bash-echo-no-newlines

  The `echo` command can be invoked with `-n` to suppress the → development/line-break[new line] at the end of the output:

  gh|about-Bash|/built-in/echo/suppress-new-line||

  Compare with → Windows/dirs/Windows/System32/cmd_exe[cmd.exe's] → Windows/dirs/Windows/System32/cmd_exe/commands/echo#cmd-exe-no-newlines[hack of `echo` to achieve the same thing].

}
{ Colored output #bash-echo-colors

  → Linux/shell/ANSI-escape-sequences allow to color the output

  gh|about-Bash|/built-in/echo/colored-output||

}
{ built-in echo vs /usr/bin/echo

 `echo` is a → Linux/shell/bash/built-in[built-in] and an ordinary executable:
code {
$ → Linux/shell/bash/built-in/type -a echo
echo is a shell builtin
echo is /usr/bin/echo
echo is /bin/echo
code }

}

sa:

  → Linux/shell/bash/built-in

  → development/tools/scripts/personal/highlight_pl
