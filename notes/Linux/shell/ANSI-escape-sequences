
*ANSI Escape Sequences* are instructions for consoles to position the cursor, change and set → design/graphic/color[color] and
→ design/font[fonts] and perform other operations.
-
These instructions are encoded in a series of characters whose first byte is the escape character (ASCII 27, octal `\033`, hex `0x1b`).
-
Apparently, VT 100 influenced these instructions heavily.

{ Cursor Movements

  The cursor can be moved with the following sequence: `^[[nx`.
  -
  The value of `n` indicates how much the cursor moves. It is optional and defaults to 1.
  -
  `x` is `A`, `B`, `C` or `D` and indicates the cursor to move up, down, right or left, respectively.

code {
$ echo -en '\e[4Afour lines above\e[20C20 characers to the right'
code }

  With `x` being `E` or `F`, the cursor is moved to the *beginning* of the nth next/previous line.

  See also → #ansi-pos-cursor[Absolutely positioning the cursor]

}
{ Hiding and showing the cursor

  `^[[?25h` hides the cursor, `^[[?25l` shows it.

}
{ Colors

  { 16 basic colors #ansi-16-basic-colors

    There are eight colors, each of which is identified by a single digit:
    table { rl
     0 ☰ black
     1 ☰ red
     2 ☰ green
     3 ☰ yellow
     4 ☰ blue
     5 ☰ purple
     6 ☰ cyan
     7 ☰ white
    table }

    Each of these colors has a *high intensity* variant, which brings the number of *basic colors* to 16 (and correspond to the values of the
    → Microsoft/dot-net enum → Microsoft/dot-net/namespaces-classes/System/ConsoleColor[`System.ConsoleColor`]).

    In order to create a color code, the color-digit needs to be prepended with one or two other digits (the dot represents the digit for the color):
    table { rl
       3. ☰ foreground / normal intensity
       4. ☰ background / normal intensity
       9. ☰ foreground / high intensity
      10. ☰ background / high intensity
    table }

    Thus, for example a *high intensity* (=9) *red* (=1) text is escaped like so:
code {
\e[91m text \e[0m
code }

    Or, … in a shell with `echo`:
code {
$ echo -e "\e[91mred text\e[0m"
$ echo -e "\e[103m\e[91mred text on yellow background\e[0m"
code }

  }
  { Defining the RGB values for the 16 base colors

    At least in → Windows/dirs/Windows/System32/conhost_exe[`conhost.exe`], it's possible to define the RGB values for the 16 colors
    with `\e]4;c;rgb:RR/GG/BB\x7`. `RR`, `GG` and `BB` are the hex values for the RGB colors. `c` is the color number which is being defined. Note the closing bracket `]`.

    The following PowerShell script modifies the color palette according to *solarized light*:
    gh|ANSI-escape-sequences|/define-16-basic-colors.ps1||

  }
  { 216 6-bit colors + 16 basic colors + 24 gray scale colors

    With `\e[38;5;nm` (foreground) and `\e[48;5;nm` (background colors), the color palette can be extended to 256 colors which are specified by `n`:
    table { ll
      `n` ☰
      0-7 ☰ 8 colors
      8-15 ☰ 8 intense color
      16 + 36*r + 6+g + b ☰ RGB value (each component having 6 values)
      232-255 ☰ 24 gray scale colors, black to white
    table }

    The following shell snippet prints the color with R=5, G=2 and B=0:
code {
$ r=5
$ g=2
$ b=0
$ color=$(( 16 + $r * 36 + $g * 3 + $b ))
$ echo -e "\e[38;5;${color}mr=$r g=$g b=$b\e[0m"
code }

  { Demonstration: Emit all 6-bit RGB colors with a script.

    The following shell script uses the `38;5` escape function to create 216 background colors (The red, green and blue components are each in the range 0 … 5)

    gh|ANSI-escape-sequences|/bg-48-fg-38-5||

    The output of the script is

    gh|ANSI-escape-sequences|/img/bg-48-fg-38-5.png||
  
    Apparently, → https://github.com/segaleran/eran-dotfiles/blob/master/bin/terminalcolors.py[this python script]
    and → https://gist.github.com/hSATAC/1095100[this Perl script] do more or less the same thing.
    -
    And then, there is also the shell command `msgcat --color=test`.

  }

  }
  { 24-bit colors

    With `\e[38;2;r;g;bm` and `\e[48;2;r;g;bm`, The color palette is extended to *true colors*, `r`, `g` and `b` being values between `0` and `255`:
code {
$ r=222
$ g=111
$ b=42
$ text="R = $r, G = $g, B = $b"
$ echo -e "\e[38;2;$r;$g;$b""m$text""\e[0m"
code }

  }

}
{ Positioning the cursor #ansi-pos-cursor

  Using `H` to position the cursor on specific coordinates.

  The first number ist the y coordinate, the second number the 
  x coordinate.

  gh|ANSI-escape-sequences|/position-cursor||

}
{ Clearing the screen

  gh|ANSI-escape-sequences|/clear-screen||

}
{ Resetting all settings

  gh|ANSI-escape-sequences|/reset-all||

}
{ Determine sequence for specfic key on keyboard

  In order to determine a key's emitted sequence, one can use `ctrl-v` followed by the key.

}
{ setterm

 `→ Linux/shell/commands/setterm` is a utility that sets terminal attributes by writing a character string to → development/stdin-stdout-stderr[stdout] that invokes the specified terminal capabilities.

  The following command writes the word *Warning:* in red:
code {
$ echo $(setterm --foreground red)Warning:$(setterm --default) do not write too much text in red
code }


}
{ PowerShell

  In → Windows/PowerShell, the escape character can be expressed by casting *27* or its hexadecimal representation *0x1b* to a `char`:
code {
→ Windows/PowerShell/command-inventory/noun/host/write[write-host] "$([char]0x1b)[40;91m red on black $([char]27)[0m"
code }

  PowerShell 7 (6?) shortens this cast to a backtick-e which is visually easier to read:
code {
write-host "`e[32;103m green on intense yellow `e[0m"
code }

  See also → Windows/PowerShell/host/ANSI[ANSI colors in PowerShell].

}

sa:


  → development/tools/scripts/personal/highlight_pl: a Perl script that prints ERROR in red and WARNING in yellow.

  → development/languages/Perl/modules/Term/ANSIColor

  → Linux/shell/bash/built-in/echo#bash-echo-colors[Coloring the output in Bash's `echo`]

  → development/languages/sed/examples/ansi-escape[sed example] to colorize a file.

  → Linux/shell/commands/tput#colors[`tput`: colors]

  → Windows/development/Portable-Executable/subsystem/console#win-virtual-terminal-sequences[Virtual Terminal Sequences on Windows]

  The PowerShell module → Windows/PowerShell/modules/personal/console[console], especially its function
  → Windows/PowerShell/modules/personal/console/get-ansiEscapedText[`get-ansiEscapedText`].

  In → Linux/shell/bash[bash's] `→ Linux/shell/bash/built-in/echo` command, the → Linux/shell/bash/built-in/echo#bash-echo-e[`-e`] flag interprets `\e` as `<ESC>`.

links:

  → http://ascii-table.com/ansi-escape-sequences.php

  → https://en.wikipedia.org/wiki/ANSI_escape_code[Wikipedia: ANSI escape codes]

  Microsoft Documentation: → https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences[Console Virtual Terminal Sequences]
