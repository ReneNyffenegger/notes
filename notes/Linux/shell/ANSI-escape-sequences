
*ANSI Escape Sequences* are instructions for consoles to position the cursor, change and set color and fonts and perform other operations.
-
These instructions are encoded in a series of characters whose first byte is the escape character (ASCII 27, octal `\033`, hex `0x1b`).
-
Apparently, VT 100 influenced these instructions heavily.

{ Colors

  { 16 basic colors

    There are eight colors, each of which is identified by a single digit:
    table { rl
     0 ☰ black
     1 ☰ red
     2 ☰ green
     3 ☰ yellow
     4 ☰ blue
     5 ☰ purple
     6 ☰ cyan
     7 ☰ white
    table }

    Each of these colors has a *high intensity* variant, which brings the number of *basic colors* to 16.

    In order to create a color code, the color-digit needs to be prepended with one or two other digits (the dot represents the digit for the color):
    table { rl
       3. ☰ foreground / normal intensity
       4. ☰ background / normal intensity
       9. ☰ foreground / high intensity
      10. ☰ background / high intensity
    table }

  }
  { 216 6-bit colors + 16 basic colors + 24 gray scale colors

    With `\e[38;5;nm` (foreground) and `\e[48;5;nm` (background colors), the color palette can be extended to 256 colors which are specified by `n`:
    table { ll
      `n` ☰
      0-7 ☰ 8 colors
      8-15 ☰ 8 intense color
      16 + 36*r + 6+g + b ☰ rgb value (each component having 6 values)
      232-255 ☰ 24 gray scalecolors, black to white
    table }

  }
  { 24-bit colors

    With `\e[38;2;r;g;bm` and `\e[48;2;r;g;bm`, The color palette is extended to *true colors*, `r`, `g` and `b` being values between `0` and `255`.

  }
  

}
{ Positioning the cursor

  Using `H` to position the cursor on specific coordinates.

  The first number ist the y coordinate, the second number the 
  x coordinate.

  gh|ANSI-escape-sequences|/position-cursor||

}
{ Clearing the screen

  gh|ANSI-escape-sequences|/clear-screen||

}
{ bg-48-fg-38-5

  The following script uses the `38;5` escape function to create 216 background colors (The red, green and blue components are each in the range 0 … 5)

  gh|ANSI-escape-sequences|/bg-48-fg-38-5||

  The output of the script is

  gh|ANSI-escape-sequences|/img/bg-48-fg-38-5.png||

  Apparently, → https://github.com/segaleran/eran-dotfiles/blob/master/bin/terminalcolors.py[python script] does more or less the same thing.
  -
  → https://gist.github.com/hSATAC/1095100[This is a perl script] does seems to do the same.
  -
  And then, there is also the shell command `msgcat --color=test`.

}
{ Resetting all settings

  gh|ANSI-escape-sequences|/reset-all||

}
{ Determine sequence for specfic key on keyboard

  In order to determine a key's emitted sequence, one can use `ctrl-v` followed by the key.

}
{ PowerShell

  In PowerShell, the escape character can be expressed by casting *27* or its hexadecimal representation *0x1b* to a `char`:
code {
Windows/PowerShell/command-inventory/noun/host/write[write-host] "$([char]0x1b)[40;91m red on black $([char]27)[0m"
code }

  PowerShell 7 (6?) shortens this cast to a backtick-e which is visually easier to read:
code {
write-host "`e[32;103m green on intense yellow `e[0m"
code }

}


sa:
  → development/tools/scripts/personal/highlight_pl: a Perl script that prints ERROR in red and WARNING in yellow.

  → development/languages/Perl/modules/Term/ANSIColor

  → Linux/shell/bash/built-in/echo#bash-echo-colors[Coloring the output in Bash's `echo`]

  → development/languages/sed/examples/ansi-escape[sed example] to colorize a file.

  → Linux/shell/commands/tput#colors[`tput`: colors]

  → Windows/development/Portable-Executable/subsystem/console#win-virtual-terminal-sequences[Virtual Terminal Sequences on Windows]

links:

  → http://ascii-table.com/ansi-escape-sequences.php

  → https://en.wikipedia.org/wiki/ANSI_escape_code[Wikipedia: ANSI escape codes]
