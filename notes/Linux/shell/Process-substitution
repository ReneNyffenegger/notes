
*Process substitution* allows a program to read the output of another program as though the output were a file. In a → Linux/shell, the command for the program producing the output is be embedded in `<( … )`.

{ Simple example

  The following example compares the file and directory names in two directories:
code {
$ → Linux/shell/commands/diff  <( → Linux/shell/commands/ls -1 ~/dir-one )  <( → Linux/shell/commands/ls -1 ~/dir-two )
code }

}
{ /dev/fd #proc-subst-dev-fd

  The output of a program is made available through a special «file» under `→ Linux/fhs/dev/fd` as is demonstrated with the following shell script (`show-filenames-and-their-content.sh`):
code {
for file in "$@"; do

   if [ -e "$file" ]; then

     echo Reading content of $file

     while IFS= read -r line || [ -n "$line" ]; do
        echo "  $line"
     done < "$file"

   else

      echo Not reading $file

   fi

done
code }

  Show the filename of a real file:
code {
$ ./show-filenames-and-their-content.sh → Linux/fhs/etc/passwd
Reading content of /etc/passwd
  root:x:0:0:root:/root:/bin/bash
  daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
  sync:x:4:65534:sync:/bin:/bin/sync
…
code }

  Show the filename of a file read with process substitution:
code {
$ ./show-filenames-and-their-content.sh <(/bin/sh -c 'echo a; echo b')
Reading content of /dev/fd/63
  a
  b
code }


}

sa:
  Using process substition with `→ Linux/shell/commands/pr` to → Linux/shell/commands/pr#pr-process-substitition[print the output of two programs side by side].
