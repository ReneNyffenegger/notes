$ Shell command: find
@ find

`find` searches for files underneath a file/directory hierarchy.

{ Business of find

→ https://docstore.mik.ua/orelly/unix/upt/index.htm[Unix Power Tools] has the following quote about `find`:
"
   `find`'s business is evaluating expressions - not locating files. Yes, find
   certainly locates files; but that's really just a side effect. For me,
   understanding this point was the conceptual breakthrough that made find much
   more useful.
" [→ https://docstore.mik.ua/orelly/unix/upt/ch17_12.htm[Chapter 17.12]: Finding Many Things with One Command ]

}
{ -inum

  Finds the file with an inode (that can be found for example with → Linux/shell/commands/ls[`ls -i`].

  This option is useful to → Linux/shell/commands/rm#rm-special-character[remove files with special characters].

}

{ Find files case insensitively

Use the `-iname` argument:
code {
$ find . -iname '*foo*'
code }

}

{ Find files that were changed during a certain period

{ During the last 5 minutes

code {
$ find . -cmin -5
code }
Note the minus in front of the five: this finds files changed between 0 and 5 minutes. with `-cmin 5` only files changed *exactly* five minutes ago would be found.
`-cmin +5` find files changed earlier than five minuts ago.

→ development/GNU[GNU] understands date reference strings that can be given to `→ Linux/shell/commands/date#d[date -d]`.
code {
$ find . -newermt '5 minutes ago'
code }

}
{ During the last n days

Similarly, files that were changed during the last week can be found so
code {
$ find . -ctime -7
code }

}
}
{ Files that are not owned by someone

With the exclamation mark, a premisse can be negated. This allows to search for files thare not owned by some specific user:
code {
$ find . ! -user rene -print
code }

}
{ Excluding directories #find-prune

Directries can be excluded with `-path ./path/do/excluded/dir -prune`.

Note `-prune` (as `-print`) always returns true.
-
Therefore, it will probably be followed by `-o`.

Find all files that contain a `b` in the filename but are not located under → development/version-control-systems/git/_git/index[`./git`]:
code {
$ find -path ./git -prune -o -type f -name '*b*' -print
code }

Excludling multple directories:
code {
$ find / -path /foo/bar/baz  -prune  -o \
         -path /abc/def      -prune  -o \
         -path → Linux/fhs/usr/include/  -prune  -o \
         -print
code }

}
{ Finding files with special permissions

  The `-perm` option allows to find files with specific permissions (such as readable by me, writeable by group or executable by anyone).

  { Creating some test files 

    In order to test this `-perm` option, we create some test files. The following script creates each possible file mode, that is in total 8⁴ (= 4096).

    gh|shell-commands|/find/perm/create-files||

  }
  { Find a file with exact mode

    When find's `-perm` option is given a octal number, it finds all files that have *exactly* these bits set.
    gh|shell-commands|/find/perm/find-exact-mode-octal||

    It's also possible to find for an exact permission with a symbolic notation. The following example
    finds all files that are `-----x--`:
    gh|shell-commands|/find/perm/find-exact-mode-symbolic_g=x||

    In order to specifiy multiple bits with the symbolic notation, they must be concatenated with a comma.
    -
    The following example finds als files that are `r----x---`.
    gh|shell-commands|/find/perm/find-exact-mode-symbolic_u=r,g=x||

  }
  { Find files with all desired bits set

    The following example finds files that are executable by the user *and* readable the group *and* readable by others.
    gh|shell-commands|/find/perm/find-all-mode-symbolic||

  }
  { Find files with any desired bits set

    The following example finds files that are executable by the user *or* readable the group *or* readable by others.
    gh|shell-commands|/find/perm/find-any-mode-symbolic||

  }



}
{ Operator precedence

  `-a` takes precedence over `-o`.


}
{ Global options

  Apparently, `find` distinguishes between *global options* (such as `-maxdepth`, `-xdev`, `-noleaf` …) and *non option* arguments (such as `-type`) that are used in expressions.

  It seems that the global options must preceede the non option arguments. `find . -type d maxdepth 1` would consequently give the following warning:
  *you have specified the -maxdepth option after a non-option argument -type, but options are not positional (-maxdepth affects tests specified before it as well as those specified after it).  Please specify options before other arguments*.
  -
  Switching `-maxdepth` and `-type` makes the warning go away.

}
{ Finding block devices

  → Linux/block-device[Block devices] can be identified with
code {
$ find → Linux/fhs/dev -b
code }

}

sa:

  → Linux/shell/commands/locate

  → https://github.com/ReneNyffenegger/shell-commands/tree/master/find

  → development/languages/Perl/modules/File/Find

  → Linux/shell/commands/index[Shell commands]

  A *very cheap and amateurish* equivalent of `touch` in → Windows/cmd-exe[cmd.exe] is → Windows/cmd-exe/commands/forfiles[`forfiles`].
