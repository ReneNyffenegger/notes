$ Shell command: find
@ find

code {
find [→ #find-H-L-P[-H]] [→ #find-H-L-P[-L]] [→ #find-H-L-P[-P]] [→ #find-D[-D debugopts]] [-Olevel] [dir…] [→ #find-expression[expression]]
code }

`find` descends into a filesystem hierarchy below `dir` (when ommited the current directory) and evaluates `expression` (if non given then `-print`) for each file or directory it encounters.

{ Expressions #find-expression

  The *expression* defines the *criteria* (tests) with which *matched* files are identified and the *actions* to perform.

  The behavior of the evaluation of the tests and actions can be influenced with *options*. `find` distinguishes between
    • global and
    • positional options.

  Criteria, actions and options evaluate to a boolean value (`true` or `false`). The value of any option is `true`.

 *Operators* logically combine the (boolean) values of the criteria, actions and options and evaluate to a boolean value.

  The default operator is `-a` (and)


  { Operators

    Operators in decreasing order of precedence are:
    table { ll
      `( expr )` ☰ Force precedence. Because paranthesis usually have a meaning in a → Linux/shell, they need to be escaped: `\( expr \)`
      `! expr` *or* `-not expr` ☰ Negation of `expr` (`-not` is not → Linux/POSIX compliant)
      `expr1 expr2` ☰ Shorthand for `expr1 -a expr2`
      `expr1 -a expr2` *or*  `-and expr2` ☰ AND-evaluation. Lazyly evaluated. `-and` is not POSIX compliant
      `expr1 -o expr2` *or*  `expr1 -or expr2` ☰ OR-evaluation. Lazyly evaluated. `-or` is not POSIX compliant
      `expr1, expr2[, …]` ☰ List: all expressions are evaluated. The list evaluates to the value of the last expression.
    table }

  }

}


{ Understading the working of find

→ https://docstore.mik.ua/orelly/unix/upt/index.htm[Unix Power Tools] has the following quote about `find`:
"
   find's business is evaluating expressions - not locating files. Yes, find
   certainly locates files; but that's really just a side effect. For me,
   understanding this point was the conceptual breakthrough that made find much
   more useful.
" [→ https://docstore.mik.ua/orelly/unix/upt/ch17_12.htm[Chapter 17.12]: Finding Many Things with One Command ]

  My first *aha experience* was to discover that tests and actions are by default combined with `-a` (logical and) if the operator is missing.
  -
  Thus the following two commands are equivalent:
code {
# Implicit and:
find . -path '*xyz*'    -print

# Explicit and:
find . -path '*xyz*' -a -print
code }

  { Lazy evaluation

    The second aha experience was to find out that `find` evaluates its argument lazily.

    In the following example, each file or directory name is compared with `./bin/debug`.
    -
    If the name differs, `-path ./bin/debug` returns `false` and there is no point in also evaluating `-prune` (which is implicitely connected to `-path` with `-and`).
    Because `-path … -and -prune` is `false`, `find` needs to also evaluate `-print` to check if the entire expression is `true`.
    -
    However, if the name matches, `find` also evaluates `-prune` to check if `-path ./bin/debug -and -prune` is `true`. If the path is a directory, `-prune` evaluates to true
    and `find` does not descend into this directory.
    The name of the directory in that case is not printed because `-path … -prune` is `true` and there is no point in also evaluating `-print`.

code {
$ find . -path ./bin/debug -prune -o -print
code }

  }

}
{ Tests

  table { ll

    `-amin n` ☰ File's last access time, in minutes
    `-anewer reference` ☰ File's last access time, in `n`*24 hours
    `-atime n` ☰
    `-cmin n` ☰
    `-cnewer reference` ☰
    `-ctime n` ☰
    `-empty` ☰ File (or directory?) is empty
    `-executable` ☰ Checks if file (or directory) is executable by current user, taking into account access control lists (which `-perm` ignores). Compare `-readable`
    `-false Always false.` ☰
    `-fstype type` ☰
    `-gid n` ☰
    `-group gname` ☰
    `-ilname pattern` ☰
    `-iname pattern` ☰
    `-inum n` ☰
    `-ipath pattern` ☰
    `-iregex pattern` ☰
    `-iwholename pattern` ☰
    `-links n` ☰ Number of hard links
    `-lname pattern` ☰
    `-mmin n` ☰
    `-mtime n` ☰
    `-name pattern` ☰
    `-newer reference` ☰
    `-newerXY reference` ☰
    `-nogroup` ☰
    `-nouser` ☰
    `-path pattern` ☰
    `-perm [-|+|/]mode` ☰ Permission bits: (`mode`: exactly, `-mode`: all bits, `/mode`: any bit, `+mode`: deprecated). Compare `-execute`
    `-readable` ☰ Checks if file (or directory) is executable by current user, taking into account access control lists (which `-perm` ignores). Compare `-executable`
    `-regex pattern` ☰ Checks if regular expression matches whole path of file. See also `-regextype` option
    `-samefile name` ☰
    `-size n[cwbkMG]` ☰ File size. `c` = bytes, `b` = blocks (512 bytes, the *default*), `w`: two-byte words, `k`: kibi-bytes (1024), `M`: Mebi-bytes (1024²), `G`: 1024³
    `-true` ☰
    `-type c` ☰
    `-uid n` ☰
    `-used n` ☰
    `-user uname` ☰ File's owner
    `-wholename pattern` ☰ Less portable than `-path`
    `-writable` ☰
    `-xtype c` ☰
    `-context pattern` ☰ → Linux/security/modules/SELinux only

  table }

}
{ Actions

  table { ll

    `-delete`        ☰ Deletes the file or empty directory and returns `true` if successful. Using `-delete` automatically turns on the `-depth` option.
    `-exec cmd ;`    ☰ Replaces `{}` in `cmd` with the current file name then executes the `cmd` with the working directory begin the starting directory. Returns `true` if `cmd` exits with `0`?
    `-exec cmd {} +` ☰ Similar to above, but performs an `xargs` like assembling of the command. Always returns `true`.
    `-execdir cmd`, `-execdir command {} +` ☰ Like `-exec` but command is executed with the working directory set to the directory where the file resides.
    `-fls file`  ☰ Like `-ls` but write to file like `-fprint`.
    `-fprint file` ☰ Writes full filename to `file` and returns `true`.
    `-fprint0 file` ☰ Like `-print0` but write to file like `-fprint.`
    `-fprintf file format` ☰ 
    `-ls` ☰ `ls -dils` on current file, return `true`
    `-ok cmd ;` ☰ Like `-exec` but ask user before executing command.
    `-okdir cmd ;` ☰ Like `-execdir` but ask user before executing command.
    `-print` ☰ Print full incl. new line name on stdout, return `true`.
    `-print0` ☰ Print full name followed by `NUL` character on stdout. (Compare to `-0` option of `xargs`)
    `-printf format` ☰ `true`
    `-prune` ☰ If file is a directory, do not descend into it and return `true`. If `-depth` is also specified, `-prune` has no effect. (Note that `-depth` is implied by `-delete`).
    `-quit` ☰ Immediately exit the `find` process. Useful to check for the existence of  a given file: `find $dir -name xyz -print -quit`
  table }

}

{ Search in path names

  The `-path` option concatenates the path and filename to match files.

  The following command finds files like `./abc/def/ghi/jkl`:
code {
find . -path '*bc*f*g*l' 
code }

}
{ -inum

  Finds the file with an inode (that can be found for example with → Linux/shell/commands/ls[`ls -i`].

  This option is useful to → Linux/shell/commands/rm#rm-special-character[remove files with special characters].

}

{ Find files case insensitively

Use the `-iname` argument:
code {
$ find . -iname '*foo*'
code }

}

{ Find files that were changed during a certain period

{ During the last 5 minutes

code {
$ find . -cmin -5
code }
Note the minus in front of the five: this finds files changed between 0 and 5 minutes. with `-cmin 5` only files changed *exactly* five minutes ago would be found.
`-cmin +5` find files changed earlier than five minuts ago.

→ development/GNU[GNU] understands date reference strings that can be given to `→ Linux/shell/commands/date#d[date -d]`.
code {
$ find . -newermt '5 minutes ago'
code }

}
{ During the last n days

Similarly, files that were changed during the last week can be found so
code {
$ find . -ctime -7
code }

}
}
{ Files that are not owned by someone

With the exclamation mark, a premisse can be negated. This allows to search for files thare not owned by some specific user:
code {
$ find . ! -user rene -print
code }

}
{ Excluding directories #find-prune

  Directries can be excluded with `-path ./path/do/excluded/dir -prune`.

  Note `-prune` (as `-print`) always returns true.
  -
  Therefore, it will probably be followed by `-o`.

  I most cases, *imho*, `-prune` should be combined with `-path` (not with `-name`).

  Find all files that contain a `b` in the filename but are not located under → development/version-control-systems/git/_git/index[`./git`]:
code {
$ find -path ./git -prune -o -type f -name '*b*' -print
code }

  Excluding multiple directories:
code {
$ find / -path /foo/bar/baz  -prune  -o \
         -path /abc/def      -prune  -o \
         -path → Linux/fhs/usr/include/  -prune  -o \
         -print
code }

}
{ Finding files with special permissions

  The `-perm` option allows to find files with specific permissions (such as readable by me, writeable by group or executable by anyone).

  { Creating some test files 

    In order to test this `-perm` option, we create some test files. The following script creates each possible file mode, that is in total 8⁴ (= 4096).

    gh|shell-commands|/find/perm/create-files||

  }
  { Find a file with exact mode

    When find's `-perm` option is given a octal number, it finds all files that have *exactly* these bits set.
    gh|shell-commands|/find/perm/find-exact-mode-octal||

    It's also possible to find for an exact permission with a symbolic notation. The following example
    finds all files that are `-----x--`:
    gh|shell-commands|/find/perm/find-exact-mode-symbolic_g=x||

    In order to specifiy multiple bits with the symbolic notation, they must be concatenated with a comma.
    -
    The following example finds als files that are `r----x---`.
    gh|shell-commands|/find/perm/find-exact-mode-symbolic_u=r,g=x||

  }
  { Find files with all desired bits set

    The following example finds files that are executable by the user *and* readable the group *and* readable by others.
    gh|shell-commands|/find/perm/find-all-mode-symbolic||

  }
  { Find files with any desired bits set

    The following example finds files that are executable by the user *or* readable the group *or* readable by others.
    gh|shell-commands|/find/perm/find-any-mode-symbolic||

  }



}
{ Operator precedence

  `-a` takes precedence over `-o`.


}
{ Global options

  Apparently, `find` distinguishes between *global options* (such as `-maxdepth`, `-xdev`, `-noleaf` …) and *non option* arguments (such as `-type`) that are used in expressions.

  It seems that the global options must preceede the non option arguments. `find . -type d maxdepth 1` would consequently give the following warning:
  *you have specified the -maxdepth option after a non-option argument -type, but options are not positional (-maxdepth affects tests specified before it as well as those specified after it).  Please specify options before other arguments*.
  -
  Switching `-maxdepth` and `-type` makes the warning go away.

}
{ Finding block devices

  → Linux/block-device[Block devices] can be identified with
code {
$ find → Linux/fhs/dev -b
code }

}
{ -H, -L, -P #find-H-L-P

  `-H`, `-L` and `-P` controls the treatment of *symbolic links*:
  table { ll
    `-P` ☰ Never follow symbolic links (the default behavior)
    `-L` ☰ Follow symbolic links. Affects the `-type` predicate. Compare with the  `-follow` option which takes effect where it appears.
    `-H` ☰ Do not follow symboic links except when processing the command line arguments.
  table }

}
{ -D debug-options #find-D

  `-D` allows to define debug options. These are specified separated by commas:
  table { ll
     `exec`   ☰ Show diagnostic information relating to `-exec`, `-execdir`, `-ok` and `-okdir`
     `opt`    ☰ Prints diagnostic information relating to the optimisation of the expression tree; see the `-O` option.
     `rates`  ☰ Prints a summary indicating how often each predicate succeeded or failed.
     `search` ☰ Navigate the directory tree verbosely.
     `stat`   ☰ Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.
     `tree`   ☰ Show the expression tree in its original and optimised form.
     `all`    ☰ Enable all of the other debug options (but help).
     `help`   ☰ Explain the debugging options.
  table }

}
{ -Olevel #find-O

  `-Olevel` specifies the level of query optimizationl

  `level` can be set to one of the following values:
  table { ll
    0 ☰ Equivalent to 1
    1 ☰ Default value: Expressions based only on the name of files are evaluated first.
    2 ☰ Evaluate `-type` and `-xtype` after file-name tests
    3 ☰ Full cost based query optimizer
  table }


}

sa:

  The shell command `→ Linux/shell/commands/locate`.

  → https://github.com/ReneNyffenegger/shell-commands/tree/master/find

  → development/languages/Perl/modules/File/Find

  → Linux/shell/commands[Shell commands]

  A *very cheap and amateurish* equivalent of `touch` in → Windows/dirs/Windows/System32/cmd_exe[cmd.exe] is → Windows/dirs/Windows/System32/cmd_exe/commands/forfiles[`forfiles`].
