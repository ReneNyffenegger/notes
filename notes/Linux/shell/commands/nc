$ Shell command: nc
@ nc

`nc` (or `netcat`) is a → Linux/shell/commands[shell command] for «just about everything under the sun invovling → development/web/TCP-IP[TCP], UDP or UNIX-domain sockets.

`nc` can be used, for example, to check if → development/web/TCP-IP/port#tcp-check-port-open[if a TCP port is open]:
code {
$ nc -vz server.xy 443
code }

{ Act as client

  By default, `nc` acts as a client and initiates connections.

  In order to use `nc` as a server, the command line `-l` (listen) must be specified.

  The following command listens on port 80 and prints to stdout what it receives, then terminates:
code {
$ → Linux/shell/commands/sudo nc -l 80
code }

  In order to continously listen for new connections, the `-k` option needs to be specified:
code {
$ → Linux/shell/commands/sudo nc -lk 80
code }
  
  After a client has connected, the above command reads from stdin and returns the read text to the client.
  -
  With `-d`, `nc` does not attempt to read from stdin.

  { Simple webserver #nc-webserver

    It's possible, to write a simple → web/webserver (inspired by → https://stackoverflow.com/a/52351480/180275[this stackoverflow answer]).  
code {
cnt=0
while true; do
   let cnt++
   resp=$"<h1>Simple webserver</h1>My PID is <code>$$<</code>p>Request counter: <code>$cnt</code>"
   len="$(printf '%s' "$resp" | wc -c)"
   printf "HTTP/1.1 200 OK\r\nContent-Encoding: text/html\r\nContent-Length: $len\r\n\r\n<h1>Simple Webserver</h1>My PID is <code>$$</code><p>Request counter is <code>$cnt</code>"  | nc -Nl 8000
done
code }

    The `-N` option specifies that the socket is shutdown when it receives an *EOF* on the input. The → Linux/man-page says that «some servers require this to finish their work».
    -
    In an Oracle Linux environment, I found `nc` to be `ncat` (`→ Linux/shell/commands/readlink -f → Linux/fhs/usr/bin/[/usr/bin]/nc` returned `/usr/bin/ncat`) which does not understand
    the `-N` option. In this environment, replacing `-Nl8000` with `-l 8000 --send-only` did the job.

    Also note that the request counter (`$cnt`) increases by two if the webserver is accessed with a traditional → development/web/browser because the browser also tries to fetch `/favicon.ico`.

  } 

}
{ Test client server

 `nc` can be used to rudimentarily test a client-server scenario.

  In a shell, the «server» is started using `-l` to indicate the → development/web/TCP-IP/port where the server is listening. `-q 1` tells the server to quit if it doesn't receieve any input from a client within 1 second after delivering the message (here: «hello from server):
code {
$ echo 'hello from server' | nc -l 1234 -q 1
code }

  After the server is started, a client is started in another shell that connects to port 1234, then prints the message received from the server and then delivers another message («this is the client») to the server:
code {
$ echo 'this is the client' | nc localhost 1234 -q 1
hello from server
code }

  Going back the the first shell, we see the server having printed the message from the client:
code {
this is the client
code }

}
{ Print a browser's HTTP request headers

code {
nc  -kdl 8000
code }

}
{ Binary alternatives

  After installing netcat in Debian with apt, I found the following alternatives:
code {
$ sudo apt install -y netcat
…
$ → Linux/shell/commands/readlink /bin/netcat
→ Linux/fhs/etc/alternatives[/etc/alternatives]/netcat

$ → Linux/shell/commands/readlink /bin/nc
→ Linux/fhs/etc/alternatives[/etc/alternatives]/nc

$ → Linux/shell/commands/readlink → Linux/fhs/etc/alternatives[/etc/alternatives]/netcat
/bin/nc.openbsd

$ → Linux/shell/commands/readlink → Linux/fhs/etc/alternatives[/etc/alternatives]/nc
/bin/nc.openbsd
code }

}

sa:
  → Linux/shell/commands[Shell commands]
