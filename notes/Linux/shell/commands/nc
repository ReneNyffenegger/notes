$ Shell command: nc
@ nc

`nc` (or `netcat`) is a a → Linux/shell/commands[shell command] for «just about everything under the sun invovling → development/web/TCP-IP[TCP], UDP or UNIX-domain sockets.

`nc` can be used, for example, to check if → development/web/TCP-IP/port#tcp-check-port-open[if a TCP port is open]:
code {
$ nc -vz server.xy 443
code }

{ Test client server

 `nc` can be used to rudimentarily test a client-server scenario.

  In a shell, the «server» is started using `-l` to indicate the → development/web/TCP-IP/port where the server is listening. `-q 1` tells the server to quit if it doesn't receieve any input from a client within 1 second after delivering the message (here: «hello from server):
code {
$ echo 'hello from server' | nc -l 1234 -q 1
code }

  After the server is started, a client is started in another shell that connects to port 1234, then prints the message received from the server and then delivers another message («this is the client») to the server:
code {
$ echo 'this is the client' | nc localhost 1234 -q 1
hello from server
code }

  Going back the the first shell, we see the server having printed the message from the client:
code {
this is the client
code }

}
{ Binary alternatives

  After installing netcat in Debian with apt, I found the following alternatives:
code {
$ sudo apt install -y netcat
…
$ → Linux/shell/commands/readlink /bin/netcat
→ Linux/fhs/etc/alternatives[/etc/alternatives]/netcat

$ → Linux/shell/commands/readlink /bin/nc
→ Linux/fhs/etc/alternatives[/etc/alternatives]/nc

$ → Linux/shell/commands/readlink → Linux/fhs/etc/alternatives[/etc/alternatives]/netcat
/bin/nc.openbsd

$ → Linux/shell/commands/readlink → Linux/fhs/etc/alternatives[/etc/alternatives]/nc
/bin/nc.openbsd
code }

}

sa:
  → Linux/shell/commands[Shell commands]
