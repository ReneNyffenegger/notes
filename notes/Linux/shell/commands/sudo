$ Shell command: sudo
@ sudo

`sudo` executes a command as anonther user, called the *target user*, which typically is → Linux/user/root.

Becoming → Linux/root: `sudo -i`.

{ Options

  table { lll
 
    `-A` ☰ `--askpass`                 ☰  use a helper program for password prompting
    `-b` ☰ `--background`              ☰  run command in the background
    `-B` ☰ `--bell`                    ☰  ring bell when prompting
    `-C` ☰ `--close-from=num`          ☰  close all file descriptors `>= num`
    `-D` ☰ `--chdir=directory`         ☰  change the working directory before running command
    `-E` ☰ `--preserve-env`            ☰  preserve user environment when running command
         ☰ `--preserve-env=list`       ☰  preserve specific → development/environment-variable
    `-e` ☰ `--edit`                    ☰  edit files instead of running a command
    `-g` ☰ `--group=group`             ☰  run command as the specified group name or ID
    `-H` ☰ `--set-home`                ☰  set → development/environment-variable#home[`HOME` variable] to target user's → Linux/home-directory
    `-h` ☰ `--help`                    ☰  display help message and exit
    `-h` ☰ `--host=host`               ☰  run command on host (if supported by plugin)
    `-i` ☰ `--login`                   ☰  run login shell as the target user; a command may also be specified
    `-K` ☰ `--remove-timestamp`        ☰  remove timestamp file completely
    `-k` ☰ `--reset-timestamp`         ☰  invalidate timestamp file
    → #sudo-l[`-l`] ☰ → #sudo-l[`--list`]  ☰  list user's privileges or check a specific command; use twice for longer format
    `-n` ☰ `--non-interactive`         ☰  non-interactive mode, no prompts are used
    `-P` ☰ `--preserve-groups`         ☰  preserve group vector instead of setting to target's
    `-p` ☰ `--prompt=prompt`           ☰  use the specified password prompt
    `-R` ☰ `--chroot=directory`        ☰  change the root directory before running command
    `-r` ☰ `--role=role`               ☰  create → Linux/security/modules/SELinux security context with specified role
    `-S` ☰ `--stdin`                   ☰  read password from → development/stdin-stdout-stderr[standard input]
    `-s` ☰ `--shell`                   ☰  run → Linux/shell as the target user; a command may also be specified
    `-t` ☰ `--type=type`               ☰  create → Linux/security/modules/SELinux security context with specified type
    `-T` ☰ `--command-timeout=timeout` ☰  terminate command after the specified time limit
    `-U` ☰ `--other-user=user`         ☰  in list mode, display privileges for user
    → #sudo-u[`-u`] ☰ → #sudo-u[`--user=user`]  ☰  run command (or edit file) as specified user name or ID
    `-V` ☰ `--version`                 ☰  display version information and exit
    `-v` ☰ `--validate`                ☰  update user's timestamp without running a command
         ☰ `--`                        ☰  stop processing command line arguments

  table }


  { Run a command as a specific user #sudo-u

  In order to run a command as a different user than the target user, the `-u` flag must be specified:
code {
sudo -u fred → Linux/shell/commands/ls ~fred
code }

  }
  { Print allowed/forbidden commands #sudo-l

What am I allowed to do?
code {
sudo -l
code }

Together with `-U username`, `-l` queries another → Linux/user[user's] permissions. To use `-U`, the `ALL` privilege is needed (or being → Linux/user/root).
code {
sudo -l -U fred
code }

  }

}
{ Not entering passwords

  In order for the → Linux/user[user] fred not to have to enter a → development/security/password[password] when executing `sudo`, the following line can be added to the → Linux/fhs/etc/sudoers[sudoers] file:
code {
fred ALL=(ALL) NOPASSWD:ALL
code }

  Alternatively, a user can create a little shell script that echoes his password:
code {
#!/bin/sh
→ Linux/shell/bash/built-in/echo SecretGarden
code }

  He then has to store the path to this shell script in the → development/environment-variable[environment variable] `SUDO_ASKPASS`:
code {
export SUDO_ASKPASS=~/bin/password
code }

When he then executes sudo with the `-A` option, sudo will execute the shell script and take the password from this shell script:
code {
sudo -A do-something.sh
code }


}
{ USERNAME is not in the sudoers file. This incident will be reported

  Only users listed in `→ Linux/fhs/etc/sudoers` are → Linux/fhs/etc/sudoers#allow-sudo-group[allowed to run `sudo`].
  If a user that is not listed in this file tries to run `sudo`, `sudo` will print the error message
 *USERNAME is not in the sudoers file. This incident will be reported*.

}
{ Redirection

  The following example creates the file `/tmp/xyz`. Because the redirection is executed with the privileges of the user executing `sudo`, it will belong to this user (and not to `root` as maybe expected):
code {
sudo echo foo > /tmp/xyz
code }

  In order to create the file so that it belongs to root, the following command might be used:
code {
sudo sh -c "echo foo > /tmp/xyz"
code }

}
{ Sessions

  A sudo session might be recorded and then later replayed with `→ Linux/shell/commands/sudoreplay`.

}

sa:

 `→ Linux/fhs/etc/sudo_conf` is the configuration file for `sudo`

 `→ Linux/fhs/var/log/sudo-io`

 `→ Linux/fhs/etc/pam_d/sudo`

 `→ Linux/fhs/var/run/sudo/ts` is the default directory where `sudo` stores time stamp files.

  → Linux/shell/commands[Shell commands] (such as `pkexec`).
