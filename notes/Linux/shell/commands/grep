$ Shell command: grep
@ grep

{ Recursive grep

  Only search `*.txt` files:
code {
grep -R --include=*.txt search-pattern
code }

}
{ -P #grep-P

  With the `-P` flag, the pattern is interpreted as a
  → development/languages/Perl/regular-expressions[Perl-compatible regular expression (PCRE)].

  The default is to interpret is as *basic regular expression* (BRE).

  For example, to match a digit with BRE, you'd use `[0-9]`, with pcre, `[0-9]` as well as `\d` is possible.
  -
  To match three consecutive numbers, the curly braces must be escaped with backslashes: `[0-9]\{3\}`. With pcre, they don't: `\d{3}`.


}
{ Searching for hexadecimal values

With → Linux/shell/bash/quoting/index#bash-ansi-c-quoting[ansi c quoting] (`$'...'`), it is possible to search for hexadecimal values. This is not a feature
of grep, but of the shell from which it is invoked.

The following example searches the → development/Unicode/UTF-8[utf 8] representation of `é`:

code {
$ grep $'\xc3\xa9' some-file
code }

}
{ Binary file ... matches

  Apparently, `grep` considers a file with a `NUL` character a binary file and won't by default print matched text for such files.

  In order to still print matches, one can use `-a` or the equivalent `--text` or still `--binary=text`.

}

sa:
  → tools/ack, a grep like tool, optimized for programmers.

  → Linux/shell/commands/index[Shell commands]

  → development/languages/Perl/functions/grep

  → development/version-control-systems/git/commands/grep

  → Linux/shell/bash/variables/regular-expressions
