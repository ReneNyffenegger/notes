$ Shell command: dd
@ dd

`dd` is used to read from an input file stream and to write to an output file stream. It can perform encoding conversions.

code {
dd [OPERAND]…
dd OPTION
code }

{ Operands

  table  { ll

   `bs=BYTES` ☰       Read and write up to `BYTES` bytes at a time (default: 512); overrides ibs and obs
   `cbs=BYTES` ☰      Convert `BYTES` bytes at a time
   `conv=→ #dd-conv-symbols[CONVS]` ☰ Convert the file as per the comma separated → #dd-conf-sybmols[symbol] list
   `count=N` ☰        Copy only N input blocks
   `ibs=BYTES` ☰      Read up to `BYTES` bytes at a time (default: 512)
   `if=FILE` ☰        Read from `FILE` instead of → development/stdin-stdout-stderr
   `iflag=→ #dd-flag-symbols[FLAGS]` ☰    Read as per the comma separated → #dd-flag-symbols[symbol] list
   `obs=BYTES` ☰      Write `BYTES` bytes at a time (default: 512)
   `of=FILE` ☰        Write to `FILE` instead of → development/stdin-stdout-stderr[stdout]
   `oflag=FLAGS` ☰    Write as per the comma separated symbol list
   `seek=N` ☰         Skip N obs-sized blocks at start of output
   `skip=N` ☰         Skip N ibs-sized blocks at start of input
   `status=LEVEL` ☰  `LEVEL` detemrmines the mount of information printed to → development/stdin-stdout-stderr[stderr]; `none` suppresses everything but error messages, `noxfer` suppresses the final transfer statistics, `progress` shows periodic transfer statistics

  table }

  { Multiplicatative suffixes

    `N` and `BYTES` may be followed by *multiplicative suffixes*:
    table { ll

     `c` ☰ 1,
     `w` ☰ 2,
     `b` ☰ 512,
     `kB` ☰ 1000,
     `K`, `KiB` ☰ 1024,
     `MB` ☰ 1000*1000,
     `M`, `MiB` ☰ 1024*1024,
     `xM` ☰ M,
     `GB` ☰ 1000*1000*1000,
     `G`, `MiB` ☰ 1024*1024*1024

    table }
    and so on for `T`, `P`, `E`, `Z`, `Y`.

  }
  { CONV symbols #dd-conv-symbols

    table { ll

      `ascii` ☰    From EBCDIC to → development/Unicode/ASCII
      `ebcdic` ☰   From ASCII to EBCDIC
      `ibm` ☰      From ASCII to alternate EBCDIC
      `block` ☰    Pad newline-terminated records with spaces to cbs-size
      `unblock` ☰  Replace trailing spaces in cbs-size records with newline
      `lcase` ☰    Change upper case to lower case
      `ucase` ☰    Change lower case to upper case
      `sparse` ☰   Try to seek rather than write all-NUL output blocks
      `swab` ☰     Swap every pair of input bytes
      `sync` ☰     Pad every input block with NULs to ibs-size; when used with block or unblock, pad with spaces rather than NULs
      `excl` ☰     Fail if the output file already exists
      `nocreat` ☰  Do not create the output file
      `notrunc` ☰  Do not truncate the output file
      `noerror` ☰  Continue after read errors
      `fdatasync` ☰ Physically write output file data before finishing
      `fsync` ☰  Likewise, but also write metadata

   table }

   }
   { FLAG symbols #dd-flag-symbols

     table { ll

       `append` ☰    Append mode (makes sense only for output; `conv=notrunc` suggested)
       `direct` ☰    Use direct I/O for data
       `directory` ☰  fail unless a directory
       `dsync` ☰     Use synchronized I/O for data
       `sync` ☰      Likewise, but also for metadata
       `fullblock` ☰  accumulate full blocks of input (iflag only)
       `nonblock` ☰  Use non-blocking I/O
       `noatime` ☰   Do not update access time
       `nocache` ☰   Request to drop cache.  See also `oflag=sync`
       `noctty` ☰    Do not assign controlling terminal from file
       `nofollow` ☰  Do not follow symlinks
       `count_bytes` ☰ Treat `count=N` as a byte count (`iflag` only)
       `skip_bytes` ☰  Treat `skip=N` as a byte count (`iflag` only)
       `seek_bytes` ☰  Treat `seek=N` as a byte count (`oflag` only)

    table }

  }
  { Options

   `dd` has two options only:
    table { ll
      `--help` ☰ Display this help and exit
      `--version` ☰ Output version information and exit
    table }

  }

}
{ Create a 1GB file with random data

  The following command creates a 1GB file with random data:
code {
$ dd of=1GB if=→ Linux/fhs/dev/random bs=GiB count=1
code }

}
{ Handling of trailing bytes

  If the input file is not exactly a multiple of the specified `bs`, the trailing bytes will, as expected, be copied.

  Here's a file with exactly 516 (= 2*256 + 4) bytes:
  gh|shell-commands|/dd/trailing-bytes/516.bytes||

  This file is copied with `dd`:
  gh|shell-commands|/dd/trailing-bytes/copy-file||

  The command will print `2+1` records in. The `2` indiciates that 2 blocks of 256 bytes where transferred, the `+1` refers to the incomplete (less than 256 byte) final block (of 4 bytes).

  If the input file had been exactly 512 bytes, `dd` would have reported `2+0 records in`.


}
{ Using dd to make backups of partitions

  Creating a backup of the harddisk (`/dev/sda`) of a laptop.
  
  Use a live CD to start Linux on the laptop.

  Make sure that no partition of the harddisk is mounted
code {
mount -l | grep sda
code }

  Mounting the backup destination drive
code {
mount -t ntfs /dev/sdb1 /mnt
code }

  Creating the destination folders
code {
mkdir /mnt/Backups/T420
code }

  Writing the backup
code {
dd if=/dev/sda bs=1M | gzip > /mnt/Backups/T420/backup.sda.gz
code }

  Restoring the backup
code {
gunzip -c /mnt/Backups/T420/backup.sda.gz | dd of=/dev/sda bs=1M  
code }

}
{ Misc

  Sending a `USR1` signal to a running `dd` → Linux/kernel/process makes it print I/O statistics to → development/stdin-stdout-stderr[standard error] and then resume copying.

}

sa:
  → Linux/shell/commands[Shell commands] such as `→ Linux/shell/commands/truncate`
