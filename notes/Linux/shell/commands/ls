$ Shell command: ls
@ ls

{ -l

  If the first character is `b`, `c`, `p` or `s` then it is a →Linux/device-file. (b = → Linux/block-device, c = character device, p = pipe device, s = socket device). 

  If the permission bits are followed by a dot (`-rwxr-x-r-x.`), it indicates a file with a SELinux context.

  A small letter `s` indicates that both the executable *and* the setuid/setgid bit are set. A capital letter `S` indicates that the setuid/setgit bit is set but
  the corresponding (and probably needed) executable bit is missing.

  The following script creates a few files and directories whose name corresponds to their permission bits. It then uses `ls -l` to display the permission bits:
  gh|shell-commands|/ls/l_permission-bits||

}
{ -i

  `-i` prints the inode (index) number of the file. This can be useful to
   → Linux/shell/commands/rm#rm-special-character[remove files with special characters].

}

sa:
  → Linux/shell/commands/stat

  → Linux/shell/commands/dircolors (to set `$LS_COLORS`)

  → https://github.com/ReneNyffenegger/shell-commands/tree/master/ls

  → Linux/shell/commands/index[Shell commands]
