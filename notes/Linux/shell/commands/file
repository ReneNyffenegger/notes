$ Shell command: file
@ file

`file` classifies (tests) the files given as command line argument.

code {
file [-bcdEhiklLNnprsSvzZ0] [--apple] [--exclude-quiet] [--extension] [--mime-encoding] [--mime-type] [-e testname] [-F separator] [-f namefile] [-m magicfiles] [-P name=value] file ...
file -C [-m magicfiles]
file [--help]
code }

{ Tests #file-tests

  There are three types of tests which are performed in the following order. The result of the first successful test is printed.
  table { ll
    → Linux/filesystem[filesystem] ☰ Based on the result of the `stat` → Linux/kernel/sys-calls[system call]
    magic ☰ check if file's content has a commonly known format (described in `→ Linux/fhs/etc/magic` and `/usr/share/misc/magic.mgc`)
    encoding/language ☰ Tries to determines characterset (ASCII, ISO-8859-X, EBCDIC etc.) and the → development/languages[programming language] in which the file is written (for example, the suffix `.br` subbests an input file for `troff` or the presence of the keword `struct` a → development/languages/C-C-plus-plus[C or C++] source file)
  table }

  If all three tests fail, the file is classified as `data`.

  The option `-e` can be used to → #file-exclude-tests[exclude specific tests].

}


{ Options

  table { llll

      ☰ `--apple` ☰ ☰ Causes the file command to output the file type and creator code as used by older MacOS versions.
    `-b`   ☰ `--brief` ☰ ☰ Do not prepend filenames to output lines.
    `-C`   ☰ `--compile` ☰ ☰ Write a `magic.mgc` output file that contains a pre-parsed version of the magic file or directory.
    `-c`   ☰ `--checking-printout` ☰ ☰ Cause a checking printout of the parsed form of the magic file. Usually used in conjunction with the `-m` flag to debug a new magic file before installing it.
    `-d`   ☰  ☰ ☰ Prints internal debugging information to → development/stdin-stdout-stderr[stderr].
    `-E`   ☰  ☰ ☰ On filesystem errors (file not found etc), instead of handling the error as regular output as → Linux/POSIX mandates and keep going, issue an error message and exit.
    `-e`   ☰ `--exclude` ☰ `testname` ☰ → #file-exclude-tests[exlude tests]
      ☰ `--exclude-quiet` ☰ ☰ Like -`-exclude` but ignore tests that file does not know about. (Intended for compatilibity with older versions of `file`).
      ☰ `--extension` ☰ ☰ Print a slash-separated list of valid extensions for the file type found.
    `-F`   ☰ `--separator` ☰ `separator` ☰ Use the specified string as the separator between the filename and the file result returned.  Defaults to `:`.
    `-f`   ☰ `--files-from` ☰ `namefile` ☰ Read the names of the files to be examined from namefile (one per line) before the argument list.
    `-h`   ☰ `--no-dereference` ☰ `option` ☰ causes symlinks not to be followed (on systems that support symbolic links).  This is the default if the environment variable POSIXLY_CORRECT is not defined.
    `-i`   ☰ `--mime` ☰ ☰ Causes the file command to output mime type strings rather than the more traditional human readable ones.  Thus it may say `text/plain; charset=us-ascii` rather than `ASCII text`.
      ☰ `--mime-type`, `--mime-encoding` ☰ ☰ Like`-i` but print only the specified element(s).
    `-k`   ☰ `--keep-going` ☰ ☰ Don't stop at the first match, keep going.  Subsequent matches will be have the string `\012-` prepended.  (If you want a newline, see the `-r` option.) The magic pattern with the highest strength (see the `-l` option) comes first.
    `-l`   ☰ `--list` ☰ ☰ Shows a list of patterns and their strength sorted descending by `magic(5)` strength which is used for the matching (see also the `-k` option).
    `-L`   ☰ `--dereference` ☰ ☰ option causes symlinks to be followed, as the like-named option in `→ Linux/shell/commands/ls` (on systems that support symbolic links). This is the default if the environment variable `POSIXLY_CORRECT` is defined.
    `-m`   ☰ `--magic-file` ☰ `magicfiles` ☰ Specify an alternate list of files and directories containing magic. This can be a single item, or a colon-separated list. If a compiled magic file is found alongside a file or directory, it will be used instead.
    `-N`   ☰ `--no-pad` ☰ ☰ Don't pad filenames so that they align in the output.
    `-n`   ☰ `--no-buffer` ☰ ☰ Force → development/stdin-stdout-stderr[stdout] to be flushed after checking each file. Only useful if checking multiple files and intended to be used by programs that want filetype output from a pipe.
    `-p`   ☰ `--preserve-date` ☰ ☰ On systems that support `utime(3)` or `utimes(2)`, attempt to preserve the access time of files analyzed, to pretend that file never read them.
    `-r`   ☰ `--raw` ☰ ☰ Don't translate unprintable characters to `\ooo`. Normally file translates unprintable characters to their octal representation.
    `-s`   ☰ `--special-files` ☰ ☰ Normally, file only attempts to read and determine the type of argument files which stat(2) reports are ordinary files.  This prevents problems, because reading special files may have peculiar consequences. Specifying the `-s` option causes file to also read argument files which are block or character special files.  This is useful for determining the filesystem types of the data in raw disk partitions, which are block special files.  This option also causes file to disregard the file size as reported by stat(2) since on some systems it reports a zero size for raw disk partitions.
    `-S`   ☰ `--no-sandbox` ☰ ☰ On systems where → https://github.com/seccomp/libseccomp[libseccomp] is available, the `-S` flag disables sandboxing which is enabled by default. This option is needed for file to execute external decompressing programs, i.e. when the `-z` flag is specified and the built-in decompressors are not available. On systems where sandboxing is not available, this option has no effect.  Note: This → Linux/distributions/Debian version of file was built without seccomp support, so this option has no effect.
    `-z`   ☰ `--uncompress` ☰ ☰ Try to look inside compressed files.
    `-Z`   ☰ `--uncompress-noreport` ☰ ☰ Try to look inside compressed files, but report information about the contents only not the compression.
    `-0`   ☰ `--print0` ☰ ☰ Output a null character `\0` after the end of the filename. Nice to `→ Linux/shell/commands/cut[cut(1)]` the output. This does not affect the separator, which is still printed.  If this option is repeated more than once, then file prints just the filename followed by a NUL followed by the description (or ERROR: text) followed by a second NUL for each entry.
      ☰ `--help` ☰ ☰  Print a help message and exit.
    `-v`   ☰ `--version` ☰ ☰

 table }

   { Exclude tests #file-exclude-tests

     The command line option `-e` or `--exclude` is given a list test names that will then be excluded from the → #file-test[test step]:
     table { ll
         `apptype` ☰   EMX application type (only on EMX).
         `ascii` ☰     Various types of text files (this test will try to guess the text encoding, irrespective of the setting of the `encoding` option).
         `encoding` ☰  Different text encodings for soft magic tests.
         `tokens` ☰    Ignored for backwards compatibility.
         `cdf` ☰       Prints details of Compound Document Files.
         `compress` ☰  Checks for, and looks inside, compressed files.
         `csv` ☰       Checks Comma Separated Value files.
         `elf` ☰       Prints ELF file details, provided soft magic tests are enabled and the elf magic is found.
         `json` ☰      Examines JSON (RFC-7159) files by parsing them for compliance.
         `soft` ☰      Consults magic files.
         `tar` ☰       Examines tar files by verifying the checksum of the 512 byte tar header.  Excluding this test can provide more detailed content description by using the soft magic method.
         `text` ☰      A synonym for `ascii`.

    table }

    }
    { -P, --parameter name=value
       table { lll

                  ~Name~      ☰  ~Default~ ☰  ~Explanation~
                   bytes      ☰   1048576  ☰   max number of bytes to read from file
                   elf_notes  ☰   256      ☰   max ELF notes processed
                   elf_phnum  ☰   2048     ☰   max ELF program sections processed
                   elf_shnum  ☰   32768    ☰   max ELF sections processed
                   indir      ☰   50       ☰   recursion limit for indirect magic
                   name       ☰   50       ☰   use count limit for name/use magic
                   regex      ☰   8192     ☰   length limit for regex searches
        table }

     }

     { -f, --files-from namefile

             Read the names of the files to be examined from namefile (one per line) before the argument list.

             Either namefile or at least one filename argument must be present; to test the standard input, use `-` as a filename argument.  Please note that namefile is unwrapped and the enclosed filenames
             are processed when this option is encountered and before any further options processing is done.
             -
             This allows one to process multiple lists of files with different command line arguments on the same file invocation.  Thus if you want to set the delimiter, you need to do it before you specify the list of files, like: “-F @ -f namefile”, instead of: “-f namefile -F @”.

      }


}

{ Examples

code {
$ file file.c file /dev/{wd0a,hda}
file.c:   C program text
file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),
          dynamically linked (uses shared libs), stripped
/dev/wd0a: block special (0/0)
/dev/hda: block special (3/0)

$ file -s /dev/wd0{b,d}
/dev/wd0b: data
/dev/wd0d: x86 boot sector

$ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}
/dev/hda:   x86 boot sector
/dev/hda1:  Linux/i386 ext2 filesystem
/dev/hda2:  x86 boot sector
/dev/hda3:  x86 boot sector, extended partition table
/dev/hda4:  Linux/i386 ext2 filesystem
/dev/hda5:  Linux/i386 swap file
/dev/hda6:  Linux/i386 swap file
/dev/hda7:  Linux/i386 swap file
/dev/hda8:  Linux/i386 swap file
/dev/hda9:  empty
/dev/hda10: empty

$ file -i file.c file /dev/{wd0a,hda}
file.c:      text/x-c
file:        application/x-executable
/dev/hda:    application/x-not-regular-file
/dev/wd0a:   application/x-not-regular-file
code }


}

{ Using file to determine character encoding #file-determine-character-encoding

  `file` can be used to determine the → development/Unicode/character-encoding of files:

code {
$ file *
12-240: UTF-8 Unicode text, with very long lines, with CRLF line terminators
13-147: ISO-8859 text, with very long lines, with CRLF line terminators
13-150: ISO-8859 text, with very long lines, with CRLF line terminators
14-157: UTF-8 Unicode text, with very long lines, with CRLF line terminators
16-250: UTF-8 Unicode text, with very long lines, with CRLF line terminators
16-278: UTF-8 Unicode text, with very long lines, with CRLF line terminators
17-003: ASCII text, with CRLF line terminators
code }

Note that it also determines if a line ends on CR or CRLF. → development/tools/scripts/personal/show-newline_pl[show-newline.pl] is a perl script that shows the
line ending of every line (which is useful if it changes).

Optionally, the `-i` flag might be used to print → development/web/Multipurpose-Internet-Mail-Extensions[MIME] type strings.

code {
$ file -i *
12-240: text/plain; charset=utf-8
13-147: text/plain; charset=iso-8859-1
13-150: text/plain; charset=iso-8859-1
14-157: text/plain; charset=utf-8
16-195: text/plain; charset=utf-8
16-247: text/plain; charset=utf-8
16-250: text/plain; charset=utf-8
16-278: text/plain; charset=utf-8
17-003: text/plain; charset=us-ascii
code }

}
{ Determine MIME type

code {
→ Linux/shell/commands/file --brief --dereference --mime-type foo.bar
code }

}

sa:

 `→ Linux/shell/commands/iconv` and `→ Linux/shell/commands/recode` can be used to convert the encoding in a file.

 `→ Linux/fhs/usr/share/misc/magic`, `~/.magic.mgc`, `~/magic`

  → Linux/shell/commands[Shell commands]

  `hexdump`, `→ Linux/shell/commands/od`, `strings`, `magic`

links:
  The home page for the open source implementation of `file` is → http://www.darwinsys.com/file/[here].
