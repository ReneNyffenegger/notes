$ Linux shell command: strings

`strings` finds sequences of (by default 4 or more) printable characters.

{ Options

  table { llll

`-a`☰ `--all` ☰ ☰ Scan the whole file, regardless of what sections it contains or whether those sections are loaded or initialized.  Normally this is the default behaviour, but strings can be configured so that the -d is the default instead.  The - option is position dependent and forces strings to perform full scans of any file that is mentioned after the - on the command line, even if the -d option has been specified.
`-d`☰ `--data` ☰ ☰ Only print strings from initialized, loaded data sections in the file.  This may reduce the amount of garbage in the output, but it also exposes the strings program to any security flaws that may be present in the BFD library used to scan and load sections.  Strings can be configured so that this option is the default behaviour.  In such cases the `-a` option can be used to avoid using the BFD library and instead just print all of the strings found in the file.
`-f`☰`--print-file-name` ☰ ☰ Print the name of the file before each string.
`-n` ☰ `-min-len`, `bytes=` ☰ `N` ☰ Print sequences of characters that are at least `N` characters long (overriding the default 4)
`-o`☰ ☰ ☰ Like `-t o`. Some other versions of strings have `-o` act like `-t d` instead.  Since we can not be compatible with both ways, we simply chose one.
`-t`☰ `--radix=` ☰ `radix` ☰ Print the offset within the file before each string. The single character argument specifies the radix of the offset: `o` for octal, `x` for hexadecimal, `d` for decimal.
`-e`☰`--encoding=`☰ `encoding`☰ Select the → development/Unicode/character-encoding[character encoding] of the strings that are to be found. Possible values for `encoding` are: `s` = single-7-bit-byte characters (ASCII, ISO 8859, etc., the default), `S` = single-8-bit-byte characters, `b` = 16-bit bigendian, `l` = 16-bit littleendian, `B` = 32-bit bigendian, `L` = 32-bit littleendian. Useful for finding wide character strings. (`l` and `b` apply to, for example, Unicode UTF-16/UCS-2 encodings).
`-T`☰ `--target` ☰ `bfdname` ☰ Specify an object code format other than your system's default format.
`-v`, `-V` ☰ `--version` ☰ ☰ Print the program version number to → development/stdin-stdout-stderr[stdout] and exit.
`-w`☰`--include-all-whitespace`☰ ☰ By default tab and space characters are included in the strings that are displayed, but other whitespace characters, such a newlines and carriage returns, are not. This option changes this so that all whitespace characters are considered to be part of a string.
`-s`☰`--output-separator` ☰ ☰ By default, output strings are delimited by a → development/line-break[new-line]. This option allows you to supply any string to be used as the output record separator. Useful with `--include-all-whitespace` where strings may contain new-lines internally.
 ☰ `--help`☰ ☰ Print a summary of the program usage to → development/stdin-stdout-stderr[stdout] and exit.

  table }

  Using `@file` reads command-line options (separated by whitespace) from `file`. `file` can contain another `@file` specification.

}
sa:

  `→ development/GNU/toolchain/binutils/ar`, `→ development/GNU/toolchain/binutils/nm`, `→ development/GNU/toolchain/binutils/objdump`, `ranlib`, `readelf`

  → Linux/shell/commands[Shell commands]
