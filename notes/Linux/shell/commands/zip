$ Create zip archives on the shell
@ zip

`zip` is a shell command to create → development/archive-files/zip[zip] → development/archive-files[archive] files.

code {
zip → #zip-options[options] archive_name file file …
code }

{ Creating a zip archive

  The main purpose of `zip` is to create a zip archive (if it doesn't exist) and add or replace files to/in it. The following
  command creates `target.zip` and adds three .txt files to it:
  gh|shell-commands|/zip/add-files.sh||

}
{ Creating a zip archive from a directory

  The command line option `-r` adds files recursively. Thus, it allows to create a zip file from an entire (sub-)directory:
  gh|shell-commands|/zip/add-directory.sh||

  The `-r` also adds hidden file (files whose name starts with a dot).

}

{ Showing a zip files' content

  With `→ Linux/shell/commands/unzip`, the content of a zip file can be shown with the command line option `-l`:
  gh|shell-commands|/zip/show-content.sh||

}
{ Unzipping into a specific directory

  The `-d` option of `→ Linux/shell/commands/unzip` allows to specify a directory into which the contents of a zip file should be extracted.

  The following command extracts `dir.zip` into the directory `→ Linux/fhs/tmp[/tmp]` (and creates `/tmp/dir`):
  gh|shell-commands|/zip/unzip-into-dir.sh||

}
{ Don't add full path

  With `-j` (junk directory names), the path from the root to the «top leve directory» of the files will be ommited
code {
$ zip -j archive.zip /path/to/a/directory/I/dont/want/to/see/in/the/archive
code }

}
{ List of options #zip-options

  table { ll

    `-f` ☰ freshen: update existing files only with changed files (i. e. don't add new files)
    `-d` ☰ delete entries in zipfile
    `-r` ☰ recurse into directories. Compare with `-R`
    `-0` ☰ store only
    `-1` ☰ compress faster
    `-q` ☰ quiet operation. Compare with `-v`
    `-c` ☰ Prompt for one-line comments for each entry. Compare with `-z`
    `-@` ☰ read names from stdin
    `-x` ☰ exclude the following names
    `-F` ☰ fix zipfile (-FF try harder)
    `-FS` ☰ filesync: update if date or size changed, delete if no OS match
    `-A` ☰ adjust self-extracting exe
    `-T` ☰ test zipfile integrity
    `-y` ☰ store symbolic links as the link instead of the referenced file
    `-e` ☰ encrypt
    `-u` ☰ update: only changed or new files
    `-m` ☰ move file into zipfile (i.e. delete files from file system after operation)
    `-j` ☰ junk (don't record) directory names
    `-l` ☰ convert LF to CR LF (-ll CR LF to LF)
    `-9` ☰ compress better
    `-v` ☰ verbose operation/print version info. Compare with `-q`
    `-z` ☰ Parmopt for comment for zipfile comment. Compare with `-c`
    `-o` ☰ make zipfile as old as latest entry
    `-i` ☰ include only the following names
    `-D` ☰ do not add directory entries
    `-J` ☰ junk zipfile prefix (unzipsfx)
    `-X` ☰ eXclude eXtra file attributes
    `-n` ☰ don't compress these suffixes
    `-t`, `-tt` ☰ Date filtering: exclude, include files modified after date, before date (date format `mmddyyyy` or `yyyy-mm-dd`)

  table }


  Use `-h2` to display more options.

}

sa:

 `→ Linux/shell/commands/gzip`, `→ Linux/shell/commands/unzip`

  → Linux/shell/commands[Shell commands]

  → development/languages/Perl/modules/index[Perl modules]
  `IO::Compress::Gzip`,
  → development/languages/Perl/modules/IO/Uncompress/Gunzip[`IO::Uncompress::Gunzip`],
  → development/languages/Perl/modules/Archive/Zip[`Archive::Zip`] and
  → development/languages/Perl/modules/Archive/Extract[`Archive::Extract`]

  The Windows unzipper `→ Windows/dirs/Windows/System32/expand_exe`
