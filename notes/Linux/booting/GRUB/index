$ GRUB
wp:GNU_GRUB

GRUB stands for *Grand Unified Bootloader*. It is
arguably the most flexible →development/boot-loader for → Linux.
-
Other Linux boot loaders are → Linux/booting/SYSLINUX and → Linux/booting/LILO.

GRUB can not only load Linux but other Operating Systems as well.

The main requirement for GRUB is to adhere to the *Multiboot Specification*.

Because GRUB understands filesystems and kernel image formats, it can load a kernel by just specifying its filename, drive and partition (as opposed to specifying the
physical address).

→ Linux/fhs/usr/lib/grub/_cpu_-_platform_[image directory] (s.a. → Linux/booting/GRUB/image-files).

{ Requirements and goals

}
{ GRUB Legacy vs GRUB 2

  There are two versions of GRUB:
    • GRUB Legacy (also referred to as GRUB 1)
    • GRUB 2

  Both of these versions can be referred to as GRUB, making it impossible to distinguish between them by name only.

  Development on GRUB Legacy has halted. GRUB 2 should be used.

}

{ Installing GRUB

  GRUB is usually installed into the → hardware/harddisk/MBR[MBR], using `→ Linux/shell/commands/grub-install`, for example `grub-install → Linux/fhs/dev/sdX[/dev/sda]`.

}
{ Bootloader

  GRUB's bootloader apparently loads → Linux/fhs/boot/grub/i386-pc/boot_img, then `→ Linux/fhs/boot/grub/i386-pc/core_img`, then
 `→ Linux/fhs/boot/grub/grub_cfg` and then the necessary `*.mod` files (under `→ Linux/fhs/boot/grub/i386-pc`).

}
{ Naming conventions

  A device is recognized by a name in paranthes, for example `(hd1)`.
  -
  The name of first hard disk is `hd0`, the name of the the second is `hd1` etc.

  Partitions are separated from the drive name by a comma, for example `(hd1,msdos3)`.

  A file is specfied like so: `(hd1,msdos3)/vmlinuz`.

  Grub does not distinguish SATA and IDE when counting the drive numbers.

}
{ Two boot methods

  GRUB boots either
  • the OS directly, or
  • it uses *chain-load* which loads another → Linux/booting/boot-loader[boot loader].

   Chain loading is only supported on PC BIOS and EFI platforms. 
   -
   Autogenerating config files for multi-boot environments depends on os-prober and has several shortcomings. 

}

{ Windows

  GRUB cannot directly boot Windows, it needs the *chain-load* mechanism.

}

{ TODO

  Partition numbers start with 1.

?`save_env` and `load_env` (in `grub.cfg`?) combined with the `grub-editenv` command make it possible to store a small amount of data accross reboots.

  Stanza

  { EFI systems

    On EFI systems with «fixed disk install», the EFI system partition must be mounted to `/efi` before executing `grub-install`.
   
    If the EFI system partition is mounted to a different directory (for eample `/mnt/efi`), it needs to be specfied:
code {
grub-install --efi-directory=/mnt/efi
code }

  }
  { Booting an OS

    { Directly

      An OS can be booted directly with the `boot` command.

    }
    { Chain loading an OS

      An OS such as Windows must be chain loaded.
code {
menuentry "Windows" {
	insmod       chain
	insmod       ntfs
	set          root=(hd0,1)
	chainloader +1
}
code }

    }

  }
  { Reserving a partition for GRUB (BIOS boot partition)

    It's possible to reserve a partition (the BIOS boot partition) for GRUB.
    -
    Putting GRUB on this partition reduces the risk for it to be overwritten.

    This partition requires the correct partition type (bios_grub):
code {
parted /dev/… set partition-number bios_grub on
code }

  }

}

sa:

 `→ Linux/fhs/boot/grub`

 `→ Linux/fhs/boot/grub/grub_cfg` is the configuration file, typically generated by `→ Linux/shell/commands/grub-mkconfig`.

  → Linux/booting/boot-loader[boot loaders].

