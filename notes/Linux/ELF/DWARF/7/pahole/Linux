$ Using pahole for Linux sources

{ Prepare a kernel with debug information

  In order to use → Linux/ELF/DWARF/7/pahole on the compiled → Linux/kernel/source[Linux sources], the Kernel must be compiled with *debug information*.

  First, we need to have a (→ development/version-control-systems/git/commands/clone#git-shallow-clone[shallow])copy of the sources:
code {
→ development/version-control-systems/git/commands/clone[git clone] → development/version-control-systems/git/commands/clone#git-shallow-clone[--depth 1] -b master https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git linux
cd linux
code }
  
  We then create a default configuration …
code {
→ Linux/kernel/compilation/make/defconfig
code }

  … and request that debug information is added to the built kernel:
code {
→ Linux/kernel/source/scripts/config --enable debug_info_dwarf_toolchain_default
→ Linux/shell/commands/yes '' | → Linux/kernel/compilation/make/oldconfig[make oldconfig]
code }

  Finally, we built the kernel
code {
→ Linux/kernel/compilation/make -j$(→ Linux/shell/commands/nproc)
code }

}
{ Using pahole

  { Show the layout of a struct

    The `-C` options specifies the name of the struct which we want to investigate:
code {
$ pahole → Linux/kernel/source/vmlinux -C → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-boot_param[boot_params]
struct boot_params {
        struct screen_info         screen_info;          /*     0    64 */
        /* --- cacheline 1 boundary (64 bytes) --- */
        struct apm_bios_info       apm_bios_info;        /*    64    20 */
        __u8                       _pad2[4];             /*    84     4 */
        __u64                      tboot_addr;           /*    88     8 */
        struct ist_info            ist_info;             /*    96    16 */

    … output snipped …

        struct → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-setup_header[setup_header]        hdr;                  /*   497   123 */
        /* --- cacheline 9 boundary (576 bytes) was 44 bytes ago --- */
        __u8                       _pad7[36];            /*   620    36 */
        /* --- cacheline 10 boundary (640 bytes) was 16 bytes ago --- */
        __u32                      edd_mbr_sig_buffer[16]; /*   656    64 */
        /* --- cacheline 11 boundary (704 bytes) was 16 bytes ago --- */
        struct boot_e820_entry     e820_table[128];      /*   720  2560 */
        /* --- cacheline 51 boundary (3264 bytes) was 16 bytes ago --- */
        __u8                       _pad8[48];            /*  3280    48 */
        /* --- cacheline 52 boundary (3328 bytes) --- */
        struct edd_info            eddbuf[6];            /*  3328   492 */
        /* --- cacheline 59 boundary (3776 bytes) was 44 bytes ago --- */
        __u8                       _pad9[276];           /*  3820   276 */

        /* size: 4096, cachelines: 64, members: 35 */
} __attribute__((__packed__));
code }

    Adding `q` shows the struct with less clutter and arguably more readable:
code {
$ pahole → Linux/kernel/source/vmlinux -C → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-boot_param[boot_params] -q
struct boot_params {
        struct screen_info         screen_info;
        struct apm_bios_info       apm_bios_info;
        __u8                       _pad2[4];
        __u64                      tboot_addr;
        struct ist_info            ist_info;

    … output snipped …

        struct → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-setup_header[setup_header]        hdr;
        __u8                       _pad7[36];
        __u32                      edd_mbr_sig_buffer[16];
        struct boot_e820_entry     e820_table[128];
        __u8                       _pad8[48];
        struct edd_info            eddbuf[6];
        __u8                       _pad9[276];
} __attribute__((__packed__));
code }

  }
  { Show file and line number where struct was defined

    Using `-I` shows where a struct is defined and used:
code {
$ pahole → Linux/kernel/source/vmlinux -C → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-boot_param[boot_params] -q -I
/* Used at: → Linux/kernel/source/arch/x86/kernel/head64_c */
/* <2c290e> → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h[./arch/x86/include/uapi/asm/bootparam.h]:185 */
struct boot_params {
        struct screen_info         screen_info;
        struct apm_bios_info       apm_bios_info;

    … output snipped …

} __attribute__((__packed__));
code }

  }
  { Expand members

    If the examined struct contains nested structs, the `-E` option allows to expand them recursively:
code {
$ pahole → Linux/kernel/source/vmlinux -C → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-boot_param[boot_params] -q -E
struct boot_params {
        struct screen_info {
                /* typedef __u8 */ unsigned char      orig_x;
                /* typedef __u8 */ unsigned char      orig_y;
                /* typedef __u16 */ short unsigned int ext_mem_k;

…
code }

  }
  { Find structs with a given embedded struct

    The `-i` (or `--contains`) option displays structs that contain a given struct:
code {
$ pahole → Linux/kernel/source/vmlinux -i → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-setup_header[setup_header]
→ Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-boot_param[boot_params]
code }


  }

}
