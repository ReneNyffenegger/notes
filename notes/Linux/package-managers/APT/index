
{ apt command line utility

 `→ Linux/package-managers/APT/commands/apt` is a command line utility for *package management*.
  -
  In contrast to `apt-get` and `→ Linux/package-managers/APT/commands/apt-cache`, `apt` is primarily intended for interactive use (as opposed to being used in scripts).

}

{ Repositories #apt-repositories

  TODO, see `→ Linux/fhs/etc/apt/sources_list`, `→ Linux/APT/commands/add-apt-repository`

}
{ Packages #apt-packages

  { Upgrade a package

  Probably with
code {
$ sudo apt-get install --only-upgrade PACKAGE-NAME
code }

  }
  { Search for a package #APT-search-pkg

code {
→ Linux/package-managers/APT/commands/apt-cache search   something
→ Linux/package-managers/APT/commands/apt       search   something
apt-cache pkgnames something
code }

code {
→ Linux/package-managers/APT/commands/apt-file search    regex
code }

     Find packages that contain a given file (here: → Linux/shell/commands/lspci[`/usr/bin/lspci`]). The following command uses the → Linux/package-managers/APT/commands/apt-file#apt-file-search-x[`-x`] option to specify a regular expression (which explains why
     the searched file name is embedded in `^…$`).
code {
$ → Linux/package-managers/APT/commands/apt-file search -x '^/usr/bin/lspci$'
pciutils: /usr/bin/lspci
code }

     The command's output indicates that the package `pciutils` contains the file.

  }
  { Show files of a package

    Similarly, the files contained in a package can be shown with `apt-file show`:
code {
$ → Linux/package-managers/APT/commands/apt-file#apt-file-show[apt-file show] pciutils
pciutils: /usr/bin/lspci
pciutils: /usr/bin/setpci
pciutils: /usr/sbin/update-pciids
pciutils: /usr/share/doc/pciutils/README.gz
pciutils: /usr/share/doc/pciutils/changelog.Debian.gz
…
code }


  }
  { Get package records (Description, maintainer, homepage section etc.)

code {
$ → Linux/package-managers/APT/commands/apt-cache/show pciutils
code }

  }
  { Check if a package is installed

code {
$ → Linux/distributions/Debian/dpkg/status python3
$ → Linux/package-managers/dpkg/commands/dpkg-query -s 
code }

  }
  { Dependencies

   *Forward dependencies* (aka normal dependencies) denote the packages upon which a given package depends.
    -
   *Reverse dependencies* are the set of packages which depend on a given package.

    Thus, when installing a package, its forward dependencies must be satisified.

    Depdencies can be shown with
      • `→ Linux/package-managers/APT/commands/apt-cache/showpkg`
      • `apt-cache depends`
      • `apt-cache rdepends`

  }
  { Binary vs source packages #apt-pkg-bin-vs-src

    There are two types of packages:
      • binary packages
      • source package

    The content of a binary package is installed into a canonical location.
    -
    In contract, a source package is «installed» into an arbitrary directory.

    Commands related to *binary packages* include
      • `→ Linux/package-managers/APT/commands/apt-src`
      • `→ Linux/package-managers/APT/commands/apt/build-dep`
      • `dpkg-source`

  }
  { Find out the URL of a package #apt-package-find-url

code {
$ → Linux/shell/commands/sudo → Linux/package-managers/APT/commands/apt-move#usr-lib-apt-move-fetch -t apt-move
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
http://deb.debian.org/debian/pool/main/a/apt-move/apt-move_4.2.27-6_amd64.deb
code }

    If a package is *not* installed, the URL is also printed with the following command. Note: its `--print-uris`, not `--print-urls`!
code {
$ apt-get install --print-uris  python3-asciitree
code }

  }
}
{ Package cache

  The *package cache* is an database that stores information about all available packages.

  The package cache can be queried with `apt-cache`.

}
{ Configuration #APT-config

 `→ Linux/package-managers/APT/commands/apt-config` queries → Linux/package-managers/APT configuration directives from `→ Linux/fhs/etc/apt/apt_conf`.

  The content of the so-called configuration space can be shown with
code {
→ Linux/package-managers/APT/commands/apt-config dump
code }

  `→ Linux/fhs/etc/apt/apt-file_conf` is used by `→ Linux/package-managers/APT/commands/apt-file` (if the file is present).

}
{ Files and directories

  table { lll

    ☰ ☰ ~Configuration item~

    `→ Linux/fhs/etc/apt` ☰ ☰
    `→ Linux/fhs/etc/apt/sources_list` ☰  Locations to fetch packages from. ☰ `Dir::Etc::SourceList`
    `→ Linux/fhs/etc/apt/preferences_d` ☰ ☰
    `/etc/apt/sources.list.d/` ☰ File fragments for locations to fetch packages from. ☰ `Dir::Etc::SourceParts`
    `→ Linux/fhs/var/lib/apt` ☰ ☰
    `→ Linux/fhs/var/lib/dpkg/lock` ☰ Compare with `/var/lib/dpkg/lock-frontend` ☰
    `→ Linux/fhs/var/lib/apt/lists` ☰ Storage area for state information for each package resource specified in `sources.list` ☰ `Dir::State::Lists`
    `/var/lib/apt/lists/partial/` ☰  Storage area for state information in transit. ☰ `Dir::State::Lists` (partial will be implicitly appended)
    `→ Linux/fhs/var/lib/apt/lists/lock` ☰ Used to «lock» the `→ Linux/fhs/var/lib/apt/lists` directory. ☰
    `/var/cache/apt/archives/` ☰  ☰
    `/var/cache/apt/partial/` ☰  ☰

  table }

}
{ PPA: Personal Package Archives

  A PPA is collection of packages that are hosted on Launchpad servers.

  Find PPAs on launchpad with → https://launchpad.net/ubuntu/+ppas[Personal Package Archives for Ubuntu]

}
{ Preventing a package from getting upgrades

code {
sudo apt-mark hold PKG
code }

}
{ Misc

  { Interaction APT - dpkg

   `man 5 apt.conf` has a section *how APT calls dpkg* which describes the configuration directives that control how APT invokes `dpkg`.

  }
  { Launchpad

    Launchpad offers as a service to host PPAs.

  }
  { Source code

    The source code for the APT tools is located at → https://salsa.debian.org/apt-team/apt.

  }
}

sa:

code {
→ Linux/shell/commands/man apt.conf
→ Linux/shell/commands/man apt-config
→ Linux/shell/commands/man apt-preferences
→ Linux/shell/commands/man sources.list
→ Linux/shell/commands/man apt-file
→ Linux/shell/commands/man apt-get
→ Linux/shell/commands/man apt-cache
→ Linux/shell/commands/man apt-secure
→ Linux/shell/commands/man apt-move
→ Linux/shell/commands/man apt-src
code }


 `→ Linux/package-managers/APT/commands/apt`

  → Linux/package-managers

 `→ Linux/distributions/Debian/dpkg`

 The main configuration file: `→ Linux/fhs/etc/apt/apt_conf`

 `→ Linux/APT/commands/add-apt-repository`

  The Python library `→ development/languages/Python/libraries/apt_pkg`
