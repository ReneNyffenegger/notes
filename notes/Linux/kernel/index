$ Linux Kernel
@ kernel

The kernel is responsible for
  • memory management
  • taks scheduling
  • I/O
  • interprocess communication (IPO)
  • etc

The kernel itself is loaded as an image file: `zImage` or `→Linux/fhs/boot/bzImage[bzImage]`.

The functionality of the kernel can be extended with → Linux/kernel/module[modules].

Log messages go to → Linux/fhs/var/log/kern_log.

{ Kconfig files

  A directory within the source tree usually contains (among others) the two files `Kconfig` and `Makefile`.

  The `Kconfig` files define → Linux/kernel/CONFIG[configuration symbols]. The values might be changed with `make menuconfig` (or other make targets). The actual
  values are stored in the → Linux/kernel/source/_config[`.config`] file which is used to build the kernel.

}
{ Rust

  → https://ojeda.dev/[Miguel Ojeda] leads the → https://github.com/Rust-for-Linux/linux[Rust for Linux] project whose goal is to add support for → development/languages/Rust to the Kernel.

  The Kernel is Rust enabled with the config option `CONFIG_RUST=y`

  In June 2022, Linux announced that the Rust branch(?) might be → https://www.phoronix.com/scan.php?page=news_item&px=Rust-For-Linux-5.20-Possible[merged already in Version 5.20].

}
{ Mailing lists #linux-kernel-mailing-list

  Mailing lists are the primary form of communication between developers, maintainers and other stakeholders in the kernel.

  The mailing list for a given subsystem is found in the → Linux/kernel/source/MAINTAINERS[`MAINTAINERS`] file (lines starting with `L:`) - but not every subsystem has a defined mailing list.

  Two interesting mailing lists, imho, are:
    • → https://marc.info/?l=linux-kernel[Linux kernel]: The *LKML* with patches, bug reports, and general discussions about the kernel.
    • → https://marc.info/?l=linux-doc[linux-doc]: Mailing list for → Linux/kernel/source/_topics/documentation[documentation]

  However… LKML has way too much traffic for anybody to really follow the messages in it.


  Archives are found at
    • → https://lkml.org/[The Linux Kernel Mailing List Archive] (lklm.org)
    • → http://vger.kernel.org/vger-lists.html[Majordomo lists at vger.kernel.org]

}
{ TODO

  → http://lxr.free-electrons.com/ident[Linux cross reference]. → http://makelinux.net/kernel_map/[Kernel map] (graphical front end to cross reference)

  { UserMode Linux (UML)

    Somehow, it is possible to run the kernel as a usermode application, this being referred to as *UserMode Linux* (UML).

  }
  { CPU

    At any given time, a CPU is in one of the following states:
      • not associated with any process, serving a hardware interrupt;
      • not associated with any process, serving a softirq or tasklet;
      • running in kernel space, associated with a process (user context);
      • running a process in user space.

    See also `→ Linux/kernel/source/include/linux/cpu_h#linux-struct-cpu`

  }
  { Memory

     General purpose memory allocation functions are: `kmalloc()`, `kzalloc()`, `kmalloc_array()`, `kcalloc()`, `vmalloc()` and `vzalloc()`.

     The → https://www.kernel.org/doc/html/v4.10/process/coding-style.html#allocating-memory[preferred coding style] when allocating memory is:
code {
p = kmalloc(sizeof(*p), …);
q = kmalloc_array(n, sizeof(…), …);
r = kcalloc(n, sizeof(…), …);
code }

  }
}

sa:

  → Linux/kernel/compilation

  → https://lwn.net/[lwn.net] summarizes current and planned changes to the kernel.
    -
  → http://lwn.net/Kernel/Index/[lwn.net/Kernel/Index] covers articles published in the LWN.net Kernel Page (starting in 2004).

  With → Windows/Subsystem-for-Linux[Windows Subsystem for Linux, Version 2], a Linux Kernel is available in → Windows.

  `kernel-ranchu-64`, found under → development/Android/SDK/dirs/system-images/android-apiLevel/variant/arch[Androids SDK's AVD system directory]

links:
  → http://www.tldp.org/LDP/tlk/ds/ds.html[Linux Data Structures] (which I believe is of version 2.0.33).
