$ Linux kernel CONFIG symbols

The `CONFIG_*` symbols are *defined* in the various `Kconfig` files spread within Linux' source tree.
-
The *actual values* are stored in the `→ Linux/kernel/source/_config` file.

{ CONFIG_DEBUG_INFO

  Needed to compile the → Linux/kernel with debug symbols.

}
{ CONFIG_DRM

  Direct rendering manager.

  { CONFIG_DRM_I915

    For Systems with *Intel Grpahics Media Accelerator* or *HD Graphics*.

  }

}
{ CONFIG_FUSE_FS #config_fuse_fs

  `CONFIG_FUSE_FS` is apparently needed for the ~ntfs-3g~ kernel module because ntfs-3g runs in user space (and depends on → Linux/filesystem/filesystems#fs-fuse[fuse]).

}
{ CONFIG_IKCONFIG_PROC #config_ikconfig_proc

  Required for `→ Linux/fhs/proc/config_gz`

}
{ CONFIG_SND #config_snd

  Advanced Linux sound architecture

  See also → #config_sound, → #config_sound_prime

}
{ CONFIG_SND_HDA_CODEC_REALTEK #config_snd_hda_codec_realtek

  I needed this to enable this driver for my sound card.

}
{ CONFIG_SOUND #config_sound

  Support for → Linux/sound cards, minimum setting for → Linux/sound/ALSA.

  See also → #config_snd, → #config_sound_prime

}
{ CONFIG_SOUND_PRIME #config_sound_prime

  Deprecated.

  See also → #config_snd, → #config_sound

}
{ CONFIG_INPUT_UINPUT

  User level driver support, apparently needed for → http://linuxfromscratch.org/blfs/view/stable/x/x7driver.html#libevdev[LFS: libevdev]

}
{ TODO

  Setting the config option `OPT` to `m` results in `#define CONFIG_OPT_MODULE 1` in `include/generated/autoconf.h`.

  The macros `IS_BUILTIN`, `IS_MODULE`, `IS_ENABLED` and `IS_REACHABLE` defined in `include/linux/kconfig.h`.

  { Some config options

    table { ll
      `EFI_HANDOVER_PROTOCOL` ☰ Support for the *deprecated* EFI handover protocol which defines alternative entry points into the EFI stub (which has not basis in the UEFI specification). Although the corresponding support is not present in upstream GRUB or other bootloaders, most distros build GRUB with downstream patches applied which rely on the handover protocol. See also `EFI_MIXED`.
      `EFI_MIXED` ☰ allows a 64-bit kernel to be booted on a 32-bit firmware (if CPU supported 64-bit mode). A mixed-mode enalbed kernal cannot be booted via the EFI boot stub, though - a bootloader that supports the EFI handover protocol must be used. See also `EFI_HANDOVER_PROTOCOL`
      `EFI_STUB` ☰ allows `bzImage` to be loaded directly be EFI firmware without a bootloader. See `Documentation/admin-guide/efi-stub.rst`.
      `FB` ☰  Frame buffer device (see also `→ Linux/fhs/dev/fbN`)
      `HYPERV` ☰ → Windows/optional-features/Hyper-V client drivers
      `HZ`, `HZ_100` etc. ☰ → https://github.com/torvalds/linux/blob/master/include/asm-generic/param.h[`include/asm-generic/param.h`] defines `HZ` to the value of `CONFIG_HZ` and has the comment *Internal kernel timer frequency*. See also `kernel/Kconfig.hz`
      `INPUT_EVDEV` ☰ Required for input device events to be accessible in `→ Linux/fhs/dev/input/eventX` (which seems to be necessary for X Server ?)
      `PACKET` ☰ The packet protocol allows applications (such as `tcpdump`) to communicate directly with network devices withou an intermediate network protocol. Apparently, `PACKET` needs to be enabled for `wpa_supplicant`.
      `X86`, `X86_32`, `X86_64` ☰
    table }
   
  }
  { Modification of CONFIG symbols #linux-config-modification

    As the Kernel is developed, `CONFIG` symbols are deleted, added or renamed with the potential consequence that → Linux/kernel/compilation/make/oldconfig[`make oldconfig`] won't necessarily produce a working Kernel anymore.

    A list of new config symbols can be produced with
code {
$ → Linux/shell/commands/cp /path/to/old.config → Linux/kernel/source/_config
$ → Linux/kernel/compilation/make → Linux/kernel/compilation/make/listnewconfig
code }

    The alternative brute force method is:
code {
$ → Linux/kernel/compilation/make → Linux/kernel/compilation/make/oldconfig
$ → Linux/kernel/source/scripts/diffconfig old.config .config
code }

  }
}

sa:

 `→ Linux/kernel/source/init/Kconfig`

  → Linux/kernel/configuration-database

  → Linux/kernel/CONFIG/DEBUG_MUTEXES
  → Linux/kernel/CONFIG/DYNAMIC_FTRACE
  → Linux/kernel/CONFIG/EFI_STUB
  → Linux/kernel/CONFIG/KASAN
  → Linux/kernel/CONFIG/KEYBOARD_ATKBD
  → Linux/kernel/CONFIG/LOCALVERSION
  → Linux/kernel/CONFIG/LOCALVERSION_AUTO
  → Linux/kernel/CONFIG/LOG_BUF_SHIFT
  → Linux/kernel/CONFIG/MAGIC_SYSRQ
  → Linux/kernel/CONFIG/MAGIC_SYSRQ_DEFAULT_ENABLE
  → Linux/kernel/CONFIG/PHYSICAL_ALIGN
  → Linux/kernel/CONFIG/PHYSICAL_START
  → Linux/kernel/CONFIG/PREEMPT
  → Linux/kernel/CONFIG/PRINTK_TIME
  → Linux/kernel/CONFIG/SECURITY_YAMA
  → Linux/kernel/CONFIG/SMP
  → Linux/kernel/CONFIG/STACKTRACE_SUPPORT
  → Linux/kernel/CONFIG/SYSFS
  → Linux/kernel/CONFIG/TRACE_IRQFLAGS_SUPPORT
  → Linux/kernel/CONFIG/X86_BIGSMP
  → Linux/kernel/CONFIG/X86_UP_APIC
  → Linux/kernel/CONFIG/X86_UP_IOAPIC

 `→ Linux/fhs/proc/config_gz` contains the config option values with which the Kernel was built.
