$ scripts/config

`scripts/config` allows to manipulate options in a `.config` file from the command line.

code {
$ cd $LINUX_SRC_ROOT

$./scripts/config --set-val CONFIG_OPTION    y
$./scripts/config --enable  CONFIG_BRIDGE
$./scripts/config --enable  CONFIG_MODULES
$./scripts/config --disable CONFIG_X25
$./scripts/config --module  CONFIG_NFT

#
#  Apply Kconfig dependencies to modified .config:
#
$ make oldconfig
code }


{ Usage

code {
$ config options command ...
code }

{ commands

  table { llll

   `--enable` ☰ `-e` ☰ `option` ☰ Enable `option`
   `--disable` ☰ `-d` ☰ `option` ☰ Disable `option`
   `--module` ☰ `-m`  ☰ `option` ☰ Turn `option` into a module
   `--set-str` ☰ ☰ `option "string"` ☰ Set `option` to `"string"`
   `--set-val` ☰ ☰ `option value` ☰ Set `option` to `value`
   `--undefine` ☰ `-u` ☰ `option` ☰ Undefine `option`
   `--state` ☰ `-s` ☰ `option` ☰  Print state of `option` (`n`, `y`, `m`, `undef`)
   `--enable-after` ☰ `-E` ☰ `beforeopt option` ☰ Enable `option` directly after other option
   `--disable-after` ☰ `-D` ☰ `beforeopt option` ☰  Disable `option` directly after other option
   `--module-after` ☰ `-M` ☰ `beforeopt option` ☰ Turn `option` into module directly after other option

  table }

  commands can be repeated multiple times

}
{ options:

code {
--file config-file   .config file to change (default .config)
--keep-case|-k       Keep next symbols' case (dont' upper-case it)
code }

}

}
{ Misc

  `config` doesn't check the validity of the `.config` file. This is done at next make time.

  By default, `config` will upper-case the given symbol. Use `--keep-case` to keep the case of all following symbols unchanged.

 `config` uses `CONFIG_` as the default symbol prefix. Set the environment variable `CONFIG_` to the prefix to use. Eg.: `CONFIG_="FOO_" config …`

}

sa:
 
  → Linux/kernel/source/scripts[Other scripts]

  → Linux/kernel/compilation
