$ arch/x86/include/asm/syscall.h

*Access to user system call parameters and results* (See `asm-generic/syscall.h` for description of what we must do here).

{ sys_call_ptr_t #sys_call_ptr_t

 `sys_call_ptr_t` is a syscall function pointer:
code {
typedef long (*sys_call_ptr_t)(const struct pt_regs *);
code }

  See also the `→ #sys_call_table` array

}
{ sys_call_table #sys_call_table

 `sys_call_table` is an array of `→ #sys_call_ptr_t`. In `syscall.h`, it is defined as
code {
extern const sys_call_ptr_t sys_call_table[];
code }

 `sys_call_table` is  populated in `→ Linux/kernel/source/arch/x86/um/sys_call_table_64_c` and/or `→ Linux/kernel/source/arch/x86/entry/syscall_64_c`.

  The function corresponding to a sys call number is looked up in the array and called in → Linux/kernel/source/arch/x86/entry/common_c#do_syscall_x64[`do_syscall_x64()`].

  A note in the source file says that `sys_call_table[]` is no long used for system calls but that `→ Linux/kernel/source/kernel/trace/trace_syscalls_c` still wants to know the system call address.

}

sa:
 `→ Linux/kernel/source/include/linux/syscalls_h`
