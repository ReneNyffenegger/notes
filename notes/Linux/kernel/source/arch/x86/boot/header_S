$ arch/x86/boot/header.S

`arch/x86/boot/header.S` defines a `_start` symbol.
-
Does a bootloader like GRUB jump to this location when it has loaded the kernel image?

{ TODO

  The file contains the following comments
    • The size of the bzImage is written in `→ Linux/kernel/source/arch/x86/boot/tools/build_c`
    • The offset & size fields are filled in by `build.c`
    • The EFI application loader requires a relocation section because EFI applications must be relocatable. The `.reloc` offset & size fields are filled in by `build.c`

  
  → https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/efi-stub.rst[`Documentation/admin-guide/efi-stub`] contains this quote:   
  " 
    On the x86 and ARM platforms, a kernel zImage/bzImage can masquerade as a
    PE/COFF image, thereby convincing EFI firmware loaders to load it as an EFI
    executable. The code that modifies the bzImage header, along with the
    EFI-specific entry point that the firmware loader jumps to are collectively
    known as the "EFI boot stub", and live in arch/x86/boot/header.S and
    drivers/firmware/efi/libstub/x86-stub.c, respectively.
  "
   

  The file contains the following code which I assume to jump to the `main` function defined in `→ Linux/kernel/source/arch/x86/boot/main_c`:
code {
# Jump to C code (should not return)
  calll   main
code }


 `CONFIG_EFI_STUB`

}

sa:
? It seems that the compressed output of `header.S` is decompressed with functionality defined in `→ Linux/kernel/source/arch/x86/boot/compressed/misc_c`.
