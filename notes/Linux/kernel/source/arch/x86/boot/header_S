$ arch/x86/boot/header.S

`arch/x86/boot/header.S` defines a `_start` symbol.
-
Does a bootloader like GRUB jump to this location when it has loaded the kernel image?

{ Optional Header

  { AddressOfEntryPoint #header_S-AddressOfEntryPoint

    The value of `AddressOfEntryPoint` is filled by `→ Linux/kernel/source/arch/x86/boot/tools/build` so that it points to
    → Linux/kernel/source/drivers/firmware/efi/libstub/x86-stub_c#linux-x86-efi_pe_entry[`efi_pe_entry`] (defined in
   `→ Linux/kernel/source/drivers/firmware/efi/libstub/x86-stub_c` and located in the `.text`
    section), see → https://github.com/torvalds/linux/blob/1c84724ccb1a9f6eaf727ded49dd7e22ac62cc5b/arch/x86/boot/tools/build.c#L262-L265[source code].

  }

}
{ Global symbol hdr

  The linker script `arch/x86/boot/setup.ld` puts the  
  → https://github.com/torvalds/linux/blob/0e945134b680040b8613e962f586d91b6d40292d/arch/x86/boot/setup.ld#L16-L17[`.header` section to offset 495].
  -
  Because the `.header` section has a → https://github.com/torvalds/linux/blob/0e945134b680040b8613e962f586d91b6d40292d/arch/x86/boot/header.S#L283-L287[`sentinel` of two bytes] and is
  then followed by `hdr`, the offset of `hdr` is 497.
  -
  The → https://github.com/torvalds/linux/blob/0e945134b680040b8613e962f586d91b6d40292d/arch/x86/boot/setup.ld#L62[`. = ASSERT(hdr = 0x1f1, …)`] in the `arch/x86/boot/setup.ld`
  makes sure that `hdr` starts at the offset 497.

  Fields defined under → https://github.com/torvalds/linux/blob/0e945134b680040b8613e962f586d91b6d40292d/arch/x86/boot/header.S#L287[`.globl hdr`] are:
  table { lrrl
    ~Name~ ☰ ~Offset~ ☰ ~Bytes~ ☰ 
    `setup_sects` ☰ 497 ☰ 1 ☰ Size of the setup in sectors. Filled by `→ Linux/kernel/source/arch/x86/boot/tools/build`.
    `root_flags` ☰ 498 ☰ 2 ☰ If set (=1?), the root is mounted read only. Value of `ROOT_RDONLY` (default = `1`)?
    `syssize` ☰ 500 ☰ 4 ☰ The size of the 32-bit code in 16-byte paras. Filled by `→ Linux/kernel/source/arch/x86/boot/tools/build`.
    `ram_size` ☰ 504 ☰ 2 ☰ *Obsolete*? For `bootsect.S`?
    `vid_mode` ☰ 506 ☰ 2 ☰ Video mode control. Value of `SVGA_MODE`
    `root_dev` ☰ 508 ☰ 2 ☰ Default root device number. Filled by `→ Linux/kernel/source/arch/x86/boot/tools/build`.
    `boot_flag` ☰ 510 ☰ 2 ☰ `0xAA55` (magic number for the final two bytes of the first sector of an MBR).
    `jump` ☰ 512 ☰ 2 ☰ Machine code jump instruction: `0xeb` followed by `start_of_setup - 1f`. This jump seems to be aligned with the `_start` symbol in the object file?
    `header` ☰ 514 ☰ 4 ☰ `HDrS`
    `version` ☰ 518 ☰ 2 ☰ The header version number: `0x020f`
    `realmode_swtch` ☰ 520  ☰ 4 ☰ `0x00000000`
    `start_sys_seg` ☰ 524 ☰ 2 ☰ Obsolete (and even meaningless). Value `SYSSEG` (= `0x1000` which is the *historical load address* `>> 4`).
    `kernel_version` ☰ 526 ☰ 2 ☰ `kernel_version-512`. This value points to the *kernel version string* above the section of header (or so).
    `type_of_loader` ☰ 528 ☰ 1 ☰ `0` = ancient bootloader. Newer bootloaders know to change this. See `Documentation/arch/x86/boot/rst`.
    `loadflags` ☰ 529 ☰ 1 ☰ Value of `LOADED_HIGH`. Indicates if kernel needs to be loaded high?
    `setup_move_size` ☰ 530 ☰ 2 ☰ `0x8000` size to move, when setup is not loaded at `0x90000`. We will move setup to `0x90000` then just before jumping into the kernel. However, only the loader knows how much data behind us also needs to be loaded.
    `code32_start` ☰ 532 ☰ 4 ☰ Default for big kernel: `0x100000`. Loaders can put a different start address for 32-bit code here.
    `ramdisk_image` ☰ 536 ☰ 4 ☰ Address of the loaded ramdisk image. The loader puts this address.
    `ramdisk_size` ☰ 540 ☰ 4 ☰ Size of the ramdisk.
    `bootsect_kludge` ☰ 544 ☰ 4 ☰ *Obsolete*
    `heap_end_ptr` ☰ 548 ☰ 2 ☰ `_end+STACK_SIZE-512`
    `ext_loader_ver` ☰ 550 ☰ 1 ☰ `0`. Extended boot loader version
    `ext_loader_type` ☰ 551 ☰ 1 ☰ `0`. Extended boot loader type
    `cmd_line_ptr` ☰ 552 ☰ 4 ☰ In header version `0x0202` or later: If nonzero, this value is a pointer to the *kernel command line*. This command line should be located between the start of setup and the end of low memory (`0xA0000`). Otherwise, it may get overwritten before it is readhj
    `initrd_addr_max` ☰ 556 ☰ 4 ☰ In header version `0x0203` or later: The highest safe address for the contents of an initrd The current kernel allows up to 4 GB, but leave it at 2 GB to avoid possible bootloader bugs.
    `kernel_alignment` ☰ 560 ☰ 4 ☰ Value of `CONFIG_PHYSICAL_ALIGN`, the *phyisical address alignment*. This is reaquired for protected mode.
    `relocatable_kernel` ☰ 564 ☰ 1 ☰ `1` if `CONFIG_RELOCTABLE` is defined, `0` otherwise.
    `min_alignment` ☰ 565 ☰ 1 ☰ Value of `MIN_KERNEL_ALIGN_LG2` (minimum alignment)
    `xloadflags` ☰ 566 ☰ 2 ☰
    `cmdline_size` ☰ 568 ☰ 4 ☰ Length of the command line (`COMMAND_LINE_SIZE - 1`)
    `hardware_subarch` ☰ 572 ☰ 4 ☰ Subarchitecture. For normal x86 PCs, the default is `0`
    `hardware_subarch_data` ☰ 580 ☰ 8 ☰ `0`
    `payload_offset` ☰ 584 ☰ 4 ☰ Value of `ZO_input_data` (defined in `→ Linux/kernel/source/arch/x86/boot/zoffset_h`)
    `payload_length` ☰ 588 ☰ 4 ☰ Value of `ZO_z_input_len` (defined in `→ Linux/kernel/source/arch/x86/boot/zoffset_h`)
    `setup_data` ☰ 596 ☰ 8 ☰ (Physical) pointer to single linked list of `setup_data`
    `pref_address` ☰ 604 ☰ 8 ☰  The *preferred load address* (value of `LOAD_PHYSICAL_ADDR`)
    `init_size` ☰ 608 ☰ 4 ☰ Kernel initialization size = Value of → https://github.com/torvalds/linux/blob/71e58659bfc02e4171345f80b13d6485e9cdf687/arch/x86/boot/header.S#L573-L582[`INIT_SIZE`] (which is set to the greater size of the uncompressed or compressed kernel)
    `handover_offset` ☰ 612 ☰ 4 ☰ Filled by `→ Linux/kernel/source/arch/x86/boot/tools/build`
    `kernel_info_offset` ☰ 616 ☰ 4 ☰ Filled by `→ Linux/kernel/source/arch/x86/boot/tools/build`
  table }

  These fields are exposed in `struct setup_header` whose definition is found in `→ Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h` (and copied to `usr/include/asm/bootparam.h`).

  The binary file for this header is compiled into `→ Linux/kernel/source/arch/x86/boot/setup_bin`.

}

{ TODO

  The file contains the following comments
    • The size of the bzImage is written in `→ Linux/kernel/source/arch/x86/boot/tools/build_c`
    • The offset & size fields are filled in by `build.c`
    • The EFI application loader requires a relocation section because EFI applications must be relocatable. The `.reloc` offset & size fields are filled in by `build.c`

  
  → https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/efi-stub.rst[`Documentation/admin-guide/efi-stub.rst`] contains this quote:   
  " 
    On the x86 and ARM platforms, a kernel zImage/bzImage can masquerade as a
    PE/COFF image, thereby convincing EFI firmware loaders to load it as an EFI
    executable. The code that modifies the bzImage header, along with the
    EFI-specific entry point that the firmware loader jumps to are collectively
    known as the "EFI boot stub", and live in arch/x86/boot/header.S and
    → Linux/kernel/source/drivers/firmware/efi/libstub/x86-stub_c, respectively.
  "

  The file contains the following code which I assume to jump to the `main` function defined in `→ Linux/kernel/source/arch/x86/boot/main_c`:
code {
# Jump to C code (should not return)
  calll   main
code }


 `CONFIG_EFI_STUB`

 `header.S` includes `→ Linux/kernel/source/arch/x86/boot/zoffset_h`.

}

sa:
? It seems that the compressed output of `header.S` is decompressed with functionality defined in `→ Linux/kernel/source/arch/x86/boot/compressed/misc_c`.
