$ arch/x86/entry/common.c

{ do_syscall_64() #do_syscall_64

 `do_syscall_64()` is called from → Linux/kernel/source/arch/x86/entry/entry_64_S#linux-entry_SYSCALL_64[`entry_SYSCALL_64`] (assembly code in `→ Linux/kernel/source/arch/x86/entry/entry_64_S`).

 `do_syscall_64()` calls → #do_syscall_x64[`do_syscall_x64()`]

  The signature of `do_syscall_64` is
code {
__visible noinstr
void do_syscall_64(
   struct pt_regs *regs,
   int             nr
)
code }

}
{ do_syscall_x64() #do_syscall_x64

 `do_syscall_x64(struct pt_regs, int nr)`  calls `x64_sys_call`:
code {
unr = array_index_nospec(unr, NR_syscalls);
regs->ax = → Linux/kernel/source/arch/x86/entry/syscall_64_c#x64_sys_call[x64_sys_call](regs, unr);
code }

rem {
looks up passed sys call number (2nd argument `nr`) in the  `→ Linux/kernel/source/arch/x86/include/asm/syscall_h#sys_call_table` array of function pointers and calls the function. The return value is assigned to the `ax` register.
rem }

 `do_syscall_x64()` is called by → #do_syscall_64[`do_syscall_64()`].

}
