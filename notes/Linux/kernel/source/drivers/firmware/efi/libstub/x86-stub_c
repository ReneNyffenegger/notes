$ drivers/firmware/efi/libstub/x86-stub.c

→ https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/efi-stub.rst[`Documentation/admin-guide/efi-stub.rst`] says that
`drivers/firmware/efi/libstub/x86-stub.c` and `→ Linux/kernel/source/arch/x86/boot/header_S` are collectively known as the *EFI boot stub*, which is the code
that modifies the `bzImage` header along with the EFI-specific entry point which the firmware loader jumps to.

{ efi_pe_entry #linux-x86-efi_pe_entry

  The address of `efi_pe_entry` is assigned to the → Linux/kernel/source/arch/x86/boot/header_S#header_S-AddressOfEntryPoint[`AddressOfEntryPoint`] field
 (defined in `→ Linux/kernel/source/arch/x86/boot/header_S`) and will thus be the function that UEFI calls when it has loaded
 `→ Linux/kernel/source/arch/x86/boot/bzImage` (provided the kernel is started via UEFI, I believe `CONFIG_EFI_STUB` must be enabled).

  In order to be able to add this address to `bzImage`, it is recorded in `→ Linux/kernel/source/arch/x86/boot/zoffset_h`.

  If the kernel is booted in 64-bit mode on a 32-bit EFI firmware, `efi_pe_entry` is called from `startup_64_mixed_mode`.

  The signature of efi_pe_entry is
code {
efi_status_t __efiapi efi_pe_entry(
    efi_handle_t        handle,
    efi_system_table_t *sys_table_arg
)
code }

  Among others, `efi_pe_entry` creates a → Linux/kernel/source/arch/x86/include/uapi/asm/bootparam_h#linux-boot_param[`boot_params`] struct (because this is expected
  to be passed in the x86 boot code) and copies the fields of `jump` and above of the setup header from the «second sector» (of `bzImage`) to this `boot_params` and
  fills a few other values in the struct:
    • `root_flags = 1`
    • `vid_mode = 0xffff`
    • `boot_flag = 0xAA55`
    • `type_of_laoder = 0x21`
    • `cmd_line_ptr`
    • `ramdisk_image = 0`
    • `ramdisk_size = 0`
    • `setup_data = 0`

  When the struct is set up, it calls → #linux-x86-efi_stub_entry[`efi_stub_entry`] and passes the struct to it.
  
  In earlier releases (when exactly did it change?), `efi_stub_entry` was defined as → Linux/kernel/source/include/linux/linkage_h#SYM_FUNC_ALIAS[`SYM_FUNC_ALIAS`] for
    • → Linux/kernel/source/arch/x86/boot/compressed/head_64_S#linux-axbc-efi64_stub_entry[`efi64_stub_entry`] in `→ Linux/kernel/source/arch/x86/boot/compressed/head_64_S`, and for
    • `efi32_stub_entry` in `→ Linux/kernel/source/arch/x86/boot/compressed/head_32_S`.

  In a mixed enviornment, `efi_pe_entry` is called from `startup_64_mixed_mode`.

  Note: `drivers/firmware/libstub/efi-stub-entry.c` defines an `efi_pe_entry` function to be used for ARM, arm64, RISC-v and LoongArch.

}
{ efi_stub_entry #linux-x86-efi_stub_entry

 `efi_stub_entry` is the → https://github.com/torvalds/linux/commit/df9215f15206c2a81909ccf60f21d170801dce38[shared entry point for all different boot modes that enter via the EFI stub].

  If successful, the last statement of `efi_stub_entry` is to call `enter_kernel` (passing a kernel address and the so called boot parameters) which does not return (hence, also `efi_stub_entry is annotated with `__noreturn`).

}
{ efi_handover_entry

 `efi_handover_entry` is compiled if the (deprecated) `CONFIG_EFI_HANDOVER_PROTOCOL` is enabled.
 
  This function calls → #linux-x86-efi_stub_entry[`efi_stub_entry`].

}
