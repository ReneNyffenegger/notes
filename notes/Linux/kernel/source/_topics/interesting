$ Linux kernel sources: Interesting functions and structs
-

{ Functions

  table { lll

`copy_from_user()`, `copy_to_user()` ☰ Safely copy data between kernel and user space. ☰ `arch/x86/include/asm/uaccess.h`
`ctrl_alt_del` ☰ Called when ctrl+alt+delete are pressed. ☰ `kernel/reboot.c`
`do_page_fault()` ☰ Handles page faults in the memory management subsystem. ☰
`interrupt_handler()` ☰ Generic name for functions that handle hardware interrupts. ☰
`kfree()` ☰ Frees kernel memory allocated by kmalloc(). ☰ `include/linux/slab.h`
`kmalloc()` ☰ Allocates kernel memory. ☰
`kernel_halt` ☰ Shutdown everything and perform a clean system halt. ☰ `kernel/reboot.c`
`kthread_create()` ☰ Creates a new kernel thread. ☰
`list_add` ☰ Doubly linked lists ☰ `include/linux/list.h`
`printk()` ☰ Kernel's version of `printf()` for logging messages. ☰ `kernel/printk/printk.c`
`schedule()` ☰ The core scheduling function that decides which process to run next. ☰ `kernel/sched/core.c`
`spin_lock()`, `spin_unlock()` ☰ Low-level synchronization primitives. ☰ `include/linux/spinlock.h`
`sys_call_table[]` ☰ Array of function pointers to system call handlers. ☰

  table }


}
{ Structs

  table { lll
   ☰ ~Representaion~ or ~description~ of ☰

`block_device` ☰ a block device in the kernel. ☰
`file` ☰ an open file in the kernel. ☰
`file_operations` ☰ operations that can be performed on a file (used in implementing filesystems and device drivers) ☰ `include/linux/fs.h`
`mm_struct` ☰ the virtual memory of a task. ☰
`module` ☰ a loadable kernel module. ☰
`net_device` ☰ a network interface. ☰
`sk_buff` ☰ a network packet. ☰ `include/linux/skbuff.h`
`task_struct` ☰ a process or thread in the kernel. ☰ `include/linux/sched.h`
 
  table }

}
{ Macros

  table { lll
    `container_of` ☰ ☰

  table }
}
{ Files

  table { ll
   `drivers/tty/vt/vt.c` ☰ A hopefully rater complete VT102 implementation
   `kernel/fork.c` ☰ Contains the help-routines for the `fork` system call.
   `kernel/sched/*`, `kernel/sched/sched.h` ☰ CFS (completely fair scheduler) and related task structures
  table }

}
