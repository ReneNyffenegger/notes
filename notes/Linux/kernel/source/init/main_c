$ init/main.c

Then it spawns the idle → Linux/kernel/process[process], the → Linux/kernel/process/scheduler[process scheduler] and the → Linux/init[init process]

Apparently, `main.c` also processes the *bootparams* (such as `root=`, `init=` etc.)

{ start_kernel() #linux_start_kernel

  `start_kernel()` performs most of the kernel setup:
     • → Linux/kernel/interrupts[interrupts]
     • memory management
     • → hardware/device initialization
     • → Linux/kernel/drivers

 `start_kernel()` also prints (`pr_notice()`) the value of `linux_banner` (defined in `→ Linux/kernel/source/init/version_c` and `init/version-timestamp.c`).
  -
  At least in my current Linux environment, this is the first message visible to `dmesg`.

  The last function that `start_kernel` calls is `arch_call_rest_init()` which in turn calls `rest_init()` which apparently does not return.

 `start_kernel` is defined with → Linux/kernel/source/include/linux/linkage_h#linux-asmlinkage[`asmlinkage`] and declared in `→ Linux/kernel/source/include/linux/start_kernel_h`.

  Compare with → Linux/kernel/source/arch/x86/kernel/head64_c#linux-axk-x86_64_start_kernel[`x86_64_start_kernel()`] (defined in `→ Linux/kernel/source/arch/x86/kernel/head64_c`)

}
{ do_basic_setup()

  This function is called when the machine is initialized and the CPU subsystem is started.

  None of the devices have been touched at this moment.

}
{ kernel_init_freeable() #kernel_init_freeable

  This function opens, among others, `→ Linux/fhs/dev/console`.

}

sa:

  → Linux/kernel/boot-process
