$ tools/include/nolibc

→ https://lwn.net/Articles/920158/[`tools/include/nolibc`] aims to «provide minimal C-library emulation for small, low-level workloads».

{ TODO

  Look at `crt.h`, `arch-x86_64.h`, `arch.h`, `Makefile`.

 `arch.h` includes the `arch-*.h` file corresponding to the target architecture.

 `std.h` contains *standard definitions and types* for NOLIBC, that is, it declares a few common macros and types that usually are found in `stdlib.h`, `stdint.h`, `ctype.h`, `unistd.h` (`sys/types.h`?) and a few other common locations (think `dev_t`, `time_t`, `pid_t`, `off_t` etc.)

}

sa:

 `→ Linux/kernel/source/tools/testing/selftests/nolibc`

  → development/languages/C-C-plus-plus/C/libc
