$ Linux kernel source tree

{ Root

  { Directories

    table { ll

     → Linux/kernel/source/arch[`arch`] ☰ Architecture specific code.
     `block` ☰ Code for block devices.
     `certs` ☰ Certificates, signature checking
     `crypto` ☰ Cryptographic algorithms. Also: a framework to offload such algorithms in hardware
     → Linux/kernel/source/Documentation[`Documentation`] ☰
     `drivers` ☰ 
     `fs` ☰ The virtual filesystem switch
     `include` ☰ Header files
     `init` ☰ Architecture independent initialization code to start the kernel.
     `io_uring` ☰
     `ipc` ☰
     `kernel` ☰
     → Linux/kernel/source/lib[`lib`] ☰ Supporting functions
     `LICENSES` ☰
     `mm` ☰ Memory management
     `net` ☰ Networking
     `rust` ☰
     `samples` ☰ Driver samples
     → Linux/kernel/source/scripts[`scripts`] ☰ Supporting scripts, especially for the build system.
     `security` ☰ Linux security module framework which allows to extend the default security model (SELinux etc.)
     `sound` ☰ ALSA (and the older OSS)
     → Linux/kernel/source/tools[`tools`] ☰ User space tools (used for testing etc.)
     `usr` ☰ initrd
     `virt` ☰ KVM

    table }

  }
  { Files

    table { ll

      `built-in.a` ☰ Created when the kernel is made
      `COPYING` ☰
      → Linux/kernel/source/CREDITS[`CREDITS`] ☰
      `Kbuild` ☰
      → Linux/kernel/source/Kconfig[`Kconfig`] ☰
      → Linux/kernel/source/MAINTAINERS[`MAINTAINERS`] ☰
      → Linux/kernel/source/Makefile[`Makefile`] ☰
      `modules.builtin` ☰ Created when the kernel is made
      `modules.builtin.modinfo` ☰ Created when the kernel is made
      `modules.order` ☰ Created when the kernel is made
      `Module.symvers` ☰ Created when the kernel is made
      `README` ☰
      → Linux/kernel/source/System_map[`System.map`] ☰ Created when the kernel is made
      `→ Linux/kernel/source/vmlinux` ☰ Created when the kernel is made
      → Linux/kernel/source/vmlinux_a[`vmlinux.a`] ☰ Created when the kernel is made
      → Linux/kernel/source/vmlinux_o[`vmlinux.o`] ☰ Created when the kernel is made
      → Linux/kernel/source/_version[`.version`] ☰
 
    table }

  }

}

{ Browsing the sources

 → https://elixir.bootlin.com/linux/latest/source[Elixir Cross Referencer]

}
{ TODO

  { Find definition of a given struct

  Find the definition of a given struct (here: `struct task_struct`):
code {
→ Linux/shell/commands/grep -rl → Linux/shell/commands/grep#grep-P[-P] '^struct task_struct {(→ development/languages/Perl/regular-expressions/negative-lookahead[?!]})' --include='*.h'
code }

  }
  { Determine the GCC options with which a source file is compiled #linux-src-determine-gcc-options

    Using → Linux/kernel/compilation/make#linux-make-V[`make -V`] can be used to determine the
    → development/languages/C-C-plus-plus/GCC/options[GCC options] with which a C-file is compiled:
code {
$ → Linux/shell/commands/touch → Linux/kernel/source/kernel/sys_c
$ → Linux/kernel/compilation/make → Linux/kernel/compilation/make#linux-make-V[V=1] 2>→ Linux/fhs/dev/null | → Linux/shell/commands/grep 'gcc.*sys.c' > /tmp/compile-command
code }

    Of course, the created `/tmp/compile-command` file allows to produced the pre processed source file with a given configuration: the
   `→ development/languages/C-C-plus-plus/GCC/options/E`  option must be added and the `→ development/languages/C-C-plus-plus/GCC/options/c → development/languages/C-C-plus-plus/GCC/options/o ….o` options must be removed.

  }
  { Minimal requirements to compile the Kernel

   `Documentation/process/changes.rst` provides a list of the minimal requirements (software and version) to compile the Kernel.

  }
  { BTF #linux-btf

    With `CONFIG_DEBUG_INFO_BTF` enabled, building the Kernel also generates BTF (BPF type format) from DWARF in `→ Linux/kernel/source/vmlinux` and from kernel modules.

    This feature requires *pahole*.

    See also `Documentation/bpf/btf.rst` and the function `gen_btf()` in `→ Linux/kernel/source/scripts/link-vmlinux_sh`.

  }
  { Most frequent first line

  Count the number each different first line occurrs:
code {
$ → Linux/shell/commands/find . -type f \( -name '*.c' -o -name '*.h' -o -name '*.rst' \) -exec head -1 {} \+ | → Linux/shell/commands/sort | → Linux/shell/commands/uniq -c | → Linux/shell/commands/sort -nr | → Linux/shell/commands/head -20
  60399 
  10189 // SPDX-License-Identifier: GPL-2.0
   8898 // SPDX-License-Identifier: GPL-2.0-only
   8526 /* SPDX-License-Identifier: GPL-2.0 */
   6600 /*
   5411 // SPDX-License-Identifier: GPL-2.0-or-later
   3970 /* SPDX-License-Identifier: GPL-2.0-only */
   2376 /* SPDX-License-Identifier: GPL-2.0-or-later */
   2022 // SPDX-License-Identifier: GPL-2.0+
   1203 .. SPDX-License-Identifier: GPL-2.0
   1093 /* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
    736 /* SPDX-License-Identifier: MIT */
    643 /* SPDX-License-Identifier: GPL-2.0+ */
    546 /* SPDX-License-Identifier: GPL-2.0
    363 .. SPDX-License-Identifier: GFDL-1.1-no-invariants-or-later
    337 // SPDX-License-Identifier: MIT
    261 // SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
    258 // SPDX-License-Identifier: ISC
    207 // SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB
    207 // SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
code }

    See also the → Linux/kernel/source/scripts[scripts] `spdxcheck.py`, `spdxcheck-test.sh` and `spdxexclude`.

  }

}
