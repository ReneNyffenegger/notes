$ Linux kernel source tree

{ Root

  { Directories

    table { ll

     → Linux/kernel/source/arch[`arch`] ☰ Architecture specific code.
     `block` ☰ Code for block devices.
     `certs` ☰ Certificates, signature checking
     `crypto` ☰ Cryptographic algorithms. Also: a framework to offload such algorithms in hardware
     → Linux/kernel/source/Documentation[`Documentation`] ☰
     `drivers` ☰ 
     `fs` ☰ The virtual filesystem switch
     `include` ☰ Header files
     `init` ☰ Architecture independent initialization code to start the kernel.
     `io_uring` ☰
     `ipc` ☰
     `kernel` ☰
     → Linux/kernel/source/lib[`lib`] ☰ Supporting functions
     `LICENSES` ☰
     `mm` ☰ Memory management
     `net` ☰ Networking
     `rust` ☰
     `samples` ☰ Driver samples
     → Linux/kernel/source/scripts[`scripts`] ☰ Supporting scripts, especially for the build system.
     `security` ☰ Linux security module framework which allows to extend the default security model (SELinux etc.)
     `sound` ☰ ALSA (and the older OSS)
     → Linux/kernel/source/tools[`tools`] ☰ User space tools (used for testing etc.)
     `usr` ☰ initrd. Default directory when calling `make header_…` (overridable with `INSTALL_HDR_PATH` environment variable).
     `virt` ☰ KVM

    table }

  }
  { Files

    table { ll

      `built-in.a` ☰ Created when the kernel is made
      `COPYING` ☰
      → Linux/kernel/source/CREDITS[`CREDITS`] ☰
      `Kbuild` ☰
      → Linux/kernel/source/Kconfig[`Kconfig`] ☰
      → Linux/kernel/source/MAINTAINERS[`MAINTAINERS`] ☰
      → Linux/kernel/source/Makefile[`Makefile`] ☰
      `modules.builtin` ☰ Created when the kernel is made
      `modules.builtin.modinfo` ☰ Created when the kernel is made
      `modules.order` ☰ Created when the kernel is made
      `Module.symvers` ☰ Created when the kernel is made
      `README` ☰
      → Linux/kernel/source/System_map[`System.map`] ☰ Created when the kernel is made
     `→ Linux/kernel/source/vmlinux` ☰ Created when the kernel is made
      → Linux/kernel/source/vmlinux_a[`vmlinux.a`] ☰ Created when the kernel is made
      → Linux/kernel/source/vmlinux_o[`vmlinux.o`] ☰ Created when the kernel is made
      → Linux/kernel/source/_vmlinux_export_c[`.vmlinux.export.c`] ☰
      → Linux/kernel/source/_tmp_vmlinux_kallsymsN[`.tmp_vmlinux.kallsyms1`] ☰
      → Linux/kernel/source/_tmp_vmlinux_kallsymsN[`.tmp_vmlinux.kallsyms2`] ☰
      → Linux/kernel/source/_tmp_vmlinux_kallsymsN_syms[`.tmp_vmlinux.kallsyms1.syms` ☰
      → Linux/kernel/source/_tmp_vmlinux_kallsymsN_syms[`.tmp_vmlinux.kallsyms2.syms` ☰
      → Linux/kernel/source/_tmp_vmlinux_kallsymsN_S[`.tmp_vmlinux.kallsyms1.S` ☰
      → Linux/kernel/source/_tmp_vmlinux_kallsymsN_S[`.tmp_vmlinux.kallsyms2.S` ☰
      → Linux/kernel/source/_version[`.version`] ☰
 
    table }

  }

}

{ Browsing the sources

 → https://elixir.bootlin.com/linux/latest/source[Elixir Cross Referencer]

}
{ TODO

  { Find definition of a given struct

  Find the definition of a given struct (here: `struct task_struct`):
code {
→ Linux/shell/commands/grep -rl → Linux/shell/commands/grep#grep-P[-P] '^struct task_struct {(→ development/languages/Perl/regular-expressions/negative-lookahead[?!]})' --include='*.h'
code }

  }
  { Sections

   `objdump -h vmlinux` prints all sections found in the kernel.

    { Data sections

      table { ll
       `.data` ☰
       `.data.rel` ☰
      table }

    }
    { Init data sections

      table { ll
       `.init.setup` ☰
       `.init.rodata` ☰
       `.meminit.rodata` ☰
       `.init.data` ☰
       `.meminit.data` ☰
      table }

    }
    { Exit data sections

      table { ll
       `.exit.data` ☰
       `.memexit.data` ☰
      table }

    }
    { Text sections

      table { ll
       `.text` ☰
       `.text.*` ☰ 
       `.sched.text` ☰
       `.kprobes.text` ☰
       `.cpuidle.text` ☰
       `.noinstr.text` ☰
      table }

    }
    { Init text sections

      table { ll
       `.init.text` ☰
       `.meminit.text` ☰
      table }

    }
    { Ext text sections

      table { ll
       `.exit.text` ☰
       `.memexit.text` ☰
      table }

    }
    { Other text sections

      table { ll
       `.ref.text` ☰
       `.head.text` ☰ This section is placed at the head of `vmlinux`, before the normal `.text` section, and is typically used for entry point functions. The macro `__HEAD` is defined to be `__section(".head.text","ax")`. See also → https://github.com/torvalds/linux/blob/9ed22ae6be817d7a3f5c15ca22cbc9d3963b481d/scripts/head-object-list.txt#L8C3-L9C37[this comment] in `→ Linux/kernel/source/scripts/head-object-list_txt`.
       `.spinlock.text` ☰
       `.fixup` ☰
       `.entry.text` ☰
       `.exception.text` ☰
       `.coldtext` ☰
       `.softirqentry.text` ☰
       `.bstext` ☰ The bootsector? Found in → https://github.com/torvalds/linux/blob/0e945134b680040b8613e962f586d91b6d40292d/arch/x86/boot/header.S#L40[`arch/x86/boot/header.S`]
      table }

    }
    { PCI init sections

      table { ll
       `.pci_fixup_early` ☰
       `.pci_fixup_header` ☰
       `.pci_fixup_final` ☰
       `.pci_fixup_enable` ☰
       `.pci_fixup_resume` ☰
       `.pci_fixup_resume_early` ☰
       `.pci_fixup_suspend` ☰
      table }

    }
    { White list

     `scripts/mod/modpost.c` says: → https://github.com/torvalds/linux/blob/42dc814987c1feb6410904e58cfd4c36c4146150/scripts/mod/modpost.c#L744[sections that we do not want to do full section mismatch check on]

      table { ll

       `.comment*` ☰ `echo $(objcopy --dump-section .comment=→ Linux/fhs/dev/tty → Linux/kernel/source/vmlinux)` prints something like `GCC: (Debian 10.2.1-6) 10.2.1 20210110`
       `.debug*` ☰ 
       `.zdebug*` ☰  Compressed debug sections.
       `.GCC.command.line` ☰ record-gcc-switches
       `.mdebug*` ☰  alpha, score, mips etc.
       `.pdr` ☰  alpha, score, mips etc.
       `.stab*` ☰ 
       `.note*` ☰ 
       `.got*` ☰ 
       `.toc*` ☰ 
       `.xt.prop` ☰ xtensa
       `.xt.lit` ☰  xtensa
       `.arcextmap*` ☰ arc
       `.gnu.linkonce.arcext*` ☰ arc : modules
       `.cmem*` ☰ EZchip
       `.fmt_slot*` ☰ EZchip
       `.gnu.lto*` ☰ 
       `.discard.*` ☰ 
       `.llvm.call-graph-profile` ☰ call graph
      table }

    }

  }
  { kallsyms #linux-kallsyms
   
    With `CONFIG_KALLSYMS` enabled, the kernel is built with the symbols of functions (`text` and `inittext` sections) in order to print out stack backtraces and crash information with these symbols
    -
   `CONFIG_KALLSYMS_ALL` includes all symbols (i. e. names of variables from the `data` section)
    -
    These features comes with the cost of an increased kernel size because it contains the symbols.

 ? `kallsyms_lookup_name` is used by the in-kernel kprobe address resolution code.

 ?  Wih enabled kallsyms, the `s` and `S` format specifies in `printk` print the symbol names rather than their address.

    See also
      • The → https://www.kernel.org/pub/linux/utils/kernel/ksymoops[ksysmoops] tool which helps in case kernel without kallsyms crashes.
      • `→ Linux/kernel/source/scripts/kallsyms`
      • The functions `kallsyms` and `kallsyms_step` in `→ Linux/kernel/source/scripts/link-vmlinux_sh`
      • `kernel/kallsyms.c`
      • `→ Linux/kernel/source/kernel/module/kallsyms_c`
      • `include/linux/kallsyms.h`
      • `→ Linux/kernel/source/kernel/kallsyms_internal_h`
      • `→ Linux/fhs/proc/kallsyms`
      • `kernel/kallsyms_selftest.{c,h}`
      • `kernel/kallsyms_internal.h`
      • The struct `mod_kallsyms` in `include/linux/module.h`

  }
  { Kprobes

    Kprobes allows to dynamically break into (non-blacklisted) kernel function and collect debugging and performance information non-disruptively.

    See also `Documentation/trace/kprobes.rst`

  }
  { Determine the GCC options with which a source file is compiled #linux-src-determine-gcc-options

    Using → Linux/kernel/compilation/make#linux-make-V[`make -V`] can be used to determine the
    → development/languages/C-C-plus-plus/GCC/options[GCC options] with which a C-file is compiled:
code {
$ → Linux/shell/commands/touch → Linux/kernel/source/kernel/sys_c
$ → Linux/kernel/compilation/make → Linux/kernel/compilation/make#linux-make-V[V=1] 2>→ Linux/fhs/dev/null | → Linux/shell/commands/grep 'gcc.*sys.c' > /tmp/compile-command
code }

    Of course, the created `/tmp/compile-command` file allows to produced the pre processed source file with a given configuration: the
   `→ development/languages/C-C-plus-plus/GCC/options/E`  option must be added and the `→ development/languages/C-C-plus-plus/GCC/options/c → development/languages/C-C-plus-plus/GCC/options/o ….o` options must be removed.

  }
  { Minimal requirements to compile the Kernel

   `Documentation/process/changes.rst` provides a list of the minimal requirements (software and version) to compile the Kernel.

  }
  { BTF #linux-btf

    With `CONFIG_DEBUG_INFO_BTF` enabled, building the Kernel also generates BTF (BPF type format) from DWARF in `→ Linux/kernel/source/vmlinux` and from kernel modules.

    This feature requires *pahole* or *llvm*.
    -
    pahole acts as a *dwarf2btf* converter.

    See also
      • `include/uapi/linux/btf.h`
      • `Documentation/bpf/btf.rst`
      • The function `gen_btf()` in `→ Linux/kernel/source/scripts/link-vmlinux_sh`.
      • The `resolve_btfids` tool (`tools/bpf/resolve_btfids`) scanes ELF objects for `.BTF_ids` sections and resolves its symbols with BTF ID values.

  }
  { Most frequent first line

  Count the number each different first line occurrs:
code {
$ → Linux/shell/commands/find . -type f \( -name '*.c' -o -name '*.h' -o -name '*.rst' \) -exec head -1 {} \+ | → Linux/shell/commands/sort | → Linux/shell/commands/uniq -c | → Linux/shell/commands/sort -nr | → Linux/shell/commands/head -20
  60399 
  10189 // SPDX-License-Identifier: GPL-2.0
   8898 // SPDX-License-Identifier: GPL-2.0-only
   8526 /* SPDX-License-Identifier: GPL-2.0 */
   6600 /*
   5411 // SPDX-License-Identifier: GPL-2.0-or-later
   3970 /* SPDX-License-Identifier: GPL-2.0-only */
   2376 /* SPDX-License-Identifier: GPL-2.0-or-later */
   2022 // SPDX-License-Identifier: GPL-2.0+
   1203 .. SPDX-License-Identifier: GPL-2.0
   1093 /* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
    736 /* SPDX-License-Identifier: MIT */
    643 /* SPDX-License-Identifier: GPL-2.0+ */
    546 /* SPDX-License-Identifier: GPL-2.0
    363 .. SPDX-License-Identifier: GFDL-1.1-no-invariants-or-later
    337 // SPDX-License-Identifier: MIT
    261 // SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
    258 // SPDX-License-Identifier: ISC
    207 // SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB
    207 // SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
code }

    See also the → Linux/kernel/source/scripts[scripts] `spdxcheck.py`, `spdxcheck-test.sh` and `spdxexclude`.

  }

}
