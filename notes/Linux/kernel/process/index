$ process

{ User vs kernel space #user-kernel-space

  A process is executing either in user space or in kernel space.

  When executing in user space, the process can or cannot do certain things
  according to its privileges.

  A process switches to kernel space by calling a → Linux/kernel/sys-calls[syscall].

  ?Exception: → Linux/kernel/syscalls/iopl

  ?Apparently user space is also called user mode, kernel space is also called kernel mode.

  Between user and kernel space «lies» the → Linux/kernel/ABI.

  See also: → Linux/kernel/source/kernel/kmod_c[`call_usermodehelper`].

}
{ Debugging processes

  → Linux/shell/commands/strace

}

sa:
  → Linux/kernel/syscalls/kill,
  → Linux/kernel/signals,
  → Linux/kernel/source/include/linux/sched_h

  → Linux/shell/commands/fuser identifies → Linux/kernel/process[processes] that are using files or sockets.

  → Linux/shell/commands/prtstat prints statistics about a process.

  → Linux/shell/commands/ps[`ps`] reports a snapshot of the current processes. With → Linux/shell/commands/pstree, the processes are shown as a tree.

  → Linux/shell/commands/pidof[`pidof`] finds a process's PID.

  A process can be terminated with → Linux/shell/commands/kill or → Linux/shell/commands/killall.

  → Linux/shell/commands/pgrep finds processes by their name and attributes.

  → Linux/shell/commands/pmap reports the memory map of a process.

  → Linux/shell/commands/top displays the most CPU instensive → Linux/kernel/process[processes].


