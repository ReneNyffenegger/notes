$ Linux kernel compilation

Also referred to as «building the Linux kernel».

{ Prerequisites

  Some prerequisites to compile the kernel include
    • kernel sources (obviously)
    • glibc kernheaders
    • glibc devel
    • cpp (c preprocessor)
    • binutils
    • gcc
    • flex and bison (I assume to parse the Kconfig language (and possibly other syntaxes))
    • → Linux/ncurses[ncurses] (for `→ Linux/kernel/compilation/make menuconfig`)
    • tcl (for `make xconfig`)
    • tk  (for `make xconfig`)

  tk and tcl are required in configuration step

code {
533 rene @ debian 14:15:28 ~/github/linux/temp/TODO/kernel/compilation/make-targets/tinyconfig/linux-src make tinyconfig
  HOSTCC  scripts/basic/fixdep
  HOSTCC  scripts/kconfig/conf.o
  HOSTCC  scripts/kconfig/confdata.o
  HOSTCC  scripts/kconfig/expr.o
  LEX     scripts/kconfig/lexer.lex.c
/bin/sh: 1: flex: not found
code }

code {
sudo apt install -y flex bison
code }

}

rem {

{ Building

  Consider backing up `.config` (created by → development/GNU-Build-System/configure) before executing the following command and coping back after the command.

code {
→ Linux/kernel/compilation/make[make] mrproper 
code }

  { configuring

     Three options:
     • make config (this is the least desirable option)
     • make menuconfig (requires ncurses4 and ncurses-devel)
     • make xconfig    (requires tcl and tk)

  }

code {
make dep
make clean
code }

Maybe change the `EXTRAVERSION` macro(?) in `Makefile`.

code {
make bzImage
make modules
make modules_install
make install
code }

`make install` also runs a few scripts that build the →Linux/kernel/initial-ram-disk image.
}

{ Config directory

  The config directory contains a few sample configurations that can be used instead of using → development/GNU-Build-System/configure. Such a file would be copied
  to the source root directory and be called `.config`.

}

rem }

rem {

→ http://kernelnewbies.org/KernelBuild

→ https://wiki.archlinux.org/index.php/Kernels/Traditional_compilation

code {
git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
cd linux-stable
code }

Find lates stable (non release candidate) version:
code {
git tag -l | grep -v -- -rc
code }
For example `v4.5.1`.

code {
git checkout -b stable v4.5.1
code }

code {
make mrproper
code }

code {
zcat /proc/config.gz > .config
code }
or, alternatively:
code {
make localmodconfig
code }

Check for new →Linux/kernel/CONFIG[CONFIG symbols]:
code {
make oldconfig
code }

Change `→ Linux/kernel/CONFIG/LOCALVERSION[CONFIG_LOCALVERSION] in → Linux/kernel/source/_config to something like `CONFIG_LOCALVERSION="-tq84"`.

code {
make -j8
code }

code {
sudo make modules_install
code }
This installs the modules under `→ Linux/fhs/lib/modules/index→Linux/kernel/release[kernel-release]`.


I tried `make install` here, but that didn't work, somehow, because →Linux/booting/LILO was missing. (See also → Linux/kernel/source/arch/x86/boot/install_sh).

So, I tried this instead
code {
sudo cp arch/x86_64/boot/bzImage /boot/vmlinuz-tq84
code }

code {
sudo mkinitcpio -k 4.6.0-tq84 -c /etc/mkinitcpio.conf -g /boot/initramfs-4.6.0-tq84.img
code }
Note `4.6.0-tq84` must match `/lib/modules/4.6.0-tq84`.  

code {
sudo cp System.map /boot/System.map-4.6.0-tq84
code }

code {
sudo ln -sf /boot/System.map-4.1.5-tq84 /boot/System.map
code }

There should now be the following files/symlinks under → Linux/fhs/boot/index: `vmlinuz-<KernelName>`, `initramfs-<KernelName>.img`, `System.map-<KernelName>`, `System.map`.

code {
sudo grub-mkconfig -o /boot/grub/grub.cfg
code }


TODO
code {
make localmodconfig
code }
or
code {
make localyesconfig
code }

code {
make menuconfig
code }


rem }

{ Config options #config-options

  → hardware/UEFI/index needs → hardware/UEFI/index#required-kernel-config-options[these config options].

  { Default configuration

    The kernel includes a default configuration.

    The default configuration is presented the first time `menuconfig` is run on a source tree.

  }

}
{ Specifying an alternate config file

  By default, the make system uses → Linux/kernel/source/_config[`./.config`] as build configuration file.
  - 
  An alternate file can be chosen by setting the environment variable `KCONFIG_CONFIG` to the path of a config file or specyfing the alternate config file directly like so:
code {
→ Linux/kernel/compilation/make[make] KCONFIG_CONFIG=test.config
code }

}
{ Specifying a separate build directory

  By default, the generated files go into the same tree as the kernel sources.
  Invoking → development/make with `O=/path/to/output/dir` allows to specify an alternative
  destination

code {
cd /usr/src/linux-4.X
make O=/home/name/build/kernel menuconfig
make O=/home/name/build/kernel
sudo make O=/home/name/build/kernel modules_install install
code }

}

{ Verbosity level

  `make V=1` prints detailed compile and link commands.

  `make V=2` also prints why a target is rebuilt.

}


{ TODO

  The compiled kernel should be placed under `→ Linux/kernel/source/arch/x86/boot/bzImage`.

 `→ Linux/kernel/source/scripts/config` (in the Kernel source tree) allows to manipulate options in a `.config` file from the command line.

}
sa:

  `→ Linux/kernel/source/Documentation/admin-guide/quickly-build-trimmed-linux_rst` is a guide that explains how to quickly compile kernels that are
    • ideal for testing purposes, but
    • perfectly fine for day-to-day use, too.  

  → Linux/kernel/debugging#create-kernel-for-qemu-gdb[Creating a kernel for debugging] with QEMU and gdb.

  `→ Linux/kernel/source/Documentation/admin-guide/README_rst`

  → development/languages/C-C-plus-plus/GCC/options/m_lowercase/cmodel[`gcc -mcmode=kernel`]
