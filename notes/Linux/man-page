
The man pages are located in `→ Linux/fhs/usr/share/man`.

*Man pages* are the historical and well known way way on Unix for documentation. In a
→ Linux/shell[shell], a man page is accessed through the → Linux/shell/commands/man[`man`] command.

Some conventions for writing man pages are found using
code {
$ → Linux/shell/commands/man[man] 7 man-pages
code }

{ Sections #man-sections

  table { ll
    1 ☰ → Linux/shell/commands[Commands] that can be executed in a → Linux/shell
    2 ☰ → Linux/kernel/sys-calls
    3 ☰ libc functions except wrappers for sys calls.
    4 ☰ Files found in `→ Linux/fhs/dev`
    5 ☰ File formats and configuration files
    6 ☰ Games
    7 ☰ Overview, conventions and miscellaneous
    8 ☰ System management commands which can only be executed by → Linux/user/root (such as `→ Linux/shell/commands/mount`).

  table }

}
{ Finding all man pages

  `apropos .`, `man -k .`, `whatis -r .`

}
{ Structures of man pages #man-structure

  Usually, man pages have a variation of the following section headers:
    • NAME
    • SYNOPSIS
    • DESCRIPTION
    • SEE ALSO
    • BUGS
    • AUTHOR

  Compare with the → development/languages/Perl/POD#perl-pod-recommended-order[Recommended order of sections] in a → development/languages/Perl/POD[Perl POD (Plain Old Documentation] file.

  In a `groff` input file, section headers are created with the `.SH` directive.

  An simple nroff file with the structure:
  gh|about-man-pages|/examples/structure||


 
}
{ Comments and new lines

  In a roff source, a *comment* is introduced with `\"`. However, this won't remove the new line which
  will cause a new paragraph in the output.
  
  Therefore, comments that span an entire line and need to be completely removed while parsing, a
  comment usually is introduced with a leading dot: `.\"` which is interpreted as an undefined
  request.

  Consider:
  gh|about-man-pages|/examples/comments-and-new-lines||

  If run through → Linux/shell/commands/man[`man`], it produces:
code {
line one

line two

line three line four
code }

}
{ Viewing man pages with VIM

  The value of the environment variable `MANPAGER` (or `PAGER`) specifies the program to run when `man` is invoked.

  This, it is possible, for example, to view man pages with → development/vim:
code {
$ export MANPAGER="sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu' -c 'nnoremap i <nop>' -\""
$ man …
code }


}

sa:

 `→ Linux/fhs/var/cache/man`

 `whereis` (part of → Linux/utilities#util-linux).


links:
  → https://github.com/bagder/roffit[`roffit`] is a → development/languages/Perl[Perl] script (by Daniel Stenberg) to convert (nroff?) man pages to → development/web/HTML.

  → https://man-db.gitlab.io/man-db/[man-db] implements the standard Unix documentation system accessed using the `→ Linux/shell/commands/man` command for several popular → Linux/distributions. It uses a *Berkeley DB database* in place of the traditional flat-text whatis databases.
