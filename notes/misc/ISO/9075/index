$ ISO/IEC 9075 - SQL Standard
@ ISO/IEC 9075

{ SQL-86 (or SQL-87)

   SQL-87 is the ISO 9075:1987 standard of 1987

   Some defined features of SQL-87 are
     • transactions
     • create
     • read
     • update
     • delete

? This standard was based on *System R*.
  
}
{ SQL-89 #sql-89

  SQL-89 is the ISO/IEC 9075:1989 standard of 1989

  SQL-89 added → development/databases/SQL/table/constraint/foreign-key[foreign] and → development/databases/SQL/table/constraint/primary-key[primary key] constraints.

  This standard had about 120 pages.

}
{ SQL-92

   SQL-92 is the ISO/IEC 9075:1992 standard of 1992.

   SQL-92 added
      • *subqueries* in place of named tables.
      • Internationalization.
      • Embedded SQL in → development/languages[programming languages]

   This standard had 628 pages.

}
{ SQL:1999 #sql-1999

  SQL:1999 is the ISO/IEC 9075:1999 standard of 1999.

  SQL:1999 introduced the first of → development/databases/SQL/data-types/collection[two collection types]: the array. (These types apparently are also referred to as *User Defined Types*).

  Four → development/databases/SQL/transaction/isolation-level[isolation levels] mentioned.

  An amendment to SQL:1999 in 2000 added → development/databases/SQL/select/analytic[window functions]. These were then incorporated into the → #sql-2003 standard.

  The *full* standard had about 2200 pages.

}
{ SQL:2003 #sql-2003

  SQL:2003 is the ISO/IEC 9075:2003 standard of 2003

 *SQL:2003* introduced the `merge` statement and the second of → development/databases/SQL/data-types/collection[two collection types]: the *multiset*.

  { Data types

    Because of lack of support in existing database products, the `bit` and `bit varying` → development/databases/SQL/data-types[data types] were removed from the standard.
   (However, → development/databases/SQL-Server still → development/databases/SQL-Server/T-SQL/data-types/bit[has the `bit` datatype]).

    On the other hand, three new data types were added:
      • `bigint`
      • `multiset` (which is a → development/databases/SQL/data-types/collection[collection type]).
      • `XML`

  }
  { Columns

    SQL 2003 also introduced
      • identity columns, and
      • generated columns

  }

}
{ SQL:2006

  SQL:2006 is the ISO/IEC 9075:2006 standard of 2006

}
{ SQL:2008

  SQL:2008 is the ISO/IEC 9075:2008 standard of 2008

? Many corrections.

 *SQL:2008* enhanced the `merge` statement.

  SQL:2008 specifies 164 mandatory and 280 optional → misc/ISO/9075/features[features].

}
{ SQL:2011 #sql-2011

  SQL:2011 is the ISO/IEC 9075:2011 standard of 2011

  SQL:2011 added 34 new features to the SQL/Foundation part (all of which are optional). This brought the total of features in SQL/Foundation to 314.
  -
  This standard came with 4063 pages.

  The possibly most important feature of *SQL:2011* is the support for → development/databases/SQL/temporal-data[temporal databases]. Other important features that come with *SQL:2011* are
    • `delete` in the `merge` statement.
    • Pipelined → development/databases/SQL/DML[DML]
    • Enhanced `call` statement (*named arguments* and *default values for arguments*)  
    • Ability to limit fetches (See → development/databases/Oracle/SQL/select/first-n-rows)
    • Enhanced collection types
    • Non-enforced table constraints
    • Window enhancement (→ development/databases/SQL/select/analytic/ntile[`ntile`], navigation within a window (→ development/databases/SQL/select/analytic/lag-lead[`lag`, `lead`], `nth_value`, `first` and `last`), nested navigation within a window, `groups` option)

  See → http://cs.ulb.ac.be/public/_media/teaching/infoh415/tempfeaturessql2011.pdf[Temporal features in SQL:2011] (by *Krishna Kulkarni*
  and *Jan-Eike Michels* covers the most important new functionality that is part of SQL:2011: *the ability to create and manipulate temporal tables* and
  Fred Zemke: → https://sigmodrecord.org/publications/sigmodRecord/1203/pdfs/10.industry.zemke.pdf[What's new in SQL:2011].

  See also: → http://jtc1sc32.org/doc/N1951-2000/32N1964T-text_for_ballot-FCD_9075-2.pdf[Final Draft] (not to be used for reference purposes)

}
{ SQL:2016 #sql-2016

  SQL:2016 is the ISO/IEC 9075:2016 standard of 2016

  With the exception of → #iso-9075-part-2[part 2], SQL:2016 did not significantly change from the previous version.

  The most important new features in SQL:2016 are
    • Support for → development/languages/JavaScript/JSON[JSON] data (of the 44 new optional features of SQL:2016, 22 are related to JSON).
    • Polymorphic table functions (PTF)
    • Row pattern recognition (RPR): apply → development/regular-expressions[regular expressions] accross rows.
    • Trigonometric and logarithmic functions

  { Support for JSON

    Unlike SQL/XML (Part 14), JSON was not put in its own part - yet, it is still referred to as *SQL/JSON*.

    SQL:2016 does not define a new → development/databases/SQL/data-types[data type] for JSON - it is stored in an
    SQL string type (for example `varchar` or `clob`).

    See also the *technical report* → http://standards.iso.org/ittf/PubliclyAvailableStandards/c067367_ISO_IEC_TR_19075-6_2017.zip[ISO/IEC TR 19075-6:2017]

  }
  { Row pattern recognition (RPR)

    *Row pattern recognition*  is kind of applying → development/regular-expressions[regular expressions] accross sequences of rows.

    See also the *technical report* → http://standards.iso.org/ittf/PubliclyAvailableStandards/c065143_ISO_IEC_TR_19075-5_2016.zip[ISO/IEC TR 19075-5:2016] and
    features → misc/ISO/9075/features/R010 and R020.

  }
  { Polymorphic table functions (PTF)

    Parameters and function return values can be tables whose shape is not known until query time.

    The → misc/ISO/9075/features[feature ID] for PTFs is *B200*.

    See also the *technical report* → http://standards.iso.org/ittf/PubliclyAvailableStandards/c069776_ISO_IEC_TR_19075-7_2017.zip[ISO/IEC TR 19075-7:2017]

  }


}
{ SQL:2019

  SQL:2019 added a part 15: *Multidimensional arrays (MDA)*

}
{ SQL:2020

  → misc/ISO#iso-iec-jtc-1[JTC 1]/SC 32/WG 3 identified the following areas of interest for the next (as of 2020-02) SQL standard:
    • Better support for Big Data applications.
    • Graph queries
    • Approximate queries/aggregates and uncertain data.
    • Integration of statistical packages (for example → development/languages/R).
    • Support for → science/computer/Programming-paradigm/Functional-programming/MapReduce[map-reduce] algorithms
    • Streaming/continuous queries
    • Support for blockchains
    • BASE transactions

}
{ Parts of the standard #sql-standard-parts

  The → development/databases/SQL[SQL] standard is published in multiple volumes (aka parts). Currently, these volumes are 2, 3, 4, 9, 10, 11, 13 and 14. (Gaps because some parts were withdrawn in
  earlier versions of the standards and their numbers are not recycled).

  
  The parts are
    • 1: Framework
    • 2: Foundation
    • 3: Call-Level Interface (CLI)
    • 4: Persistent Stored Modules (PSM) - for example → development/databases/Oracle/PL-SQL[PL/SQL] for → development/databases/Oracle or → development/databases/SQL-Server/T-SQL for → development/databases/SQL-Server[SQL Server].
    • 9: Management of External Data (MED)
    • 10: Object Language Bindings (OLB)
    • 11: Information and Definition Schemas (Schemata)
    • 13: SQL Routines and Types using the → development/languages/Java[Java Programming Language] (JRT)
    • 14: → development/XML[XML]-Related Specification
    • 15: Multidimensional arrays (MDA) (Published June 2019)
    • 16: Property Graph Query (SQL/PGQ) - Apparently being worked on for SQL:2020?

  Part 16 will define how GQL (Graph Query Language) will be made accessible to SQL. If such a part will be added is (as of July 2019) still being discussed.


  { Part 2 #iso-9075-part-2

     The largest and most importand part is part 2: *foundations*. In SQL:2011, it had 1470 pages.

     It covers
       • → development/databases/SQL/data-types[Data types]
       • → development/databases/SQL/DDL
       • Querying: → development/databases/SQL/select[`select`], `join` etc.
       • → development/databases/SQL/DML: `insert`, `update`, `delete`, `merge` …
       • Access Control: `grant`, `revoke`
       • → development/databases/SQL/transaction[Transaction] control: `commit`, `rollback`, …
       • Connection management: `connect`, `disconnect`
       • Session management: `set session`
       • Exception handling: `get diagnostics`

  }

}
{ Mandatory and optional features

  The SQL standard covers a → misc/ISO/9075/features[list of features] which are put into one of categories
    • mandatory
    • optional

  These features are listed in Annex F of each part of the standard.

  An SQL implementation is called *conformant* if it implements all mandatory features.
  -
  It might add any optional feature.

  Features seem to be numbered with `(F|S|T)\d\d\d` (for example `F314` is *merge statement with DELETE branch*).
  

}
{ Not freely publicly available

  ISO and/or(?) IEC only publishes the *informative sections* of the standard publicly and freely. The rest needs to be purchased.

}
{  Technical reports

   Starting in 2011, the SQL Standards committees have published 7 (as of 2020-02) *technical reports*. They don't belong to the standard but are nevertheless a good read.

   The technical reports include:
     • ISO/IEC TR 19075-1: XQuery Regular Expression Support in SQL
     • ISO/IEC TR 19075-2: SQL Support for TimeRelated Information
     • ISO/IEC TR 19075-3: SQL Embedded in Programs using the → development/languages/Java[Java] programming language
     • ISO/IEC TR 19075-4: SQL with Routines and types using the JavaTM programming language
     • ISO/IEC TR 19075-5: Row Pattern Recognition in SQL 
     • ISO/IEC TR 19075-6: SQL support for JSON
     • ISO/IEC TR 19075-7: SQL Support for Polymorphic Table Functions

   The next(?) technical report seems to be:
     • ISO/IEC TR 19075-8: SQL Support for multi dimensional arrays


   These technical reports are free for single use and can be downloaded → https://standards.iso.org/ittf/PubliclyAvailableStandards/index.html[here].

}
{ Misc

  The SQL standard does not have a `create database` statement. In fact, the SQL standard does neither define nor use the word database (except for constructs like «database application» or «database access» and in its title).

  The SQL standard also does not have a `create index` statement.

}
{ TODO

  *X3H2* is the ANSI → development/databases[database] committee.

}

sa:
  Notes about the → development/databases/SQL/history[history] of → development/databases/SQL[SQL].
