
Image attributes such as their size can be changed with `convert`.

Note, → Windows comes with a → Windows/dirs/Windows/System32/convert_exe[`convert.exe`]. In order to use Image Magick's `convert`, either the full path to Image Magick's `convert` needs to be entered or the
→ Windows/development/environment-variables/PATH[`PATH` environment variable] needs to have the ImageMagick installation directory *before* the Windows System32 directory.

{ Installation #image-magick-installation

  On → Windows, ImageMagick can be installed with → Windows/Chocolatey.
code {
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y imagemagick
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y imagemagick.app
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y imagemagick.tool
→ Windows/dirs/ProgramData/chocolatey/bin/choco_exe[choco] install -y imagemagick      -packageParameters installDevelopmentHeaders=true
code }

 `imagemagick` seems to install both, `imagemagick.app` and `imagemagick.tool`.

  In order to install the → development/languages/C-C-plus-plus/C/header-files for ImageMagick, `-packageParameters installDevelopmentHeaders=true` must be added.
  -
  In order to legacy utilities (such as `convert`), `-packageParameters legacySupport=true` must be added.


}
{ Resize an image

  The following snippets demonstrate how an image, named `in.jpg` can be resized. The resized image will be named `out.jpg`.

  Change width to 400 pixels:
code {
magick convert in.jpg -resize 400 out.jpg
code }

  Change height to 300 pixels:
code {
magick convert in.jpg -resize x300 out.jpg
code }

  At most 400x300, keeping aspect ratio
code {
magick convert in.jpg -resize 400x300 out.jpg
code }

  Force specific size
code {
magick convert in.jpg -resize 400x300! out.jpg
code }

  `convert` is a legacy command that did the same as `magick convert` should be used instead.

}

{ Change type (jpg -> png etc)

code {
magick convert in.png -format jpg out.jpg
code }

  TODO: Apparently, → http://www.ece.uvic.ca/~frodo/jasper/[jasper] comes with a program to convert between types as well.

}

{ Change quality (loss)

code {
magick convert in.jpg -quality 85 out.jpg
code }

}

{ Keep file (don't create another file)

  Use `mogrify` instead of `convert` to modify the size of an image without creating a new image (in place modification). Thus, the original file will be lost after the operation.

code {
magick mogrify -resize 400x300! file.png 
code }

}

{ Information (dimensions...) about an image

code {
magick identify image.png
code }

  `identify` can be given a format string (much like → development/languages/printf[printf]) where `%…` are replaced with the values of attributes and properties of an image.
  -
  The following example prints width, height, and x and y resolution of an image:
code {
magick identify -format "The image is %w by %h pixels, its x resolution is %x, and its y resolution is %y" image.png
code }

}
{ Screenshots #image-magick-screenshots

 `import -window root screenshot.jpg`

  Without the -window option, `import` allows to select a window or an aribtrary region interactively.

  See also Perl modules → development/languages/Perl/modules/Win32/Screenshot[Win32::Screenshot] and
  → development/languages/Perl/modules/Imager/Screenshot[ImageMagick::Screenshot]

}
{

  ? Apparently, in earlier (legacy) versions of ImageMagick, `mogrify` could be used in place of `magick mogrify` and `convert` in place of `magick convert`.

}
{ TODO

  Do these commands come with a *graphicsmagick* alternative that can be enabled(?) by prepending these commands with `gm`?

}
links:
  → http://www.fmwconcepts.com/imagemagick/[Fred's ImageMagick scripts]
