$ wget

wget - download internet files (HTTP (incl. proxies), HTTPS and FTP) from batch files (that is: non interactively) or in the command line (→ Windows/dirs/Windows/System32/cmd_exe, → Linux/shell/bash etc).

{ Important command line flags

   code {
-O,  --output-document=FILE   write documents to FILE.

-r,  --recursive              specify recursive download.
-H,  --span-hosts             go to foreign hosts when recursive.
-l,  --level=NUMBER           maximum recursion depth (inf or 0 for infinite).

-np, --no-parent              don't ascend to the parent directory.

-nd, --no-directories         don't create directories.
-x,  --force-directories      force creation of directories.

-nc, --no-clobber             skip downloads that would download to
                              existing files.

-k,  --convert-links          make links in downloaded HTML point to local files.
-p,  --page-requisites        get all images, etc. needed to display HTML page.

-A,  --accept=LIST            comma-separated list of accepted extensions.
-R,  --reject=LIST            comma-separated list of rejected extensions.

-w,  --wait=SECONDS           wait SECONDS between retrievals.

-m,  --mirror                 Same as -r -N -l inf -nr (--no-remove-listing)

--no-check-certificate        don't validate the server's certificate.

--content-disposition         honer the → development/web/HTTP/header#content-disposition header (Experimental)
   code }

   See also →http://renenyffenegger.blogspot.ch/2015/02/the-most-important-wget-command-line.html[the most important wget command line flags].

}

{ Examples

`wget -x → development/web/URI-URL-URN-IRI-URC#url[<url>]`

Page requisites: `wget -p <url>`.

Download one level only (page with «table of content») `wget.exe -r -l 1 -nd -k -p <url>`.

{ Mirroring a website

code {
wget -oc:\temp\wget.log -r -k -p -np -nc <dirs and subdirs>
code }
`-nc` so that the command can be restarted.

Prevent *zip* files from being downloaded, too:
code {
wget -r -k -p -np -nc --reject=zip http://foo.bar/
code }

  { Download requisites from other domains

    At times, some requisites (such as images) are hostet on other domains. In this case these requisites can be downloaded with the `-D` flag which specifies a column separated list of
    domains which hosts can be spaned to (`-H`);
code {
wget -r -k -p -H -D other.domain.xy,target.xz https://target.xz
code }

  }

}

{ Download specific filetype only

code {
wget  --no-directories --accept=pdf --recursive --level=1 url
code }

or, same thing

code {
wget -nd -Apdf -r --level=1
code }

If the files reside on another host, use also `-H`.

If the server uses CGI to serve some different suffixes and uses the → development/web/HTTP/header#content-disposition header, the `--content-disposition` flag might help.

}

  { Using --cut-dirs

code {
wget -r -nH -np --cut-dirs=2 http://svn.openstreetmap.org/applications/utils/gary68/
code } 

Using `--cut-dirs` cuts directory-levels when directories are created. The above example creates `gary68` instead of `wvn.openstreetmap.org/applications/utils/gary68`.
  
  }

}
{ Specifying the result language #wget-result-language

  With the `--header` option, it possible to alter the `Accept-Language` → development/web/HTTP/header[header] of the → development/web/HTTP/[HTTP request]:
code {
wget --header='Accept-Language: de' http://foo.bar.baz/
code }

}
{ Proxy

  →development/environment-variable#http_proxy[`http_proxy`], `https_proxy` and `ftp_proxy`.

  If no proxy should be used for certain hosts, store them in the environment variable `no_proxy`, seperated by commas.

  See also `--proxy-user` and `--proxy-passwd`.
}
{ wget initialization files #wget-initialization-files

  → Linux/fhs/etc/wgetrc (global, for all users)
  -
  → Linux/fhs/home/username/_wgetrc (for a single user)

}
{ Installing on Windows #wget-install-windows

  The following → Windows/PowerShell[PowerShell] commands should be able to install `wget`.

  If installing wget for windows without installer (but from the zip file), it also needs the files `libeay32.dll`, `libiconv2.dll`, `libintl3.dll` and `libssl32.dll`.
  These can be downloaded from https://sourceforge.net/projects/gnuwin32/files/wget/1.11.4-1/wget-1.11.4-1-dep.zip/download.

code {
$ua = new-object system.net.webClient
$ua.downloadFile("http://downloads.sourceforge.net/gnuwin32/wget-1.11.4-1-bin.zip" , "$home\Downloads\wget.zip")

$shell = new-object -comObject shell.application
$shell.nameSpace("$home\bin").copyHere("$home\Downloads\wget.zip\bin\wget.exe")
rm $home\Downloads\wget.zip

$ua.downloadFile("https://sourceforge.net/projects/gnuwin32/files/wget/1.11.4-1/wget-1.11.4-1-dep.zip/download", "$home\Downloads\wget-dep.zip")
$shell.nameSpace("$home").copyHere("$home\Downloads\wget-dep.zip\bin")
rm $home\Download\wget-dep.zip
code }

  

}

{ Misc

  wget respects → development/web/HTTP/robots_txt[`/robots.txt`].

}

sa:
  → Linux/fhs/home/username/_wget-hsts

  → tools/cURL (With → Windows 10, it is already preinstalled under → Windows/dirs/Windows/System32/curl_exe[`%SystemRoot%\System32\curl.exe`])

  → development/languages/VBA/Useful-object-libraries/MSXML/XMLHTTP/get_vbs[`get.vbs`] is a simple script (written in → development/languages/VBScript) that allows to `GET` a resource via
  → development/web/HTTP and print it to the console.

  → tools
