By default, a script adds an icon in the *tray* and has a *main window* (See `A_ScriptHwnd`).
-
The *title* of the main window is used to determine if a script is already running in conjunction with `#SingleInstance`

Variable names and function names are not case senstitive.

Comments are introduces with a `;` (semicolon).

Implicit string concatanation (aka auto-concat):
code {
"some text" a_var
code }

There is a `#include`.

{ Variables

  Three types (compare `Type` function)
    • Strings
    • Numbers (int and float)
    • Object

  A variable itself is not typed.

  Built-in variables:
    • `true` equals 1
    • `false` equals 0
    • `A_Args` seems to be an array that contains (postitional?) parameters when a user defined function is called.
    • `A_index` stores the number of the current loop iteration
    • `A_ScriptHwnd` contains the `HWND` of the of the corresponding script's main window.

  A value is assigned with `:=`

  Environment variables can be queried with `EnvGet(…)`.

 `ListVars`

}
{ Functions

  Some functions are
    • `EnvGet`
    • `FileAppend`
    • `FileOpen`
    • `FileRead`
    • `ListVars`
    • `Pause`
    • `MsgBox`
    • `WinActivate`
    • `WinExist`

  { Defining functions

code {
DoWhatIWant(par_1, byRef par_2, par_3 := "")
{
  …
  return 42
}
code }

  }

}
{ Statements

   Some statements are:
     • `Break`
     • `Catch`
     • `Continue`
     • `Else`
     • `Finally`
     • `For`
     • `Gosub`
     • `Goto`
     • `If`
     • `Loop`
     • `Return`
     • `Throw`
     • `Try`
     • `Until`
     • `While`

}
{ Operators

  Some operators are:
    • `and`
    • `contains`
    • `in`
    • `is`
    • `new`
    • `not`
    • `or`

}
{ Objects

  Some objects are
    • `File` (?)

}
{ Hotkeys

  A hotkey can be used to trigger actions.

  Key modifiers:
    • `+` - The Shift key
    • `#` - The Windows key
    • `!` - The Alt key
    • `^` - The Ctrl key
    • `<` and `>` in combination with another modifier explicitely specify the left or right version (`<!` = Left Alt key)

  Prepending the hotkey with a dollar sign (`$`) seems to prevent the hotkey from being (possibly recursively) invoked if a hotkey sends the hotkey.

  Prepending the hotkey with a tilde (`~`) seems to not intercept the bound hotkey but rather to let it go to the underlying application.


}
{ Labels

  A label identifies a line of code. There are three types of labels:
    • normal labels (`foo:`)
    • hotkey labels (`^a::`)
    • hotstring labels (`:*:btw::`)

}
{ Misc

code {
c:\> autohotkey.exe /Debug
c:\> autohotkey.exe /Debug=server:port
code }

}
{ Identifying windows

  Functions that need to identify windows to operate on (usually?) have a `winTitle` parameter. The value of this paramter can be
    •  An actual title (or a part thereof) (See `setTitleMatchMode`)
    • `A` for the active window
    • `"ahk_class " classname`
    • `"ahk_id " %id%` (The Window ID or(?) `HWND`)
    • `"ahk_pid " %pid%`: the → Windows/development/process[process] id.
    • `"ahk_exe " %exeName%`: the name (or path) of a proces
    • `"ahk_group " %groupName%`

}
{ TODO

  { Message Box

    gh|temp-AutoHotKey|/msgBox.ahk2||

  }

  { Command line parameters

    gh|temp-AutoHotKey|/command-line-parameters.ahk2||

  }

  { Getting text with input()

    gh|temp-AutoHotKey|/input.ahk2||

  }

  { Sleep

    gh|temp-AutoHotKey|/sleep.ahk2||

  }

  { Run exe or switch to application

    gh|temp-AutoHotKey|/open-or-switch-to-exe.ahk2||

  }
  
  { noTrayIcon

    With the `#noTrayIcon` directive, no tray icon is shown. The (in-)visibility of the tray icon is stored in the variable `a_iconHidden`.

    gh|temp-AutoHotKey|/noTrayIcon.ahk2||

  }
  { singleInstance

code {
#singleInstance force
code }

  }
  { coordMode

   `coordMode` can be used (among others) to specifiy if the mouse coordinates (`mouseGetPos`) are reported relative to the active window or the screen.

    gh|temp-AutoHotKey|/coordMode.ahk2||

  }
  { setKeyDelay

    As per the documentation, `setKeyDelay` sets the delay that will occur after each keystroke sent by `send` and `controlSend`.
    -
    However, I was unable to figure out exactly what it is supposed to delay.

    gh|temp-AutoHotKey|/setKeyDelay.ahk2||

  }

}

sa:
  → tools/autohotkey/source[AutoHotKey sources]
