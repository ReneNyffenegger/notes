By default, a script adds an icon in the *tray* and has a *main window* (See `A_ScriptHwnd`).
-
The *title* of the main window is used to determine if a script is already running in conjunction with `#SingleInstance`

Variable names and function names are not case senstitive.

Comments are introduced with a `;` (semicolon).

Implicit string concatanation (aka auto-concat):
code {
"some text" a_var
code }

There is a `#include`.

{ Simple example

  Put the following script into a file, for example named `j-msgBox.ahk`:
code {
#requires autoHotkey v2.0

^j:: {
    msgBox("Hello, World!")
}
code }

  Then start the script (double clicking, or from the command line)

  Press `ctrl-j`.

}
{ Running scripts on startup

  An `.ahk` script can be placed under → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Windows/Start-Menu/Programs/Startup[`C:\Users\<username>AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup`] so that it
  is automatically started.

}
{ Variables

  Three types (compare `Type` function)
    • Strings
    • Numbers (int and float)
    • Object

  A variable itself is not typed.

  Built-in variables:
    • `true` equals 1
    • `false` equals 0
    • `A_Args` seems to be an array that contains (postitional?) parameters when a user defined function is called.
    • `A_index` stores the number of the current loop iteration
    • `A_ScriptHwnd` contains the `HWND` of the of the corresponding script's main window.

  A value is assigned with `:=`

  Environment variables can be queried with `EnvGet(…)`.

 `ListVars`

}
{ Functions

  Some functions are
    • `EnvGet`
    • `FileAppend`
    • `FileOpen`
    • `FileRead`
    • `ListVars`
    • `Pause`
    • `MsgBox`
    • `WinActivate`
    • `WinExist`

  { Defining functions

code {
DoWhatIWant(par_1, byRef par_2, par_3 := "")
{
  …
  return 42
}
code }

  }

}
{ Statements

   Some statements are:
     • `Break`
     • `Catch`
     • `Continue`
     • `Else`
     • `Finally`
     • `For`
     • `Gosub`
     • `Goto`
     • → #ahk-if[`If`]
     • `Loop`
     • `Return`
     • `Throw`
     • `Try`
     • `Until`
     • `While`

}
{ Operators

  Some operators are:
    • `and`
    • `contains`
    • `in`
    • `is`
    • `new`
    • `not`
    • `or`

}
{ Objects

  Some objects are
    • `File` (?)

}
{ Hotkeys

  A hotkey can be used to trigger actions.

  Key modifiers:
    • `+` - The Shift key
    • `#` - The Windows key
    • `!` - The Alt key
    • `^` - The Ctrl key
    • `<` and `>` in combination with another modifier explicitly specify the left or right version (`<!` = Left Alt key)

  Prepending the hotkey with a dollar sign (`$`) seems to prevent the hotkey from being (possibly recursively) invoked if a hotkey sends the hotkey.

  Prepending the hotkey with a tilde (`~`) seems to not intercept the bound hotkey but rather to let it go to the underlying application.


}
{ Labels

  A label identifies a line of code. There are three types of labels:
    • normal labels (`foo:`)
    • hotkey labels (`^a::`)
    • hotstring labels (`:*:btw::`)

}
{ Misc

code {
c:\> autohotkey.exe /Debug
c:\> autohotkey.exe /Debug=server:port
code }

}
{ Identifying windows

  Functions that need to identify windows to operate on (usually?) have a `winTitle` parameter. The value of this parameter can be
    •  An actual title (or a part thereof) (See `setTitleMatchMode`)
    • `A` for the active window
    • `"ahk_class " classname`
    • `"ahk_id " %id%` (The Window ID or(?) `HWND`)
    • `"ahk_pid " %pid%`: the → Windows/development/process[process] id.
    • `"ahk_exe " %exeName%`: the name (or path) of a proces
    • `"ahk_group " %groupName%`

}
{ TODO

  { Version 1 vs version 2

     What's the deal with Auhohotkey version 2, the `#requires autoHotkey v2.0` directive and the `.ahk2` suffix?

     The documentation allows to switch from V1 to V2 in the blue title bar.

     The version of the interpreter can be set in tha script with the `#requires` directive, for example:
 code {
 #requires autoHotKey v2
 code }

  }

  { Message Box

    gh|temp-AutoHotKey|/msgBox.ahk||

  }
  { Variable concatenation

    gh|temp-AutoHotKey|/concatenate-variables.ahk||

  }
  { One liner

    One of the arguably simplest Autohotkey scripts: As soon as *hi*, followed by a space, is typed, the *hi* is replaced with *Hello World*:
    gh|temp-AutoHotKey|/one-liner.ahk||

  }
  { Command line parameters

    gh|temp-AutoHotKey|/command-line-parameters.ahk||

  }
  { Getting text with input()

    gh|temp-AutoHotKey|/input.ahk2||

  }
  { Stopping a script

    A running autohotkey script can be stopped with `exitApp()`.

    gh|temp-AutoHotKey|/exitApp.ahk||

  }
  { Sleep

    gh|temp-AutoHotKey|/sleep.ahk||

  }
  { Dynamically create a hotkey

    Hotkeys are either created by a (double colon) *hotkey label*  (such as `i::…`) or the `hotkey(…)` function.

    The function `hotkey` allows to dynamically create a hotkey.

    gh|temp-AutoHotKey|/hotkey.ahk||

  }
  { Classes and objects (instances)

    Autohotkey allows to declare classes.

    The name of a class's constructur is `__new`.

    Member functions are declared like ordinary functions.

    gh|temp-AutoHotKey|/class-new.ahk||

  }
  { __get / __set

    A class can be implemented with dynamic setters and getters: the name of the attribute to be set or get is passed as a string to `__get(attr)` or `__set(attr, val)`:
    gh|temp-AutoHotKey|/class-__get-__set.ahk||

  }
  { __call

    Similarly to `__get` and `__set`, `__call` receives the name (and parameters) of a method whose name is not explicitly implemented.

    gh|temp-AutoHotKey|/class-__call.ahk||

  }
  { a_tickCount

   `a_tickCount` is a counter of milli seconds with limited precision (Approx. 10 ms?). Better precision can be achieved with
   `DllCall("QueryPerformanceCounter", "Int64*", ms)`.

    gh|temp-AutoHotKey|/a_tickCount.ahk||

  }
  { Variables that point to directories

    Some `a_` variables point to known directories

    gh|temp-AutoHotKey|/a_directories.ahk||

  }
  { a_comSpec #ahk-a_comSpec

    The `a_comSpec` variable contains the path to → Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] (for example `C:\Windows\System32\cmd.exe`).

    gh|temp-AutoHotKey|/a_comSpec.ahk2||

    Compare with the → Windows/development/environment-variables[environment variable] `%ComSpec%`.

  }
  { Screen dimensions (a_screenWidth, a_screenHeight)

    The width and height of the screen are stored in `a_width` and `a_height`.

    If using multiple monitors, only the dimensions of a single monitor (the primary one?) are reported.
    gh|temp-AutoHotKey|/screen-dimensions.ahk|

  }
  { Determine version (a_ahkVersion)

    gh|temp-AutoHotKey|/version.ahk||

  }
  { Run exe or switch to application

    gh|temp-AutoHotKey|/open-or-switch-to-exe.ahk||

  }
  { Read a file line by line

    The following script iterates over each line of a given file:

    gh|temp-AutoHotKey|/read-file-line-by-line.ahk||

  }
  { noTrayIcon

    With the `#noTrayIcon` directive, no tray icon is shown. The (in-)visibility of the tray icon is stored in the variable `a_iconHidden`.

    gh|temp-AutoHotKey|/noTrayIcon.ahk||

  }
  { singleInstance

code {
#singleInstance force
code }

  }
  { a_coordMode variables

    gh|temp-AutoHotKey|/a_coordMode.ahk||

  }
  { coordMode

   `coordMode` can be used (among others) to specifiy if the mouse coordinates (`mouseGetPos`) are reported relative to the active window or the screen.

    gh|temp-AutoHotKey|/coordMode.ahk||

  }
  { Variables

    gh|temp-AutoHotKey|/variables.ahk||

  }
  { null value

    Autohotkey defines the special `null` value.

    Apparently, a variable that hasn't been assigned a value is `null` and indistingishable from a variable that was explicitly assigned `null`.

    TODO: The following example does not work enymore:
    gh|temp-AutoHotKey|/null.ahk||

    The → #ahk-type[type] of `null` is *String*.

  }
  { Types #ahk-type

   `type(…)` reveals the type of an expression.

    gh|temp-AutoHotKey|/type.ahk2||

  }
  { Arrays

    Arrays can be created with `[…, … ]`.

    The → #ahk-type[type] of an array is `Object`.

    The number of elements in an array is reported with `.length`.

    Arrays can be nested.

    gh|temp-AutoHotKey|/array.ahk||

  }
  { Associative Arrays (Dictionaris, Hashes)

    gh|temp-AutoHotKey|/dictionary.ahk||

    { Checking if a key exists

      An associative array defines the method `hasKey(k)` that determines if the key `k` exists.

      gh|temp-AutoHotKey|/hasKey.ahk||

    }

  }
  { Warn

    TODO: The `#warn` directive

  }
  { envGet

   `envGet` returns the value of a → Windows/development/environment-variables[environment variable].

    gh|temp-AutoHotKey|/envGet.ahk||

  }
  { setKeyDelay

    As per the documentation, `setKeyDelay` sets the delay that will occur after each keystroke sent by `send` and `controlSend`.
    -
    However, I was unable to figure out exactly what it is supposed to delay.

    gh|temp-AutoHotKey|/setKeyDelay.ahk||

  }
  { keyWait

    gh|temp-AutoHotKey|/keyWait.ahk||

  }
  { hot keys

    gh|temp-AutoHotKey|/hotkeys-f_and_j_1.ahk||

    gh|temp-AutoHotKey|/hotkeys-f_and_j_2.ahk||

    This does not work how it was intended:
    gh|temp-AutoHotKey|/hotkeys-f_and_j_3.ahk||

  }
  { tilde

    A hot key can be prepended with a tilde in which case the triggering hot key is passed to the receiving application.
    -
    Without tilde, the hotkey is «swallowed» by AutoHotKey.

    gh|temp-AutoHotKey|/tilde.ahk||

  }
  { dollar sign

    A hot key can be prepended with a dollar sign in which case the hot key is not invoked if the body of the hotkey causes the triggering hot key to be sent again.

    gh|temp-AutoHotKey|/dollar.ahk||

  }
  { Run application and wait for it to become active

    gh|temp-AutoHotKey|/run-winWait.ahk||

  }
  { fileAppend

   `fileAppend` appends some text to an existing file or creates a file with the given line.

    gh|temp-AutoHotKey|/fileAppend.ahk||

  }
  { order of definition

    A function can be called even if it is defined later.

    gh|temp-AutoHotKey|/orderOfDefinition.ahk||

  }
  { if #ahk-if

    gh|temp-AutoHotKey|/if.ahk||

  }
  { Gui

   `gui` allows to create an «ordinary» window.

    gh|temp-AutoHotKey|/gui.ahk||

  }
  { Edit control

    An *edit control* might be used for debugging purposes. The following example writes the
    mouse position every second:

    gh|temp-AutoHotKey|/gui-addEdit.ahk|

  }
  { Positioning controls with the section option

    When creation a control, the option of a control can include `section`. This allows subsequently created controls to be added on the same
    y coordinate by including `ys` in their option.

    gh|temp-AutoHotKey|/gui-position-section.ahk||

  }
  { Optional parameters

    gh|temp-AutoHotKey|/function-optional-parameters.ahk||

  }
  { Function references

    gh|temp-AutoHotKey|/functionReference.ahk||

  }
  { Closures

    gh|temp-AutoHotKey|/closures.ahk||

  }
  { sysGet


   `sysGet()` seems to call the Windows API function `GetSystemMetrics()`.

    gh|temp-AutoHotKey|/sysGet.ahk||

  }
  { regexReplace

    Autohotkey also supports → development/regular-expressions[regular expressions].

    gh|temp-AutoHotKey|/regexReplace.ahk||

  }
  { Say something

    The following example uses `comObjCreate` to create an → Windows/development/COM instance of the → Windows/development/COM/Useful-object-libraries/Microsoft-Speech and then
    to say *Hello World*:

    gh|temp-AutoHotKey|/say-hello-world.ahk||

  }
  { winGetList

    The following snippet gets all top level(?) Windows and writes their HWND and title into a list view:
    gh|temp-AutoHotKey|/winGetList-all.ahk2||

   `winGetList` can also be used to find windows by their *title*:
    gh|temp-AutoHotKey|/winGetList-title.ahk||

  }
  { winGetControls

    gh|temp-AutoHotKey|/winGetControls.ahk||

  }
  { Escape characters and Carriage return / line feed

    The default *escape character* in autohotkey is the back-tick. If followed by an `n`, it produces a
    → development/line-break[new line] (→ development/Unicode/ASCII[ASCII] 10),
    if followed by an `r`, it produces a carriage return (ASCII 13).
    -
    Thus, it is possible to insert → development/line-break[line breaks] into strings.

    gh|temp-AutoHotKey|/new-line.ahk||

  }
  { Calling a function in a dll #ahk-call-dll

   `dllCall` allows to call a function in a → Windows/development/Portable-Executable/DLL.

    The first argument specifies the DLL and the function, separated by a backslash. In case of a → Windows/development/WinAPI function (more specifically: if the function is in one of the
    four DLLs → Windows/dirs/Windows/System32/user32_dll,
    → Windows/dirs/Windows/System32/kernel32_dll,
    → Windows/dirs/Windows/System32/comctl32_dll or
    → Windows/dirs/Windows/System32/gdi32_dll), the name of the DLL may be omitted.

    The following parameters come in pairs of which the first argument specifies the data type and the second argument the valuer to be passed to the DLL.

    Note: the data type `Str` is equivalent to `WStr` and specifies a wide character string. An → development/Unicode/ASCII string is specified by `AStr`.
   (See also → Windows/development/WinAPI/A-and-W-functions)

    gh|temp-AutoHotKey|/dllCall.ahk||

  }
  { Fat arrow / lambda expressions

    The `=>` operater is apparently known by the expression *fat arrow* and seems to make lambda expressions possible.

    Lambda functions are useful to define callback-functions where they're used.
    -
    Apparently, only one statement is possible in a lambda expression.

    gh|temp-AutoHotKey|/lambda-1.ahk2||

    gh|temp-AutoHotKey|/todo-lambda.ahk||


  }
  { Anonymous event handlers

    gh|temp-AutoHotKey|/anonymous-onEvent-handler.ahk||

  }
}

sa:
  → tools/autohotkey/source[AutoHotKey sources]
