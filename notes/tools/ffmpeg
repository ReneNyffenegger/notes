
{ Convert between different media types

  The following command converts *file.mp4* to *file.mp3*.

  The `-i` flag specifies the input file.

code {
ffmpeg -i file.mp4 file.mp3
code }

}

{ Cutting/extracting parts from an existing video

The following command extracted the part from 00:48 through 02:39. Is this the canonical way to do that? I don't know.
code {
ffmpeg -i inputfile.mp4 -ss 00:00:48 -to 00:02:39 -async 1 -strict -2 outputfile.mp4
code }

}
{ Merging mp3 files

  The `concat:` instruction combined with `-acodec copy` allows to concatenate multiple mp3 into one.

code {
ffmpeg -i "concat:one.mp3|two.mp3|three.mp3|four.mp3" -acodec copy merged.mp3
code }

}
{ Print duration of an mp3 #duration

code {
ffmpeg -i Multiverse/Mutliverse.mp3  2>&1 | grep Duration
code }

Compare with → tools/mp3info#duration[mp3info].

}

{ Compiling ffmpeg under Cygwin 64

  Based on → http://www.mediaentertainmentinfo.com/2014/01/1-technical-series-how-to-compile-ffmpeg-under-cygwin.html/[How to compile ffmpeg] under
  → development/Cygwin, I was able to compile ffmpeg (plus libmp3lame) for Cygwin 64 like so:
  -
  First, I had to compile ~libmp3lame~
  -
  The `configure.guess` script (apparently dating back to 2003) had to be replaced by 
  → http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD

  As per → https://github.com/HPCE/hpce-2015-cw2/issues/3, the lines 138 and 139 in `frontend/lametime.c` had to be commented:
code {
       //#elif defined __CYGWIN__
       //    setmode(fileno(fp), _O_BINARY);
code }

Then, with the usuale `./configure`, `make`, `make install` trilogy, libmp3lame could be built and installed.

After that, ffmpeg could be build:

code {
→ development/Cygwin#apt-cyg install binutils, gcc-core, git, make, ming, mingw64-x86_64-runtime, yasm, texi2html, diffutils, dos2unix
git clone git://source.ffmpeg.org/ffmpeg.git ffmpeg
→ Linux/shell/commands/dos2unix configure
LDFLAGS=-L/usr/local/lib ./configure --enable-shared --disable-static --enable-libmp3lame
make
make install
code }

}

{ Showing available input devices

code {
ffmpeg -list_devices true -f dshow -i dummy
code }

}

{ Record (capture) screen

code {
ffmpeg -y -f dshow -i audio="Mikrofon (High Definition Audio" -f gdigrab -video_size 1440x900 -i desktop -vcodec h264 foo.mkv
code }

Find ~name of audio~ with -list_devices (see above).

~dshow~ stands for *DirectShow caputure*, ~gdigrap~ for *GDI PI Windows frame grabber* (See `ffmpeg -formats`).

Recoding microphone and pc's audio (mixing both audio sources with `-filter_complex amerge`)
code {
ffmpeg -framerate 10 -f dshow -i video="screen-capture-recorder":audio="virtual-audio-capturer" -f dshow -i audio="Mikrofon (High Definition Audio" -filter_complex amerge -ac 2 -ar 44100 -acodec aac -ab 192k -pix_fmt yuv420p -r 30 -vcodec h264 -crf 27 -preset ultrafast -f mp4 undo.mp4
code }

}

{ Checking version

  The version of `ffmpeg` can by checked with `-version` (*one* hyphen only!):
code {
ffmpeg -version
code }

}

{ Part of ImageMagick

  Apparently, ffmpeg is also part of an → tools/ImageMagick distribution.

}

sa:

  → tools/mp3

  Project homepage: → https://ffmpeg.org/

  → tools
