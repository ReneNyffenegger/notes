{ Scancodes, keycodes and keysyms

  { Scancode #scancode

    The *scancode* is a numeric value that identifies a key on a keyboard. Since different keyboards have different layouts, the scancode
    is device dependent.

    The keyboard sends the key's scancode to the kernel (or possibly more accurately the keyboard driver) when it is pressed and again (probably with another bit set or cleared) when it is released.

    In a → development/misc/virtual-console, these scancodes can be displayed with →Linux/shell/commands/showkey[`showkey -s`].

    sa: → Linux/X/XKB/database#keycodes[XKB database: keycodes]

  }

  { Keycode #keycode

    The keyboard driver interpretes the scancode and generates (device independent) keycodes.

    A keycode is a number in the range between 8 and 255 which represents a physical (or logical) key.

    The kernel parses the stream of scancodes and maps them to a series of *keycodes* (key press/release events).
    -
    → Linux/shell/commands/showkey[`showkey`] apparently is also able to display those keycodes.

    In → Linux/X, the translation table from (evdev?) scancocdes to keycodes seems to be stored in
    → Linux/fhs/usr/share/X11/xkb/keycodes/evdev

    In a console, the mapping can be viewed with → Linux/shell/commands/getkeycodes[`getkeycodes`].

    ? In Linux, this seems to happen in → Linux/kernel/source/drivers/tty/vt/keyboard_c.

    → Linux/X[X] produces a keycode when a key is pressed and another when the key is released again.

  }

  { Keysym #keysym

    Depending on which →#modifier-keys are pressed, the keycodes are mapped to keysyms.

    A keysym is a 32-bit integer of which the the three most significant bits are always 0, so that the number space is 29 bits.

    A *keysym* is an encoding of a symbol on the cap of a kay; it represents a keyboard action. Each key can be bound to up to 256 keysyms (see → Linux/kernel/keymap#keycode-definition[keymap - keycode definition])
    -
    Such actions can be
      • outputting character codes
      • character sequences
      • switching consoles
      • switching → Linux/kernel/keymap[keymaps]
      • booting the machine
      • etc
    The action chosen is dependent on the →#modifier-keys[modifier keys] pressed concurrently with the key.
    -
    In a console, the complete list can be queried with `→ Linux/shell/commands/dumpkeys -l`
    -
    In X, this is done by →Linux/shell/commands/xmodmap.

    With → Linux/shell/commands/X/xev[`xev`], it possible to display keycode and keysym: `xev -event keyboard`.

    Apparently, there is a *xcb-util-keysyms* package that contains a library for handling standard X key constants and conversion to/from keyboards.

    { Special keysyms

      There are two special keysyms: `NoSymbol` and `VoidSymbol` which indicate the absence of symbols.

    }
    { Names of keysyms

? A possible name for a keysym is for example `CAPS LOCK`.

    }
    { X11 #keysym-x11

      The X11 standard defines keysym codes. these codes are 29 bit integer values (that identify
      characters of functions for a keyboard-key).

      These X11 keysym codes have (mnemonic) names which are found in `→ Linux/fhs/usr/include/X11/keysymdef_h[X11/keysymdef.h]` (without XK_ prefix),
      and is possibly supplemented by → Linux/fhs/usr/share/X11/XKeysymDB.


    }

  }

}

{ Modifier keys #modifier-keys

  Keys such as *shift*, *ctrl*, *alt* (etc?) are called *modifier keys*. These are used to change the meaning of
  other keys.

  → Linux/X/XKB recognizes 8 modifier keys: *Control*, *Shift*, *Lock*, *Mod1*, *Mod2*, *Mod3*, *Mod4* and *Mod5*. The *Alt* key(s) are mapped to one (or more?) of the *Mod* keys.
    

  Modifier keys can be combined (alt+ctrl etc).

}

{ Change keyboard layout

  { Windows

    → Windows/tools/swap-keys_c[`swap-keys.c`], a small → development/languages/C-C-plus-plus/C[C] program that swap the *Esc* and *Caps Lock* keys and assigns the *right ctrl* key to the *right alt* key.
    -
    A similar program is → Windows/tools/event-hooking/swap-keys/cs[`SwapKeys.cs`], but written in → development/languages/C-Sharp[C#].

    In → Windows, the installed keyboard layouts are listed in the → Windows/registry[registry] under
    → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Keyboard-Layout/DosKeybCodes[`HKLM\SYSTEM\CurrentControlSet\Control\Keyboard Layout\DosKeybCodes`].


  }

  { Linux
   
    The language keyboard layout files are under → Linux/fhs/usr/share/X11/xkb/symbols.

    { See also

      → Linux/fhs/etc/default/keyboard,
      → Linux/keyboard/layout


    }

  }

}

{ Keyboard modifiers #keyboard-modifiers

  Shift, AltGr, Control, Alt, ShiftL, ShiftR, CtrlL, CtrlR, CapsShift

}
{ Number of keys

  The number of keys apparently defines the keyboard model (pc104, pc105 …, compare → Linux/fhs/usr/share/X11/xkb/rules/xorg_lst)

  The 105 key keyboard (apparently european layout) seems to be like the 104 key keboard (us layout) with an additional key between the *left shift* key and the *z* (or *y*) key.

}
{ Scroll Lock

  Some laptops and keyboard don't have a *scroll lock* key. Methods to simulate this key include:
    • `Fn+s` or `Fn+F6` on certain Dell laptops
    • `Fn+C` or `Fn+S` on certain Lenovo laptops
    • `Fn+C` on certain HP laptops

  On → Windows, → Windows/dirs/Windows/System32/osk_exe[`osk.exe`] might also be used to enter or leave scroll-lock mode.

}

sa:
  → Linux/kernel/keymap

  → Linux/shell/commands/X/xkbcomp[`xkbcomp`]

  → Linux/fhs/usr/share/X11/xkb/rules/xorg_lst

  → Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Keyboard-Layout,
  → Windows/registry/tree/HKEY_CURRENT_USER/Keyboard-Layout/Preload

  → Windows: → Windows/dirs/Windows/System32/osk_exe[osk.exe] and `kbd*.dll` under → Windows/dirs/Windows/System32
  -
  → Windows/dirs/Windows/System32/intl_cpl[`control.exe intl.cpl,,2`]

  The property → Windows/PowerShell/command-inventory/noun/culture/get#KeyboardLayoutId[`KeyboardLayoutId`] of the → Microsoft/dot-net/namespaces-classes/System/Globalization/CultureInfo[`System.Globalization.CultureInfo`] object
  returned by the PowerShell cmdLet → Windows/PowerShell/command-inventory/noun/culture/get[`get-culture`].
