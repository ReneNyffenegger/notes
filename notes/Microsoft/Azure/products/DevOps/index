$ Azure DevOps

*Services for teams to share code, track work and ship software*

Azure DevOps provides services in the following areas:
  • planning work
  • collaboration on source code
  • building applications
  • deploying applications


*Azure DevOps Services* was previously called *Visual Studio Team Services (VSTS)*.
-
In fact, some VSTS features are now available through the following DevOps services:
table { ll
   ~DevOps service~ ☰ ~VSTS feature~
  → Microsoft/Azure/products/Boards ☰ Work
  → Microsoft/Azure/products/Pipelines ☰ Build & Release
  → Microsoft/Azure/products/Repos ☰ Code
  → Microsoft/Azure/products/Test-Plans ☰ Test
  → Microsoft/Azure/products/Artifacts ☰ Packages (extensions)
table }

Other Dev Ops services include
  • Azure Monitor(?)
  • → Microsoft/Azure/products/DevTest-Labs (?)
  • → https://marketplace.visualstudio.com/azuredevops[Extensions Marketplace]

? Navigaton-Actions
  • Projects
  • My work items
  • My (→ development/version-control-systems/git) pull requests

The functionality of DevOps can be enhanced by integrating extensions that are offered by
  • Campfire
  • Slack
  • Trello
  • UserVoice
  • etc.

{ Projects

  Projects are a fundamental concept in Azure DevOps: they store data that is added to DevOps.

  A project provides a source code repository.

  A project is logical entity in which software building takes place and allows to perform the following related activities:
    • planning
    • tracking progress
    • collaboration

  A project is associated with at least one *team*, which is created automatically when the project is created.
  -
  Additional teams can be added to a project if needed (Typically, a team consists of 6 to 9 members).

  A project can be accessed from a → development/web/browser[browser] on the → development/web/URI-URL-URN-IRI-URC#url[URL] `https://dev.azure.com/{organization}/{project}`

}
{ Collections

  A *collection* is a container for projects.

  When signing up with Azure DevOps Services or installing Team Foundation Server, a default collection is created.

  In Azure DevOps Services, a collection corresponds to an organization.


}
{ Work items #az-devops-work-items

  A work item is one of
    • issue
    • bug
    • epic
    • feature
    • user story
    • task

  A work item collects
     • information (field values)
     • attachments
     • relations to other work items

  In → development/SDLC/tools/JIRA, a work item largely corresponds to an → development/SDLC/tools/JIRA#jira-issue-types[issue type].

}
{ Reporting tools/services

  Reporting tools and services that are included into Azure Devops (Services and Server) include
    • Dashboards
    • Charts
    • Analytics service / Analytics widgets
    • Microsoft Power BI intergration
    • → development/Data/OData support

}
{ DevOps in the Cloud and on-prem

  DevOps services are provided in the → development/Cloud (referred to as *Azure DevOps Services* or on-prem (referred to as *Azure DevOps Server*).

  The on-prem offering requires an → development/databases/SQL-Server backend.

}
{ URL

  An organization's DevOps → development/web/URI-URL-URN-IRI-URC#url[URL] is `→ https://dev.azure.com[dev.azure.com/]{organization}`.

  It's possible to install TFS on-prem with a non-default URL.

}


sa:
  *Resource Providers* for Azure DevOps include
    • Microsoft.DevOps
    • microsoft.visualstudio
    • Microsoft.VSOnline
  See also → Windows/PowerShell/command-inventory/noun/az/ResourceProvider/get[`get-azResourceProvider`]

  In order to use → Microsoft/Azure/CLI for DevOps, the respective extension needs to be added:
code {
→ Microsoft/Azure/CLI/az/extension add --name azure-devops
code }

  → Microsoft/Azure/products/DevOps/authentication
