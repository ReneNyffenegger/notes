$ Power Query: Standard library
@ standard library

{ Data types constructors

  table { llll

   `Int8.From` ☰ `VALUE as any`, `optional CULTURE as nullable text`, `optional ROUNDINGMODE as nullable number` ☰ `as nullable number` ☰­
   `Int16.From` ☰ `VALUE as any`, `optional CULTURE as nullable text`, `optional ROUNDINGMODE as nullable number` ☰ `as nullable number` ☰­
   `Int32.From` ☰ `VALUE as any`, `optional CULTURE as nullable text`, `optional ROUNDINGMODE as nullable number` ☰ `as nullable number` ☰­
   `Int64.From` ☰ `VALUE as any`, `optional CULTURE as nullable text`, `optional ROUNDINGMODE as nullable number` ☰ `as nullable number` ☰­

   `#binary` ☰ `VALUE as any` ☰ `as any` ☰­
   `#date` ☰ `YEAR as number`, `MONTH as number`, `DAY as number` ☰ `as date` ☰­
   `#datetime` ☰ `YEAR as number`, `MONTH as number`, `DAY as number`, `HOUR as number`, `MINUTE as number`, `SECOND as number` ☰ `as datetime` ☰­
   `#datetimezone` ☰ `YEAR as number`, `MONTH as number`, `DAY as number`, `HOUR as number`, `MINUTE as number`, `SECOND as number,` `OFFSETHOURS as number`, `OFFSETMINUTES as number` ☰ `as datetimezone` ☰­
   `#duration` ☰ `DAYS as number`, `HOURS as number`, `MINUTES as number`, `SECONDS as number` ☰ `as duration` ☰­
   `#table` ☰ `COLUMNS as any`, `ROWS as any` ☰ `as any` ☰­
   `#time` ☰ `HOUR as number`, `MINUTE as number`, `SECOND as number` ☰ `as time` ☰­

  table }
}
{ Access
  table { llll
   `Access.Database` ☰ `DATABASE as binary`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ AccessControlEntry
  table { llll
   `AccessControlEntry.ConditionToIdentities` ☰ `IDENTITYPROVIDER as function`, `CONDITION as function` ☰ `as list` ☰­
  table }
}
{ Action
  table { llll
   `Action.WithErrorContext` ☰ `ACTION as action`, `CONTEXT as text` ☰ `as action` ☰­
  table }
}
{ ActiveDirectory
  table { llll
   `ActiveDirectory.Domains` ☰ `optional FORESTROOTDOMAINNAME as nullable text` ☰ `as table` ☰­
  table }
}
{ AdobeAnalytics
  table { llll
   `AdobeAnalytics.Cubes` ☰ `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ AdoDotNet
  table { llll
   `AdoDotNet.DataSource` ☰ `PROVIDERNAME as text`, `CONNECTIONSTRING as any`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `AdoDotNet.Query` ☰ `PROVIDERNAME as text`, `CONNECTIONSTRING as any`, `QUERY as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ AnalysisServices
  table { llll
   `AnalysisServices.Database` ☰ `SERVER as text`, `DATABASE as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `AnalysisServices.Databases` ☰ `SERVER as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ AzureStorage
  table { llll
   `AzureStorage.BlobContents` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as binary` ☰­
   `AzureStorage.Blobs` ☰ `ACCOUNT as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `AzureStorage.DataLake` ☰ `ENDPOINT as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `AzureStorage.DataLakeContents` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as binary` ☰­
   `AzureStorage.Tables` ☰ `ACCOUNT as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Binary
  table { llll
   `Binary.ApproximateLength` ☰ `BINARY as nullable binary` ☰ `as nullable number` ☰­
   `Binary.Buffer` ☰ `BINARY as nullable binary` ☰ `as nullable binary` ☰­
   `Binary.Combine` ☰ `BINARIES as list` ☰ `as binary` ☰­
   `Binary.Compress` ☰ `BINARY as nullable binary`, `COMPRESSIONTYPE as number` ☰ `as nullable binary` ☰­
   `Binary.Decompress` ☰ `BINARY as nullable binary`, `COMPRESSIONTYPE as number` ☰ `as nullable binary` ☰­
   `Binary.From` ☰ `VALUE as any`, `optional ENCODING as nullable number` ☰ `as nullable binary` ☰­
   `Binary.FromList` ☰ `LIST as list` ☰ `as binary` ☰­
   `Binary.FromText` ☰ `TEXT as nullable text`, `optional ENCODING as nullable number` ☰ `as nullable binary` ☰­
   `Binary.InferContentType` ☰ `SOURCE as binary` ☰ `as record` ☰­
   `Binary.Length` ☰ `BINARY as nullable binary` ☰ `as nullable number` ☰­
   `Binary.Range` ☰ `BINARY as binary`, `OFFSET as number`, `optional COUNT as nullable number` ☰ `as binary` ☰­
   `Binary.Split` ☰ `BINARY as binary`, `PAGESIZE as number` ☰ `as list` ☰­
   `Binary.ToList` ☰ `BINARY as binary` ☰ `as list` ☰­
   `Binary.ToText` ☰ `BINARY as nullable binary`, `optional ENCODING as nullable number` ☰ `as nullable text` ☰­
   `Binary.View` ☰ `BINARY as nullable binary`, `HANDLERS as record` ☰ `as binary` ☰­
   `Binary.ViewError` ☰ `ERRORRECORD as record` ☰ `as record` ☰­
   `Binary.ViewFunction` ☰ `FUNCTION as function` ☰ `as function` ☰­
  table }
}
{ BinaryFormat
  table { llll
   `BinaryFormat.7BitEncodedSignedInteger` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.7BitEncodedUnsignedInteger` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.Binary` ☰ `optional LENGTH as any` ☰ `as function` ☰­
   `BinaryFormat.Byte` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.ByteOrder` ☰ `BINARYFORMAT as function`, `BYTEORDER as number` ☰ `as function` ☰­
   `BinaryFormat.Choice` ☰ `BINARYFORMAT as function`, `CHOOSEFUNCTION as function,` `optional TYPE as nullable type,` `optional COMBINEFUNCTION as nullable function` ☰ `as function` ☰­
   `BinaryFormat.Decimal` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.Double` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.Group` ☰ `BINARYFORMAT as function`, `GROUP as list`, `optional EXTRA as nullable function,` `optional LASTKEY as any` ☰ `as function` ☰­
   `BinaryFormat.Length` ☰ `BINARYFORMAT as function`, `LENGTH as any` ☰ `as function` ☰­
   `BinaryFormat.List` ☰ `BINARYFORMAT as function`, `optional COUNTORCONDITION as any` ☰ `as function` ☰­
   `BinaryFormat.Null` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.Record` ☰ `RECORD as record` ☰ `as function` ☰­
   `BinaryFormat.SignedInteger16` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.SignedInteger32` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.SignedInteger64` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.Single` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.Text` ☰ `LENGTH as any`, `optional ENCODING as nullable number` ☰ `as function` ☰­
   `BinaryFormat.Transform` ☰ `BINARYFORMAT as function`, `FUNCTION as function` ☰ `as function` ☰­
   `BinaryFormat.UnsignedInteger16` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.UnsignedInteger32` ☰ `BINARY as binary` ☰ `as any` ☰­
   `BinaryFormat.UnsignedInteger64` ☰ `BINARY as binary` ☰ `as any` ☰­
  table }
}
{ Byte
  table { llll
   `Byte.From` ☰ `VALUE as any`, `optional CULTURE as nullable text`, `optional ROUNDINGMODE as nullable number` ☰ `as nullable number` ☰­
  table }
}
{ Cdm
  table { llll
   `Cdm.Contents` ☰ `TABLE as table` ☰ `as table` ☰­
  table }
}
{ Character
  table { llll
   `Character.FromNumber` ☰ `NUMBER as nullable number` ☰ `as nullable text` ☰­
   `Character.ToNumber` ☰ `CHARACTER as nullable text` ☰ `as nullable number` ☰­
  table }
}
{ Combiner
  table { llll
   `Combiner.CombineTextByDelimiter` ☰ `DELIMITER as text`, `optional QUOTESTYLE as nullable number` ☰ `as function` ☰­
   `Combiner.CombineTextByEachDelimiter` ☰ `DELIMITERS as list`, `optional QUOTESTYLE as nullable number` ☰ `as function` ☰­
   `Combiner.CombineTextByLengths` ☰ `LENGTHS as list`, `optional TEMPLATE as nullable text` ☰ `as function` ☰­
   `Combiner.CombineTextByPositions` ☰ `POSITIONS as list`, `optional TEMPLATE as nullable text` ☰ `as function` ☰­
   `Combiner.CombineTextByRanges` ☰ `RANGES as list`, `optional TEMPLATE as nullable text` ☰ `as function` ☰­
  table }
}
{ Comparer
  table { llll
   `Comparer.Equals` ☰ `comparer as function`, `x as any`, `y as any` ☰ `as logical` ☰­
   `Comparer.FromCulture` ☰ `CULTURE as text`, `optional IGNORECASE as nullable logical` ☰ `as function` ☰­
   `Comparer.Ordinal` ☰ `X as any`, `Y as any` ☰ `as number` ☰­
   `Comparer.OrdinalIgnoreCase` ☰ `X as any`, `Y as any` ☰ `as number` ☰­
  table }
}
{ Csv
  table { llll
   `→ Microsoft/Power-Query/M-formula/standard-library/Csv/Document` ☰ `SOURCE as any`, `optional COLUMNS as any`, `optional DELIMITER as any,` `optional EXTRAVALUES as nullable number`, `optional ENCODING as nullable number` ☰ `as table` ☰­
  table }
}
{ Cube
  table { llll
   `Cube.AddAndExpandDimensionColumn` ☰ `CUBE as table`, `DIMENSIONSELECTOR as any`, `ATTRIBUTENAMES as list,` `optional NEWCOLUMNNAME as any` ☰ `as table` ☰­
   `Cube.AddMeasureColumn` ☰ `CUBE as table`, `COLUMN as text`, `MEASURESELECTOR as any` ☰ `as table` ☰­
   `Cube.ApplyParameter` ☰ `cube as table`, `parameter as any`, `optional arguments as nullable list` ☰ `as table` ☰­
   `Cube.AttributeMemberId` ☰ `ATTRIBUTE as any` ☰ `as any` ☰­
   `Cube.AttributeMemberProperty` ☰ `ATTRIBUTE as any`, `PROPERTYNAME as text` ☰ `as any` ☰­
   `Cube.CollapseAndRemoveColumns` ☰ `CUBE as table, **columnNames** as list` ☰ `as table` ☰­
   `Cube.Dimensions` ☰ `CUBE as table` ☰ `as table` ☰­
   `Cube.DisplayFolders` ☰ `CUBE as table` ☰ `as table` ☰­
   `Cube.MeasureProperties` ☰ `CUBE as table` ☰ `as table` ☰­
   `Cube.MeasureProperty` ☰ `MEASURE as any`, `PROPERTYNAME as text` ☰ `as any` ☰­
   `Cube.Measures` ☰ `CUBE as any` ☰ `as table` ☰­
   `Cube.Parameters` ☰ `cube as table` ☰ `as table` ☰­
   `Cube.Properties` ☰ `CUBE as table` ☰ `as table` ☰­
   `Cube.PropertyKey` ☰ `PROPERTY as any` ☰ `as any` ☰­
   `Cube.ReplaceDimensions` ☰ `CUBE as table`, `DIMENSIONS as table` ☰ `as table` ☰­
   `Cube.Transform` ☰ `CUBE as table`, `TRANSFORMS as list` ☰ `as table` ☰­
  table }
}
{ Currency
  table { llll
   `Currency.From` ☰ `VALUE as any`, `optional CULTURE as nullable text`, `optional ROUNDINGMODE as nullable number` ☰ `as nullable number` ☰­
  table }
}
{ Date
  table { llll
   `Date.AddDays` ☰ `DATETIME as any`, `NUMBEROFDAYS as number` ☰ `as any` ☰­
   `Date.AddMonths` ☰ `DATETIME as any`, `NUMBEROFMONTHS as number` ☰ `as any` ☰­
   `Date.AddQuarters` ☰ `DATETIME as any`, `NUMBEROFQUARTERS as number` ☰ `as any` ☰­
   `Date.AddWeeks` ☰ `DATETIME as any`, `NUMBEROFWEEKS as number` ☰ `as any` ☰­
   `Date.AddYears` ☰ `DATETIME as any`, `NUMBEROFYEARS as number` ☰ `as any` ☰­
   `Date.Day` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Date.DayOfWeek` ☰ `DATETIME as any`, `optional FIRSTDAYOFWEEK as nullable number` ☰ `as nullable number` ☰­
   `Date.DayOfWeekName` ☰ `DATE as any`, `optional CULTURE as nullable text` ☰ as ? ☰­
   `Date.DayOfYear` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Date.DaysInMonth` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Date.EndOfDay` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.EndOfMonth` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.EndOfQuarter` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.EndOfWeek` ☰ `DATETIME as any`, `optional FIRSTDAYOFWEEK as nullable number` ☰ `as any` ☰­See the → Microsoft/Power-Query/M-formula/standard-library#pq-stdlib-day[DAY] enum.
   `Date.EndOfYear` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable date` ☰­
   `Date.FromText` ☰ `TEXT as nullable text`, `optional OPTIONS as any` ☰ `as nullable date` ☰­
   `Date.IsInCurrentDay` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInCurrentMonth` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInCurrentQuarter` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInCurrentWeek` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInCurrentYear` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInNextDay` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInNextMonth` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInNextNDays` ☰ `DATETIME as any`, `DAYS as number` ☰ `as nullable logical` ☰­
   `Date.IsInNextNMonths` ☰ `DATETIME as any`, `MONTHS as number` ☰ `as nullable logical` ☰­
   `Date.IsInNextNQuarters` ☰ `DATETIME as any`, `QUARTERS as number` ☰ `as nullable logical` ☰­
   `Date.IsInNextNWeeks` ☰ `DATETIME as any`, `WEEKS as number` ☰ `as nullable logical` ☰­
   `Date.IsInNextNYears` ☰ `DATETIME as any`, `YEARS as number` ☰ `as nullable logical` ☰­
   `Date.IsInNextQuarter` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInNextWeek` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInNextYear` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousDay` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousMonth` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousNDays` ☰ `DATETIME as any`, `DAYS as number` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousNMonths` ☰ `DATETIME as any`, `MONTHS as number` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousNQuarters` ☰ `DATETIME as any`, `QUARTERS as number` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousNWeeks` ☰ `DATETIME as any`, `WEEKS as number` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousNYears` ☰ `DATETIME as any`, `YEARS as number` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousQuarter` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousWeek` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInPreviousYear` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsInYearToDate` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.IsLeapYear` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `Date.Month` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Date.MonthName` ☰ `DATE as any`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
   `Date.QuarterOfYear` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Date.StartOfDay` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.StartOfMonth` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.StartOfQuarter` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.StartOfWeek` ☰ `DATETIME as any`, `optional FIRSTDAYOFWEEK as nullable number` ☰ `as any` ☰­
   `Date.StartOfYear` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Date.ToRecord` ☰ `DATE as date` ☰ `as record` ☰­
   `Date.ToText` ☰ `DATE as nullable date`, `optional OPTIONS as any`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
   `Date.WeekOfMonth` ☰ `DATETIME as any`, `optional FIRSTDAYOFWEEK as nullable number` ☰ `as nullable number` ☰­
   `Date.WeekOfYear` ☰ `DATETIME as any`, `optional FIRSTDAYOFWEEK as nullable number` ☰ `as nullable number` ☰­
   `Date.Year` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
  table }
}
{ DateTime
  table { llll
   `DateTime.AddZone` ☰ `DATETIME as nullable datetime`, `TIMEZONEHOURS as number,` `optional TIMEZONEMINUTES as nullable number` ☰ `as nullable datetimezone` ☰­
   `DateTime.Date` ☰ `DATETIME as any` ☰ `as nullable date` ☰­
   `DateTime.FixedLocalNow` ☰ ☰ `as datetime` ☰­
   `DateTime.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable datetime` ☰­
   `DateTime.FromFileTime` ☰ `FILETIME as nullable number` ☰ `as nullable datetime` ☰­
   `DateTime.FromText` ☰ `TEXT as nullable text`, `optional OPTIONS as any` ☰ `as nullable datetime` ☰­
   `DateTime.IsInCurrentHour` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInCurrentMinute` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInCurrentSecond` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInNextHour` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInNextMinute` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInNextNHours` ☰ `DATETIME as any`, `HOURS as number` ☰ `as nullable logical` ☰­
   `DateTime.IsInNextNMinutes` ☰ `DATETIME as any`, `MINUTES as number` ☰ `as nullable logical` ☰­
   `DateTime.IsInNextNSeconds` ☰ `DATETIME as any`, `SECONDS as number` ☰ `as nullable logical` ☰­
   `DateTime.IsInNextSecond` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInPreviousHour` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInPreviousMinute` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.IsInPreviousNHours` ☰ `DATETIME as any`, `HOURS as number` ☰ `as nullable logical` ☰­
   `DateTime.IsInPreviousNMinutes` ☰ `DATETIME as any`, `MINUTES as number` ☰ `as nullable logical` ☰­
   `DateTime.IsInPreviousNSeconds` ☰ `DATETIME as any`, `SECONDS as number` ☰ `as nullable logical` ☰­
   `DateTime.IsInPreviousSecond` ☰ `DATETIME as any` ☰ `as nullable logical` ☰­
   `DateTime.LocalNow` ☰ ☰ `as datetime` ☰­
   `DateTime.Time` ☰ `DATETIME as any` ☰ `as nullable time` ☰­
   `DateTime.ToRecord` ☰ `DATETIME as datetime` ☰ `as record` ☰­
   `DateTime.ToText` ☰ `DATETIME as nullable datetime`, `optional OPTIONS as any`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
  table }
}
{ DateTimeZone
  table { llll
   `DateTimeZone.FixedLocalNow` ☰ ☰ `as datetimezone` ☰­
   `DateTimeZone.FixedUtcNow` ☰ ☰ `as datetimezone` ☰­
   `DateTimeZone.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable datetimezone` ☰­
   `DateTimeZone.FromFileTime` ☰ `FILETIME as nullable number` ☰ `as nullable datetimezone` ☰­
   `DateTimeZone.FromText` ☰ `TEXT as nullable text`, `optional OPTIONS as any` ☰ `as nullable datetimezone` ☰­
   `DateTimeZone.LocalNow` ☰ ☰ `as datetimezone` ☰­
   `DateTimeZone.RemoveZone` ☰ `DATETIMEZONE as nullable datetimezone` ☰ `as nullable datetime` ☰­
   `DateTimeZone.SwitchZone` ☰ `DATETIMEZONE as nullable datetimezone`, `TIMEZONEHOURS as number,` `optional TIMEZONEMINUTES as nullable number` ☰ `as nullable datetimezone` ☰­
   `DateTimeZone.ToLocal` ☰ `DATETIMEZONE as nullable datetimezone` ☰ `as nullable datetimezone` ☰­
   `DateTimeZone.ToRecord` ☰ `DATETIMEZONE as datetimezone` ☰ `as record` ☰­
   `DateTimeZone.ToText` ☰ `DATETIMEZONE as nullable datetimezone`, `optional OPTIONS as any`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
   `DateTimeZone.ToUtc` ☰ `DATETIMEZONE as nullable datetimezone` ☰ `as nullable datetimezone` ☰­
   `DateTimeZone.UtcNow` ☰ ☰ `as datetimezone` ☰­
   `DateTimeZone.ZoneHours` ☰ `DATETIMEZONE as nullable datetimezone` ☰ `as nullable number` ☰­
   `DateTimeZone.ZoneMinutes` ☰ `DATETIMEZONE as nullable datetimezone` ☰ `as nullable number` ☰­
  table }
}
{ DB2
  table { llll
   `DB2.Database` ☰ `SERVER as text`, `DATABASE as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Decimal
  table { llll
   `Decimal.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable number` ☰­
  table }
}
{ DeltaLake
  table { llll
   `DeltaLake.Table` ☰ `DIRECTORY as table`, `optional OPTIONS as nullable record` ☰ `as any` ☰­
  table }
}
{ Diagnostics
  table { llll
   `→ Microsoft/Power-Query/M-formula/standard-library/Diagnostics/ActivityId` ☰ ☰ `as nullable text` ☰­
   `Diagnostics.CorrelationId` ☰ ☰ `as nullable text` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Diagnostics/Trace` ☰ `TRACELEVEL as number`, `MESSAGE as anynonnull`, `VALUE as any`, `optional DELAYED as nullable logical` ☰ `as any` ☰­
  table }
}
{ DirectQueryCapabilities
  table { llll
   `DirectQueryCapabilities.From` ☰ `VALUE as any` ☰ `as table` ☰­
  table }
}
{ Double
  table { llll
   `Double.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable number` ☰­
  table }
}
{ Duration
  table { llll
   `Duration.Days` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.From` ☰ `VALUE as any` ☰ `as nullable duration` ☰­
   `Duration.FromText` ☰ `TEXT as nullable text` ☰ `as nullable duration` ☰­
   `Duration.Hours` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.Minutes` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.Seconds` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.ToRecord` ☰ `DURATION as duration` ☰ `as record` ☰­
   `Duration.TotalDays` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.TotalHours` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.TotalMinutes` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.TotalSeconds` ☰ `DURATION as nullable duration` ☰ `as nullable number` ☰­
   `Duration.ToText` ☰ `DURATION as nullable duration`, `optional FORMAT as nullable text` ☰ `as nullable text` ☰­
  table }
}
{ Embedded
  table { llll
   `Embedded.Value` ☰ `VALUE as any`, `PATH as text` ☰ `as any` ☰­
  table }
}
{ Error
  table { llll
   `Error.Record` ☰ `REASON as text`, `optional MESSAGE as nullable text`, `optional DETAIL as any`, `optional PARAMETERS as nullable list` ☰ `as record` ☰­
  table }
}
{ Essbase
  table { llll
   `Essbase.Cubes` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Excel
  table { llll
   `→ Microsoft/Power-Query/M-formula/standard-library/Excel/CurrentWorkbook` ☰ ☰ `as table` ☰­
   `Excel.ShapeTable` ☰ `TABLE as table`, `optional OPTIONS as nullable record` ☰ `as any` ☰­
   `Excel.Workbook` ☰ `WORKBOOK as binary`, `optional USEHEADERS as any`, `optional DELAYTYPES as nullable logical` ☰ `as table` ☰­
  table }
}
{ Exchange
  table { llll
   `Exchange.Contents ` ☰ `optional MAILBOXADDRESS as nullable text` ☰ `as table` ☰­
  table }
}
{ Expression
  table { llll
   `Expression.Constant` ☰ `VALUE as any` ☰ `as text` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Expression/Evaluate` ☰ `DOCUMENT as text`, `optional ENVIRONMENT as nullable record` ☰ `as any` ☰­
   `Expression.Identifier` ☰ `NAME as text` ☰ `as text` ☰­
  table }
}
{ File
  table { llll
   `→ Microsoft/Power-Query/M-formula/standard-library/File/Contents` ☰ `PATH as text`, `optional OPTIONS as nullable record` ☰ `as binary` ☰­
  table }
}
{ Folder
  table { llll
   `Folder.Contents` ☰ `PATH as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Folder.Files` ☰ `PATH as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Function
  table { llll
   `Function.From` ☰ `FUNCTIONTYPE as type`, `FUNCTION as function` ☰ `as function` ☰­
   `Function.Invoke` ☰ `FUNCTION as function`, `ARGS as list` ☰ `as any` ☰­
   `Function.InvokeAfter` ☰ `FUNCTION as function`, `DELAY as duration` ☰ `as any` ☰­
   `Function.InvokeWithErrorContext` ☰ `FUNCTION as function`, `CONTEXT as text` ☰ `as any` ☰­
   `Function.IsDataSource` ☰ `FUNCTION as function` ☰ `as logical` ☰­
   `Function.ScalarVector` ☰ `SCALARFUNCTIONTYPE as type`, `VECTORFUNCTION as function` ☰ `as function` ☰­
  table }
}
{ Geography
  table { llll
   `Geography.FromWellKnownText` ☰ `INPUT as nullable text` ☰ `as nullable record` ☰­
   `Geography.ToWellKnownText` ☰ `INPUT as nullable record`, `optional OMITSRID as nullable logical` ☰ `as nullable text` ☰­
  table }
}
{ GeographyPoint
  table { llll
   `GeographyPoint.From` ☰ `LONGITUDE as number`, `LATITUDE as number`, `optional Z as nullable number,` `optional M as nullable number`, `optional SRID as nullable number` ☰ `as record` ☰­
  table }
}
{ Geometry
  table { llll
   `Geometry.FromWellKnownText` ☰ `INPUT as nullable text` ☰ `as nullable record` ☰­
   `Geometry.ToWellKnownText` ☰ `INPUT as nullable record`, `optional OMITSRID as nullable logical` ☰ `as nullable text` ☰­
  table }
}
{ GeometryPoint
  table { llll
   `GeometryPoint.From` ☰ `X as number`, `Y as number`, `optional Z as nullable number,` `optional M as nullable number`, `optional SRID as nullable number` ☰ `as record` ☰­
  table }
}
{ GoogleAnalytics
  table { llll
   `GoogleAnalytics.Accounts` ☰ `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Graph
  table { llll
   `Graph.Nodes` ☰ `GRAPH as record` ☰ `as list` ☰­
  table }
}
{ Guid
  table { llll
   `Guid.From` ☰ `VALUE as nullable text` ☰ `as nullable text` ☰­
  table }
}
{ Hdfs
  table { llll
   `Hdfs.Contents` ☰ `URL as text` ☰ `as table` ☰­
   `Hdfs.Files` ☰ `URL as text` ☰ `as table` ☰­
  table }
}
{ HdInsight
  table { llll
   `HdInsight.Containers` ☰ `ACCOUNT as text` ☰ `as table` ☰­
   `HdInsight.Contents` ☰ `ACCOUNT as text` ☰ `as table` ☰­
   `HdInsight.Files` ☰ `ACCOUNT as text`, `CONTAINERNAME as text` ☰ `as table` ☰­
  table }
}
{ Html
  table { llll
   `Html.Table` ☰ `HTML as any`, `COLUMNNAMESELECTORPAIRS as list`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Identity
  table { llll
   `Identity.From` ☰ `IDENTITYPROVIDER as function`, `VALUE as any` ☰ `as record` ☰­
   `Identity.IsMemberOf` ☰ `IDENTITY as record`, `COLLECTION as record` ☰ `as logical` ☰­
  table }
}
{ IdentityProvider
  table { llll
   `IdentityProvider.Default` ☰ ☰ `as any` ☰­
  table }
}
{ Informix
  table { llll
   `Informix.Database` ☰ `SERVER as text`, `DATABASE as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ ItemExpression
  table { llll
   `ItemExpression.From` ☰ `FUNCTION as function` ☰ `as record` ☰­
  table }
}
{ Json
  table { llll
   `Json.Document` ☰ `JSONTEXT as any`, `optional ENCODING as nullable number` ☰ `as any` ☰­
   `Json.FromValue` ☰ `VALUE as any`, `optional ENCODING as nullable number` ☰ `as binary` ☰­
  table }
}
{ Lines
  table { llll
   `Lines.FromBinary` ☰ `BINARY as binary`, `optional QUOTESTYLE as nullable number,` `optional INCLUDELINESEPARATORS as nullable logical`, `optional ENCODING as nullable number` ☰ `as list` ☰­
   `Lines.FromText` ☰ `TEXT as text`, `optional QUOTESTYLE as nullable number`, `optional INCLUDELINESEPARATORS as nullable logical` ☰ `as list` ☰­
   `Lines.ToBinary` ☰ `LINES as list`, `optional LINESEPARATOR as nullable text,` `optional ENCODING as nullable number`, `optional INCLUDEBYTEORDERMARK as nullable logical` ☰ `as binary` ☰­
   `Lines.ToText` ☰ `LINES as list`, `optional LINESEPARATOR as nullable text` ☰ `as text` ☰­
  table }
}
{ List
  table { llll
   `→ Microsoft/Power-Query/M-formula/standard-library/List/Accumulate` ☰ `LIST as list`, `SEED as any`, `ACCUMULATOR as function` ☰ `as any` ☰­
   `List.AllTrue` ☰ `LIST as list` ☰ `as logical` ☰­
   `List.Alternate` ☰ `LIST as list`, `COUNT as number`, `optional REPEATINTERVAL as nullable number,` `optional OFFSET as nullable number` ☰ `as list` ☰­
   `List.AnyTrue` ☰ `LIST as list` ☰ `as logical` ☰­
   `List.Average` ☰ `LIST as list`, `optional PRECISION as nullable number` ☰ `as any` ☰­
   `List.Buffer` ☰ `LIST as list` ☰ `as list` ☰­
   `List.Combine` ☰ `LISTS as list` ☰ `as list` ☰­
   `List.ConformToPageReader` ☰ `LIST as list`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `List.Contains` ☰ `LIST as list`, `VALUE as any`, `optional EQUATIONCRITERIA as any` ☰ `as logical` ☰­
   `List.ContainsAll` ☰ `LIST as list`, `VALUES as list`, `optional EQUATIONCRITERIA as any` ☰ `as logical` ☰­
   `List.ContainsAny` ☰ `LIST as list`, `VALUES as list`, `optional EQUATIONCRITERIA as any` ☰ `as logical` ☰­
   `List.Count` ☰ `LIST as list` ☰ `as number` ☰­
   `List.Covariance` ☰ `NUMBERLIST1 as list`, `NUMBERLIST2 as list` ☰ `as nullable number` ☰­
   `List.Dates` ☰ `START as date`, `COUNT as number`, `STEP as duration` ☰ `as list` ☰­
   `List.DateTimes` ☰ `START as datetime`, `COUNT as number`, `STEP as duration` ☰ `as list` ☰­
   `List.DateTimeZones` ☰ `START as datetimezone`, `COUNT as number`, `STEP as duration` ☰ `as list` ☰­
   `List.Difference` ☰ `LIST1 as list`, `LIST2 as list`, `optional EQUATIONCRITERIA as any` ☰ `as list` ☰­
   `List.Distinct` ☰ `LIST as list`, `optional EQUATIONCRITERIA as any` ☰ `as list` ☰­
   `List.Durations` ☰ `START as duration`, `COUNT as number`, `STEP as duration` ☰ `as list` ☰­
   `List.FindText` ☰ `LIST as list`, `TEXT as text` ☰ `as list` ☰­
   `List.First` ☰ `LIST as list`, `optional DEFAULTVALUE as any` ☰ `as any` ☰­
   `List.FirstN` ☰ `LIST as list`, `COUNTORCONDITION as any` ☰ `as any` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/List/Generate` ☰ `INITIAL as function`, `CONDITION as function`, `NEXT as function`, `optional SELECTOR as nullable function` ☰ `as list` ☰­
   `List.InsertRange` ☰ `LIST as list`, `INDEX as number`, `VALUES as list` ☰ `as list` ☰­
   `List.Intersect` ☰ `LISTS as list`, `optional EQUATIONCRITERIA as any` ☰ `as list` ☰­
   `List.IsDistinct` ☰ `LIST as list`, `optional EQUATIONCRITERIA as any` ☰ `as logical` ☰­
   `List.IsEmpty` ☰ `LIST as list` ☰ `as logical` ☰­
   `List.Last` ☰ `LIST as list`, `optional DEFAULTVALUE as any` ☰ `as any` ☰­
   `List.LastN` ☰ `LIST as list`, `optional COUNTORCONDITION as any` ☰ `as any` ☰­
   `List.MatchesAll` ☰ `LIST as list`, `CONDITION as function` ☰ `as logical` ☰­
   `List.MatchesAny` ☰ `LIST as list`, `CONDITION as function` ☰ `as logical` ☰­
   `List.Max` ☰ `LIST as list`, `optional DEFAULT as any`, `optional COMPARISONCRITERIA as any,` `optional INCLUDENULLS as nullable logical` ☰ `as any` ☰­
   `List.MaxN` ☰ `LIST as list`, `COUNTORCONDITION as any`, `optional COMPARISONCRITERIA as any,` `optional INCLUDENULLS as nullable logical` ☰ `as list` ☰­
   `List.Median` ☰ `LIST as list`, `optional COMPARISONCRITERIA as any` ☰ `as any` ☰­
   `List.Min` ☰ `LIST as list`, `optional DEFAULT as any`, `optional COMPARISONCRITERIA as any,` `optional INCLUDENULLS as nullable logical` ☰ `as any` ☰­
   `List.MinN` ☰ `LIST as list`, `COUNTORCONDITION as any`, `optional COMPARISONCRITERIA as any,` `optional INCLUDENULLS as nullable logical` ☰ `as list` ☰­
   `List.Mode` ☰ `LIST as list`, `optional EQUATIONCRITERIA as any` ☰ `as any` ☰­
   `List.Modes` ☰ `LIST as list`, `optional EQUATIONCRITERIA as any` ☰ `as list` ☰­
   `List.NonNullCount` ☰ `LIST as list` ☰ `as number` ☰­
   `List.Numbers` ☰ `START as number`, `COUNT as number`, `optional INCREMENT as nullable number` ☰ `as list` ☰­
   `List.Percentile` ☰ `LIST as list`, `PERCENTILES as any`, `optional OPTIONS as nullable record` ☰ `as any` ☰­
   `List.PositionOf` ☰ `LIST as list`, `VALUE as any`, `optional OCCURRENCE as nullable number,` `optional EQUATIONCRITERIA as any` ☰ `as any` ☰­
   `List.PositionOfAny` ☰ `LIST as list`, `VALUES as list`, `optional OCCURRENCE as nullable number,` `optional EQUATIONCRITERIA as any` ☰ `as any` ☰­
   `List.Positions` ☰ `LIST as list` ☰ `as list` ☰­
   `List.Product` ☰ `NUMBERSLIST as list`, `optional PRECISION as nullable number` ☰ `as nullable number` ☰­
   `List.Random` ☰ `COUNT as number`, `optional SEED as nullable number` ☰ `as list` ☰­
   `List.Range` ☰ `LIST as list`, `OFFSET as number`, `optional COUNT as nullable number` ☰ `as list` ☰­
   `List.RemoveFirstN` ☰ `LIST as list`, `optional COUNTORCONDITION as any` ☰ `as list` ☰­
   `List.RemoveItems` ☰ `LIST1 as list`, `LIST2 as list` ☰ `as list` ☰­
   `List.RemoveLastN` ☰ `LIST as list`, `optional COUNTORCONDITION as any` ☰ `as list` ☰­
   `List.RemoveMatchingItems` ☰ `LIST1 as list`, `LIST2 as list`, `optional EQUATIONCRITERIA as any` ☰ `as list` ☰­
   `List.RemoveNulls` ☰ `LIST as list` ☰ `as list` ☰­
   `List.RemoveRange` ☰ `LIST as list`, `INDEX as number`, `optional COUNT as nullable number` ☰ `as list` ☰­
   `List.Repeat` ☰ `LIST as list`, `COUNT as number` ☰ `as list` ☰­
   `List.ReplaceMatchingItems` ☰ `LIST as list`, `REPLACEMENTS as list`, `optional EQUATIONCRITERIA as any` ☰ `as list` ☰­
   `List.ReplaceRange` ☰ `LIST as list`, `INDEX as number`, `COUNT as number`, `REPLACEWITH as list` ☰ `as list` ☰­
   `List.ReplaceValue` ☰ `LIST as list`, `OLDVALUE as any`, `NEWVALUE as any`, `REPLACER as function` ☰ `as list` ☰­
   `List.Reverse` ☰ `LIST as list` ☰ `as list` ☰­
   `List.Select` ☰ `LIST as list`, `SELECTION as function` ☰ `as list` ☰­
   `List.Single` ☰ `LIST as list` ☰ `as any` ☰­
   `List.SingleOrDefault` ☰ `LIST as list`, `optional DEFAULT as any` ☰ `as any` ☰­
   `List.Skip` ☰ `LIST as list`, `optional COUNTORCONDITION as any` ☰ `as list` ☰­
   `List.Sort` ☰ `LIST as list`, `optional COMPARISONCRITERIA as any` ☰ `as list` ☰­
   `List.Split` ☰ `LIST as list`, `PAGESIZE as number` ☰ `as list` ☰­
   `List.StandardDeviation` ☰ `NUMBERSLIST as list` ☰ `as nullable number` ☰­
   `List.Sum` ☰ `LIST as list`, `optional PRECISION as nullable number` ☰ `as any` ☰­
   `List.Times` ☰ `START as time`, `COUNT as number`, `STEP as duration` ☰ `as list` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/List/Transform` ☰ `LIST as list`, `TRANSFORM as function` ☰ `as list` ☰­
   `List.TransformMany` ☰ `LIST as list`, `COLLECTIONTRANSFORM as function`, `RESULTTRANSFORM as function` ☰ `as list` ☰­
   `List.Union` ☰ `LISTS as list`, `optional EQUATIONCRITERIA as any` ☰ `as list` ☰­
   `List.Zip` ☰ `LISTS as list` ☰ `as list` ☰­
  table }
}
{ Logical
  table { llll
   `Logical.From` ☰ `VALUE as any` ☰ `as nullable logical` ☰­
   `Logical.FromText` ☰ `TEXT as nullable text` ☰ `as nullable logical` ☰­
   `Logical.ToText` ☰ `LOGICALVALUE as nullable logical` ☰ `as nullable text` ☰­
  table }
}
{ MySQL
  table { llll
   `MySQL.Database` ☰ `SERVER as text`, `DATABASE as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Number
  table { llll
   `Number.Abs` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Acos` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Asin` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Atan` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Atan2` ☰ `Y as nullable number`, `X as nullable number` ☰ `as nullable number` ☰­
   `Number.BitwiseAnd` ☰ `NUMBER1 as nullable number`, `NUMBER2 as nullable number` ☰ `as nullable number` ☰­
   `Number.BitwiseNot` ☰ `NUMBER as any` ☰ `as any` ☰­
   `Number.BitwiseOr` ☰ `NUMBER1 as nullable number`, `NUMBER2 as nullable number` ☰ `as nullable number` ☰­
   `Number.BitwiseShiftLeft` ☰ `NUMBER1 as nullable number`, `NUMBER2 as nullable number` ☰ `as nullable number` ☰­
   `Number.BitwiseShiftRight` ☰ `NUMBER1 as nullable number`, `NUMBER2 as nullable number` ☰ `as nullable number` ☰­
   `Number.BitwiseXor` ☰ `NUMBER1 as nullable number`, `NUMBER2 as nullable number` ☰ `as nullable number` ☰­
   `Number.Combinations` ☰ `SETSIZE as nullable number`, `COMBINATIONSIZE as nullable number` ☰ `as nullable number` ☰­
   `Number.Cos` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Cosh` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Exp` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Factorial` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable number` ☰­
   `Number.FromText` ☰ `TEXT as nullable text`, `optional CULTURE as nullable text` ☰ `as nullable number` ☰­
   `Number.IntegerDivide` ☰ `NUMBER1 as nullable number`, `NUMBER2 as nullable number`, `optional PRECISION as nullable number` ☰ `as nullable number` ☰­
   `Number.IsEven` ☰ `NUMBER as number` ☰ `as logical` ☰­
   `Number.IsNaN` ☰ `NUMBER as number` ☰ `as logical` ☰­
   `Number.IsOdd` ☰ `NUMBER as number` ☰ `as logical` ☰­
   `Number.Ln` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Log` ☰ `NUMBER as nullable number`, `optional BASE as nullable number` ☰ `as nullable number` ☰­
   `Number.Log10` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Mod` ☰ `NUMBER as nullable number`, `DIVISOR as nullable number`, `optional PRECISION as nullable number` ☰ `as nullable number` ☰­
   `Number.Permutations` ☰ `SETSIZE as nullable number`, `PERMUTATIONSIZE as nullable number` ☰ `as nullable number` ☰­
   `Number.Power` ☰ `NUMBER as nullable number`, `POWER as nullable number` ☰ `as nullable number` ☰­
   `Number.Random` ☰ ☰ `as number` ☰­
   `Number.RandomBetween` ☰ `BOTTOM as number`, `TOP as number` ☰ `as number` ☰­
   `Number.Round` ☰ `NUMBER as nullable number`, `optional DIGITS as nullable number`, `optional ROUNDINGMODE as nullable number` ☰ `as nullable number` ☰­
   `Number.RoundAwayFromZero` ☰ `NUMBER as nullable number`, `optional DIGITS as nullable number` ☰ `as nullable number` ☰­
   `Number.RoundDown` ☰ `NUMBER as nullable number`, `optional DIGITS as nullable number` ☰ `as nullable number` ☰­
   `Number.RoundTowardZero` ☰ `NUMBER as nullable number`, `optional DIGITS as nullable number` ☰ `as nullable number` ☰­
   `Number.RoundUp` ☰ `NUMBER as nullable number`, `optional DIGITS as nullable number` ☰ `as nullable number` ☰­
   `Number.Sign` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Sin` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Sinh` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Sqrt` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Tan` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.Tanh` ☰ `NUMBER as nullable number` ☰ `as nullable number` ☰­
   `Number.ToText` ☰ `NUMBER as nullable number`, `optional FORMAT as nullable text`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
  table }
}
{ OData
  table { llll
   `OData.Feed` ☰ `SERVICEURI as text`, `optional HEADERS as nullable record`, `optional OPTIONS as any` ☰ `as any` ☰­
  table }
}
{ Odbc
  table { llll
   `Odbc.DataSource` ☰ `CONNECTIONSTRING as any`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Odbc.InferOptions` ☰ `CONNECTIONSTRING as any` ☰ `as record` ☰­
   `Odbc.Query` ☰ `CONNECTIONSTRING as any`, `QUERY as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ OleDb
  table { llll
   `OleDb.DataSource` ☰ `CONNECTIONSTRING as any`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `OleDb.Query` ☰ `CONNECTIONSTRING as any`, `QUERY as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Oracle
  table { llll
   `Oracle.Database` ☰ `SERVER as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Pdf
  table { llll
   `Pdf.Tables` ☰ `PDF as binary`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Percentage
  table { llll
   `Percentage.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable number` ☰­
  table }
}
{ PostgreSQL
  table { llll
   `PostgreSQL.Database` ☰ `SERVER as text`, `DATABASE as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Progress
  table { llll
   `Progress.DataSourceProgress` ☰ ☰ `as any` ☰­
  table }
}
{ RData
  table { llll
   `RData.FromBinary` ☰ `stream as binary` ☰ `as any` ☰­
  table }
}
{ Record
  table { llll
   `Record.AddField` ☰ `RECORD as record`, `FIELDNAME as text`, `VALUE as any`, `optional DELAYED as nullable logical` ☰ `as record` ☰­
   `Record.Combine` ☰ `RECORDS as list` ☰ `as record` ☰­
   `Record.Field` ☰ `RECORD as record`, `FIELD as text` ☰ `as any` ☰­
   `Record.FieldCount` ☰ `RECORD as record` ☰ `as number` ☰­
   `Record.FieldNames` ☰ `RECORD as record` ☰ `as list` ☰­
   `Record.FieldOrDefault` ☰ `RECORD as nullable record`, `FIELD as text`, `optional DEFAULTVALUE as any` ☰ `as any` ☰­
   `Record.FieldValues` ☰ `RECORD as record` ☰ `as list` ☰­
   `Record.FromList` ☰ `LIST as list`, `FIELDS as any` ☰ `as record` ☰­
   `Record.FromTable` ☰ `TABLE as table` ☰ `as record` ☰­
   `Record.HasFields` ☰ `RECORD as record`, `FIELDS as any` ☰ `as logical` ☰­
   `Record.RemoveFields` ☰ `RECORD as record`, `FIELDS as any`, `optional MISSINGFIELD as nullable number` ☰ `as record` ☰­
   `Record.RenameFields` ☰ `RECORD as record`, `RENAMES as list`, `optional MISSINGFIELD as nullable number` ☰ `as record` ☰­
   `Record.ReorderFields` ☰ `RECORD as record`, `FIELDORDER as list`, `optional MISSINGFIELD as nullable number` ☰ `as record` ☰­
   `Record.SelectFields` ☰ `RECORD as record`, `FIELDS as any`, `optional MISSINGFIELD as nullable number` ☰ `as record` ☰­
   `Record.ToList` ☰ `RECORD as record` ☰ `as list` ☰­
   `Record.ToTable` ☰ `RECORD as record` ☰ `as table` ☰­
   `Record.TransformFields` ☰ `RECORD as record`, `TRANSFORMOPERATIONS as list`, `optional MISSINGFIELD as nullable number` ☰ `as record` ☰­
  table }
}
{ Replacer
  table { llll
   `Replacer.ReplaceText` ☰ `TEXT as nullable text`, `OLD as text`, `NEW as text` ☰ `as nullable text` ☰­
   `Replacer.ReplaceValue` ☰ `VALUE as any`, `OLD as any`, `NEW as any` ☰ `as any` ☰­
  table }
}
{ RowExpression
  table { llll
   `RowExpression.Column` ☰ `COLUMNNAME as text` ☰ `as record` ☰­
   `RowExpression.From` ☰ `FUNCTION as function` ☰ `as record` ☰­
  table }
}
{ Salesforce
  table { llll
   `Salesforce.Data` ☰ `optional LOGINURL as any`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Salesforce.Reports` ☰ `optional LOGINURL as nullable text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ SapBusinessWarehouse
  table { llll
   `SapBusinessWarehouse.Cubes` ☰ `SERVER as text`, `SYSTEMNUMBERORSYSTEMID as text`, `CLIENTID as text`, `optional OPTIONSORLOGONGROUP as any,` `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ SapHana
  table { llll
   `SapHana.Database` ☰ `**server** as text`, `optional **options** as nullable record` ☰ `as table` ☰­
  table }
}
{ SharePoint
  table { llll
   `SharePoint.Contents` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `SharePoint.Files` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `SharePoint.Tables` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Single
  table { llll
   `Single.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable number` ☰­
  table }
}
{ Soda
  table { llll
   `Soda.Feed` ☰ `URL as text` ☰ `as table` ☰­
  table }
}
{ Splitter
  table { llll
   `Splitter.SplitByNothing` ☰ ☰ `as function` ☰­
   `Splitter.SplitTextByAnyDelimiter` ☰ `DELIMITERS as list`, `optional QUOTESTYLE as nullable number`, `optional STARTATEND as nullable logical` ☰ `as function` ☰­
   `Splitter.SplitTextByCharacterTransition` ☰ `BEFORE as anynonnull`, `AFTER as anynonnull` ☰ `as function` ☰­
   `Splitter.SplitTextByDelimiter` ☰ `DELIMITER as text`, `optional QUOTESTYLE as nullable number` ☰ `as function` ☰­
   `Splitter.SplitTextByEachDelimiter` ☰ `DELIMITERS as list`, `optional QUOTESTYLE as nullable number`, `optional STARTATEND as nullable logical` ☰ `as function` ☰­
   `Splitter.SplitTextByLengths` ☰ `LENGTHS as list`, `optional STARTATEND as nullable logical` ☰ `as function` ☰­
   `Splitter.SplitTextByPositions` ☰ `POSITIONS as list`, `optional STARTATEND as nullable logical` ☰ `as function` ☰­
   `Splitter.SplitTextByRanges` ☰ `RANGES as list`, `optional STARTATEND as nullable logical` ☰ `as function` ☰­
   `Splitter.SplitTextByRepeatedLengths` ☰ `LENGTH as number`, `optional STARTATEND as nullable logical` ☰ `as function` ☰­
   `Splitter.SplitTextByWhitespace` ☰ `optional QUOTESTYLE as nullable number` ☰ `as function` ☰­
  table }
}
{ Sql
  table { llll
   `Sql.Database` ☰ `SERVER as text`, `DATABASE as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Sql.Databases` ☰ `SERVER as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ SqlExpression
  table { llll
   `SqlExpression.SchemaFrom` ☰ `SCHEMA as any` ☰ `as any` ☰­
   `SqlExpression.ToExpression` ☰ `SQL as text`, `ENVIRONMENT as record` ☰ `as text` ☰­
  table }
}
{ Sybase
  table { llll
   `Sybase.Database` ☰ `SERVER as text`, `DATABASE as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Table #pq-stdlib-table

  Functions related to → Microsoft/Power-Query/M-formula/language/types/table[tables].

  table { llll
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/AddColumn` ☰ `TABLE as table`, `NEWCOLUMNNAME as text`, `COLUMNGENERATOR as function,` `optional COLUMNTYPE as nullable type` ☰ `as table` ☰­
   `Table.AddFuzzyClusterColumn` ☰ `TABLE as table`, `COLUMNNAME as text`, `NEWCOLUMNNAME as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Table.AddIndexColumn` ☰ `TABLE as table`, `NEWCOLUMNNAME as text`, `optional INITIALVALUE as nullable number,` `optional INCREMENT as nullable number`, `optional COLUMNTYPE as nullable type` ☰ `as table` ☰­
   `Table.AddJoinColumn` ☰ `table1 as table`, `key1 as any`, `table2 as function`, `key2 as any`, `newColumnName as text` ☰ `as table` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/AddKey` ☰ `TABLE as table`, `COLUMNS as list`, `ISPRIMARY as logical` ☰ `as table` ☰­
   `Table.AddRankColumn` ☰ `TABLE as table`, `NEWCOLUMNNAME as text`, `COMPARISONCRITERIA as any,` `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Table.AggregateTableColumn` ☰ `TABLE as table`, `COLUMN as text`, `AGGREGATIONS as list` ☰ `as table` ☰­
   `Table.AlternateRows` ☰ `TABLE as table`, `OFFSET as number`, `SKIP as number`, `TAKE as number` ☰ `as table` ☰­
   `Table.ApproximateRowCount` ☰ `TABLE as table` ☰ `as number` ☰­
   `Table.Buffer` ☰ `TABLE as table`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Table.Column` ☰ `TABLE as table`, `COLUMN as text` ☰ `as list` ☰­
   `Table.ColumnCount` ☰ `TABLE as table` ☰ `as number` ☰­
   `Table.ColumnNames` ☰ `TABLE as table` ☰ `as list` ☰­
   `Table.ColumnsOfType` ☰ `TABLE as table`, `LISTOFTYPES as list` ☰ `as list` ☰­
   `Table.Combine` ☰ `TABLES as list`, `optional COLUMNS as any` ☰ `as table` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Type/CombineColumns` ☰ `TABLE as table`, `SOURCECOLUMNS as list`, `COMBINER as function`, `COLUMN as text` ☰ `as table` ☰­
   `Table.CombineColumnsToRecord` ☰ `TABLE as table`, `NEWCOLUMNNAME as text`, `SOURCECOLUMNS as list`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Table.ConformToPageReader` ☰ `TABLE as table`, `SHAPINGFUNCTION as function` ☰ `as table` ☰­
   `Table.Contains` ☰ `TABLE as table`, `ROW as record`, `optional EQUATIONCRITERIA as any` ☰ `as logical` ☰­
   `Table.ContainsAll` ☰ `TABLE as table`, `ROWS as list`, `optional EQUATIONCRITERIA as any` ☰ `as logical` ☰­
   `Table.ContainsAny` ☰ `TABLE as table`, `ROWS as list`, `optional EQUATIONCRITERIA as any` ☰ `as logical` ☰­
   `Table.DemoteHeaders` ☰ `TABLE as table` ☰ `as table` ☰­Compare with `→ Microsoft/Power-Query/M-formula/standard-library/Table/PromoteHeaders`
   `Table.Distinct` ☰ `TABLE as table`, `optional EQUATIONCRITERIA as any` ☰ `as table` ☰­
   `Table.DuplicateColumn` ☰ `TABLE as table`, `COLUMNNAME as text`, `NEWCOLUMNNAME as text,` `optional COLUMNTYPE as nullable type` ☰ `as table` ☰­
   `Table.ExpandListColumn` ☰ `TABLE as table`, `COLUMN as text` ☰ `as table` ☰­
   `Table.ExpandRecordColumn` ☰ `TABLE as table`, `COLUMN as text`, `FIELDNAMES as list`, `optional NEWCOLUMNNAMES as nullable list` ☰ `as table` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/ExpandTableColumn` ☰ `TABLE as table`, `COLUMN as text`, `COLUMNNAMES as list`, `optional NEWCOLUMNNAMES as nullable list` ☰ `as table` ☰­
   `Table.FillDown` ☰ `TABLE as table`, `COLUMNS as list` ☰ `as table` ☰­
   `Table.FillUp` ☰ `TABLE as table`, `COLUMNS as list` ☰ `as table` ☰­
   `Table.FilterWithDataTable` ☰ `TABLE as table`, `DATATABLEIDENTIFIER as text` ☰ `as any` ☰­
   `Table.FindText` ☰ `TABLE as table`, `TEXT as text` ☰ `as table` ☰­
   `Table.First` ☰ `TABLE as table`, `optional DEFAULT as any` ☰ `as any` ☰­
   `Table.FirstN` ☰ `TABLE as table`, `COUNTORCONDITION as any` ☰ `as table` ☰­
   `Table.FirstValue` ☰ `TABLE as table`, `optional DEFAULT as any` ☰ `as any` ☰­
   `Table.FromColumns` ☰ `LISTS as list`, `optional COLUMNS as any` ☰ `as table` ☰­
   `Table.FromList` ☰ `LIST as list`, `optional SPLITTER as nullable function,` `optional COLUMNS as any,` `optional DEFAULT as any,` `optional EXTRAVALUES as nullable number` ☰ `as table` ☰­
   `Table.FromPartitions` ☰ `PARTITIONCOLUMN as text`, `PARTITIONS as list`, `optional PARTITIONCOLUMNTYPE as nullable type` ☰ `as table` ☰­
   `Table.FromRecords` ☰ `RECORDS as list`, `optional COLUMNS as any`, `optional MISSINGFIELD as nullable number` ☰ `as table` ☰­
   `Table.FromRows` ☰ `ROWS as list`, `optional COLUMNS as any` ☰ `as table` ☰­
   `Table.FromValue` ☰ `VALUE as any`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Table.FuzzyGroup` ☰ `TABLE as table`, `KEY as any`, `AGGREGATEDCOLUMNS as list`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
   `Table.FuzzyJoin` ☰ `TABLE1 as table`, `KEY1 as any`, `TABLE2 as table`, `KEY2 as any,` `optional JOINKIND as nullable number,` `optional JOINOPTIONS as nullable record` ☰ `as table` ☰ Compare with `→ Microsoft/Power-Query/M-formula/standard-library/Table/Join`
   `Table.FuzzyNestedJoin` ☰ `TABLE1 as table`, `KEY1 as any`, `TABLE2 as table`, `KEY2 as any`, `NEWCOLUMNNAME as text,` `optional JOINKIND as nullable number,` `optional JOINOPTIONS as nullable record` ☰ `as table` ☰­
   `Table.Group` ☰ `TABLE as table`, `KEY as any`, `AGGREGATEDCOLUMNS as list`, `optional GROUPKIND as nullable number,` `optional COMPARER as nullable function` ☰ `as table` ☰­
   `Table.HasColumns` ☰ `TABLE as table`, `COLUMNS as any` ☰ `as logical` ☰­
   `Table.InsertRows` ☰ `TABLE as table`, `OFFSET as number`, `ROWS as list` ☰ `as table` ☰­
   `Table.IsDistinct` ☰ `TABLE as table`, `optional COMPARISONCRITERIA as any` ☰ `as logical` ☰­
   `Table.IsEmpty` ☰ `TABLE as table` ☰ `as logical` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/Join` ☰ `TABLE1 as table`, `KEY1 as any`, `TABLE2 as table`, `KEY2 as any,` `optional JOINKIND as nullable number,` `optional JOINALGORITHM as nullable number`, `optional KEYEQUALITYCOMPARERS as nullable list` ☰ `as table` ☰ Compare with `Table.FuzzyJoin`
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/Keys` ☰ `TABLE as table` ☰ `as list` ☰­
   `Table.Last` ☰ `TABLE as table`, `optional DEFAULT as any` ☰ `as any` ☰­
   `Table.LastN` ☰ `TABLE as table`, `COUNTORCONDITION as any` ☰ `as table` ☰­
   `Table.MatchesAllRows` ☰ `TABLE as table`, `CONDITION as function` ☰ `as logical` ☰­
   `Table.MatchesAnyRows` ☰ `TABLE as table`, `CONDITION as function` ☰ `as logical` ☰­
   `Table.Max` ☰ `TABLE as table`, `COMPARISONCRITERIA as any`, `optional DEFAULT as any` ☰ `as any` ☰­
   `Table.MaxN` ☰ `TABLE as table`, `COMPARISONCRITERIA as any`, `COUNTORCONDITION as any` ☰ `as table` ☰­
   `Table.Min` ☰ `TABLE as table`, `COMPARISONCRITERIA as any`, `optional DEFAULT as any` ☰ `as any` ☰­
   `Table.MinN` ☰ `TABLE as table`, `COMPARISONCRITERIA as any`, `COUNTORCONDITION as any` ☰ `as table` ☰­
   `Table.NestedJoin` ☰ `TABLE1 as table`, `KEY1 as any`, `TABLE2 as any`, `KEY2 as any`, `NEWCOLUMNNAME as text,` `optional JOINKIND as nullable number,` `optional KEYEQUALITYCOMPARERS as nullable list` ☰ `as table` ☰­
   `Table.Partition` ☰ `TABLE as table`, `COLUMN as text`, `GROUPS as number`, `HASH as function` ☰ `as list` ☰­
   `Table.PartitionValues` ☰ `TABLE as table` ☰ `as table` ☰­
   `Table.Pivot` ☰ `TABLE as table`, `PIVOTVALUES as list`, `ATTRIBUTECOLUMN as text`, `VALUECOLUMN as text,` `optional AGGREGATIONFUNCTION as nullable function` ☰ `as table` ☰­
   `Table.PositionOf` ☰ `TABLE as table`, `ROW as record`, `optional OCCURRENCE as any`, `optional EQUATIONCRITERIA as any` ☰ `as any` ☰­
   `Table.PositionOfAny` ☰ `TABLE as table`, `ROWS as list`, `optional OCCURRENCE as nullable number,` `optional EQUATIONCRITERIA as any` ☰ `as any` ☰­
   `Table.PrefixColumns` ☰ `TABLE as table`, `PREFIX as text` ☰ `as table` ☰­
   `Table.Profile` ☰ `TABLE as table`, `optional ADDITIONALAGGREGATES as nullable list` ☰ `as table` ☰­Applies the «→ development/databases/SQL/select/group-by/aggregate-functions[SQL aggregate functions]» `min`, `max`, `avg`, `stdev` and `count` as well as the count of NULLs and distinct values on the table's columns. Additional aggregates can be specified with `ADDITIONALAGGREGATES`.
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/PromoteHeaders` ☰ `TABLE as table`, `optional OPTIONS as nullable record` ☰ `as table` ☰­Compare with `Table.DemoteHeaders`
   `Table.Range` ☰ `TABLE as table`, `OFFSET as number`, `optional COUNT as nullable number` ☰ `as table` ☰­
   `Table.RemoveColumns` ☰ `TABLE as table`, `COLUMNS as any`, `optional MISSINGFIELD as nullable number` ☰ `as table` ☰­
   `Table.RemoveFirstN` ☰ `TABLE as table`, `optional COUNTORCONDITION as any` ☰ `as table` ☰­
   `Table.RemoveLastN` ☰ `TABLE as table`, `optional COUNTORCONDITION as any` ☰ `as table` ☰­
   `Table.RemoveMatchingRows` ☰ `TABLE as table`, `ROWS as list`, `optional EQUATIONCRITERIA as any` ☰ `as table` ☰­
   `Table.RemoveRows` ☰ `TABLE as table`, `OFFSET as number`, `optional COUNT as nullable number` ☰ `as table` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/RemoveRowsWithErrors` ☰ `TABLE as table`, `optional COLUMNS as nullable list` ☰ `as table` ☰­
   `Table.RenameColumns` ☰ `TABLE as table`, `RENAMES as list`, `optional MISSINGFIELD as nullable number` ☰ `as table` ☰­Compare with `→ Microsoft/Power-Query/M-formula/standard-library/Table/TransformColumnNames`
   `Table.ReorderColumns` ☰ `TABLE as table`, `COLUMNORDER as list`, `optional MISSINGFIELD as nullable number` ☰ `as table` ☰­
   `Table.Repeat` ☰ `TABLE as table`, `COUNT as number` ☰ `as table` ☰­
   `Table.ReplaceErrorValues` ☰ `TABLE as table`, `ERRORREPLACEMENT as list` ☰ `as table` ☰­
   `Table.ReplaceKeys` ☰ `TABLE as table`, `KEYS as list` ☰ `as table` ☰­
   `Table.ReplaceMatchingRows` ☰ `TABLE as table`, `REPLACEMENTS as list`, `optional EQUATIONCRITERIA as any` ☰ `as table` ☰­
   `Table.ReplaceRelationshipIdentity` ☰ `VALUE as any`, `IDENTITY as text` ☰ `as any` ☰­
   `Table.ReplaceRows` ☰ `TABLE as table`, `OFFSET as number`, `COUNT as number`, `ROWS as list` ☰ `as table` ☰­
   `Table.ReplaceValue` ☰ `TABLE as table`, `OLDVALUE as any`, `NEWVALUE as any`, `REPLACER as function,` `COLUMNSTOSEARCH as list` ☰ `as table` ☰­
   `Table.ReverseRows` ☰ `TABLE as table` ☰ `as table` ☰­
   `Table.RowCount` ☰ `TABLE as table` ☰ `as number` ☰­
   `Table.Schema` ☰ `TABLE as table` ☰ `as table` ☰­
   `Table.SelectColumns` ☰ `TABLE as table`, `COLUMNS as any`, `optional MISSINGFIELD as nullable number` ☰ `as table` ☰­
   `Table.SelectRows` ☰ `TABLE as table`, `CONDITION as function` ☰ `as table` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/SelectRowsWithErrors` ☰ `TABLE as table`, `optional COLUMNS as nullable list` ☰ `as table` ☰­
   `Table.SingleRow` ☰ `TABLE as table` ☰ `as record` ☰­
   `Table.Skip` ☰ `TABLE as table`, `optional COUNTORCONDITION as any` ☰ `as table` ☰­
   `Table.Sort` ☰ `TABLE as table`, `COMPARISONCRITERIA as any` ☰ `as table` ☰­
   `Table.Split` ☰ `TABLE as table`, `PAGESIZE as number` ☰ `as list` ☰­
   `Table.SplitAt` ☰ `TABLE as table`, `COUNT as number` ☰ `as list` ☰­
   `Table.SplitColumn` ☰ `TABLE as table`, `SOURCECOLUMN as text`, `SPLITTER as function`, `optional COLUMNNAMESORNUMBER as any,` `optional DEFAULT as any,` `optional EXTRACOLUMNS as any` ☰ `as table` ☰­
   `Table.StopFolding` ☰ `TABLE as table` ☰ `as table` ☰­
   `Table.ToColumns` ☰ `TABLE as table` ☰ `as list` ☰­
   `Table.ToList` ☰ `TABLE as table`, `optional COMBINER as nullable function` ☰ `as list` ☰­
   `Table.ToRecords` ☰ `TABLE as table` ☰ `as list` ☰­
   `Table.ToRows` ☰ `TABLE as table` ☰ `as list` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/TransformColumnNames` ☰ `TABLE as table`, `NAMEGENERATOR as function`, `optional OPTIONS as nullable record` ☰ `as table` ☰­Compare with `Table.RenameColumns`
   `Table.TransformColumns` ☰ `TABLE as table`, `TRANSFORMOPERATIONS as list`, `optional DEFAULTTRANSFORMATION as nullable function,` `optional MISSINGFIELD as nullable number` ☰ `as table` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Table/TransformColumnTypes` ☰ `TABLE as table`, `TYPETRANSFORMATIONS as list`, `optional CULTURE as nullable text` ☰ `as table` ☰­
   `Table.TransformRows` ☰ `TABLE as table`, `TRANSFORM as function` ☰ `as list` ☰­
   `Table.Transpose` ☰ `TABLE as table`, `optional COLUMNS as any` ☰ `as table` ☰­
   `Table.Unpivot` ☰ `TABLE as table`, `PIVOTCOLUMNS as list`, `ATTRIBUTECOLUMN as text`, `VALUECOLUMN as text` ☰ `as table` ☰­
   `Table.UnpivotOtherColumns` ☰ `TABLE as table`, `PIVOTCOLUMNS as list`, `ATTRIBUTECOLUMN as text`, `VALUECOLUMN as text` ☰ `as table` ☰­
   `Table.View` ☰ `TABLE as nullable table`, `HANDLERS as record` ☰ `as table` ☰­
   `Table.ViewError` ☰ `ERRORRECORD as record` ☰ `as record` ☰­
   `Table.ViewFunction` ☰ `FUNCTION as function` ☰ `as function` ☰­
   `Table.WithErrorContext` ☰ `VALUE as any`, `CONTEXT as text` ☰ `as any` ☰­
  table }
}
{ Tables
  table { llll
   `Tables.GetRelationships` ☰ `TABLES as table`, `optional DATACOLUMN as nullable text` ☰ `as table` ☰­
  table }
}
{ Teradata
  table { llll
   `Teradata.Database` ☰ `SERVER as text`, `optional OPTIONS as nullable record` ☰ `as table` ☰­
  table }
}
{ Text
  table { llll
   `Text.AfterDelimiter` ☰ `TEXT as nullable text`, `DELIMITER as text`, `optional INDEX as any` ☰ `as any` ☰­
   `Text.At` ☰ `TEXT as nullable text`, `INDEX as number` ☰ `as nullable text` ☰­
   `Text.BeforeDelimiter` ☰ `TEXT as nullable text`, `DELIMITER as text`, `optional INDEX as any` ☰ `as any` ☰­
   `Text.BetweenDelimiters` ☰ `TEXT as nullable text`, `STARTDELIMITER as text`, `ENDDELIMITER as text,` `optional STARTINDEX as any,` `optional ENDINDEX as any` ☰ `as any` ☰­
   `Text.Clean` ☰ `TEXT as nullable text` ☰ `as nullable text` ☰­
   `Text.Combine` ☰ `TEXTS as list`, `optional SEPARATOR as nullable text` ☰ `as text` ☰­
   `Text.Contains` ☰ `TEXT as nullable text`, `SUBSTRING as text`, `optional COMPARER as nullable function` ☰ `as nullable logical` ☰­
   `Text.End` ☰ `TEXT as nullable text`, `COUNT as number` ☰ `as nullable text` ☰­
   `Text.EndsWith` ☰ `TEXT as nullable text`, `SUBSTRING as text`, `optional COMPARER as nullable function` ☰ `as nullable logical` ☰­
   `Text.Format` ☰ `FORMATSTRING as text`, `ARGUMENTS as any`, `optional CULTURE as nullable text` ☰ `as text` ☰­
   `Text.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
   `Text.FromBinary` ☰ `BINARY as nullable binary`, `optional ENCODING as nullable number` ☰ `as nullable text` ☰­
   `Text.InferNumberType` ☰ `TEXT as text`, `optional CULTURE as nullable text` ☰ `as type` ☰­
   `Text.Insert` ☰ `TEXT as nullable text`, `OFFSET as number`, `NEWTEXT as text` ☰ `as nullable text` ☰­
   `Text.Length` ☰ `TEXT as nullable text` ☰ `as nullable number` ☰­
   `Text.Lower` ☰ `TEXT as nullable text`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
   `Text.Middle` ☰ `TEXT as nullable text`, `START as number`, `optional COUNT as nullable number` ☰ `as nullable text` ☰­
   `Text.NewGuid` ☰ ☰ `as text` ☰­
   `Text.PadEnd` ☰ `TEXT as nullable text`, `COUNT as number`, `optional CHARACTER as nullable text` ☰ `as nullable text` ☰­
   `Text.PadStart` ☰ `TEXT as nullable text`, `COUNT as number`, `optional CHARACTER as nullable text` ☰ `as nullable text` ☰­
   `Text.PositionOf` ☰ `TEXT as text`, `SUBSTRING as text`, `optional OCCURRENCE as nullable number`, `optional COMPARER as nullable function` ☰ `as any` ☰­
   `Text.PositionOfAny` ☰ `TEXT as text`, `CHARACTERS as list`, `optional OCCURRENCE as nullable number` ☰ `as any` ☰­
   `Text.Proper` ☰ `TEXT as nullable text`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
   `Text.Range` ☰ `TEXT as nullable text`, `OFFSET as number`, `optional COUNT as nullable number` ☰ `as nullable text` ☰­
   `Text.Remove` ☰ `TEXT as nullable text`, `REMOVECHARS as any` ☰ `as nullable text` ☰­
   `Text.RemoveRange` ☰ `TEXT as nullable text`, `OFFSET as number`, `optional COUNT as nullable number` ☰ `as nullable text` ☰­
   `Text.Repeat` ☰ `TEXT as nullable text`, `COUNT as number` ☰ `as nullable text` ☰­
   `Text.Replace` ☰ `TEXT as nullable text`, `OLD as text`, `NEW as text` ☰ `as nullable text` ☰­
   `Text.ReplaceRange` ☰ `TEXT as nullable text`, `OFFSET as number`, `COUNT as number`, `NEWTEXT as text` ☰ `as nullable text` ☰­
   `Text.Reverse` ☰ `TEXT as nullable text` ☰ `as nullable text` ☰­
   `Text.Select` ☰ `TEXT as nullable text`, `SELECTCHARS as any` ☰ `as nullable text` ☰­
   `Text.Split` ☰ `TEXT as text`, `SEPARATOR as text` ☰ `as list` ☰­
   `Text.SplitAny` ☰ `TEXT as text`, `SEPARATORS as text` ☰ `as list` ☰­
   `Text.Start` ☰ `TEXT as nullable text`, `COUNT as number` ☰ `as nullable text` ☰­
   `Text.StartsWith` ☰ `TEXT as nullable text`, `SUBSTRING as text`, `optional COMPARER as nullable function` ☰ `as nullable logical` ☰­
   `Text.ToBinary` ☰ `TEXT as nullable text`, `optional ENCODING as nullable number,` `optional INCLUDEBYTEORDERMARK as nullable logical` ☰ `as nullable binary` ☰­
   `Text.ToList` ☰ `TEXT as text` ☰ `as list` ☰­
   `Text.Trim` ☰ `TEXT as nullable text`, `optional TRIM as any` ☰ `as nullable text` ☰­
   `Text.TrimEnd` ☰ `TEXT as nullable text`, `optional TRIM as any` ☰ `as nullable text` ☰­
   `Text.TrimStart` ☰ `TEXT as nullable text`, `optional TRIM as any` ☰ `as nullable text` ☰­
   `Text.Upper` ☰ `TEXT as nullable text`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
  table }
}
{ Time
  table { llll
   `Time.EndOfHour` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Time.From` ☰ `VALUE as any`, `optional CULTURE as nullable text` ☰ `as nullable time` ☰­
   `Time.FromText` ☰ `TEXT as nullable text`, `optional OPTIONS as any` ☰ `as nullable time` ☰­
   `Time.Hour` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Time.Minute` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Time.Second` ☰ `DATETIME as any` ☰ `as nullable number` ☰­
   `Time.StartOfHour` ☰ `DATETIME as any` ☰ `as any` ☰­
   `Time.ToRecord` ☰ `TIME as time` ☰ `as record` ☰­
   `Time.ToText` ☰ `TIME as nullable time`, `optional OPTIONS as any`, `optional CULTURE as nullable text` ☰ `as nullable text` ☰­
  table }
}
{ Type #pq-stdlib-type

  Functions related to → Microsoft/Power-Query/M-formula/language/types[types].

  table { llll
   `Type.AddTableKey` ☰ `TABLE as type`, `COLUMNS as list`, `ISPRIMARY as logical` ☰ `as type` ☰­
   `Type.ClosedRecord` ☰ `TYPE as type` ☰ `as type` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Type/Facets` ☰ `TYPE as type` ☰ `as record` ☰­
   `Type.ForFunction` ☰ `SIGNATURE as record`, `MIN as number` ☰ `as type` ☰­
   `Type.ForRecord` ☰ `FIELDS as record`, `OPEN as logical` ☰ `as type` ☰­
   `Type.FunctionParameters` ☰ `TYPE as type` ☰ `as record` ☰­
   `Type.FunctionRequiredParameters` ☰ `TYPE as type` ☰ `as number` ☰­
   `Type.FunctionReturn` ☰ `TYPE as type` ☰ `as type` ☰­
   `Type.Is` ☰ `TYPE1 as type`, `TYPE2 as type` ☰ `as logical` ☰­
   `Type.IsNullable` ☰ `TYPE as type` ☰ `as logical` ☰­
   `Type.IsOpenRecord` ☰ `TYPE as type` ☰ `as logical` ☰­
   `Type.ListItem` ☰ `TYPE as type` ☰ `as type` ☰­
   `Type.NonNullable` ☰ `TYPE as type` ☰ `as type` ☰­
   `Type.OpenRecord` ☰ `TYPE as type` ☰ `as type` ☰­
   `Type.RecordFields` ☰ `TYPE as type` ☰ `as record` ☰­
   `Type.ReplaceFacets` ☰ `TYPE as type`, `FACETS as record` ☰ `as type` ☰­
   `Type.ReplaceTableKeys` ☰ `TABLETYPE as type`, `KEYS as list` ☰ `as type` ☰­
   `Type.TableColumn` ☰ `TABLETYPE as type`, `COLUMN as text` ☰ `as type` ☰­
   `Type.TableKeys` ☰ `TABLETYPE as type` ☰ `as list` ☰­
   `Type.TableRow` ☰ `TABLE as type` ☰ `as type` ☰­
   `Type.TableSchema` ☰ `TABLETYPE as type` ☰ `as table` ☰­
   `Type.Union` ☰ `TYPES as list` ☰ `as type` ☰­
  table }
}
{ Uri
  table { llll
   `Uri.BuildQueryString` ☰ `QUERY as record` ☰ `as text` ☰­
   `Uri.Combine` ☰ `BASEURI as text`, `RELATIVEURI as text` ☰ `as text` ☰­
   `Uri.EscapeDataString` ☰ `DATA as text` ☰ `as text` ☰­
   `Uri.Parts` ☰ `ABSOLUTEURI as text` ☰ `as record` ☰­
  table }
}
{ Value
  table { llll
   `Value.Add` ☰ `VALUE1 as any`, `VALUE2 as any`, `optional PRECISION as nullable number` ☰ `as any` ☰­
   `Value.Alternates` ☰ `ALTERNATES as list` ☰ `as any` ☰­
   `Value.As` ☰ `VALUE as any`, `TYPE as type` ☰ `as any` ☰­
   `Value.Compare` ☰ `VALUE1 as any`, `VALUE2 as any`, `optional PRECISION as nullable number` ☰ `as number` ☰­
   `Value.Divide` ☰ `VALUE1 as any`, `VALUE2 as any`, `optional PRECISION as nullable number` ☰ `as any` ☰­
   `Value.Equals` ☰ `VALUE1 as any`, `VALUE2 as any`, `optional PRECISION as nullable number` ☰ `as logical` ☰­
   `Value.Expression` ☰ `VALUE as any` ☰ `as nullable record` ☰­
   `Value.Firewall` ☰ `KEY as text` ☰ `as any` ☰­
   `Value.FromText` ☰ `TEXT as any`, `optional CULTURE as nullable text` ☰ `as any` ☰­
   `Value.Is` ☰ `VALUE as any`, `TYPE as type` ☰ `as logical` ☰­
   `Value.Lineage` ☰ `VALUE as any` ☰ `as any` ☰­
   `Value.Metadata` ☰ `VALUE as any` ☰ `as any` ☰­
   `Value.Multiply` ☰ `VALUE1 as any`, `VALUE2 as any`, `optional PRECISION as nullable number` ☰ `as any` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Value/NativeQuery` ☰ `TARGET as any`, `QUERY as text`, `optional PARAMETERS as any`, `optional OPTIONS as nullable record` ☰ `as any` ☰­
   `Value.NullableEquals` ☰ `VALUE1 as any`, `VALUE2 as any`, `optional PRECISION as nullable number` ☰ `as nullable logical` ☰­
   `Value.Optimize` ☰ `VALUE as any` ☰ `as any` ☰­
   `Value.RemoveMetadata` ☰ `VALUE as any`, `optional METAVALUE as any` ☰ `as any` ☰­
   `Value.ReplaceMetadata` ☰ `VALUE as any`, `METAVALUE as any` ☰ `as any` ☰­
   `Value.ReplaceType` ☰ `VALUE as any`, `TYPE as type` ☰ `as any` ☰­
   `Value.Subtract` ☰ `VALUE1 as any`, `VALUE2 as any`, `optional PRECISION as nullable number` ☰ `as any` ☰­
   `Value.Traits` ☰ `VALUE as any` ☰ `as table` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Value/Type` ☰ `VALUE as any` ☰ `as type` ☰ Return the → Microsoft/Power-Query/M-formula/language/types[type] of the given value.
   `Value.VersionIdentity` ☰ `VALUE as any` ☰ `as any` ☰­
   `Value.Versions` ☰ `VALUE as any` ☰ `as table` ☰­
   `Value.ViewError` ☰ `ERRORRECORD as record` ☰ `as record` ☰­
   `Value.ViewFunction` ☰ `FUNCTION as function` ☰ `as function` ☰­
  table }
}
{ Variable
  table { llll
   `Variable.Value` ☰ `IDENTIFIER as text` ☰ `as any` ☰­This function is used internally.
  table }
}
{ Web
  table { llll
   `Web.BrowserContents` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as text` ☰­
   `Web.Contents` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as binary` ☰­
   `Web.Headers` ☰ `URL as text`, `optional OPTIONS as nullable record` ☰ `as record` ☰­
   `→ Microsoft/Power-Query/M-formula/standard-library/Web/Page` ☰ `HTML as any` ☰ `as table` ☰­
  table }
}
{ WebAction
  table { llll
   `WebAction.Request` ☰ `METHOD as text`, `URL as text`, `optional OPTIONS as nullable record` ☰ `as action` ☰­
  table }
}
{ Xml
  table { llll
   `Xml.Document` ☰ `CONTENTS as any`, `optional ENCODING as nullable number` ☰ `as table` ☰­
   `Xml.Tables` ☰ `CONTENTS as any`, `optional OPTIONS as nullable record`, `optional ENCODING as nullable number` ☰ `as table` ☰­
  table }
}

{ Extraction of functions and parameters

  The above tables were created from the `*.md` files in the path `query-languages/` of the github repository → https://github.com/MicrosoftDocs/query-docs/tree/main[MicrosoftDocs/query-docs]  with the following Python script
code {
#!/usr/bin/env python3

import re
import os
import glob

prev_ns = '?'

def extract_text_between_pre_tags(file_path):
    with open(file_path, 'r'                  ) as file:
        file_contents = file.read()

    match = re.search(r'<pre>\s*(.*?)\s*</pre>', file_contents, re.DOTALL)

    if match:
        m = match.group(1)
        m = re.sub(r'<b>(.*?)<\/b>', lambda match: match.group(1).upper(), m)

        global prev_ns
        ns = m.split('.')[0]
        if prev_ns != ns:
           if prev_ns != '?':
              print('  table }')
              print('}')

           print(f'{{ {ns}')
           print('  table { llll')
           prev_ns = ns

        sp = m.split('(')
        qr = sp[1].split(')')
        qr0 = f'`{qr[0]}` ' if qr[0] != '' else ''
        print(f'   `{sp[0]}` ☰ {qr0}☰ `{qr[1][1:]}` ☰­')


doc_dir='→ https://github.com/MicrosoftDocs/query-docs/tree/main/query-languages/m[/home/rene/microsoft/query-docs/query-languages/m]'
for  filename in sorted(glob.glob(f'{doc_dir}/*.md')):
     file_path = os.path.join(doc_dir, filename)

     if os.path.isfile(file_path):
         extract_text_between_pre_tags(file_path)

print('  table }')
print('}')
code }

}
{ Enums

  { BinaryEncoding

    Members: `Hex`,` Base64`

  }
  { BinaryOccurence

    `Optional`, `Required`, `Repeating` (See also `Occurence`)

  }
  { ByteOrder

   `LittleEndian`, `BigEndian`

  }
  { CsvStyle

   `QuoteAlways`, `QuoteAfterDelimiter`

  }
  { Day #pq-stdlib-day

   `Day` has the elements `Sunday` (=0) through `Saturday` (=6).

    See also the function `Date.DayOfWeek`.

  }
  { ExtraValues

    Members: `List`, `Ignore`, `Erro`

  }
  { GroupKind

    Members: `Global`, `Local`.

  }
  { JoinAlgorithm

   `PairwiseHash`, `SortMerge`, `LeftHash`, `RightHash`, `LeftIndex`, `RightIndex`.

  }
  { JoinKind  #pq-stdlib-joinkind

     Members: `LeftOuter`,` RightOuter`, `FullOuter`, `LeftAnti`, `RightAnti`.

  }
  { JoinSide

   `Left`, `Right`

  }
  { LimitClauseKind


   `None`, `Top`, `Limit`, `LimitOffset`, `AnsiSql2008`

  }
  { MissingField

    Members: `Error`, `Ignore`, `UseNull`

  }
  { Number

    Members: `Pi`, `E`

  }
  { Occurence

    Members: `All`, `First`, `Last`
    
    Also: `Optional`, `Required`, `Repeating` (See also `BinaryOccurence`)

  }
  { Order

    Members: `Ascending`, `Descending`

  }
  { Precision

    Members: `Double`, `Decimal`

  }
  { QuoteStyle

   `None`, `Csv`

  }
  { RelativePosition

   `RelativePosition` has the two elements `FromStart` (=0) and `FromEnd` (=1).

  }
  { RoundingMode

    Members: `Up`, `Down`, `AwayFromZero`, `TowardZero`, `ToEven`.

  }
  { TextEncoding

    Members: `Utf8`, `Utf16`, `Ascii`, `Unicode`, `BigEndianUnicode`.

  }
  { TraceLevel

    Members: `Critical`, `Error`, `Warning`, `Information`, `Verbose`.

  }
  { WebMethod

   `Get` etc.

  }

}
{ TODO

  What about `→ Microsoft/Power-Query/M-formula/standard-library/TraceLevel`?

}
sa:
  → Microsoft/Power-Query
