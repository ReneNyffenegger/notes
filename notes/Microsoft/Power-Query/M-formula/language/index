$ Power Query M formula language

The *Power Query M formula language* is a → science/computer/Programming-paradigm/Functional-programming/[functional language] allows to express the process of → Microsoft/Power-Query#power-query-mashing-up-data[mashing-up data].

Usually, the *Power Query M formula language* is referred to simply *M*.

The language resembles F#.

Surprisingly, the language is als case sensitive.

{ let expression

code {
let
    variableName    = expression,
    anotherVariable = anotherExpression
in
    yetAnotherVariable (?)
code }

}
{ Variable names

  It's possible to defined variable names that contain spaces. They are used with the special `#"…"` syntax:
code {
let
   #"foo bar baz"  = …
    … 
code }

}
{ Literals

  Some literals include
    • `null`
    • `true`, `false`
    • `42`, `0xabcd`
    • `"foo, bar and baz"`, `"The quote reads ""hello world""."`, `"First line#(cr,lf)second line"`
    • `#date(1970,08,28)`, `#datetime(2020,04,18, 12,13,14)`, `#datetimezone(2020,04,18, 12,13,14, 01,00)`, `#duration(1,4,15,0)`, `#time(23,59,59)`

}
{ Keywords

  The keywords include
   `and`, `as`, `each`, `else`, `error`, `false`, `if`, `in`, `is`, `let`, `meta`, `not`, `null`, `or`, `otherwise`, `section`, `shared`, `then`, `true`, `try`,
   `type`, `#binary`, `#date`, `#datetime`, `#datetimezone`, `#duration`, `#infinity`, `#nan`, `#sections`, `#shared`, `#table` and `#time`.

}
{ Comments

  M has → development/languages/C-C-plus-plus[C / C++] like comments: `/* … */` and `// …`

}
{ Escape character

  `#` is the escape character. Some examples are:
  table { ll
    `#(cr)` / `#(lf)` / `#(cr,lf)` ☰ carriage return / line feed / carriage return line ffedc
    `#(tab)` ☰ tabulator
    `#(263a) ☰ arbitrary → development/Unicode character (for example: 0x263a = ☺)

  table }

  In order to get the escape character itself, it needs to escaped like so: `#(#)`.

}
{ Two types of values

  M deals with two types of values:
    • primitive values, which seem to be expressable with literals such as `42`, `true`, `"hello world"` etc.
    • constructed values, which consist of other primitive and/or constructed values.

  Primitive types also include the *abstract types*: `function`, `table`, `any` and `none`.

}
{ Structured data values (Lists, records and tables)

  `{1, 1, 2, 3, 5, 8, 13}` is a list (of the first fibonacci numbers)

  `[ fld_1 = 42, fld_2 = "hello world" ]` is a record, whose two fields are `fld_1` and `fld_2`.
 
   A table organizes values in columns and rows.
code {
#table(
   {"col_1","col_2"},
  {
   {    42 ,    11 },
   {    17 ,    32 }
  }
)
code }

}
{ Functions

  `(a, b) => a * b` is a function that multiplies two values.

}
{ Evaluation model

  M's evaluation model resembles that of → Microsoft/Office/Excel where values in cells are calculated in order of their dependencies to other cells.

}
