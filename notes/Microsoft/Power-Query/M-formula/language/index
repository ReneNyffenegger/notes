$ Power Query M formula language

The *Power Query M formula language* is a → science/computer/Programming-paradigm/Functional-programming/[functional language] allows to express the process of → Microsoft/Power-Query#power-query-mashing-up-data[mashing-up data].

Usually, the *Power Query M formula language* is referred to simply *M*.

The language resembles F#.

Surprisingly, the language is also case sensitive.

{ let expression

code {
let
    variableName    = expression,
    anotherVariable = anotherExpression
in
    yetAnotherVariable
code }

}
{ Variable names

  It's possible to define variable names that contain spaces. They are used with the special `#"…"` syntax:
code {
let
   #"foo bar baz"  = …
    … 
code }

}
{ Literals

  Some literals include
    • `null`
    • `true`, `false`
    • `42`, `0xabcd`
    • `"foo, bar and baz"`, `"The quote reads ""hello world""."`, `"First line#(cr,lf)second line"`
    • `#date(1970,08,28)`, `#datetime(2020,04,18, 12,13,14)`, `#datetimezone(2020,04,18, 12,13,14, 01,00)`, `#duration(1,4,15,0)`, `#time(23,59,59)`

}
{ Keywords

  The keywords include
   `and`, `as`, `each`, `else`, `error`, `false`, `if`, `in`, `is`, `let`, `meta`, `not`, `null`, `or`, `otherwise`, `section`, `shared`, `then`, `true`, `try`,
   `type`, `#binary`, `#date`, `#datetime`, `#datetimezone`, `#duration`, `#infinity`, `#nan`, `#sections`, `#shared`, `#table` and `#time`.

}
{ Immutable values

  Values are immutable. The following is not possible, it produces a *cyclic reference was encountered during evaluation*:
code  {
let
   a = 4,
   a = a + 1,
   b = a * 2
in
   a
code }


}
{ Comments

  M has → development/languages/C-C-plus-plus[C / C++] like comments:
code {
/*
   This is
   a multi line comment.
*/

// This comment extends to the end of the line.
code }
}
{ Escape character

  `#` is the escape character. Some examples are:
  table { ll
    `#(cr)` / `#(lf)` / `#(cr,lf)` ☰ carriage return / line feed / carriage return line ffedc
    `#(tab)` ☰ tabulator
    `#(263a)` ☰ arbitrary → development/Unicode character (for example: 0x263a = ☺)

  table }

  In order to get the escape character itself, it needs to escaped like so: `#(#)`.

}
{ Two types of values

  M deals with two types of values:
    • primitive values, which seem to be expressable with literals such as `42`, `true`, `"hello world"` etc.
    • constructed values, which consist of other primitive and/or constructed values.

  Primitive types also include the *abstract types*: `function`, `table`, `any` and `none`.

? Strings must be enclosed in double quotes, single quotes do not denote a string.

}
{ Structured data values (Lists, records and tables)

  { Lists

    A list is denoted by curly braces. The following snippet is a list of the first fibonacci numbers:
code {
{ 1, 1, 2, 3, 5, 8, 13 }
code }


  }
  { Records

    The following is a record, whose two fields are `fld_1` and `fld_2`.

code {
[ 
   fld_1 = 42,
   fld_2 = "hello world"
]
code }

  }
  { Tables

   A table organizes values in columns and rows.

code {
#table(
  {"col_1","col_2"}, {
  {    42 ,    11 },
  {    17 ,    32 }
})
code }

  }

}
{ Looking up values in lists or tables

  
   { Positional index operator

    Individual items in a list can be looked up by the *positional index operator* (`{n}`), which accesses the (zero-based) item `n`
code {
[
   fibonacci = {1, 1, 2, 3, 5, 8, 13, 21, 34},
   five      =  fibonacci{4} // fifth item is 5
]
code }

  }
  { Accessing values in list of records


code {
[  
  results =   
  {   
      [   
          year       = 2019,   
          val_one    =   42,
          val_two    =   99
      ],  
      [   
          year       = 2020
          val_one    =   47
          val_two    =  103
      ]   
  },  
  sum_val_one = results{0}[val_one] + 
                results{1}[val_one] // equals 42 + 47
]  
code }

  }

}
{ Functions

  A function takes a set of (input) values and prodcues a single result value.

 `(a, b) => a * b` is a function that multiplies two values.

  { each

    The `each` keyword is used to create simple functions that take the underscore (`_`) parameter.

    `each [XYZ]` is equal to `_[XYZ]` which is equal to `(_) => _[XYZ]`

  }


}
{ Evaluation model

  M's evaluation model resembles that of → Microsoft/Office/Excel where values in cells are calculated in order of their dependencies to other cells.

}
{ Interesting functions

code {
File.Contents(path as text, optional options as nullable record) as binary
code }

  `File.Contents` return a file's content as `binary`. This is needed, for example, to open an → Microsoft/Office/Excel/Object-Model/Workbook[Excel Workbook] and transform it to a `table` with `Excel.Workbook`:
code {
Excel.Workbook(workbook as binary, optional useHeaders as nullable logical, optional delayTypes as nullable logical) as table
code }


code {
Table.TransformColumnTypes(table as table, typeTransformations as list, optional culture as nullable text) as table
code }
  
  `Table.SelectRows` seems to kind of the equivalent of the → development/databases/SQL `where` clause.
code {
Table.SelectRows(table as table, condition as function) as table
code }
  The following line seems to correspond to `select * from allRows where colXYZ = 'value ABC'`:
code {
selectedRows = Table.SelectRows(allRows, each ([colXYZ] = "value ABC")),
code }
  Compare with `Table.RemoveRows`

  `Table.SelectColumns()` / `Table.RemoveColumns()`
code {
Table.SelectColumns(table as table, columns as any, optional missingField as nullable number) as table
Table.RemoveColumns(table as table, columns as any, optional missingField as nullable number) as table
code }

code {
Table.AddColumn(table as table, newColumnName as text, columnGenerator as function, optional columnType as nullable type) as table
code }

  Add a column named `added` that contains the sum of `val one` and `val two`:
code {
sumAdded = Table.AddColumn(inputTable, "added", each [val one] + [val two], type number),
code }

  Concatenate two text columns:
code {
concatAdded = Table.AddColumn(inputTable, "concatenated", each Text.Combine({[txt one], " ", [txt two]}), type text),
code }

code {
Table.ReorderColumns(table as table, columnOrder as list, optional missingField as nullable number) as table
code }

  Create a table
code {
#table (
  columns as any, // Typically a list of column names, but can also be a table type, a number of columns or null.
  rows    as any  // A list where each element is itself a list that corresonds to a row
)
code }

  { map equivalent

    `List.Transform` is formula-M's equivalent of the → science/computer/Programming-paradigm/Functional-programming/First-class-function/map[`map`] function that is commonly found in
    → science/computer/Programming-paradigm/Functional-programming[functional programming languages].
code {
List.Transform(list as list, transform as function) as list
code }

  
code {
List.Transform(list as list, transform as function) as list
code }

   The following snippet doubles every element in the list
code {
List.Transform (
{ 11, 3, 29 },
   each 2 * _
)
code }

  `List.Transform` can be used to create lists (rows) from a list. The produced rows can then be returned as a table
code {
let
   numbers = {5, 1, 6, 4, 2, 3},
   rows    =  List.Transform(
                   numbers,
                   each { _ , _*3 , _*_ }
              ),
   table   = #table (
                {"num", "times 3", "squared"},
                  rows
              )
in
   table
code }

  }
  { Eval
  
code {
Expression.Evaluate(document as text, optional environment as nullable record) as any 
code }

   The following evaluates to 42:
code {
Expression.Evaluate( " 7*6 " )
code }

  Passing «symbols» (?) to `Expression.Evaluate`:
code {
Expression.Evaluate(
"
  f ( {11, 22, val_3 })
",
  [ f     = List.Sum ,
    val_3 = 9
  ]
)
code }

  }

  { Excel.CurrentWorkbook

   `Excel.CurrentWorkbook()` returns a table that lists the tables of the current → Microsoft/Office/Excel/Object-Model/Workbook[Excel workbook]. The returned table has the following two columns:
     • `Content` (which itself is a table)
     • `Name` (whose data type is string?)
    
code {
Excel.CurrentWorkbook() as table
code }

  `Excel.CurrentWorkbook()` can be used to refer to → Microsoft/Office/Excel/Object-Model/Range#excel-range-name[named ranges] to get values for processing:
code {
var = Excel.CurrentWorkbook(){[Name="rangeName"]}[Content]{0}[Column1],
code }

  }

  { Record.FieldValues

   `Record.FieldValues` gets values (not the names) from a record.
code {
Record.FieldValues(record as record) as list
code }
    

    The following evaluates to `{42, "Hello World", "foo, bar, baz"}`.
code {
Record.FieldValues([
   num = 42,
   txt = "Hello World",
   val = "foo, bar, baz"
])
code }
 
?  `Record.FieldValues` might be used to in `Table.FromList`, but I am not sure what its purpose exactly is:
code {
Table.FromList (
  { 
    [ txt  = "one"  , num = 1 , meta = "foo" ],
    [ WHAT = "two"  , THE = 2 , HECK = "bar" ], // Note the differing record labels!
    [ txt  = "three", num = 3 , meta = "baz" ],
    [ txt  = "four" , num = 4 , meta = "last"]
  },
   Record.FieldValues,    // Function
  {"txt", "num", "meta"}
)
code }

  }

  { Date and time related

  `DateTime.LocalNow()` evaluates to the current date and time on the system.
code {
DateTime.LocalNow() as datetime
code }

    When interested in the data part of a date time, `DateTime.Date()` is the thing to be used
code {
DateTime.Date(dateTime as any) as nullable date 
code }
   
  }
  { Getting data from the internet

code {
Web.Contents(url as text, optional options as nullable record) as binary
code }

  }
  { Table.FromList

code {
Table.FromList(
      list as list,
      optional splitter    as nullable function,
      optional columns     as any,
      optional default     as any,
      optional extraValues as nullable number
)
as table 
code }

    By default, `Table.FromList` assums the given list a list of text that contains commas where the text needs to be split. Thus, it is almost predestined to read
    → development/Data/exchange/formats/CSV[CSV] files. The following snippet produes a 4 rows, 3 columns table:
code {
Table.FromList ( { "one,1,foo", "two,2,bar", "three,3,baz", "four,4,last" })
code }

    But compare also with `Csv.Document()`.

  }
  { Table.FromRecords


code {
Table.FromRecords({
     [a = 1, b = 2],
     [a = 3, b = 4]
 }),
code }


  }
  { Table.PromoteHeaders

code {
Table.PromoteHeaders(table as table, optional options as nullable record) as table
code }

   `Table.PromoteHeaders` is used if a table's first row contains column names:
code {
Table.PromoteHeaders(table as table, optional options as nullable record) as table
code }

  }
  { Table.Group #m-table-group

   `Table.Group` is used to aggregate records (think the → development/databases/SQL/select/group-by[SQL `group by` clause]).
code {
Table.Group(
            table             as          table,       // Data to be aggregated
            key               as          any,         // Non aggregated columns
            aggregatedColumns as          list,        //
   optional groupKind         as nullable number,
   optional comparer          as nullable function
)
as table 
code }

  }
  { Change values in a given column

code {
Table.ReplaceValue(table as table, oldValue as any, newValue as any, replacer as function, columnsToSearch as list) as table
code }

  Some candidates for the `replacer` function include
    • `Replacer.ReplaceValue`
    • `Replacer.ReplaceText`

   `Table.ReplaceValue` can for example be used to replace `null` values with zeroes, in the following example in the column named `foo`:
code {
no_nulls = Table.ReplaceValue(chosen_columns, null, 0, Replacer.ReplaceValue, {"foo"})
code }


  }
  { Select data with SQL with Value.Native #m-value-native

    The function `Value.Native` allows to select data from a → development/databases[database] with → development/databases/SQL[SQL].
code {
Value.NativeQuery(
             target     as any ,
             query      as text,
    optional parameters as any ,
    optional options    as nullable record
) as any
code }

    Because native queries may alter → development/Data in the database and are therefore potentially unsafe so that their execution needs to be approved of.
    -
    In Excel, under → Microsoft/Office/Excel/GUI/Ribbon/tabs/Data/Get-and-Transform-Data/Get-Data/Query-Options/Security[Data -> Get & Transform Data -> Get Data -> Query Options : Security] there is a setting to
    that allows to approve all native queries.


    The following example select from an → development/databases/Access[MS Access] database:
code {
let
    accdbBinary = File.Contents("P:\ath\to\db.accdb"),
    accdb       = Access.Database(accdbBinary, [CreateNavigationProperties=true]),
    result      = Value.NativeQuery(accdb, "select * from country")
in
    result
code }

  }
  { TODO

   { Create a list of dates

code {
// Found at https://blog.crossjoin.co.uk/2016/06/03/creating-tables-in-power-bipower-query-m-code-using-table/

let
  DateList   = List.Dates(#date(2020,1,1), 500, #duration(1,0,0,0)),
  AddColumns = List.Transform(
     DateList,
     each {_, Date.Month(_), Date.Year(_)}
  ),
  DateTable = #table(
                  type table[Date=date, Month=number, Year=number],
                  AddColumns
  
            )
in
  DateTable
code }

code {
// Found at https://blog.crossjoin.co.uk/2016/06/03/creating-tables-in-power-bipower-query-m-code-using-table/

let
   Source = {
       Number.From(#date(2015,1,1))..Number.From(#date(2020,12,31))
   },
   ConvertToTable = Table.TransformColumnTypes(
         Table.FromList(
             Source,
             Splitter.SplitByNothing(),
           {"DateKey"},
             null,
             ExtraValues.Error
         ),
        { {"DateKey", type date}})
in
   ConvertToTable
code }

  }
 }
}
{ Misc

  → Microsoft/products/Power/BI and Formula-M are business analytic tools and therefore not indented to have the ability to write → development/Data back to
  a data source (although there are *hacks* that seem to make it possible).

}

sa:

  The → Microsoft/Office/Excel/Object-Model/WorkbookQuery[`workbookQuery`] object of the → Microsoft/Office/Excel/Object-Model.

