$ Power Query M formula language: functions
@ function

{ Declaring a function in a let expression

  The following example declares a function in a → Microsoft/Power-Query/M-formula/language/expressions/let. The entire expression results in the value 31:
  gh|about-Power-Query-Formula-M|/language/functions/first.M||

}
{ Declaring a function in a record

  Similarly, it is also possible to declare a function in a → Microsoft/Power-Query/M-formula/language/types/primitive/record[record]:
  gh|about-Power-Query-Formula-M|/language/functions/record.M||

  When evaluated in → Microsoft/Office/Excel, for example with → Microsoft/Power-Query/M-formula/evaluation/readFormulaFromFile[this VBA code], this formula evaluates to:
  gh|about-Power-Query-Formula-M|/language/functions/img/record.png||

}
{ Recursive functions

  Recursive functions can be defined using the at-sign (`@`) which starts an *inclusive identifier reference*. This is required to gain access to the environment that defines the identifier that
  is being used:
  gh|about-Power-Query-Formula-M|/language/functions/recursive.M||

  This example produces:
  gh|about-Power-Query-Formula-M|/language/functions/img/recursive.png||

}
{ Closures

  gh|about-Power-Query-Formula-M|/language/functions/closure.M||

}
sa:
  The → Microsoft/Power-Query/M-formula/language/expressions/each[`each` expression] is syntactic sugar to define anonymous «in-place» functions with one parameter.
