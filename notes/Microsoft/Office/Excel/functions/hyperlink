$ Excel function: hyperlink
@ hyperlink

code {
=hyperlink(target)
=hyperlink(target; friendlyName)
code }

{ Jumping to a certain address

  In order to jump to address `N18` on the *same* → Microsoft/Office/Excel/Object-Model/Worksheet, the target is simply `#N18`:
code {
=hyperlink("#N18"; "Go to N18)
code }

  The address can also be specifed in `RxCy` notation:
code {
=hyperlink("#r18c9"; "Jump to to row 18, column 9")
code }

  It's possible to specify a → Microsoft/Office/Excel/Object-Model/Range#excel-range-name[named range] as destination:
code {
=hyperlink("#target"; "Go to target")
code }

  In order to have a hyperlink to another sheet, the sheet name must be separated from the target by an exclamation mark. (See also → Microsoft/Office/Excel/Object-Model/Range#excel-range-refer-to[referring to ranges in Excel]):
code {
=hyperlink("#SheetName!addr"; "...")
code }

  Finally, a target in another → Microsoft/Office/Excel/Object-Model/Workbook[workbook] can be linked to like so (sheet is 
code {
=hyperlink("[C:\users\rene\Documents\workbook.xlsx]sheet!addr"; "...")
code }

}
{ Calling a VBA function with a hyperlink

  It is possible to call a → development/languages/VBA/functions[VBA function] (not a sub!) with a hyperlink by prepending the name of the `target` with a hash symbol (`#`).

code {
=hyperlink("#hyperlinkClick()"; "go")
code }

  The function's return value is a → Microsoft/Office/Excel/Object-Model/Range[`range` object] which specifies the cell to which the hyperlink jumps.

  Such a function can be declared in a → development/languages/VBA/language/module[VBA module] like shown below.
  Because this function returns the current selection, Excel jumps nowhere.
code {
function hyperlinkClick() as range

   set hyperlinkClick = → Microsoft/Office/Excel/Object-Model/Application/selection[selection]
   msgBox "clicked

end function
code }

  The function *must* return a `→ Microsoft/Office/Excel/Object-Model/Range` object. If no return value is assigned,
  the function is invoked twice, then the VBA runtime throws the error message *Reference isn't valid*.
  
  In addition, it seems that the function must be placed in a VBA-module, not in a «worksheet file»: it possible to call the function with `=hyperlink("#sheet1.func()"; …`, but eventually, the *Reference isn't valid* would still
  be thrown.

  It is also possible to pass parameters (references, scalars…) to to the function:
code {
=hyperlink("#funcWithParam(  a1)"                ; "go")
=hyperlink("#funcWithParam(""hard coded value"")"; "go")
code }

}

sa:

  The → Microsoft/Office/Excel/Object-Model/Hyperlink[`hyperlink`] object.

  The Excel Menu → Microsoft/Office/Excel/GUI/Ribbon/tabs/Insert/Links[Insert -> Links]

  Using the *Hyperlink* and *Followed Hyperlink* → Microsoft/Office/Excel/Object-Model/Style[styles] to
  → Microsoft/Office/Excel/Object-Model/Style#xls-style-hyperlink[specify the visual appearance of hyperlinks].

  The function → development/languages/VBA/modules/Excel/ExcelHelpers#vba-mod-exh-insertHyperlinkToVBAMacro[`insertHyperlinkToVBAMacro()`] of the VBA module
  → development/languages/VBA/modules/Excel/ExcelHelpers[ExcelHelpers] allows to insert a hyperlink that calls a → development/languages/VBA/language/subs-and-functions[user defined VBA function], optionally with parameters.

  → Microsoft/Office/Excel/functions[Excel functions]
