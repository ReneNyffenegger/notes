$ Excel formulas
@ formula

An *→ Microsoft/Office/Excel[Excel] formula* starts with an equal sign (`=`), a plus (`+`) or a minus (`-`).

A formula contains a combination of
  • constants
  • cell references
  • → Microsoft/Office/Excel/functions[functions]
  • operators
  • … (?)

Formulas can be entered or edited in the *formula bar*.
-
The so-called *formula palette* is a tool that provides information about → Microsoft/Office/Excel/functions[functions] and their arguments and thus helps with editing or creating formulas

{ Display formula text

  { Switch between formula text mode and formula result mode

   *ctrl+`* (gravis) switches between displaying formula-text and formula-result.

    If in *show formula text* mode, the resulting value of a specific formula can be shown by pressing `F2` on the cell with the formula.

    See also the `DisplayFormulas` property of the → Microsoft/Office/Excel/Object-Model/WorksheetView[`WorksheetView`] object.

  }
  { Worksheet function formulaText

    The → Microsoft/Office/Excel/functions[worksheet function] `formulaText(ref)` returns the formula in the → Microsoft/Office/Excel/Object-Model/Range/cell `ref`. If there is no formula,
    it evaluates to → Microsoft/Office/Excel/data-types/error[`#NA`].

  }

}
{ Evaluation modes #excel-formula-eval-mode

  Excel evaluates formulas in one of two modes:
    • → Microsoft/Office/Excel/formulas/operators/intersection#excel-impl-intersect-op[Implicit Intersection] Evaluation (IIE), or
    • Array Evaluation (AE)

  These modes differed how a → Microsoft/Office/Excel/functions[function] that expects a single value was passed a *multi celled range* (for example `C42:C90`).
    • With IIE, the function chose the value of the cell on the same row or column as the formula (referred to as *implicit intersection*)
    • With AE, the function is called with each cell's corresponding value and an array (not a single value) is returend. (This behaviour is also referred to as *lifting*)

  Before Excel intruduced → Microsoft/Office/Excel/formulas/array#excel-dynamic-array-formulas[dynamic arrays] (DA),
    • IIE was the default mode for cell arrays
    • AE was used everywhere else (such as → Microsoft/Office/Excel/GUI/formatting/conditional[conditional formatting], data validation, → Microsoft/Office/Excel/formulas/array[CSE array formulas] etc.)

  With the introduction of *dynamic arrays*, AE has become the default evaluation mode.

  In → Microsoft/Office/Excel/Object-Model[Excel's object model], an AE formula is read/written with → Microsoft/Office/Excel/Object-Model/Range/formula/2[`range.formula2`].
  For backward compatiblity, a formula can be forced to behave in IIE mode (implicit intersection, no spilling) with
  → Microsoft/Office/Excel/Object-Model/Range/formula/2[`range.formula2`].

}
{ Operators

  { Range operator

    The range operator is the *colon*. It produces a range with the cells between the addresses on its left and right side.

?   TODO: `application.range` seems to correspond to the colon operator.

  }
  { Intersect operator #excel-intersect-operator

    The intersect operator is a *space*. It evaluates to the range that is common to both ranges on its left and right side.

    Thus, It is possible to write formulas such as the following which
    calculates the sum of the number in `F10:F12`
code {
=sum(F9:F12 F10:F15)
code }

    An intersection that returns an empty set is shown with the → Microsoft/Office/Excel/Object-Model/Range/cell/errors[`#NULL!` cell error].

    See also the → Microsoft/Office/Excel/Object-Model/Application/set-operations[set operators] in the → Microsoft/Office/Excel/Object-Model/Application[`application`] object.

  }
  { Union operator #excel-union-operator

    The union operator is the *comma*. It evaluates to the range that is present on any of the ranges on its left or right side.

  }

}
{ Recalculation #excel-formula-recalculation

  → Microsoft/Office/Excel#excel-key-shortcut[Keyboard shortcuts] around `F9` can be used to perform or force recalculation of Excel formulas:
  table { lll
    ~Shortcut~         ☰ ~Description~ ☰ ~→ development/languages/VBA equivalent~
    `F9`               ☰ calculates all → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets] in all open → Microsoft/Office/Excel/Object-Model/Workbook[workbooks] ☰
    `shift+F9`         ☰ calculates the active → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet] ☰ `activeSheet.calculate` (?)
    `ctrl+alt+F9`      ☰ *forces* the recalculation in all worksheets of open workbooks, *even* if Excel thinks they have not changed ☰ `application.calculateFullRebuild` (?)
    `ctr+alt+shift+F9` ☰ calculates dependent → Microsoft/Office/Excel/Object-Model/Range/cell[cell] ☰
  table }

  Additional VBA functions (that might be related to these keyboard shortcuts) are:
     • `activeWorkbook.calculate`
     • `application.calculateFull`
     • → Microsoft/Office/Excel/Object-Model/Application/volatile[`application.volatile`]
     • `→ Microsoft/Office/Excel/Object-Model/Range[range].calculate`
     • `→ Microsoft/Office/Excel/Object-Model/Range[range].dirty` marks the given range to be recalculated


  The corresponding → development/languages/VBA[VBA] method is → Microsoft/Office/Excel/Object-Model/Worksheet#excel-worksheet-calculate[`calculate`] (on a → Microsoft/Office/Excel/Object-Model/Worksheet[`Worksheet`] object).

  See also the → Microsoft/Office/Excel/Object-Model/Application#excel-application-calculation[`calculation`] property of the
  → Microsoft/Office/Excel/Object-Model/Application[`application`] object.
  -
  The → Microsoft/Office/Excel/functions[worksheet function] → Microsoft/Office/Excel/functions/info[`info("recalc")`] evaluates to the current mode of recalculation.
  
}

sa:

  With → development/languages/VBA, it is possible to dynamically evaluate a formula with → Microsoft/Office/Excel/Object-Model/Application#excel-application-evaluate[`application.evaluate(formula)`]

  → Microsoft/Office/Excel/formulas/array[Array formulas]

  The → Microsoft/Office/Excel/functions[worksheet function] `isFormula()`

  → Microsoft/Office/Excel/formulas/circular-reference[Circular references]

  The (→ development/languages/VBA) function → Microsoft/Office/Excel/Object-Model/Application/convertFormula[`application.convertFormula()`] converts → Microsoft/Office/Excel/Object-Model/Range#excel-range-address[range addresses]
  of → Microsoft/Office/Excel/formulas[formulas] between the two → Microsoft/Office/Excel/Object-Model/Application/referenceStyle[reference style] A1/R1C1 and/or between relative and absolute addresses.

  Commands or tabs on the → Microsoft/Office/Excel/GUI/Ribbon[Ribbon] that are related to formulas include
    • → Microsoft/Office/Excel/GUI/Ribbon/tabs/File/Options/Formulas[File -> Options -> Formulas]
    • The Ribbon tab *Formuals*, especially → Microsoft/Office/Excel/GUI/Ribbon/tabs/Formulas/Formula-Auditing[Formulas -> Formula Auditing]

  Using formulas for → Microsoft/Office/Excel/GUI/formatting/conditional[conditional formatting]
  (→ Microsoft/Office/Excel/GUI/Ribbon/tabs/Home/Styles/Conditional-Formatting/New-Rule[Home -> Styles -> Conditional Formatting -> New Rule])

  The VBA function → Microsoft/Office/Excel/Object-Model/Range/clear_[`range.clearContents`]
