$ Excel Object Model: Worksheet
@ worksheet

A worksheet belongs to *one* → Microsoft/Office/Excel/Object-Model/Workbook[workbook]. 

The currently active worksheet can be found with → Microsoft/Office/Excel/Object-Model/Application#excel-application-active-objects[`application.activeSheet`].

New worksheets can be created with → Microsoft/Office/Excel/Object-Model/Worksheets/add[`worksheets.add()`]

{ Properties and methods

  table { ll

    `activate()` ☰ Makes the worksheet the active worksheet, see also → Microsoft/Office/Excel/Object-Model/Application#excel-application-active-objects[`activeSheet`]
    `application` ☰
    `autoFilter` ☰ If filtering is enabled, returns the corresponding → Microsoft/Office/Excel/Object-Model/AutoFilter[`autoFilter` object] which allows to show or hide rows based on criteria of the values of the worksheet. See also → Microsoft/Office/Excel/Object-Model/Worksheet/filterMode[`.filterMode`]
    `autoFilterMode` ☰ A boolean that controls if AutoFilter drop-down arrows are displayed.
    → #excel-worksheet-calculate[`calculate()`] ☰ → Microsoft/Office/Excel/formulas/index.html#excel-formula-recalculation[(Re-)calculates] all → Microsoft/Office/Excel/formulas[formulas] on the given worksheet.
    → Microsoft/Office/Excel/Object-Model/Worksheet/cells[`cells`] ☰ A → Microsoft/Office/Excel/Object-Model/Range that represents all → Microsoft/Office/Excel/Object-Model/Range/cell[cells] of the worksheet.
    `chartObjects()` ☰
    `checkSpelling()` ☰ Display the spelling → Microsoft/Office/Excel/GUI/popups-and-dialogs[dialog]. There is also a `checkSpelling` on the → Microsoft/Office/Excel/Object-Model/Range[range object].
    `circleInvalid()`, `clearCircles()` ☰ (un-)Circle invalid entries on the worksheet.
    `circularReference` ☰
    `clearArrows()` ☰ Remove the tracer arrows
    `codeName` ☰ See → Microsoft/Office/Excel/Object-Model/Worksheet/name#xls-sheet-name-vs-codename[`name` vs `codeName`] and the VB Script example → Microsoft/Office/VBScript-App-Creator/examples/Excel/codeName[Change the `codeName` property of a worksheet].
    `columns` ☰
    `comments` ☰
    `commentsThreaded` ☰
    `consolidationFunction` ☰
    `consolidationOptions` ☰
    `consolidationSources` ☰
    → Microsoft/Office/Excel/Object-Model/Worksheet/copy[`copy()`] ☰ Make a copy of the worksheet (Possibly into  → Microsoft/Office/Excel/Object-Model/Worksheet/copy#excel-worksheet-copy-to-new-workbook[another workbook])
    `creator` ☰
    `customProperties` ☰ The worksheet's `customProperties` collection. Compare with the → Microsoft/Office/Excel/Object-Model/Workbook/customDocumentProperties[`customDocumentProperties`] and `builtinDocumentProperties` properties of the `→ Microsoft/Office/Excel/Object-Model/Workbook` object.
    → Microsoft/Office/Excel/Object-Model/Worksheet/delete[`delete()`] ☰ Delete the worksheet. Temporarily set `application.displayAlerts` to → development/languages/VBA/language/datatypes/boolean[`false`] to prevent the confirm-dialog-box from being shown.
    `displayPageBreaks` ☰
    `displayRightToLeft` ☰
    `enableAutoFilter` ☰ 
    `enableCalculation` ☰
    `enableFormatConditionsCalculation` ☰
    `enableOutlining` ☰
    `enablePivotTable` ☰
    `enableSelection` ☰ controls what can be selected by a user. Requires the worksheet to be → Microsoft/Office/Excel/Object-Model/Worksheet/protect-unprotect[protected] to be in force.
    `evaluate()` ☰
    `exportAsFixedFormat()` ☰ Export as PDF or XPS. Compare with → Microsoft/Office/Excel/Object-Model/Workbook/exportAsFixedFormat[`workbook.exportAsFixedFormat`]
    → Microsoft/Office/Excel/Object-Model/Worksheet/filterMode[`filterMode`] ☰ read-only boolean that indicates if the worksheet is in *filter mode*. See also `.autoFilter`
    `HPageBreaks`, `VPageBreaks` ☰ A collection of Horizontal and vertical page preaks
    `hyperlinks` ☰
    `index` ☰ The position of the worksheet within the → Microsoft/Office/Excel/Object-Model/Workbook. See also `.move()` and → Microsoft/Office/Excel/Object-Model/Worksheet/copy[`copy()`]
    `listObjects` ☰
    `mailEnvelope` ☰
    `move()` ☰ Move the worksheet to another location within the → Microsoft/Office/Excel/Object-Model/Workbook. See also the `.index` property.
    → Microsoft/Office/Excel/Object-Model/Worksheet/name[`name`] ☰ The name of a worksheet uniquely identifies the worksheet within a → Microsoft/Office/Excel/Object-Model/Workbook. See → Microsoft/Office/Excel/Object-Model/Worksheet/name#xls-sheet-name-vs-codename[`name` vs `codeName`]
    → Microsoft/Office/Excel/Object-Model/Names[`names`] ☰ A collection of → Microsoft/Office/Excel/Object-Model/Name[`name`] objects.
    `next`, `previous` ☰ The «next»/«previous» worksheet.
    `OLEObjects()` ☰
    `outline` ☰
    `pageSetup` ☰
    `parent` ☰
    `paste()` ☰
    `pasteSpecial()` ☰
    `pivotTables()` ☰
    `pivotTableWizard()` ☰ Create a new *PivotTable report* without display the PivotTable Wizard (not available for → development/databases/OLE-DB#ole-db-data-source[OLE DB data sources]).
    `printedCommentPages` ☰
    `printOut()` ☰
    `printPreview()` ☰
    → Microsoft/Office/Excel/Object-Model/Worksheet/protect-unprotect[`protect()`, `unprotect()`] ☰
    `protectContents` ☰
    `protectDrawingObjects` ☰
    `protection` ☰
    `protectionMode` ☰
    `protectScenarios` ☰
    `queryTables` ☰
    `range` ☰
    `resetAllPageBreaks()` ☰
    `rows` ☰
    `saveAs()` ☰
    `scenarios()` ☰
    → Microsoft/Office/Excel/Object-Model/Worksheet/scrollArea[`scrollArea`] ☰ defines the area within which a user can scroll a worksheet or select → Microsoft/Office/Excel/Object-Model/Range/cell[cells].
    `select()` ☰ Selects the worksheet and optionally adds it to the currently selected set of worksheets.
    `setBackgroundPicture()` ☰
    `shapes` ☰
    `showAllData()` ☰ Show currently filtered rows in a list. If an → Microsoft/Office/Excel/Object-Model/AutoFilter[`AutoFilter` is set], its arrows are changed to *All*.
    `showDataForm()` ☰ Display the *data form* that is associated with the respective worksheet.
    `sort` ☰ Read/only: The worksheet's → Microsoft/Office/Excel/Object-Model/Sort[`sort` object].
    `standardHeight`, `standardWidth` ☰ Default height/width of rows/columns, measured in *points*.
    `tab` ☰ Returns a `tab` object (which can be used to change the color of the worksheet tab).
    `transitionExpEval` ☰
    `transitionFormEntry` ☰
    `type` ☰ Returns the worskheet type (`xlChart`, `xlDialogSheet`, `xlExcel4IntlMacroSheet`, `xlExcel4MacroSheet`, `xlWorksheet`)
    → Microsoft/Office/Excel/Object-Model/Worksheet/usedRange[`usedRange`] ☰
    → Microsoft/Office/Excel/Object-Model/Worksheet/visible[`visible`] ☰ Specifes if the sheet is visible, hidden or very hidden. The value of `visible` can be set to one of the corresponding constants `xlSheetVisible`, `xlSheetHidden` or `xlSheetVeryHidden`.
    `xmlDataQuery()` ☰
    `xmlMapQuery()` ☰

  table }

  { Collections of GUI elements

    table { ll

     `.buttons` ☰
     `.dropDowns` ☰
     `.checkBoxes` ☰
     `.spinners` ☰
     `.listBoxes` ☰
     `.listBoxes` ☰
     `.optionButtons` ☰
     `.groupBoxes` ☰
     `.labels` ☰
     `.scrollBars` ☰

    table }

    Compare with the `oleObjects` collection.

rem {
    Selection.OnAction = "Personal.xlsb!a1"
    ActiveSheet.Shapes("Scroll Bar 12")
rem }

  }
}
{ usedRange #excel-worksheet-usedRange

  → Microsoft/Office/Excel/Object-Model/Worksheet/usedRange[`usedRange`] returns the → Microsoft/Office/Excel/Object-Model/Range[range] that have had or still have a value.

}
{ calculate #excel-worksheet-calculate

  → Microsoft/Office/Excel/formulas#excel-formula-recalculation[Re-calculates the formulas] in a worksheet.

  A re-calculation of formulas can also be triggered with → Microsoft/Office/Excel/formulas#excel-formula-recalculation[some `F9` keyboard shortcuts].

  If a → Microsoft/Office/Excel/Object-Model/Workbook[Workbook's] → Microsoft/Office/Excel/Object-Model/Workbook#excel-workbook-forceFullCalculation[`forceFullCalculation`] property is set to true, the entire worksheet will be forced to be recalculated.

}
{ evaluate #excel-worksheet-evaluate

 `worksheet.evaluate(formula)` evaluates a → Microsoft/Office/Excel/formulas[formula] in the context of the worksheet on which `evaluate` was called. Compare with
  → Microsoft/Office/Excel/Object-Model/Application#excel-application-evaluate[`application.evaluate`].

}
{ getWorksheet

 `getWorksheet` is a function that returns a worksheet with a given name.

  If no such worksheet exists, it is created.

  gh|about-MS-Office-object-model|/Excel/Worksheet/getWorksheet.bas||

}
{ Deleting a worksheet #xls-sheet-delete

}
{ Keyboard shortcuts #xls-sheet-keboard-shortcuts

  The → Microsoft/Office/Excel#excel-key-shortcut[keyboard shorcuts] `ctrl+pageUp` and `ctrl+pageDown` rotate through worksheets.

  `alt+shift+F1` inserts a new worksheet.
  -
  The current worksheet can be → #xls-sheet-delete[deleted] with `alt+h` -> `d` -> `s` -> `enter`.
  This corresponds to the menu/ribbon sequence → Microsoft/Office/Excel/GUI/Ribbon/tabs/Home/Cells/Delete/Delete-Sheet[Home -> Cells -> Delete -> Delete Sheet].

}
{ TODO

code {
→ Microsoft/Office/Excel/Object-Model/Chart[activeSheet.chartObjects]("fooChart"). …
code }

}

sa:

  With → development/languages/VBA, the visibility of *gridlines* cannot be changed on the `worksheet` object, it must be changed in the → Microsoft/Office/Excel/Object-Model/Window[`window`] object (`displayGridlines = true|false`)
  -
  To show/hide gridlines with the GUI, one must go to → Microsoft/Office/Excel/GUI/Ribbon/tabs/Page-Layout/Sheet-Options/Gridlines[Page Layout -> Sheet Options -> Gridlines]

  An Excel worksheet can be exported from → development/databases/Access under the menu → Microsoft/Office/Access/GUI/Ribbon/tabs/External-Data/Export[External Data -> Export]

  → Microsoft/Office/Excel/GUI/Ribbon/tabs/Home/Cells/Format/Visibility/Hide-Unhide

  The → Microsoft/Office/Excel/Object-Model/Worksheets[`Worksheets`] and → Microsoft/Office/Excel/Object-Model/Sheets[`Sheets`] collection

  The → Microsoft/Office/Excel/Object-Model/parent[`parent`] property.

  → Microsoft/Office/Excel/Object-Model/Pages#pages-on-worksheet[Determining the number of pages] on a worksheet.

  The → Microsoft/Office/Excel/Object-Model/SortField[`sortField` object].

  → Microsoft/Office/Excel/Object-Model

  If `Sheet.xlt*` is found in → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART[`%appdata%\Microsoft\Excel\XLSTART`], it is used as a template file for new worksheets being created.

  The → Microsoft/Office/Excel/Object-Model/PageSetup[`PageSetup`] object control's a worksheet's pages attributes such as paper size, margins orientation, print area etc.

  → Microsoft/Office/Excel/Object-Model/Worksheet/_events[Worksheet events]

  The → development/languages/VBA/modules/Excel/ExcelHelpers#vba-mod-exh-resetExcelSheet[`resetExcelSheet()`] function of the
  → development/languages/VBA/modules/Excel/ExcelHelpers[ExcelHelpers VBA module].
