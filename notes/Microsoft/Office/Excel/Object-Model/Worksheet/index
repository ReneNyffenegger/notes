$ Excel Object Model: Worksheet
@ worksheet

A worksheet belongs to *one* → Microsoft/Office/Excel/Object-Model/Workbook[workbook]. 

The currently active worksheet can be found with → Microsoft/Office/Excel/Object-Model/Application#excel-application-active-objects[`application.activeSheet`].

→ Microsoft/Office/Excel/Object-Model/Worksheet/cells[`Worksheet.cells`] returns a → Microsoft/Office/Excel/Object-Model/Range[`Range` object] that consists of *all* cells in a Worksheet.

{ name

  Within a → Microsoft/Office/Excel/Object-Model/Workbook, a sheet is identified by a unique name. The name is subject to the following restrictions:
    • maximum length is 31 characters
    • the characters `\`, `/`, `?`, `*`, `[` and `]` are not allowed
    • the name cannot be empty (blank)

}
{ usedRange #excel-worksheet-usedRange

  → Microsoft/Office/Excel/Object-Model/Worksheet/usedRange[`usedRange`] returns the → Microsoft/Office/Excel/Object-Model/Range[range] that have had or still have a value.

}
{ calculate #excel-worksheet-calculate

  → Microsoft/Office/Excel/formulas#excel-formula-recalculation[Re-calculates the formulas] in a worksheet.

  A re-calculation of formulas can also be triggered with → Microsoft/Office/Excel/formulas#excel-formula-recalculation[some `F9` keyboard shortcuts].

  If a → Microsoft/Office/Excel/Object-Model/Workbook[Workbook's] → Microsoft/Office/Excel/Object-Model/Workbook#excel-workbook-forceFullCalculation[`forceFullCalculation`] property is set to true, the entire worksheet will be forced to be recalculated.

}
{ visible #excel-worksheet-visible

  A worksheet can be hidden by setting its property `.visible` to `xlSheetHidden` or `xlSheetVeryHidden`. If it is «only» hidden, the user sees the sheet name when right-clicking on any sheet name in the bottom of Excel.
  If the sheet is «very hidden», the user doesn't see the sheet anymore by clicking there.

  To show a sheet again with → development/languages/VBA, the property must be set to `xlSheetVisible`.
  -
  In the GUI, the visibility can be set in the → Microsoft/Office/Visual-Basic-Editor (→ Microsoft/Office/Excel#excel-key-shortcut[keyboard shortcut] `alt+F11`) in the properites sheet object (found under *Microsoft Excel Objects*).

}
{ getWorksheet

 `getWorksheet` is a function that returns a worksheet with a given name.

  If no such worksheet exists, it is created.

  gh|about-MS-Office-object-model|/Excel/Worksheet/getWorksheet.bas||

}
{ Deleting a worksheet

  One might want to set → Microsoft/Office/Object-Model/Application#ms-object-model-application-displayAlerts[`application.displayAlerts`] to → development/languages/VBA/language/datatypes/boolean[`false`] before deleting a worksheet
  so that the user is not prompted to confirm the deletion:
code {
dim ws as worksheet : set ws = sheets("fooBarBaz")
dim da as boolean   : da = application.displayAlerts
application.displayAlerts = false
ws.delete
application.displayAlerts = da
code }

  See also → development/languages/VBA/modules/Excel/ExcelHelpers#vba-mod-exh-deleteWorksheet[`deleteWorksheet()`] in → development/languages/VBA/modules/Excel/ExcelHelpers[ExcelHelpers].

}
{ Collections of GUI elements

  table { ll

    `.buttons` ☰
    `.dropDowns` ☰
    `.checkBoxes` ☰
    `.spinners` ☰
    `.listBoxes` ☰
    `.listBoxes` ☰
    `.optionButtons` ☰
    `.groupBoxes` ☰
    `.labels` ☰
    `.scrollBars` ☰

  table }

  Compare with the `oleObjects` collection.

rem {
    Selection.OnAction = "Personal.xlsb!a1"
    ActiveSheet.Shapes("Scroll Bar 12")
rem }

}

{ TODO

code {
→ Microsoft/Office/Excel/Object-Model/Chart[activeSheet.chartObjects]("fooChart"). …
code }

  { Name vs. Codename

    A worksheet (as well as other objects such as a → Microsoft/Office/Excel/Object-Model/Chart[`chart`]) has a `.name` and a `.codeName` property. These values are equal when
    the object is created but may be changed independently from each other.

    Apparently, the idea of code names is to use it in → development/languages/VBA like so (assuming that the code name of a sheet is `figures`):
code {
figures.cells(3, 2) = "Year 2019"
code }


  After creating a new → Microsoft/Office/Excel/Object-Model/Workbook:
code {
sheet1.name = "bar" ' Changes name of tab
sheet1.name = "baz" ' Change it again
? worksheets("bar").codeName ' Evaluates to "sheet1"

'
'  Change code name of sheet:
'
activeWorkbook.→ Microsoft/Office/Visual-Basic-Editor/Object-Model/VBProject[vbProject].→ Microsoft/Office/Visual-Basic-Editor/Object-Model/VBComponent[VBComponents]("Sheet1").name = "NewCodeNameForTheSheet"

'
'  Use new code name:
'
? newCodeNameForTheSheet.name ' Evaluates to "bar"
code }

  }
  { Hidden and very hidden sheets

    A worksheet can be hidden or very hidden, see the → https://docs.microsoft.com/en-us/office/vba/api/excel.xlsheetvisibility[`xlSheetVisibility`] enumeration).

  }
}

sa:

  With → development/languages/VBA, the visibility of *gridlines* cannot be changed on the `worksheet` object, it must be changed in the → Microsoft/Office/Excel/Object-Model/Window[`window`] object (`displayGridlines = true|false`)
  -
  To show/hide gridlines with the GUI, one must go to → Microsoft/Office/Excel/GUI/Ribbon/tabs/Page-Layout/Sheet-Options/Gridlines[Page Layout -> Sheet Options -> Gridlines]

  A sheet can be copied to a new workbook with the → Microsoft/Office/Excel/Object-Model/Worksheet/copy#excel-worksheet-copy-to-new-workbook[`.copy`] method.

  The → Microsoft/Office/Excel/Object-Model/Worksheets[`Worksheets`] and → Microsoft/Office/Excel/Object-Model/Sheets[`Sheets`] collection

  The → Microsoft/Office/Excel/Object-Model/parent[`parent`] property.

  The → Microsoft/Office/Excel#excel-key-shortcut[keyboard shorcuts] `ctrl+pageUp` and `ctrl+pageDown` rotate through worksheets.
  -
 `alt+shift+F1` inserts a new worksheet. The current worksheet can be deleted with `alt+h` -> `d` -> `s`.

  A worksheet's → Microsoft/Office/Excel/Object-Model/AutoFilter[`autoFilter`] object allows to show or hide rows (that is: to filter the rows) based on criteria of the values on that sheet.

  → Microsoft/Office/Excel/Object-Model/Pages#pages-on-worksheet[Determining the number of pages] on a worksheet.

  → Microsoft/Office/Excel/Object-Model

  If `Sheet.xlt*` is found in → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART[`%appdata%\Microsoft\Excel\XLSTART`]), it is used as a template file for new worksheets being created.

  The → Microsoft/Office/Excel/Object-Model/PageSetup[`PageSetup`] object control's a worksheet's pages attributes such as paper size, margins orientation, print area etc.
