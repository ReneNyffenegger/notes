$ Excel VBA: Worksheet.Name

Within a → Microsoft/Office/Excel/Object-Model/Workbook, a → Microsoft/Office/Excel/Object-Model/Worksheet[(work-)sheet] is identified by a unique name. The name is subject to the following restrictions:
  • maximum length is 31 characters
  • the characters `\`, `/`, `?`, `*`, `[` and `]` are not allowed
  • the name cannot be empty (blank)

{ Name vs. Codename #xls-sheet-name-vs-codename

  A worksheet also has a `.codeName` property (as also have other objects such as a → Microsoft/Office/Excel/Object-Model/Chart[`chart`]).

  These values are equal when the object is created but may be changed independently from each other.

  Apparently, the idea of code names is to use it in → development/languages/VBA like so (assuming that the `codename` property value of a sheet is `figures`.
code {
figures.cells(3, 2) = "Year 2019"
code }

    After creating a new → Microsoft/Office/Excel/Object-Model/Workbook:
code {
sheet1.name = "bar" ' Changes name of tab
sheet1.name = "baz" ' Change it again
? worksheets("bar").codeName ' Evaluates to "sheet1"

'
'  Change code name of sheet is not possible at run time, so the
'  following line throws Run-time error 32183: Application-defined or object-defined error.
'
activeWorkbook.→ Microsoft/Office/Visual-Basic-Editor/Object-Model/VBProject[vbProject].→ Microsoft/Office/Visual-Basic-Editor/Object-Model/VBComponent[VBComponents]("Sheet1").name = "NewCodeNameForTheSheet"

'
'  Use new code name:
'
? newCodeNameForTheSheet.name ' Evaluates to "bar"
code }

    An example how the value of `.codeName` might be changed after creating w worksheet programmatically is found → Microsoft/Office/VBScript-App-Creator/examples/Excel/codeName[here].

}

sa:
  → Microsoft/Office/Excel/Object-Model/Worksheet
