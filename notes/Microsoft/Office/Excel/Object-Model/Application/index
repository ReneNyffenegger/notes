$ Excel Object Model: Application

{ Methods and properties

  table { ll

   `activateMicrosoftApp()` ☰ Activates or starts (another) → Microsoft/Office application, for example → Microsoft/Office/Word[MS Word]: `application.activateMicrosoftApp xlMicrosoftWord`.
   `activeCell` ☰
   `activeChart` ☰
   `activeEncryptionSession` ☰
   `activePrinter` ☰
   `activeProtectedViewWindow` ☰
   `activeSheet` ☰
   `activeWindow` ☰
   `activeWorkbook` ☰

   `addCustomList()` ☰
   `addIns` ☰
   `addIns2` ☰
   `alertBeforeOverwriting` ☰
   `altStartupPath` ☰
   `alwaysUseClearType` ☰
   `application` ☰
   `arbitraryXMLSupportAvailable` ☰
   `askToUpdateLinks` ☰
   `assistance` ☰
   `autoCorrect` ☰
   `autoFormatAsYouTypeReplaceHyperlinks` ☰
   `automationSecurity` ☰
   `autoPercentEntry` ☰
   `autoRecover` ☰
   `build` ☰
   `calculate()` ☰
   `calculateBeforeSave` ☰
   `calculateFull()` ☰
   `calculateFullRebuild()` ☰
   `calculateUntilAsyncQueriesDone()` ☰
   `calculation` ☰
   `calculationInterruptKey` ☰
   `calculationState` ☰
   `calculationVersion` ☰
   → Microsoft/Office/Excel/Object-Model/Application/caller[`caller`] ☰
   `canPlaySounds` ☰ compare with `enableSound`
   `canRecordSounds` ☰
   → #excel-application-caption[`caption`] ☰
   `cellDragAndDrop` ☰
   → #excel-application-cells[`cells`] ☰
   `centimetersToPoints()` ☰
   `chartDataPointTrack` ☰
   `charts` ☰
   `checkAbort()` ☰
   `checkSpelling()` ☰
   `clipboardFormats` ☰
   `clusterConnector` ☰
   `columns` ☰
   `cOMAddIns` ☰
   `commandBars` ☰
   `commandUnderlines` ☰
   `constrainNumeric` ☰
   `controlCharacters` ☰
   → Microsoft/Office/Excel/Object-Model/Application[`convertFormula()`] ☰ converts → Microsoft/Office/Excel/formulas[formulas] between → Microsoft/Office/Excel/Object-Model/Application/referenceStyle[reference styles] (A1 or R1C1) and/or between relative and absolute addresses.
   `copyObjectsWithCells` ☰
   `creator` ☰
   → Microsoft/Office/Excel/Object-Model/Application[`cursor`] ☰
   `cursorMovement` ☰
   `customListCount` ☰
   → Microsoft/Office/Excel/Object-Model/Application[`cutCopyMode`] ☰
   `dataEntryMode` ☰

   `DDEAppReturnCode` ☰
   `DDEExecute()` ☰
   `DDEInitiate()` ☰
   `DDEPoke()` ☰
   `DDERequest()` ☰
   `DDETerminate()` ☰

   `decimalSeparator` ☰ The decimal separator character. See also `thousandsSeparator`, `useSystemSeparators` and → Microsoft/Office/Excel/Object-Model/Range/numberFormat[`range.numberFormat`]
   `defaultFilePath` ☰
   `defaultSaveFormat` ☰
   `defaultSheetDirection` ☰
   `defaultWebOptions` ☰
   `deferAsyncQueries` ☰
   `deleteCustomList()` ☰
   `dialogs` ☰

   `displayAlerts` ☰
   `displayClipboardWindow` ☰
   `displayCommentIndicator` ☰
   `displayDocumentActionTaskPane` ☰
   `displayDocumentInformationPanel` ☰
   `displayExcel4Menus` ☰
   `displayFormulaAutoComplete` ☰
   `displayFormulaBar` ☰
   `displayFullScreen` ☰
   `displayFunctionToolTips` ☰
   `displayInsertOptions` ☰
   `displayNoteIndicator` ☰
   `displayPasteOptions` ☰
   `displayRecentFiles` ☰
   `displayScrollBars` ☰
   `displayStatusBar` ☰
   `displayXMLSourcePane()` ☰

   `doubleClick()` ☰
   `editDirectlyInCell` ☰

   `enableAnimations` ☰
   `enableAutoComplete` ☰
   `enableCancelKey` ☰
   `enableCheckFileExtensions` ☰
   → Microsoft/Office/Excel/Object-Model/Application/enableEvents[`enableEvents`] ☰ controls whether an event triggers the corresponding event procedure.
   `enableLargeOperationAlert` ☰
   `enableLivePreview` ☰
   `enableMacroAnimations` ☰
   `enableSound` ☰ Compare with `canPlaySounds`

   → Microsoft/Office/Excel/Object-Model/Application/errorCheckingOptions[`errorCheckingOptions`] ☰
   → #excel-application-evaluate[`evaluate()`] ☰
   `excel4IntlMacroSheets` ☰
   `excel4MacroSheets` ☰
   → #excel-application-executeExcel4Macro[`executeExcel4Macro()`] ☰
   `extendList` ☰
   `featureInstall` ☰
   `fileConverters` ☰
   `fileDialog` ☰
   `fileExportConverters` ☰
   `fileValidation` ☰
   `fileValidationPivot` ☰
   `findFile()` ☰
   `findFormat` ☰
   `fixedDecimal` ☰
   `fixedDecimalPlaces` ☰
   `flashFill` ☰
   `flashFillMode` ☰
   `formulaBarHeight` ☰
   `generateGetPivotData` ☰
   `generateTableRefs` ☰
   `getCustomListContents()` ☰
   `getCustomListNum()` ☰
   `getOpenFilename()` ☰
   `getPhonetic()` ☰
   `getSaveAsFilename()` ☰
   → Microsoft/Office/Excel/Object-Model/Application[`goto()`] ☰ allows to jump to a specific → Microsoft/Office/Excel/Object-Model/Range/cell on a → Microsoft/Office/Excel/Object-Model/Worksheet.
   `height` ☰
   `help()` ☰
   `highQualityModeForGraphics` ☰
   `hinstance` ☰
   `hinstancePtr` ☰
   `hWnd` ☰
   `ignoreRemoteRequests` ☰
   `inchesToPoints()` ☰
   → Microsoft/Office/Excel/Object-Model/Application/inputBox[`inputBox()`] ☰
   `interactive` ☰
   → Microsoft/Office/Excel/Object-Model/Application[`international`] ☰ returns → Windows/development/Internationalization/locale related information.
   `intersect()` ☰
   `isSandboxed` ☰
   `iteration` ☰
   `languageSettings` ☰
   `largeOperationCellThousandCount` ☰
   `left` ☰
   `libraryPath` ☰
   `macroOptions()` ☰
   `mailLogoff()` ☰
   `mailLogon()` ☰
   `mailSession` ☰
   `mailSystem` ☰
   `mapPaperSize` ☰
   `mathCoprocessorAvailable` ☰
   `maxChange` ☰
   `maxIterations` ☰
   `measurementUnit` ☰
   `mergeInstances` ☰
   `mouseAvailable` ☰
   `moveAfterReturn` ☰
   `moveAfterReturnDirection` ☰
   `multiThreadedCalculation` ☰
   `name` ☰
   `names` ☰
   `networkTemplatesPath` ☰
   `newWorkbook` ☰
   `nextLetter()` ☰
   `ODBCErrors` ☰
   `ODBCTimeout` ☰
   `OLEDBErrors` ☰
   → #excel-application-onKey[`onKey()`] ☰
   `onRepeat()` ☰
   → Microsoft/Office/Excel/Object-Model/Application/onTime[`onTime()`] ☰ Compare with → Microsoft/Office/Excel/Object-Model/Application/wait[`wait`]
   `onUndo()` ☰
   `onWindow` ☰
   → #excel-application-operatingSystem[`operatingSystem`] ☰
   `organizationName` ☰
   `parent` ☰
   `path` ☰
   `pathSeparator` ☰
   `pivotTableSelection` ☰
   `previousSelections` ☰
   `printCommunication` ☰
   `productCode` ☰
   `promptForSummaryInfo` ☰
   `protectedViewWindows` ☰
   `quickAnalysis` ☰
   `quit()` ☰
   `range` ☰
   `ready` ☰
   `recentFiles` ☰
   `recordMacro()` ☰
   `recordRelative` ☰
   → Microsoft/Office/Excel/Object-Model/Application/referenceStyle[`referenceStyle`] ☰
   `registeredFunctions` ☰
   `registerXLL()` ☰
   `repeat()` ☰
   `replaceFormat` ☰
   `rollZoom` ☰
   `rows` ☰
   `RTD` ☰
   → #excel-application-run[`run()`] ☰
   `saveWorkspace()` ☰
   → #excel-application-screenUpdating[`screenUpdating`] ☰
   → #excel-application-selection[`selection`] ☰
   `sendKeys()` ☰
   `sensitivityLabelPolicy` ☰
   `sharePointVersion()` ☰
   `sheets` ☰
   → #excel-application-sheetsInNewWorkbook[`sheetsInNewWorkbook`] ☰
   `showChartTipNames` ☰
   `showChartTipValues` ☰
    → #excel-application-showDevTools[`showDevTools`] ☰
   `showMenuFloaties` ☰
   `showQuickAnalysis` ☰
   `showSelectionFloaties` ☰
   `showStartupDialog` ☰
   `showToolTips` ☰
   `smartArtColors` ☰
   `smartArtLayouts` ☰
   `smartArtQuickStyles` ☰
   `speech` ☰
   `spellingOptions` ☰
   `standardFont` ☰
   `standardFontSize` ☰
   → Microsoft/Office/Excel/Object-Model/Application/startupPath[`startupPath`] ☰
   `statusBar` ☰
   `templatesPath` ☰
   `thisCell` ☰
   → #excel-application-thisWorkbook[`thisWorkbook`] ☰
   `thousandsSeparator` ☰ See also `decimalSeparator`, `useSystemSeparators` and → Microsoft/Office/Excel/Object-Model/Range/numberFormat[`range.numberFormat`]
   `top` ☰
   `transitionMenuKey` ☰
   `transitionMenuKeyAction` ☰
   `transitionNavigKeys` ☰
   `undo()` ☰
   `union()` ☰
   `usableHeight` ☰
   `usableWidth` ☰
   `useClusterConnector` ☰
   `usedObjects` ☰
   `userControl` ☰
   `userLibraryPath` ☰
   `userName` ☰
   `useSystemSeparators` ☰ See also `decimalSeparator`, `thousandsSeparator` and → Microsoft/Office/Excel/Object-Model/Range/numberFormat[`range.numberFormat`]
   `value` ☰
   `VBE` ☰ The «root object» of the → Microsoft/Office/Visual-Basic-Editor/Object-Model[VB Editor Object Model]
   `version` ☰
   `visible` ☰
   → Microsoft/Office/Excel/Object-Model/Application[`volatile()`] ☰ can be used to mark a → development/languages/VBA/language/subs-and-functions[user defined function] as *volatile* which affects when this function is called for → Microsoft/Office/Excel/formulas#excel-formula-recalculation[formula recalculation purposes].
   → Microsoft/Office/Excel/Object-Model/Application/wait[`wait()`] ☰ Compare with → Microsoft/Office/Excel/Object-Model/Application/onTime[`onTime`]
   `warnOnFunctionNameConflict` ☰
   `watches` ☰
   `width` ☰
   `windows` ☰
   `windowsForPens` ☰
   `windowState` ☰
   `workbooks` ☰
   `worksheetFunction` ☰
   `worksheets` ☰

  table }

}

{ onKey #excel-application-onKey

 `application.onKey` allows to programatically set a shortcut key to invoke a function.

  table { ll
    `call application.onKey("^q"   , "ctrl_q" )` ☰ Map *ctrl+q* to the sub `ctrl_q`
    `call application.onKey("%a"   , "alt_a"  )` ☰ Map *alt+a* to the sub `alt_a`
    `call application.onKey("+s"   , "shift_s")` ☰ Map *shift+s* to the sub `shift_s`
    `call application.onKey("{F12}", "f_12"   )` ☰ Map a function-key.
  table }

  In order to disable an association, the second parameter must be omitted:
code {
call application.onKey("^q")
code }

  { Lifespan and scope of shortcut keys

    The assigned short cut keys are stored with the application (not the → Microsoft/Office/Excel/Object-Model/Workbook) until the Excel instance is shut down.

    Because a shortcut is not associated with a Workbook, the same shortcut key cannot be assigned to a per-Workbook function at the same time.

  }

}
{ operatingSystem #excel-application-operatingSystem

  `application.operatingSystem` returns some basic information about the → Windows/versions[Windows version] and bitness, such as
code {
Windows (32-bit) NT 6.01
code }

  See also → development/languages/VBA/language/32-vs-64-bit

}
{ run #excel-application-run

 `Application.run` can be used to dynamically run a → development/languages/VBA/language/subs-and-functions[sub] by a name stored in a variable

  gh|about-MS-Office-object-model|/Excel/Application/run.bas||

  Compare with the → development/languages/VBA[Visual Basic for Application] function
  → development/languages/VBA/functions#vba-callByName[`callByName`] and
  → Microsoft/Office/Excel/Object-Model/Application/onTime[`application.onTime`].

}
{ display* properties #excel-application-display-properties

code {
application.displayAlerts
application.displayClipboardWindow
application.displayCommentIndicator             ' returns numerical value…
application.displayDocumentActionTaskPane
application.displayDocumentInformationPanel
application.displayExcel4Menus
application.displayFormulaAutoComplete
application.displayFormulaBar                   ' Compare with option Formula Bar under the Menu → Microsoft/Office/Excel/GUI/Ribbon/tabs/View/Show[View -> Show]. Not the same thing as → Microsoft/Office/Excel/Object-Model/WorksheetView[worksheetView.displayFormulas]
application.displayFullScreen
application.displayFunctionToolTips
application.displayInsertOptions
application.displayNoteIndicator
application.displayPasteOptions
application.displayRecentFiles
application.displayScrollBars
application.displayStatusBar
code }

   Compare with the → Microsoft/Office/Excel/Object-Model/Window#excel-obj-window-general-display[`.display*` properties] of the
   → Microsoft/Office/Excel/Object-Model/Window[`window` object] and the
   → Microsoft/Office/Excel/Object-Model/WorksheetView#excel-worksheetView-display-properties[`.display*` properties] of the
   → Microsoft/Office/Excel/Object-Model/WorksheetView[`worksheetView` object].

}
{ screenUpdating #excel-application-screenUpdating

  The → development/languages/VBA/language/datatypes/boolean[boolean] `screenUpdating` controls if the screen is updated while a macro or function is running.

  Turning it off can significantly improve performance if the function changes many values in a → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].

  gh|about-MS-Office-object-model|/Excel/Application/screenUpdating.bas||

  Performance of macros/functions might also be improved by setting → #excel-application-calculation[`application.calculation`] to `xlCalculationManual`.

  See also → Microsoft/Office/Excel/Object-Model/Range/select[`range.select`].

}
{ sheetsInNewWorkbook #excel-application-sheetsInNewWorkbook

  This value corresponds to the number of → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets] with which a new
  → Microsoft/Office/Excel/Object-Model/Workbook is created.

  This value is stored in the → Windows/registry in the value → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Excel/Options#reg-excel-DefSheets[`DefSheets`] under the key
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Excel/Options[`HKEY_CURRENT_USER\Software\Microsoft\Office\_version_\Excel\Options`].

}
{ showDevTools #excel-application-showDevTools

  The (read/write) → development/languages/VBA/language/datatypes/boolean[boolean] value of `showDevTool` corresponds to the visibility of the
  → Microsoft/Office/Excel/GUI/Ribbon/tabs/Developer#excel-show-developer-tab[Developer tab in the Ribbon].

}
{ calculation #excel-application-calculation

 `application.calculation` can be set to one of the three enumeration values of `xlCalculation`:
  table { lrl
    `xlCalculationAutomatic` ☰ -4105 ☰ → Microsoft/Office/Excel automatically → Microsoft/Office/Excel/formulas#excel-formula-recalculation[recalculates formulas]
    `xlCalculationManual` ☰ -4135 ☰ Recalculation of → Microsoft/Office/Excel/formulas[formulas] needs to be requested by user (→ Microsoft/Office/Excel#excel-key-shortcut[shortcuts] with a combination of `F9` and `alt`, `ctrl`, `shift`)
    `xlCalculationSemiautomatic` ☰ 2 ☰ Automatic recalculation except for tables?
  table }

  Setting `calculation` to `xlCalculationManual` might speed up macro/formula performance. Compare with the → #excel-application-screenUpdating[`application.screenUpdating`] property.

  See also → Microsoft/Office/Excel/formulas#excel-formula-recalculation[formula recalculation].

}
{ selection #excel-application-selection

  The `.selection` property refers to the → Microsoft/Office/Excel/Object-Model/Range[range] that is currently selected.

  gh|about-MS-Office-object-model|/Excel/Application/selection.bas||

  When the current selection changes, the → Microsoft/Office/Excel/Object-Model/Worksheet/_events[worksheet event] `selectionChange` is fired.

  A range can be selected with the → Microsoft/Office/Excel/Object-Model/Range/select[`range.select` method].

}
{ active objects #excel-application-active-objects

  The currently active → Microsoft/Office/Excel/Object-Model/Workbook[woorkbook], → Microsoft/Office/Excel/Object-Model/Worksheet[woorksheet], → Microsoft/Office/Excel/Object-Model/Range/cell[cell] (which is a 
  → Microsoft/Office/Excel/Object-Model/Range[range]) and window can be found with the `active*` properties:
  
  gh|about-MS-Office-object-model|/Excel/Application/activeObjects.bas||

  If multiple cells are selected, `activeCell` returns the top left selected → Microsoft/Office/Excel/Object-Model/Range/cell.

  There is also
    • → Microsoft/Office/Excel/Object-Model/Chart[`activeChart`]
    • `activeDialog`
    • `activeEncryptionSession`
    • `activeMenuBar`
    • `activePrinter`
    • `activeProtectedViewWindow`
    • `activeWindow`

  Compare with → #excel-application-thisWorkbook[`thisWorkbook`]

}
{ thisWorkbook #excel-application-thisWorkbook

 `thisWorkbook` returns the → Microsoft/Office/Excel/Object-Model/Workbook in which a macro is running.

  Compare with → #excel-application-active-objects[`activeWorkbook`]

}
{ cells #excel-application-cells

 `application.cells(row, column)` can be used to return a → Microsoft/Office/Excel/Object-Model/Range[range object] consisting of one → Microsoft/Office/Excel/Object-Model/Range/cell.

  gh|about-MS-Office-object-model|/Excel/Application/cells.bas||

}
{ functions #excel-application-functions

  The application object exposes some functions that can be applied on → Microsoft/Office/Excel/Object-Model/Range[ranges].

  gh|about-MS-Office-object-model|/Excel/Application/functions.bas||

  Compare with → Microsoft/Office/Excel/Object-Model/WorksheetFunction[WorksheetFunction].

}
{ evaluate #excel-application-evaluate

 `Application.evaluate` allows to dynamically evaluate → Microsoft/Office/Excel/formulas[Excel formulas] (which in turn might call → Microsoft/Office/Excel/functions[worksheet functions]):
  gh|about-MS-Office-object-model|/Excel/Application/evaluate.bas||

  Brackets are a short hand notation for `evaluate`:
  gh|about-MS-Office-object-model|/Excel/Application/brackets.bas||

 `application.evaluate(formula)` evaluates `formula` in the context of → Microsoft/Office/Excel/Object-Model/Application/index#excel-application-active-objects[`activeWorksheet`]. In order to evaluate
  a formula on a given sheet, → Microsoft/Office/Excel/Object-Model/Worksheet#excel-worksheet-evaluate[`worksheet.evaluate()`] should be used.

  See also → development/languages/VBA/language/arrays#vba-array-brackets[creating arrays with brackets].

}
{ match #excel-application-match

  Among other usages, `match()` can be used to test if an → development/languages/VBA/language/arrays[VBA array] contains a given element.
  -
  The following example finds that `baz` is interesting, but `bla` is not.

  gh|about-MS-Office-object-model|/Excel/Application/match.bas||

  It turns out that this example does not work with `→ Microsoft/Office/Excel/Object-Model/WorksheetFunction[worksheetFunction].match()`.

}
{ caption #excel-application-caption

  Apparently, the `caption` property can be used to bring an Excel application to the front:
code {
→ development/languages/VBA/language/statements/appActivate[appActivate] application.caption
code }

}
{ executeExcel4Macro #excel-application-executeExcel4Macro

  An example of how `executeExcel4Macro` might be used is to
  → Microsoft/Office/Excel/GUI/Ribbon#xls-show-hide-ribbon-vba[show or hide Excel's Ribbon]
  
}


sa:

  → Microsoft/Office/Excel/Object-Model/Application/set-operations[Set operations] for → Microsoft/Office/Excel/Object-Model/Range[ranges]: → Microsoft/Office/Excel/Object-Model/Application/set-operations[`union` and `intersect`].

  The → Microsoft/Office/Object-Model/Application[`application` object] of the → Microsoft/Office/Object-Model[Office object model]

  The → Microsoft/Office/Excel/Object-Model
