$ Office Object Model: Excel - Application

{ goto #excel-application-goto

 `application.goto` allows to jump to a specific cell on a → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].

  gh|about-MS-Office-object-model|/Excel/Application/goto.bas||
  
  { Jumping to a procedure (sub or function)

   `application.goto` allows to jump to the definition of a procedure in the → Microsoft/Office/Visual-Basic-Editor[Visual Basic for Application Editor] if the value of the string is the name of a procedure:
code {
application.goto "SomeSub", scroll = true
code }

  }

}
{ inputBox

  → Microsoft/Office/Excel/Object-Model/Application/inputBox[`inputBox()`] lets the user enter different values or
  → Microsoft/Office/Excel/Object-Model/Range[range].

}
{ onKey #excel-application-onKey

 `application.onKey` allows to programatically set a shortcut key to invoke a function.

  table { ll
    `call application.onKey("^q"   , "ctrl_q" )` ☰ Map *ctrl+q* to the sub `ctrl_q`
    `call application.onKey("%a"   , "alt_a"  )` ☰ Map *alt+a* to the sub `alt_a`
    `call application.onKey("+s"   , "shift_s")` ☰ Map *shift+s* to the sub `shift_s`
    `call application.onKey("{F12}", "f_12"   )` ☰ Map a function-key.
  table }

  In order to disable an association, the second parameter must be omitted:
code {
call application.onKey("^q")
code }

  { Lifespan and scope of shortcut kezs

    The assigned short cut keys are stored with the application (not the → Microsoft/Office/Excel/Object-Model/Workbook) until the Excel instance is shut down.

    Because a shortcut is not associated with a Workbook, the same shortcut key cannot be assigned to a per-Workbook function at the same time.

  }

}
{ operatingSystem #excel-application-operatingSystem

  `application.operatingSystem` returns some basic information about the → Windows/versions[Windows version] and bitness, such as
code {
Windows (32-bit) NT 6.01
code }

  See also → development/languages/VBA/language/32-vs-64-bit

}
{ run #excel-application-run

  `Application.run` can be used to dynamically run a → development/languages/VBA/language/subs-and-functions[sub] by a name stored in a variable

  gh|about-MS-Office-object-model|/Excel/Application/run.bas||

  Compare with the → development/languages/VBA[Visual Basic for Application] function
  → development/languages/VBA/functions#vba-callByName[`callByName`].

}
{ screenUpdating #excel-application-screenUpdating

  The → development/languages/VBA/language/datatypes/boolean[boolean] `screenUpdating` controls if the screen is updated while a macro or function is running.

  Turning it off can significantly improve performance if the function changes many values in a → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].

  gh|about-MS-Office-object-model|/Excel/Application/screenUpdating.bas||

  Performance of macros/functions might also be improved by setting → #excel-application-calculation[`application.calculation`] to `xlCalculationManual`.

}
{ showDevTools #excel-application-showDevTools

  The (read/write) → development/languages/VBA/language/datatypes/boolean[boolean] value of `showDevTool` corresponds to the visibility of the
  → Microsoft/Office/Excel#excel-display-developer-tab[Developer tab in the Ribbon].

}
{ calculation #excel-application-calculation

 `application.calculation` can be set to one of the three enumeration values of `xlCalculation`:
  table { lrl
    `xlCalculationAutomatic` ☰ -4105 ☰ → Microsoft/Office/Excel automatically → Microsoft/Office/Excel/formulas#excel-formula-recalculation[recalculates formulas]
    `xlCalculationManual` ☰ -4135 ☰ Recalculation of → Microsoft/Office/Excel/formulas[formulas] needs to be requested by user (→ Microsoft/Office/Excel#excel-key-shortcut[shortcuts] with a combination of `F9` and `alt`, `ctrl`, `shift`)
    `xlCalculationSemiautomatic` ☰ 2 ☰ Autmatic recalculation except for tables?
  table }

  Setting `calculation` to `xlCalculationManual` might speed up macro/formula performance. Compare with the → #excel-application-screenUpdating[`application.screenUpdating`] property.

  See also → Microsoft/Office/Excel/formulas#excel-formula-recalculation[formula recalculation].

}
{ startupPath

  TODO: see → Microsoft/Office/Excel/Object-Model/Application/startupPath[here].

}
{ wait #excel-application-wait

 `Application.wait` can be used to wait (other → development/languages[programming languages] call it sleep) until a specific time is reached.

  gh|about-MS-Office-object-model|/Excel/Application/wait.bas||

  Unfortunately, `application.wait` is not available in → Microsoft/Office/Word/Object-Model/Application[Word's `application` object].

  See also the Windows API function → development/languages/VBA/Win-API/examples/Sleep[Sleep].

}
{ selection

  gh|about-MS-Office-object-model|/Excel/Application/selection.bas||

}
{ active objects #excel-application-active-objects

  The currently active → Microsoft/Office/Excel/Object-Model/Workbook[woorkbook], → Microsoft/Office/Excel/Object-Model/Worksheet[woorksheet], → Microsoft/Office/Excel/Object-Model/Range/cell[cell] (which is a 
  → Microsoft/Office/Excel/Object-Model/Range[range]) and window can be found with the `active*` functions:
  
  gh|about-MS-Office-object-model|/Excel/Application/activeObjects.bas||

  If multiple cells are selected, `activeCell` returns the top left selected → Microsoft/Office/Excel/Object-Model/Range/cell.

  Compare with → #excel-application-thisWorkbook[`thisWorkbook`]

}
{ thisWorkbook #excel-application-thisWorkbook

 `thisWorkbook` returns the → Microsoft/Office/Excel/Object-Model/Workbook in which a macro is running.

  Compare with → #excel-application-active-objects[`activeWorkbook`]

}
{ cells #excel-application-cells

 `application.cells(row, column)` can be used to return a → Microsoft/Office/Excel/Object-Model/Range[range object] consisting of one *cell*.

  gh|about-MS-Office-object-model|/Excel/Application/cells.bas||

}
{ functions #excel-application-functions

  The application object allows to call function on a → Microsoft/Office/Excel/Object-Model/Range[Range].

  gh|about-MS-Office-object-model|/Excel/Application/functions.bas||

  Compare with → Microsoft/Office/Excel/Object-Model/WorksheetFunction[WorksheetFunction].

}
{ evaluate #excel-application-evaluate

 `Application.evaluate` allows to dynamically call a functions:
  gh|about-MS-Office-object-model|/Excel/Application/evaluate.bas||

  Brackets are a short hand notation for evaluate:
  gh|about-MS-Office-object-model|/Excel/Application/brackets.bas||

  See also → development/languages/VBA/language/arrays#vba-array-brackets[creating arrays with brackets].

}
{ match #excel-application-match

  Among other usages, `match()` can be used to test if an → development/languages/VBA/language/arrays[VBA array] contains a given element.
  -
  The following example finds that `baz` is interesting, but `bla` is not.

  gh|about-MS-Office-object-model|/Excel/Application/match.bas||

  It turns out that this example does not work with `→ Microsoft/Office/Excel/Object-Model/WorksheetFunction[worksheetFunction].match()`.

}
{ caption #excel-application-caption

  Apparently, the `caption` property can be used to bring an Excel application to the front:
code {
→ development/languages/VBA/language/statements/appActivate[appActivate] application.caption
code }

}


sa:

  The → Microsoft/Office/Excel/Object-Model/Application/international[`.international`] property returns → Windows/development/Internationalization/locale related information.

  → Microsoft/Office/Excel/Object-Model/Application/set-operations[Set operations] for → Microsoft/Office/Excel/Object-Model/Range[ranges]: → Microsoft/Office/Excel/Object-Model/Application/set-operations[`union` and `intersect`].

  → Microsoft/Office/Object-Model/Application

  → Microsoft/Office/Excel/Object-Model
