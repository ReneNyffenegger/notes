$ Excel Object Model: Workbook
@ workbook

A *Workbook object* is the object that corresponds to an Excel file (`*.xlsm`, `*.xlsx`, etc.).

A *workbook* consisist of multiple → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets].

The currently active workbook can be found with → Microsoft/Office/Excel/Object-Model/Application#excel-application-active-objects[`application.activeWorkbook`].
-
The workbook in which a macro is running is returned by → Microsoft/Office/Excel/Object-Model/Application#excel-application-thisWorkbook[`application.thisWorkbook`].

A workbook has *one* corresponding → Microsoft/Office/Visual-Basic-Editor/Object-Model/VBProject[VBProject] in the
→ Microsoft/Office/Visual-Basic-Editor/Object-Model[VBE object model]. It can be accessed by the `vbProject` property of the workbook.

A new workbook is created with → Microsoft/Office/Excel/Object-Model/workbooks#excel-workbooks-add[`application.workbooks.add`].

{ Methods and properties

  table { ll

    `acceptAllChanges()`, `rejectAllChanges()` ☰
    `accuracyVersion` ☰
    `activate()` ☰ Activates the first → Microsoft/Office/Excel/Object-Model/Window[`window`] that is associated with the workbook
    `activeChart` ☰
    `activeSheet` ☰
    `activeSlicer` ☰
    `addToFavorites()` ☰
    `application` ☰
    `applyTheme()` ☰
    `autoSaveOn` ☰
    `autoUpdateFrequency` ☰
    `autoUpdateSaveChanges` ☰
    → Microsoft/Office/Excel/Object-Model/Workbook/breakLink[`breakLink()`] ☰ Converts → Microsoft/Office/Excel/formulas[formulas] that refer to other workbooks or OLE sources to values.
    `builtinDocumentProperties` ☰
    `calculationVersion` ☰
    `canCheckIn()` ☰
    `caseSensitive` ☰ specify if text is compared case sensitively or case insensitively.
    `changeFileAccess()` ☰
    `changeHistoryDuration` ☰
    `changeLink()` ☰ Replaces links that refer to a given workbook with links that refer to another workbook.
    `chartDataPointTrack` ☰
    `charts` ☰
    `checkCompatibility` ☰
    `checkIn()` ☰
    `checkInWithVersion()` ☰
    → Microsoft/Office/Excel/Object-Model/Workbook/close[`close()`] ☰
    `codeName` ☰
    `colors` ☰ Sets or gets all or one of the 56 entries of the workbook's color palette.
    `commandBars` ☰ returns a → Microsoft/Office/Excel/Object-Model/CommandBars[`commandBars`] object
    `conflictResolution` ☰
    → Microsoft/Office/Excel/Object-Model/Workbook/connections[`connections`] ☰ 
    `connectionsDisabled` ☰
    `container` ☰
    `contentTypeProperties` ☰ Returns a collection of `MetaProperty` objects which describe the workbook's → development/Data/metadata.
    `convertComments()` ☰ Converts legacy comments and notes to modern comments.
    `createBackup` ☰ If `true`, Excel automatically creates a backup when the workbook is saved (`save()`)
    `createForecastSheet()` ☰
    `creator` ☰
    → Microsoft/Office/Excel/Object-Model/Workbook/customDocumentProperties[`customDocumentProperties`] ☰
    `customViews` ☰
    `customXMLParts` ☰
    `date1904` ☰ specifies if the workbook uses the 1904 date system.
    `defaultPivotTableStyle` ☰
    `defaultSlicerStyle` ☰
    `defaultTableStyle` ☰
    `defaultTimelineStyle` ☰
    `deleteNumberFormat()` ☰ Deletes a custom number format (TODO: → Microsoft/Office/Excel/Object-Model/Range/numberFormat[`range.numberFormat`])
    `displayDrawingObjects` ☰
    `displayInkComments` ☰
    `documentInspectors` ☰
    `documentLibraryVersions` ☰
    `doNotPromptForConvert` ☰
    `enableAutoRecover` ☰ 
    `enableConnections()` ☰ Enable data connections
    `encryptionProvider` ☰
    `endReview()` ☰  See also `sendForReview()`
    `envelopeVisible` ☰
    `excel4IntlMacroSheets` ☰
    `excel4MacroSheets` ☰
    `excel8CompatibilityMode` ☰
    `exclusiveAccess()` ☰
    → Microsoft/Office/Excel/Object-Model/Workbook/exportAsFixedFormat[`exportAsFixedFormat()`] ☰ publishes the content of a workbook in the → design/graphic/pdf or XPS format
    `fileFormat` ☰ returns a document's format, an example is → Microsoft/Office/Excel/Object-Model/Workbook/fileFormat[here]. (See also `saveAs`)
    `final` ☰
    `followHyperlink()` ☰
    → #excel-workbook-forceFullCalculation[`forceFullCalculation`] ☰
    `forwardMailer()` ☰
    → #excel-worksbook-fullName[`fullName`] ☰ path and filename of the workbook
    `fullNameURLEncoded` ☰ → development/web/URI-URL-URN-IRI-URC#url-encoding[URL encoded] path and filename
    `getWorkflowTasks()` ☰
    `getWorkflowTemplates()` ☰
    `hasPassword` ☰ Evaluates to `true` if the workbook is protected with a → development/security/password[password].
    `hasVBProject` ☰ `true` if the workbook has an associated → development/languages/VBA#vba-project[VBA project]
    `highlightChangesOnScreen` ☰ Controls how changes are highlighted in a *shared workbook*.
    `highlightChangesOptions()` ☰
    `iconSets` ☰
    `inactiveListBorderVisible` ☰
    `isAddin` ☰ `true` if the workbook is running as an → Microsoft/Office/Excel/Add-ins[Add-in].
    `isInplace` ☰
    `keepChangeHistory` ☰
    `linkInfo()` ☰
    `linkSources()` ☰ Returns an → development/languages/VBA/language/arrays that contains the names of linked documents, editions, DDE or OLE servers.
    `listChangesOnNewSheet` ☰
    `lockServerFile()` ☰
    `mailer` ☰
    `mergeWorkbook()` ☰ Merge changes from a workbook into an open workbook.
    `model` ☰
    `multiUserEditing` ☰
    `name` ☰
    → #excel-workbook-names[`names`] ☰
    `newWindow()` ☰ Creates a new → Microsoft/Office/Excel/Object-Model/Window[`window`] or a copy of the specified `window`. Compare with `window.newWindow()`
    `openLinks()` ☰
    → Microsoft/Office/Excel/Object-Model/parent[`parent`] ☰
    `password` ☰ Gets or sets the password that is required to open the workbook.
    `passwordEncryptionAlgorithm` ☰
    `passwordEncryptionFileProperties` ☰
    `passwordEncryptionKeyLength` ☰
    `passwordEncryptionProvider` ☰
    → Microsoft/Office/Excel/Object-Model/parent[`path`] ☰
    `permission` ☰
    `personalViewListSettings` ☰
    `personalViewPrintSettings` ☰
    `pivotCaches()` ☰ Returns a collection that contains all → Microsoft/Office/Excel/Object-Model/PivotCache[`pivotCache`] objects of the workbook.
    `pivotTables` ☰
    `post()` ☰
    `precisionAsDisplayed` ☰
    `printOut()` ☰
    `printPreview()` ☰
    → #excel-workbook-protect-unprotect[`protect()`, `unprotect()`] ☰
    `protectSharing()` ☰
    `protectStructure` ☰
    `protectWindows` ☰
    `publishObjects` ☰
    `publishToDocs()` ☰
    `purgeChangeHistoryNow()` ☰
    `queries` ☰
    `readOnly` ☰
    `readOnlyRecommended` ☰
    → #excel-workbook-refreshAll[`refreshAll()`] ☰ Refreshes all external data ranges and → Microsoft/Office/Excel/Object-Model/PivotTable[pivotTable reports].
    `reloadAs()` ☰
    `removeDocumentInformation()` ☰
    `removePersonalInformation` ☰
    `removeUser()` ☰ Disconnects the specified user from the shared workbook.
    `reply()` ☰
    `replyAll()` ☰
    `replyWithChanges()` ☰
    `research` ☰
    `resetColors()` ☰ Reset the color palette to Excel's default color palette.
    `revisionNumber` ☰
    → Microsoft/Office/Excel/Object-Model/Workbook/runAutoMacros[`runAutoMacros()`] ☰ calls a bunch of `auto_` functions (which are considered obsolete in favor of → Microsoft/Office/Excel/Object-Model/Workbook/_events[workbook events])
    `save()` ☰ See also the `createBackup` property.
    `saveAs()` ☰
    `saveAsXMLData()` ☰
    `saveCopyAs()` ☰
    `saved` ☰
    `saveLinkValues` ☰
    `sendFaxOverInternet()` ☰
    `sendForReview()` ☰ see also `endReview()`
    `sendMail()` ☰
    `sendMailer()` ☰
    `sensitivityLabel` ☰
    `serverPolicy` ☰
    `serverViewableItems` ☰
    `setLinkOnData()` ☰
    `setPasswordEncryptionOptions()` ☰
    `sharedWorkspace` ☰
    `sheets` ☰
    `showConflictHistory` ☰
    `showPivotChartActiveFields` ☰
    `showPivotTableFieldList` ☰
    `signatures` ☰
    `slicerCaches` ☰
    `smartDocument` ☰
    `styles` ☰
    `sync` ☰
    `tableStyles` ☰
    `templateRemoveExtData` ☰
    `theme` ☰
    `toggleFormsDesign()` ☰
    `unprotectSharing()` ☰
    `updateFromFile()` ☰
    `updateLink()` ☰
    `updateLinks` ☰
    `updateRemoteReferences` ☰
    `userStatus` ☰
    `useWholeCellCriteria` ☰
    `useWildcards` ☰
    `vBASigned` ☰ `true` if the → development/languages/VBA#vba-project[VBA project] was digitally signed.
    → Microsoft/Office/Visual-Basic-Editor/Object-Model/VBProject[`vBProject`] ☰
    `webOptions` ☰
    `webPagePreview()` ☰
    `windows` ☰
    `worksheets` ☰ The collection of → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets] that the workbook consists of.
    `writePassword` ☰
    `writeReserved` ☰
    `writeReservedBy` ☰
    `xmlImport()` ☰
    `xmlImportXml()` ☰
    `xmlMaps` ☰
    `xmlNamespaces` ☰

  table }

}


{ fullName #excel-worksbook-fullName

 `fullName` returns path and file name of the worksheet:
  gh|about-MS-Office-object-model|/Excel/Workbook/fullName.bas||

  Compare with the Excel worksheet function → Microsoft/Office/Excel/functions/cell[`cell(filename…)`].

}
{ forceFullCalculation #excel-workbook-forceFullCalculation

  If `forceFullCalculation` is set to `true`, → Microsoft/Office/Excel/Object-Model/Worksheet#excel-worksheet-calculate[`calculate()`] (on a → Microsoft/Office/Excel/Object-Model/Worksheet[`worksheet`] object) will calculate every formula, regardless of
  dependencies.

? When excel is restarted, `forceFullCalculation` will be reset to false again.

}
{ path #excel-workbook-path

 `….path` returns the directory where the respective workbook is stored.

  Compare with → Microsoft/Office/Object-Model/Application#ms-object-model-application-path[`application.path`].

}
{ protect / unprotect #excel-workbook-protect-unprotect

  Calling `protect` protects a workbook. Optionally, the function can be given a → development/security/password that is needed to `unprotect` it.

  Apparently, a protected workbook just prevents adding, deleting, showing or hiding → Microsoft/Office/Excel/Object-Model/Worksheet[workhseets].

code {
activeWorkbook.protect("secretPassword")
code }

  Repeal the protection: 
code {
activeWorkbook.unprotect("secretPassword")
code }

  Compare with the → Microsoft/Office/Excel/Object-Model/Worksheet/protect-unprotect[`protect` and `unprotect` methods of the → Microsoft/Office/Excel/Object-Model/Workbook[`workbook` object].

  See also the menu → Microsoft/Office/Excel/GUI/Ribbon/tabs/Review/Protect/Protect-Workbook[Review -> Protect Workbook]

}
{ refreshAll #excel-workbook-refreshAll

 A workbook's `refreshAll()` method refreshes (brings up to date) all data ranges and → Microsoft/Office/Excel/Object-Model/PivotTable[`pivotTable`] reports in the respective workbook.

 Object's whose `backgroundQuery` property is set to `true` are refreshed asynchronously.

}
{ saveAs

  `saveAs` saves an excel document to disk and allows to specify the file name and → Microsoft/Office/Excel/Object-Model/Workbook/fileFormat[file format].

  gh|about-MS-Office-object-model|/Excel/Workbook/saveAs.bas||

}
{ names #excel-workbook-names

 The `names` property refers to a collection that stores → Microsoft/Office/Excel/Object-Model/Name[`name`] objects.

 See also → Microsoft/Office/Excel/Object-Model/Range#excel-range-name.

}

sa:



  A workbook might have a → Microsoft/Office/Excel/Object-Model/Model object.

  → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN/DCF/SPREADSHEETCOMPARE_EXE[`SPREADSHEETCOMPARE.EXE`] is a tool that allows to compare two workbooks.

  *External data* that is located in the workbook itself can be obtained using the information that is stored in a
   → Microsoft/Office/Excel/Object-Model/WorkbookConnection[`workbookConnection`] object.

  If `Book.xlt*` is found in → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART[`%appdata%\Microsoft\Excel\XLSTART`], it is used as a template file for new workbooks being created.

  → Microsoft/Office/Excel/Object-Model

? The → Microsoft/Office/Excel/functions[Worksheet function] `info("NUMFILE")` evaluates to the number of active worksheets.


  The *Protect Workbook* option under → Microsoft/Office/Excel/GUI/Ribbon/tabs[File -> Info] controls the types of changes that users can make in a workbook.


  


  → Microsoft/Office/Excel/Object-Model/Workbook/_events[Workbook events]

  The menu → Microsoft/Office/Excel/GUI/Ribbon/tabs/File/Options/General[File -> Options -> General] allows to specify some characteristics
  of new workbooks and worksheets when a new workbook is created (font, font size, default view  and how many sheets are created).

  The menu → Microsoft/Office/Excel/GUI/Ribbon/tabs/File/Info/Protect-Workbook[File -> Info -> Protect Workbook]
