$ Office Object Model: Excel - Range
@ Range

A range consists of a number of → Microsoft/Office/Excel/Object-Model/Range/cell[cells] that need not necessarily be adjacent.

Core properties of ranges include
  • → Microsoft/Office/Excel/Object-Model/Range/value[`value`]
  • `formula`
  • `format`

A `Range` object can be obtained by using one of the two properties `→ Microsoft/Office/Excel/Object-Model/Application#excel-application-cells[application.cells]` or `application.range`.

The method → Microsoft/Office/Excel/Object-Model/Application/inputBox[`application.inputBox`] allows a user to select a range with the mouse and pass the selected range to a
→ development/languages/VBA program.

Each of the four edges (borders) of a range is represented by a → Microsoft/Office/Excel/Object-Model/Border object.
-
A range's `borderAround` method draws a border around its area.

An individual → Microsoft/Office/Excel/Object-Model/Range/cell[cell] is referred to by a range.

{ Methods and properties

  table { ll
    `activate()` ☰ Activates a *single* → Microsoft/Office/Excel/Object-Model/Range/cell. Use `select` in order to select multiple cells.
    `addComment()` ☰ Compare with `clearComments()`
    `addCommentThreaded()` ☰ Apparently, threaded comments are more modern than comments that are added with `addComment()`
    `addIndent` ☰
    → Microsoft/Office/Excel/Object-Model/Range/address[`address`] ☰ returns a textual representation of the range (such as `$E$4:$G$8`)
    `addressLocal` ☰
     → Microsoft/Office/Excel/Object-Model/Range/advancedFilter[`advancedFilter()`] ☰ Filters or copies data from a list based on a criteria range. If the initial selection is a single cell, that cell's current region is used.
    `allocateChanges()` ☰ Used in edited cells of an OLAP data source to execute an `UPDATE CUBE` statement. Compare with `discardChanges()`
    `allowEdit` ☰ Specifies if the range can be edited on a → Microsoft/Office/Excel/Object-Model/Worksheet/protect-unprotect[protected worksheet]. Compare with `locked`
    `application` ☰
    `applyNames()` ☰
    `applyOutlineStyles()` ☰
    `areas` ☰
    `autoComplete()` ☰
    `autoFill()` ☰
    `autoFilter()` ☰ TODO: Compare with the → Microsoft/Office/Excel/Object-Model/AutoFilter[`autoFilter`] object
    → #excel-range-autofit[`autoFit()`] ☰ Cmopare with `shrinkToFit`
    `autoOutline()` ☰
    `borderAround()` ☰
    `borders` ☰
    `calculate()` ☰ Recalculates the → Microsoft/Office/Excel/formulas[formulas] of the range. (There is also `application.calculate()` and `→ Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].calculate()`).
    `calculateRowMajorOrder()` ☰
    `cells` ☰
    `characters` ☰ Used to format individual characters of text
    `checkSpelling()` ☰ See also `→ Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].checkSpelling`]
    → Microsoft/Office/Excel/Object-Model/Range/clear_[`clear()`] ☰
    → Microsoft/Office/Excel/Object-Model/Range/clear_[`clearComments()`] ☰ Compare with `addComment()`
    → Microsoft/Office/Excel/Object-Model/Range/clear_[`clearContents()`] ☰ Clears → Microsoft/Office/Excel/formulas[formulas] and data
    → Microsoft/Office/Excel/Object-Model/Range/clearFormats[`clearFormats()`] ☰
    → Microsoft/Office/Excel/Object-Model/Range/clear_[`clearHyperlinks()`] ☰
    → Microsoft/Office/Excel/Object-Model/Range/clear_[`clearNotes()`] ☰
    → Microsoft/Office/Excel/Object-Model/Range/clear_[`clearOutline()`] ☰
    `column`, `row` ☰ The column/row number of the range's first area.
    `columnDifferences()` ☰ compare with `rowDifferences()`
    `columns` ☰
    `columnWidth` ☰
    `comment` ☰
    `commentThreaded` ☰
    `consolidate()` ☰ consolidates data from multiple ranges of multiple → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets] into a single worksheet
    `convertToLinkedDataType()` ☰ Tries to convert the cells to a *linked data type* (such as *Stocks* or *Geography*)
    → Microsoft/Office/Excel/Object-Model/Range/copy[`copy()`] ☰ Copy a range to another range or into the → Windows/clipboard.
    → Microsoft/Office/Excel/Object-Model/Range/copyFromRecordset[`copyFromRecordset()`] ☰ Copies an → development/databases/ADO/objects/recordSet[ADO recordset] or a → Microsoft/Office/Access/Object-Model/Recordset[DAO recordset] to a range.
    → #excel-range-copyPicture[`copyPicture()`] ☰
    `count` ☰
    `countLarge` ☰
    → Microsoft/Office/Excel/Object-Model/Range/createNames[`createNames()`] ☰ automatically creates named ranges from a region's header and row names.
    `creator` ☰
    `currentArray` ☰ Compare with `hasArray`
    → Microsoft/Office/Excel/Object-Model/Range/currentRegion[`currentRegion`] ☰ returns a (rectangular) range so that adjacent cells's values are blank.
    `cut()` ☰ Cuts a range and pastes it to another range or into the → Windows/clipboard.
    `dataSeries()` ☰
    `dataTypeToText()` ☰ Converts *linked data type* to text
    `delete()` ☰ 
    `dependents` ☰
    `dialogBox()` ☰
    `directDependents` ☰ Compare with `showDependents()`
    `directPrecedents` ☰ Compare with `showPrecedents()`
    `dirty()` ☰ mark the region to be → Microsoft/Office/Excel/formulas#excel-formula-recalculation[recalculated].
    `discardChanges()` ☰ Used in edited cells of an OLAP data source to execute an `ROLLBACK TRANSACTION` statement. Compare with `allocateChanges()`
    → Microsoft/Office/Excel/Object-Model/Range/displayFormat[`displayFormat`] ☰
    `editionOptions()` ☰
    → Microsoft/Office/Excel/Object-Model/Range/end[`end`] ☰ navigates to the «next» → Microsoft/Office/Excel/Object-Model/Range/cell in a given direction
    `entireColumn` ☰
    `entireRow` ☰
    `errors` ☰
    `exportAsFixedFormat()` ☰ Export the data as → design/graphic/pdf or XPS. Compare with `printOut()`
    `fillDown()` ☰
    `fillLeft()` ☰
    `fillRight()` ☰
    `fillUp()` ☰
    → Microsoft/Office/Excel/Object-Model/Range/find[`find()`] ☰ finds values in a range
    `findNext()` ☰ Continues finding values
    `findPrevious()` ☰
    `flashFill()` ☰
    `font` ☰ The range's → Microsoft/Office/Excel/Object-Model/Font[`font` object] which specifies the attributes of the text displayed in the range's cells.
    `formatConditions` ☰ returns a collection of → Microsoft/Office/Excel/Object-Model/FormatCondition[`formatCondition`] objects with which it is possible to → Microsoft/Office/Excel/GUI/formatting/conditional[conditionally format] certain characteristics of the range (such as background color etc.)
    → Microsoft/Office/Excel/Object-Model/Range/formula[`formula`] ☰
    `formulaArray` ☰
    `formulaHidden` ☰ Compare (but don't confuse) with `hidden`
    `formulaLocal` ☰
    `formulaR1C1` ☰
    `formulaR1C1Local` ☰
    `functionWizard()` ☰ Opens the → Microsoft/Office/Excel/functions[function] wizard.
    `group()` ☰ Used in → Microsoft/Office/Excel/Pivot/Table[Pivot Tables] for grouping operations
    `hasArray` ☰ Compare with `currentArray`
    `hasFormula` ☰
    `hasRichDataType` ☰
    `height` ☰
    `hidden` ☰ Compare (but don't confuse) with `formulaHidden`
    `horizontalAlignment` ☰ `xlHAlignLeft`, `xlHAlignRight`, `xlHAlignCenter`, `xlHAlignJustify`, `xlHAlignCenterAcrossSelection`, `xlHAlignDistributed`, `xlHAlignFill` or `xlHAlignGeneral`. Compare with the `font` property.
    `hyperlinks` ☰
    `ID` ☰
    `indentLevel` ☰
    `insert()` ☰
    `insertIndent()` ☰
    `interior` ☰ the range's → Microsoft/Office/Excel/Object-Model/Interior[`interior`] object which allows, for example, to → Microsoft/Office/Excel/Object-Model/Range/interior[set the background color of the range].
    `item` ☰
    `justify()` ☰
    `left` ☰
    `linkedDataTypeState` ☰
    `listHeaderRows` ☰
    `listNames()` ☰
    `listObject` ☰
    `locationInTable` ☰
    → Microsoft/Office/Excel/Object-Model/Range/locked[`locked`] ☰ Compare with `allowEdit`
    `MDX` ☰
    `merge()` ☰
    `mergeArea` ☰
    `mergeCells` ☰
    `name` ☰
    `navigateArrow()` ☰ Compare with `showDependents()` and `showPrecedents()`
    `next` ☰
    `noteText()` ☰
    → Microsoft/Office/Excel/Object-Model/Range/numberFormat[`numberFormat`] ☰ specifies how the → development/Data of a range's underlying → Microsoft/Office/Excel/Object-Model/Range/cell[cells'] data is formatted.
    `numberFormatLocal` ☰
    → Microsoft/Office/Excel/Object-Model/Range/offset[`offset`] ☰ The location and size of a range can be changed with → Microsoft/Office/Excel/Object-Model/Range/offset[`.offset(…)`] and → Microsoft/Office/Excel/Object-Model/Range/resize[`.resize(…)`].(See → Microsoft/Office/Excel/Object-Model/Range/moving-around[moving ranges around])
    `orientation` ☰
    `outlineLevel` ☰
    `pageBreak` ☰
    `parent` ☰
    `parse()` ☰ Split the data of the range into multiple «columns»
    → Microsoft/Office/Excel/Object-Model/Range/pasteSpecial[`pasteSpecial()`] ☰
    `phonetic` ☰
    `phonetics` ☰
    `pivotCell` ☰
    `pivotField` ☰
    `pivotItem` ☰
    `pivotTable` ☰
    `precedents` ☰
    `prefixCharacter` ☰
    `previous` ☰
    `printOut()` ☰ Compare with `exportAsFixedFormat()`
    `printPreview()` ☰
    `queryTable` ☰
    `range` ☰
    `readingOrder` ☰
    `removeDuplicates()` ☰ remove duplicate values.
    `removeSubtotal()` ☰
    `replace()` ☰
    → Microsoft/Office/Excel/Object-Model/Range/resize[`resize`] ☰ The location and size of a range can be changed with → Microsoft/Office/Excel/Object-Model/Range/offset[`.offset(…)`] and → Microsoft/Office/Excel/Object-Model/Range/resize[`.resize(…)`] (See → Microsoft/Office/Excel/Object-Model/Range/moving-around[moving ranges around])
    `rowDifferences()` ☰ Compare with `columnDifferences()`
    `rowHeight` ☰
    `rows` ☰
    `run()` ☰ Runs the macro on a *macro sheet* (not applicable on an «ordinary» worksheet).
    → Microsoft/Office/Excel/Object-Model/Range/createNames[`select()`] ☰ Compare with `activate()`
    `serverActions` ☰
    `setCellDataTypeFromCell()` ☰ Creates another instance of a *linked data type* that exists in another cell.
    `setPhonetic()` ☰ Creates `phonetic` objects
    `show()` ☰ Scrolls the active → Microsoft/Office/Excel/Object-Model/Window so that the (single) cell of the range is visible.
    `showCard()` ☰ Used in conjunction with *linked data type*.
    `showDependents()` ☰ Compare with `showPrecedents()`, `directDependents` and `navigateArrow()`
    `showDetail` ☰
    `showErrors()` ☰ Draw arrows to the source of → Microsoft/Office/Excel/Object-Model/Range/cell/errors[errors].
    `showPrecedents()` ☰ Compare with `showDependents()`, `directPrecedents` and `navigateArrow()`
    `shrinkToFit` ☰ Compare with `autoFit`
    → Microsoft/Office/Excel/Object-Model/Range/sort[`sort()`] ☰
    `sortSpecial()` ☰
    `soundNote` ☰
    `sparklineGroups` ☰
    `speak()` ☰
    → Microsoft/Office/Excel/Object-Model/Range/specialCells[`specialCells()`] ☰ obtain a `range` object that matches cells with a specific → Microsoft/Office/Excel/data-types[data type] and/or cell type.
    `style` ☰
    `subscribeTo()` ☰
    `subtotal()` ☰
    `summary` ☰
    `table()` ☰
    `text` ☰
    `textToColumns()` ☰
    `top` ☰
    `ungroup()` ☰
    `unMerge()` ☰
    `useStandardHeight` ☰
    `useStandardWidth` ☰
    `validation` ☰ A → Microsoft/Office/Excel/Object-Model/Validation[`validation`] object that allows to limit the possible values that can be entered in a range.
    → Microsoft/Office/Excel/Object-Model/Range/value[`value`] ☰
    `value2` ☰
    `verticalAlignment` ☰
    `width` ☰
    `worksheet` ☰
    `wrapText` ☰
    `xPath` ☰
  table }

}

{ default member #excel-range-default-member

  Without arguments, the range's default member returns the → Microsoft/Office/Excel/Object-Model/Range/value[`value`] property.

  With arguments, the default member returns the result of → #excel-range-item[`item(…)`], called with the same arguments.

  Thus,
    • `rngDest = rngSrc` is equivalent to `rngDest.value = rngSrc.value`,
    • `rng(x)` is equivalent to `rng.item(x)` and
    • `rng(x,y)` is equivalent to `rng.item(x,y)`.

}
{ Item(…) #excel-range-item

  The `item` property is called by the → #excel-range-default-member[default member] if invoked with arguments.

  `Item()` method comes in two forms:
    • `item(arg)`
    • `item(arg_1, arg_2)`

   { Referring to other workbooks and/or worksheets #excel-range-refer-to

     Get the value in the 4th row, 2nd column of the *current* worksheet:
code {
val = range("b4")
code }

    In order to refer to the → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet] named `worksheetName`, the name is separated from the address with an exclamation mark (`!`):
code {
val = range("worksheetName!b3")
code }

    The name of a → Microsoft/Office/Excel/Object-Model/Workbook[workbook] is put into square brackets:
code {
val = range("[workbookName.xlsx]worksheetName!a3")
code }

   In order to refer to a workbook with full path, single quotes are needed:
code {
val = range("'P:\ath\to\other\[workbookName.xlsx]worksheetName'!a3")
code }

 ? Such single quotes are also advisable when referring to a workbook or worksheet with special characters:
code {
='[foo-bar.xlsm]config'!$D$18
code }

   }

}
{ Selecting multiple cells

  The following example creates a `Range` object and uses it to modify some properties in all → Microsoft/Office/Excel/Object-Model/Range/cell[cells] from *B3* to *E9* (such as assigning a → Microsoft/Office/Excel/formulas[formula] or modifying
  the font):
  gh|about-MS-Office-object-model|/Excel/Range/b3-e9.bas||

  gh|about-MS-Office-object-model|/Excel/Range/img/b3-e9.png||

}
{ Setting values within the range #excel-range-set-values

  A range's `value` property can be assigned a (one dimension) value in which case all cells of that range will have that value.

  If an → development/languages/VBA/language/arrays is assigned, the values of the array are used to fill the columns of the range.

  gh|about-MS-Office-object-model|/Excel/Range/value.bas||

  gh|about-MS-Office-object-model|/Excel/Range/img/value.png||


  Compare with → Microsoft/Office/Excel/Object-Model/Range/value#excel-write-2D-array[writing a 2D array to a worksheet] and
  → Microsoft/Office/Excel/Object-Model/WorksheetFunction/transpose#excel-transpose-array[Using `WorksheetFunction.transpose` to write an array vertically to a worksheet].

  See also → Microsoft/Office/Excel/Object-Model/Range/VBA-arrays

}
{ Iterating over the cells in a range #excel-range-for-each

  The → development/languages/VBA/language/statements/for/index#vba-for-each[for each] statement allows to iterate over the cells in a range:
  gh|about-MS-Office-object-model|/Excel/Range/for-each.bas||

}
{ Naming a range #excel-range-name

  A range can be given a hopefully meaningful name by assigning a (→ development/languages/VBA/language/datatypes/string[string]-) value to its `.name` property.
  gh|about-MS-Office-object-model|/Excel/Range/name.bas||

  Such a named range is stored in a → Microsoft/Office/Excel/Object-Model/Name[`name`] object which is stored in a → Microsoft/Office/Excel/Object-Model/Workbook[workbook's] `names` collection.
  Thus, a named range can alternatively also be created with `names.add …`.

  Names that are defined with `range(…).name = "…"` are *global* to → Microsoft/Office/Excel/Object-Model/Workbook[workbook]. It is possible, however, to define names for ranges that are *local* to
  a → Microsoft/Office/Excel/Object-Model/Worksheet with
code {
activeWorksheet.names.add name := "invoiceNumber", refersToR1C1 := "Sheet1!R5C5"
code }


  With → Microsoft/Power-Query/M-formula/language[Power Query M formula], it is possible to access the values in a named range with → Microsoft/Power-Query/M-formula/standard-library/Excel/CurrentWorkbook[`Excel.CurrentWorkbook`].

  In the GUI, a range or cell can be named using the *name box*.

  With → Microsoft/Power-Query/M-formula/language[Formula-M], the data of a (named) range can be queried with the
  → Microsoft/Power-Query/M-formula/standard-library/Excel/CurrentWorkbook/get-data-of-range[`Excel.CurrentWorkbook()` function].

}
{ numberFormat #excel-range-numberFormat

  → Microsoft/Office/Excel/Object-Model/Range/numberFormat[`numberFormat`] specifies how the → development/Data of a range's underlying → Microsoft/Office/Excel/Object-Model/Range/cell[cells'] data is formatted.

  Formatting, such as what applied with `.numberFormat`, can be removed with → Microsoft/Office/Excel/Object-Model/Range/clearFormats[`rng.clearFormats`].
  
}
{ Selecting multiple colunms

  `Range(…)` can be passed two `columns(n)` in which case it selects the range between those two columns.

  In the following example, the columns 4 through 9 are selected:
  gh|about-MS-Office-object-model|/Excel/Range/select-multiple-columns.bas||

}
{ autofit #excel-range-autofit

  The `columns` property (defined in `application`) returns a range object on which `autofit` can be called. This will set the width of the columns such
  that the entire text in the columns is visble.

  gh|about-MS-Office-object-model|/Excel/Range/autofit.bas||

  In order to set the width of a column to an arbitrary value, `columnWidth` can be used:
code {
columns(7).columnWidth = 3
code }

  `autofit` might be used in conjunction with → Microsoft/Office/Excel/Object-Model/Worksheet/usedRange#usedRange-autofit[`usedRange`] or `columns` and `entireColumn` 
code {
activeSheet.usedRange.entireColumn.autofit
activeSheet.usedRange.columns.autofit
code }
  
 `autofit` does not change the width of columns that contain no data.

  See also → #excel-range-size-properties

}


{ Create a picture #excel-range-copyPicture

 `range(…).copyPicture` creates a picture of the given range and copies it into the → Windows/clipboard.
  → Microsoft/Office/Excel/Object-Model/Range/copyPicture/save-range-as-image[This example then pastes the clipboard into a chart and saves it to a file.

  See also → Microsoft/Office/Excel/Object-Model/Range/copy[`range.copy`].

}
{ clearContents #excel-range-clearContents

 `clearContents` deletes the content of a range.
  
  It might be used in conjunction with `→ Microsoft/Office/Excel/Object-Model/Worksheet#excel-worksheet-usedRange[worksheet.usedRange]`.

  In order to not only remove the data but also the underlying formatting of the cells, → Microsoft/Office/Excel/Object-Model/Range/clearFormats[`clearFormats`] must be used

  See also the → Microsoft/Office/Excel/Object-Model/Range/clear_[range's `clear*` methods].

}
{ noteText() #excel-range-noteText

 `.noteText(txt)` seems to be a shorthand to insert a → Microsoft/Office/Excel/Object-Model/Comment[comment].

code {
cells(4,5).noteText("some comment")
code }

}
{ Properties related to the size of a range #excel-range-size-properties

  A range's `.width` and `.height` properties return the width and height of the range in *points*. These properties are read only.

 `.rowHeight` corresponds to the height, measured in *points*, of the first row of the range that it is applied on.
  -
 `.columnWidth` corresponds to the width, measured in *characters* of the default font, of the first(?) column of the range that it is applied on.
 -
 `.rowHeight` and `columnWidth` are read/write properties.

  See also → #exel-range-autofit[`.autofit`]

}

sa:

  
  
  The → Microsoft/Office/Excel/Object-Model/Application#excel-application-selection[`application.selection`] property refers to the range that is currently selected.

  → Microsoft/Office/Excel/Object-Model/Application/set-operations[Set operations] for ranges: → Microsoft/Office/Excel/Object-Model/Application/set-operations[`union` and `intersect`].

  The → Microsoft/Office/Excel/Object-Model/parent[`parent`] property.

  Applying a → Microsoft/Office/Excel/Object-Model/WorksheetFunction#worksheetFunction-range[function (such as `min`, `sum` or `avg`)] on a range.

  → Microsoft/Office/Excel/Object-Model/Range/assign-to-variant[Assigning a range] to a → development/languages/VBA/language/datatypes/variant[variant] to create a
  two dimensional → development/languages/VBA/language/arrays[array].


  A range (as address-string) can be assigned to the → Microsoft/Office/Excel/Object-Model/PageSetup#excel-pageSetup-printArea[`.printArea`] property of a
  worksheet's → Microsoft/Office/Excel/Object-Model/PageSetup[`pageSetup`] object. This value determines which area of a worksheet is printed.

  → Microsoft/Office/Excel/Object-Model/Range/pass-cell-value-to-function[Passing values from cells to a VBA function]

  → Microsoft/Office/Excel/Object-Model/Worksheet/cells[`Worksheet.cells`] returns a `Range` object that consists of *all* cells in a → Microsoft/Office/Excel/Object-Model/Worksheet[Worksheet].


  → Microsoft/Office/Excel/Object-Model/Range/modify[Influence of deleting rows/columns on a range]

  A range's `autoFilter` method adds an → Microsoft/Office/Excel/Object-Model/AutoFilter[`autoFilter`] to a → Microsoft/Office/Excel/Object-Model/Worksheet.

  The → Microsoft/Office/Excel/Object-Model/QueryTable[`.queryTable`] property/object.

  The → Microsoft/Office/Excel/Object-Model/Style[`style` object] describes a style which can be applied to one (or more) ranges.

  → Microsoft/Office/Excel/Object-Model

  The → Microsoft/Office/Excel/Object-Model/Application[`Application`] object exposes → Microsoft/Office/Excel/Object-Model/Application#excel-application-functions[some (mathematical) functions that can be applied on ranges].

  The → Microsoft/Office/Excel/GUI/Ribbon/tabs/Formulas/Defined-Names/Name-Manager[Name Manager (Menu Formulas -> Defined Names -> Name Manager] allows to define, edit and delete names that refer to
  ranges. These names can then be used in → Microsoft/Office/Excel/functions[functions] which allows to write cleaner code.

  → Microsoft/Office/Excel/Object-Model/Range/value/fill-fast-with-PowerShell[Fill a range fast with PowerShell] and/or
  → Microsoft/Office/Excel/Object-Model/Range/value/fill-fast-with-VBA[VBA].

  When the content of a range has changed, the → Microsoft/Office/Excel/Object-Model/Workbook/_events[workbook event] `sheetChange` is fired.

  The currently visible range in a → Microsoft/Office/Excel/Object-Model/Window can be queried with `→ Microsoft/Office/Excel/Object-Model/Window[window].visibleRange`.

  The → development/languages/VBA/modules/Office/ExcelRange[ExcelRange VBA module] has some helper functions related to ranges.

  → Microsoft/Office/Excel/GUI/Ribbon/tabs/Data/Data-Tools/Data-Validation[Data -> Data Tools -> Data Validatation] allows to limit the possible values that can be entered in a range.
