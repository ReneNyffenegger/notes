$ Excel Object Model: Range.CopyFromRecordSet

`copyFromRecordset` copies an → development/databases/ADO/objects/recordSet[ADO recordset] or a → Microsoft/Office/Access/Object-Model/Recordset[DAO recordset] onto a range.

code {
'
'      call application.VBE.activeVBProject.references.addFromGuid("{B691E011-1797-432E-907A-4D8C69339129}", 6,  1)
'
option explicit

sub main()

   dim dbUser     as string : dbUser     = "rene"
   dim dbPassword as string : dbPassword = "rene"
   dim dataSource as string : dataSource = "ora19"
   dim provider   as string : provider   = "→ development/databases/Oracle/OraOLEDB[OraOLEDB.Oracle]"

   dim con as new → development/databases/ADO/objects/connection[adodb.connection]
   con.open ( _
       "Provider="     & provider     & _
       ";User ID="     & dbUser       & _
       ";Password="    & dbPassword   & _
       ";Data Source=" & dataSource     )

    dim rs  as → development/databases/ADO/objects/recordSet[adodb.recordSet]
    set rs  = con.→ development/databases/ADO/objects/connection/execute[execute]("select * from tq84_data_one")

    cells(1,1).copyFromRecordset rs

end sub
code }

{ Calling CopyFromRecordSet in PowerShell

code {
$xls = → Windows/PowerShell/modules/personal/MS-Office#ps-mod-ms-office-get-msOfficeComObject[get-msOfficeComObject] excel
 
$adoConnection = → Windows/PowerShell/command-inventory/noun/object/new[new-object] → Windows/PowerShell/command-inventory/noun/object/new/COM[-comObject] ADODB.connection
$adoConnection.open("Provider=OraOLEDB.Oracle;user id=…;data source=…;password=…")
 
$rs = $adoConnection.execute('select * from user_tables')
$xls.cells(1,1).copyFromRecordSet($rs)
code }

}

sa:
  The → Microsoft/Office/Excel/Object-Model/Range[`range`] object.
