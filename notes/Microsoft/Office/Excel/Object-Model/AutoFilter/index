$ Excel Object Model: AutoFilter
@ AutoFilter

An `AutoFilter` object allows to hide or show rows based on criterias put on the values in the → Microsoft/Office/Excel/Object-Model/Range/cell[cells] of these rows. Thus, it somewhat corresponds to an
→ development/databases/SQL/where[SQL's `where` clause].


{ Methods and Properties

  table { ll

    `application` ☰
    `applyFilter()` ☰
    `creator` ☰
    `filterMode` ☰
    `filters` ☰ A collection of → Microsoft/Office/Excel/Object-Model/Filter[`filter`] objects which represent the filter-condition for a column of the → Microsoft/Office/Excel/Object-Model/Range on which an auto-filter is applied.
    `parent` ☰
    `range` ☰
    `showAllData()` ☰
    `sort` ☰

  table }

}

{ Examples
{ Basic example

  The following simple example tries to demonstrate how an `autoFilter` object might be used.

  The example also prints the values the worksheet's `.autoFilterMode` and → Microsoft/Office/Excel/Object-Model/Worksheet/filterMode[`.filterMode`] properties a few times. The meaning of these properties is:
    • `autoFilterMode`, if → development/languages/VBA/language/datatypes/boolean[`true`]: drop down triangles are shown
    • `filterMode`, if `true` at least one filter is active, thus some rows might be hidden.

  gh|about-MS-Office-object-model|/Excel/AutoFilter/basics.bas||

  The only record that satisfies the selected criteria is the second one:
  gh|about-MS-Office-object-model|/Excel/AutoFilter/img/basics.png||

  See also → Microsoft/Office/Excel/Object-Model/AutoFilter/listObject[this example] that demonstrates how auto filters can be used on → Microsoft/Office/Excel/Object-Model/AutoFilter/listObject[`listObject`] objects.

}
{ At most one autoFilter per worksheet

  → Microsoft/Office/Excel allows at most one active `autoFilter` per → Microsoft/Office/Excel/Object-Model/Worksheet. If the autofilter is active can be queried in → development/languages/VBA with an expression similar to
code {
not → Microsoft/Office/Excel/Object-Model/Application/index#excel-application-active-objects[activeSheet.autoFilter] is nothing
code }
  This expression evaluates to → development/languages/VBA/language/datatypes/boolean[`true`] if an auto filter is in place and to `false` if not.
  -
  In the *Data* tab of the → Microsoft/Office/Excel/GUI/Ribbon[Ribbon], the → Microsoft/Office/Excel/GUI/Ribbon/tabs/Data/Sort-and-Filter/Filter[Filter] symbol is highlighted if there is an active auto filter.

  Note that an autofilter can be active even if no rows are filtered or any criterias were defined.

? If multiple regions (→ Microsoft/Office/Excel/Object-Model/Range[ranges]) need to be filtered, → Microsoft/Office/Excel/Object-Model/ListObject[list objects (aka tables)] might be used.
  

}
{ Showing all records with VBA

  In order to show all records that might previously have been filtered, the → Microsoft/Office/Excel/Object-Model/Worksheet/showAllData[`showAllData`] method can be used:
code {
activeSheet.→ Microsoft/Office/Excel/Object-Model/Worksheet/showAllData[showAllData]
code }

  This is effectively the same as clicking → Microsoft/Office/Excel/GUI/Ribbon/tabs/Data/Sort-and-Filter/Clear[Data -> Sort & filter -> Clear] on the
  → Microsoft/Office/Excel/GUI/Ribbon[Ribbon].

}
{ Required header

  As far as I see it, a header is required for an `autoFilter`, at least when defining it.

}
{ Problems with sum function

  When using the `=sum(…)` → Microsoft/Office/Excel/Object-Model/WorksheetFunction[worksheet function] right below (and adjacent) to the filtered → Microsoft/Office/Excel/Object-Model/Range[range], it seems that Excel tries to incluce this `sum()` into
  the range (and thus is hidden after applying a criteria to the filter).

}
{ Print filtered columns

  The following simple function prints (`debug.print`) the numbers of the columns where a filter is applied:
code {
sub printFilteredColumns(byVal ws as worksheet) ' {
   
   if not ws.filterMode then ' {
       debug.print "no columns are filtered"
       exit sub
   end if ' }

   dim col as long
   for col = 1 to ws.autoFilter.filters.count ' {
       if ws.autoFilter.filters(col).on then
          debug.print(col)
       end if
   next col ' }

end sub ' }
code }

  The function can be called from the → Microsoft/Office/Visual-Basic-Editor/Immediate-Window like so
code {
printFilteredColumns activeSheet
code }

}
}

sa:

  The `ctrl-shift+L` → Microsoft/Office/Excel#excel-key-shortcut[keyboard shortcut] turns on autofiltering.

  → Microsoft/Office/Excel/Object-Model/Range/advancedFilter[`range.advancedFilter`]

  → Microsoft/Office/Excel/functions/criteria[Worksheet functions that use criterias]

  A → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet's] property → Microsoft/Office/Excel/Object-Model/Worksheet/filterMode[`filterMode`]

  The `autoFilter()` method of the → Microsoft/Office/Excel/Object-Model/Range[`range`] object.

  The conditions in an auto-filtered → Microsoft/Office/Excel/Object-Model/Range are formulated with → Microsoft/Office/Excel/Object-Model/Filter[`filter`] objects.

 `→ Microsoft/Office/Excel/Object-Model/Worksheet[worksheet].showAllData()`

 → Microsoft/Office/Excel/Object-Model/AutoFilter/immediate-window[Using Excel's AutoFilter object] in the → Microsoft/Office/Visual-Basic-Editor/Immediate-Window.

  → Microsoft/Office/Excel/Object-Model
