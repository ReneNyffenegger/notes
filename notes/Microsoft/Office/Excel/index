$ Microsoft Excel
@ Excel

  → Microsoft/Office/Excel/Object-Model

  → Microsoft/Office/Excel/functions[functions] and → Microsoft/Office/Excel/formulas[formulas]

  → Microsoft/Office/Excel/xml

  → Microsoft/Office/Excel/examples[Other Excel examples]

  In order make → development/languages/VBA[VBA macros] globally available, they should be stored in the
  special → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART/Personal_xlsb[`Personal.xlsb`] workbook.

  A → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet] contains a maximum of 1,048,576 rows and a maximum of 16,384 columns. This corresponds to 17,179,869,184 cells.
  (See  → Microsoft/Office/Excel/Object-Model/Worksheet/cells#count-cells-in-worksheet).

{ Keyboard shortcuts #excel-key-shortcut

  Some keyboard shortcuts I found useful the other day are …
  table { lll
    ☰ ☰ → development/languages/VBA equivalent
     `shift + F11` ☰ Insert new → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets] to the left of the currently active one) ☰ `→ Microsoft/Office/Excel/Object-Model/Sheets[sheets].add`
     `ctrl + pageUp` / `ctrl + pageDown` ☰ Rotate between → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets]. ☰
     `ctrl + space` / `shift + space` ☰ Select entire rows / columns ☰
     `ctrl+1` ☰ opens the *format cells* dialog. ☰
     `ctrl+9` / `ctrl+0` ☰ hides selected rows / columns ☰
     `ctrl+t` ☰ Turn selected region into a *data table* ☰
     `ctrl+shif+-t` ☰ Add total column to data table ☰
     `ctrl+shift-L` ☰ Turn on/off filtering for specific values (triangle in header row) ☰ `selection.→ Microsoft/Office/Excel/Object-Model/AutoFilter[autofilter]`
     `ctrl+shift` + `=` ☰ Shift cells down ☰ `selection.insert shift:=xlDown`
     `ctrl` + `-` ☰ Shift cells up ☰ `selection.delete shift:=xlUp`
     `ctrl+q` ☰ opens the query input box (which allows to search for keywords) ☰
     `ctrl+F3` ☰  opens *name manager* (which is found in the ribbon/menu under *formulas*). ☰
     `F9` with and without `ctrl`, `shift`, `alt` ☰ Perform or force → Microsoft/Office/Excel/formulas#excel-formula-recalculation[formula recalculation] ☰
     `shift+F10` ☰ opens the *context menu*. ☰
     `alt+F11` ☰ opens the → Microsoft/Office/Visual-Basic-Editor ☰
     `alt+=` ☰ inserts `=sum(…)` ☰
     `ctrl+shift+*` ☰ selects a *rectangular region* of cells with data. ☰ → Microsoft/Office/Excel/Object-Model/Range/currentRegion[`range.currentRegion`]
     `ctrl+shift+F3` ☰ creates → Microsoft/Office/Excel/Object-Model/Range#excel-range-name[named ranges] from a selection (possibly created with `ctrl+shift+*`). ☰ → Microsoft/Office/Excel/Object-Model/Range/createNames[`range.createNames`]
     `ctr+shift+enter` ☰ enters an → Microsoft/Office/Excel/Object-Model/Range/formula/array[array formula]. ☰
  table }


  { Select tabs on the ribbon

    Some `alt+…` combinations select a tab and then allow to select an item on the tab with another key which is displayed next to the element:
     • `alt+f` file page, use backstage view
     • `alt+h` home tab
     • `alt+p` page layout tab
     • `alt+n` insert tab
     • `alt+m` formula tab
     • `alt+w` view tab

    `F10` shows the keys to be pressed next to the respective tab-selector.

    `ctrl+F1` shows or hides the ribbon bar

  }

  { Automatically installing a shortcut to calling a sub when an Excel is opened

code {
sub auto_open()
    → Microsoft/Office/Excel/Object-Model/Application#excel-application-onKey[application.onKey] "{F12}", "nameOfSubToCall"
end sub
code  }


  }

}
{ Display Developer tab on Ribbon #excel-display-developer-tab

  In order to have the *record macro* button, the *Developer tab* must be first enabled.

  This can be done in the → Windows/registry[registry] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Excel/Options#reg-excel-developer-tools[`HKEY_CURRENT_USER\Software\Microsoft\Office\_version_\Excel\Options`]
  (value `DeveloperTools`).

  Alternatively, the developer tools can also be enabled via the menu: File -> Options -> Customize Ribbon -> Check *Developer* box on right side.

  With → development/languages/VBA, the state of the developer tab can be queried or modified with → Microsoft/Office/Excel/Object-Model/Application#excel-application-showDevTools[`application.showDevTools`].

}
{ Reference style for cell addresses #excel-cell-address

  Each cell on an excel → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet] has a unique address. There are two
  so called *reference styles* for these addresses:
    • A1 style
    • R1C1 style

  The A1 style seems to be default: other cells are referenced by the `D5` syntax. (fourth column, 5th row)

  With R1C1, the syntax for *relative addresses* of cells is `R[-3]C[2]` which is the value of the cell 3 rows above and 2 columns to the right.
  -
  The syntax for *absolute addresses* is `R4C2` which represents the → Microsoft/Office/Excel/Object-Model/Range/cell[cell] in the 4th row and 2nd column.

  The reference style can be changed through the → Microsoft/Office/Excel/Object-Model/Application[Application] object:
code {
→ Microsoft/Office/Excel/Object-Model/Application/referenceStyle[application.referenceStyle] = xlR1C1 ' or
→ Microsoft/Office/Excel/Object-Model/Application/referenceStyle[application.referenceStyle] = xlA1
code }

  It can also be changed through *File -> Options -> Formulas* and (un-)ticking *R1C1 reference style*.

  See also the Excel functions → Microsoft/Office/Excel/functions#excel-func-row-column[functions `row` and `column`] and
  → Microsoft/Office/Excel/functions#excel-func-row-column[`address`].

  In → Microsoft/Office/Excel/table[Excel tables], data can be accessed using the so called ~structured references~.

  It seems (at least to me) that the reference style cannot be *permanently stored* except when using a
  → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART/Personal_xlsb[Personal.xlsb] file.

}
{ Connecting to data sources #xls-connecting-to-data-sources

  A ~data connection~ allows to tap data that is not stored in a Workbook, but in an external database or file etc.
  
  Such a data connection basically records and stores the information needed to connect to and log into a an external data source and how to get the data from it.

  A data connection can be stored with the Workbook or in an *Office Data Connection* (→ development/filename-extensions#odc[.odc]) or *Data Source Name* (→ development/filename-extensions#dsn[.dsn]) file.

  Typical data sources that Excel might connect to are
    • → development/databases/SQL-Server
    • → development/databases/SQL-Server/Analysis-Services
    • → development/databases/Access[MS Access database]
    • text (that is: → development/Data/exchange/formats/CSV[CSV]) files
    • etc.

  A data source can obtain the data via an → development/databases/ODBC driver or → development/databases/OLE-DB.

  Existing data connections can be found on the *Data* ribbon, by clicking on *Existing Connections* (which is in the *Get External Data* group).
  -
  There are three places where connections might be stored:
    • In the workbook itself
    • In connection files (.odc) that are stored in the → Windows/dirs/Users/username/Documents/My-Data-Sources[My Data Sources] folder
    • In connection files on the network

  .odc files have the benefit that they can be shared among persons that need to query the same data source.

  { Query files

    Beside data connections files, there are also query files. Besides data source connectin information, they also store a query. There are the following types of query files:
      • .dqy (relational databases and text files)
      • .oqy (→ development/Data/OLAP)
      • .rqy (OLE DB data sources)
      • .iqy (Web query files)

  }

}
{ Coauthoring

  Coauthoring allows multiple users to simultaneously edit a workbook that is hosted in the cloud (OneDrive, OneDrive for Business or SharePoint Online). When one users saves the modifications, the other users
  will see them.

  Coauthoring is available to all Excel Online users and to Office 365 customers.

}
{ Misc

  On → Linux, there is `sc`, the command line spread sheet.

  { Finding a named column in a huge sheet

    Sometimes, one needs to find a named column in a wide wide sheet, with hundreds or even thousands of columns.

    It is possible to select the header-cell by first selecting the row with the column names and then go to the
    → Microsoft/Office/Visual-Basic-Editor/Immediate-Window and type (assuming that one is looking for the column that contains *xyz*):
code {
→ Microsoft/Office/Excel/Object-Model/Application#excel-application-goto[application.goto] selection.→ Microsoft/Office/Excel/Object-Model/Range/find[find]("xyz")
code }

    If one wants to go the the column that is named exactly *xyz* (rather than it only contains that string), the `lookAt` option must be used:
code {
→ Microsoft/Office/Excel/Object-Model/Application#excel-application-goto[application.goto] selection.→ Microsoft/Office/Excel/Object-Model/Range/find[find]("xyz", lookAt := xlWhole)
code }

  }

}

sa:

  → Microsoft/Office/Excel/data-types[Data types in Excel].

  → development/databases/OLE-DB/provider/Microsoft-Access-database-engine/create-excel[Creating a new Excel workbook and worksheet with OLE DB, SQL and C#]

  Some Excel options can be configured in the → Windows/registry[registry] under the key
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Excel/Options[HKEY_CURRENT_USER\Software\Microsoft\Office\_version_\Excel\Options].

  → Microsoft/Office

  → Microsoft/Office/Excel/Add-ins[Add-ins] and → Windows/dirs/Users/username/Documents/Custom-Office-Templates[templates].

  → https://renenyffenegger.ch/Oracle/Libraries/xlsx-writer.html[xlsx-writer] is → development/databases/Oracle/PL-SQL[PL/SQL] package that allows to write
  native (xlsx) Excel files from → development/databases/Oracle[Oracle].

  The → Microsoft/Office/Excel[R package `xlsx`]

  → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN/EXCEL_EXE[`EXCEL.EXE`]

  → Microsoft/Power-Query is found in the *Data* tab, under *Get & Transform*
