$ Microsoft Excel
@ Excel

  → Microsoft/Office/Excel/Object-Model

  → Microsoft/Office/Excel/functions[functions] and → Microsoft/Office/Excel/formulas[formulas]

  → Microsoft/Office/Excel/xml

  → Microsoft/Office/Excel/examples[Other Excel examples]

  In order make → development/languages/VBA[VBA macros] globally available, they should be stored in the
  special → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART/Personal_xlsb[`Personal.xlsb`] workbook.

  A → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet] contains a maximum of 1,048,576 rows and a maximum of 16,384 columns. This corresponds to 17,179,869,184 cells.
  (See  → Microsoft/Office/Excel/Object-Model/Worksheet/cells#count-cells-in-worksheet).

{ Keyboard shortcuts #excel-key-shortcut

  Some keyboard shortcuts I found useful the other day are …
  table { lll
    ☰ ☰ → development/languages/VBA equivalent
     `shift + F11` ☰ Insert new → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets] to the left of the currently active one) ☰ `→ Microsoft/Office/Excel/Object-Model/Sheets[sheets].add`
     `ctrl + pageUp` / `ctrl + pageDown` ☰ Rotate between → Microsoft/Office/Excel/Object-Model/Worksheet[worksheets]. ☰
     `ctrl + space` / `shift + space` ☰ Select entire rows / columns ☰
     `ctrl+1` ☰ opens the *format cells* dialog. ☰
     `ctrl+9` / `ctrl+0` ☰ hides selected rows / columns ☰
     `alt+shift+F1` ☰ inserts a new → Microsoft/Office/Excel/Object-Model/Worksheet. (The current worksheet can be deleted with → Microsoft/Office/Excel/GUI/Ribbon/tabs/Home/Cells/Delete/Delete-Sheet[`alt+h` -> `d` -> `s`]) ☰
     `ctrl+t` ☰ Turn selected region into a *data table* ☰
     `ctrl+shif+-t` ☰ Add total column to data table ☰
     `ctrl+shift-L` ☰ Turn on/off filtering for specific values (triangle in header row) ☰ `selection.→ Microsoft/Office/Excel/Object-Model/AutoFilter[autofilter]`
     `ctrl+shift` + `=` ☰ Shift cells down ☰ `selection.insert shift:=xlDown`
     `ctrl` + `-` ☰ Shift cells up ☰ `selection.delete shift:=xlUp`
     `ctrl+q` ☰ opens the query input box (which allows to search for keywords) ☰
     `ctrl+F3` ☰  opens → Microsoft/Office/Excel/GUI/Ribbon/tabs/Formulas/Defined-Names/Name-Manager[name manager] (which is found in the → Microsoft/Office/Excel/GUI/Ribbon/tabs[ribbon/menu] under → Microsoft/Office/Excel/GUI/Ribbon/tabs/Formulas/Defined-Names/Name-Manager[Formulas -> Defined Names -> Name Manager]). ☰
     `F9` with and without `ctrl`, `shift`, `alt` ☰ Perform or force → Microsoft/Office/Excel/formulas#excel-formula-recalculation[formula recalculation] ☰
     `shift+F10` ☰ opens the *context menu*. ☰
     `alt+F11` ☰ opens the → Microsoft/Office/Visual-Basic-Editor (and when in the VBA Editor, `alt-Q` closes it) ☰
     `alt+=` ☰ inserts `=sum(…)` ☰
     `ctrl+shift+*` ☰ selects a *rectangular region* of cells with data. ☰ → Microsoft/Office/Excel/Object-Model/Range/currentRegion[`range.currentRegion`]
     `ctrl+shift+F3` ☰ creates → Microsoft/Office/Excel/Object-Model/Range#excel-range-name[named ranges] from a selection (possibly created with `ctrl+shift+*`). ☰ → Microsoft/Office/Excel/Object-Model/Range/createNames[`range.createNames`]
     `ctr+shift+enter` ☰ enters an → Microsoft/Office/Excel/Object-Model/Range/formula/array[array formula]. ☰
     `ctrl+F1` ☰ shows/hides the → Microsoft/Office/Excel/GUI/Ribbon[Ribbon bar]. ☰
     `ctrl+backtick` (gravis) ☰ Shows hides → Microsoft/Office/Excel/formulas[formulas] in cells ☰ `activeWindow.displayFormulas = true` (or `false`)
  table }

  TODO: in order to *enable content*, the sequence `alt+f i n enter` will do.


  { Select tabs on the ribbon

    Some `alt+…` combinations select a tab and then allow to select an item on the tab with another key which is displayed next to the element:
     • `alt+f` file page, use backstage view
     • `alt+h` home tab
     • `alt+p` page layout tab
     • `alt+n` insert tab
     • `alt+m` formula tab
     • `alt+w` view tab

    `F10` shows the keys to be pressed next to the respective tab-selector.

    `ctrl+F1` shows or hides the ribbon bar

  }

  { Automatically installing a shortcut to calling a sub when an Excel is opened

code {
sub auto_open()
    → Microsoft/Office/Excel/Object-Model/Application#excel-application-onKey[application.onKey] "{F12}", "nameOfSubToCall"
end sub
code  }


  }

}
{ Reference style for cell addresses #excel-cell-address

  Each cell on an excel → Microsoft/Office/Excel/Object-Model/Worksheet[worksheet] has a unique address. There are two
  so called *reference styles* for these addresses:
    • A1 style
    • R1C1 style

  The A1 style seems to be default: other cells are referenced by the `D5` syntax. (fourth column, 5th row)

  With R1C1, the syntax for *relative addresses* of cells is `R[-3]C[2]` which is the value of the cell 3 rows above and 2 columns to the right.
  -
  The syntax for *absolute addresses* is `R4C2` which represents the → Microsoft/Office/Excel/Object-Model/Range/cell[cell] in the 4th row and 2nd column.

  The reference style can be changed through the → Microsoft/Office/Excel/Object-Model/Application[Application] object:
code {
→ Microsoft/Office/Excel/Object-Model/Application/referenceStyle[application.referenceStyle] = xlR1C1 ' or
→ Microsoft/Office/Excel/Object-Model/Application/referenceStyle[application.referenceStyle] = xlA1
code }

  It can also be changed through *File -> Options -> Formulas* and (un-)ticking *R1C1 reference style*.

  See also the Excel functions → Microsoft/Office/Excel/functions#excel-func-row-column[functions `row` and `column`] and
  → Microsoft/Office/Excel/functions#excel-func-row-column[`address`].

  In → Microsoft/Office/Excel/table[Excel tables], data can be accessed using the so called ~structured references~.

  It seems (at least to me) that the reference style cannot be *permanently stored* except when using a
  → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART/Personal_xlsb[Personal.xlsb] file.

}
{ State

  A running Excel application is always in one of the following four states:

 ~Ready state~:
    • No commands or macros are being run.
    • No dialog boxes are being displayed.
    • No cells are being edited and the user is not in the middle of a cut/copy and paste operation.
    • No embedded object has focus.

 ~Edit Mode~:
    • The user has started to type valid input characters into an unlocked or unprotected cell, or
    • has pressed `F2` on one or more unlocked or unprotected cells.

 ~Cut/copy and paste mode~:
    • The user has cut or copied a cell or range of cells and has not yet pasted them, or
    • has pasted them using the paste-special dialog box, which enables multiple paste operations.

 ~Point mode~:
    • The user is editing a formula and is selecting cells whose addresses are added to the formula being edited.

  When being in one of the last three modes, pressing `<ESC>` brings Excel back to the *ready state*.

}
{ Connecting to data sources #xls-connecting-to-data-sources

  A ~data connection~ allows to tap data that is not stored in a Workbook, but in an external database or file etc.
  
  Such a data connection basically records and stores the information needed to connect to and log into a an external data source and how to get the data from it.

  A data connection can be stored with the Workbook or in an *Office Data Connection* (→ development/filename-extensions#odc[.odc]) or *Data Source Name* (→ development/filename-extensions#dsn[.dsn]) file.

  Typical data sources that Excel might connect to are
    • → development/databases/SQL-Server
    • → development/databases/SQL-Server/Analysis-Services
    • → development/databases/Access[MS Access database]
    • text (that is: → development/Data/exchange/formats/CSV[CSV]) files
    • etc.

  A data source can obtain the data via an → development/databases/ODBC driver or → development/databases/OLE-DB.

  Existing data connections can be found on the *Data* ribbon, by clicking on *Existing Connections* (which is in the *Get External Data* group).
  -
  There are three places where connections might be stored:
    • In the workbook itself
    • In connection files (.odc) that are stored in the → Windows/dirs/Users/username/Documents/My-Data-Sources[My Data Sources] folder
    • In connection files on the network

  .odc files have the benefit that they can be shared among persons that need to query the same data source.

  { Query files

    Beside data connections files, there are also query files. Besides data source connectin information, they also store a query. There are the following types of query files:
      • .dqy (relational databases and text files)
      • .oqy (→ development/Data/OLAP)
      • .rqy (OLE DB data sources)
      • .iqy (Web query files)

  }
  { VBA / Object Model examples

    Some VBA examples that try to demonstrate how an Excel or a CSV might be accessed include:
       • → Microsoft/Office/Excel/Object-Model/ListObject/connectionString/CSV and
       • → Microsoft/Office/Excel/Object-Model/ListObject/connectionString/Excel

  }
  { TODO

    The → Microsoft/Office/Excel/Object-Model/WorkbookConnection[`workbookConnection`] object.

  }

}
{ Coauthoring

  Coauthoring allows multiple users to simultaneously edit a workbook that is hosted in the
  → development/Cloud[cloud] (OneDrive, OneDrive for Business or SharePoint Online). When one users saves the modifications, the other users
  will see them.

  Coauthoring is available to all Excel Online users and to → Microsoft/Office/365 customers.

}
{ Interesting command line parameters #excel-command-line-parameters

  The imho most interesting command line parameters include
  table { ll
    `/e` ☰ Start Excel without startup splash screen and without opening empty workbook. (`/e` = embed). Note, there is also the possibility to turn of the start screen in the Options (*File* -> *Options*) under *General* -> *Start up options*.
    `/p p:\ath\to\working\dir` ☰ Specify the a working dir, for example used when using the *Save As* functionality)
    `/s` ☰ Bypass all files that are located in startup directories (such as, for example, the → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART[`%appdata%\Microsoft\Excel\XLSTART`] directory) (`/s` = safe mode)
    `/a → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[ProgId]` ☰ 
    `/x` ☰ Start Excel in a new → Windows/development/process[process].

  table }

}
{ Misc

  On → Linux, there is `sc`, the command line spread sheet.

  { Finding a named column in a huge sheet

    Sometimes, one needs to find a named column in a wide wide sheet, with hundreds or even thousands of columns.

    It is possible to select the header-cell by first selecting the row with the column names and then go to the
    → Microsoft/Office/Visual-Basic-Editor/Immediate-Window and type (assuming that one is looking for the column that contains *xyz*):
code {
→ Microsoft/Office/Excel/Object-Model/Application#excel-application-goto[application.goto] selection.→ Microsoft/Office/Excel/Object-Model/Range/find[find]("xyz")
code }

    If one wants to go the the column that is named exactly *xyz* (rather than it only contains that string), the `lookAt` option must be used:
code {
→ Microsoft/Office/Excel/Object-Model/Application#excel-application-goto[application.goto] selection.→ Microsoft/Office/Excel/Object-Model/Range/find[find]("xyz", lookAt := xlWhole)
code }

  }

}
{ TODO

  Apparently, there are → Microsoft/Office/Excel/Add-ins[add-ins] for the → Microsoft#ms-dataverse[Microsoft Dataverse] (formerly Common Data Service) that make *entities* available to Excel.

}

sa:

  → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN/DCF/SPREADSHEETCOMPARE_EXE[`SPREADSHEETCOMPARE.EXE`] is a tool that allows to compare two workbooks.

  → Microsoft/Office/Excel/data-types[Data types in Excel].

  → development/databases/OLE-DB/provider/Microsoft-Access-database-engine/create-excel[Creating a new Excel workbook and worksheet with OLE DB, SQL and C#]

  Some Excel options can be configured in the → Windows/registry[registry] under the key
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version/Excel/Options[HKEY_CURRENT_USER\Software\Microsoft\Office\_version_\Excel\Options].

  → Microsoft/Office

  → Microsoft/Office/Excel/Add-ins[Add-ins] and → Windows/dirs/Users/username/Documents/Custom-Office-Templates[templates].

  → https://renenyffenegger.ch/Oracle/Libraries/xlsx-writer.html[xlsx-writer] is → development/databases/Oracle/PL-SQL[PL/SQL] package that allows to write
  native (xlsx) Excel files from → development/databases/Oracle[Oracle].

  The → Microsoft/Office/Excel[R package `xlsx`]

  → Windows/dirs/Program-Files/Microsoft-Office/root/OfficeN/EXCEL_EXE[`EXCEL.EXE`]

  → Microsoft/Office/Excel/GUI/Ribbon/tabs/Developer#excel-show-developer-tab[Show the developer tab]

  → Microsoft/Power-Query is found in the *Data* tab, under *Get & Transform*

  → development/Software/Oracle-SQL-Developer#sql-developer-export-excel[Exporting data from Oracle's SQL Developer] to Excel

  → Microsoft/Office/Excel/Power-Pivot
  
