$ Access Object Model: DoCmd

{ Methods

  table { ll

    `AddMenu` ☰
    → Microsoft/Office/Access/Object-Model/DoCmd/applyFilter[`ApplyFilter`] ☰ Compare with `SetFilter`
    `Beep` ☰
    `BrowseTo` ☰
    `CancelEvent` ☰
    `ClearMacroError` ☰ Resets the → Microsoft/Office/Access/Object-Model/MacroError[`MacroError`] object.
    `Close` ☰
    `CloseDatabase` ☰ Same as *File -> Close*.
    `CopyDatabaseFile` ☰ Copies the currently connected to database to a → development/databases/SQL-Server/administration/database[SQL Server database] (a database file with the extension → development/filename-extensions#mdf[`.mdf`]).
    `CopyObject` ☰
    → Microsoft/Office/Access/Object-Model/DoCmd/deleteObject[`DeleteObject`] ☰ Drop tables etc.
    `DoMenuItem` ☰
    `Echo` ☰ It is recommended to use `application.echo` instead of `doCmd.echo`
    `FindNext` ☰
    `FindRecord` ☰
    `GoToControl` ☰
    `GoToPage` ☰
    `GoToRecord` ☰
    `Hourglass` ☰
    `LockNavigationPane` ☰
    `Maximize`, `Minimize` ☰ 
    `MoveSize` ☰
    `NavigateTo` ☰
    `OpenDataAccessPage` ☰
    `OpenDiagram` ☰
    `OpenForm` ☰
    `OpenFunction` ☰
    `OpenModule` ☰
    `OpenQuery` ☰
    `OpenReport` ☰
    `OpenStoredProcedure` ☰
    `OpenTable` ☰
    `OpenView` ☰
    `OutputTo` ☰
    `PrintOut` ☰
    `Quit` ☰
    `RefreshRecord` ☰
    `Rename` ☰
    `RepaintObject` ☰
    `Requery` ☰
    `Restore` ☰
    → #doCmd-runCommand[`RunCommand`] ☰ Runs a built-in command (which is identified with the → https://docs.microsoft.com/en-us/office/vba/api/access.accommand[`acCmd*` enumeration]).
    `RunDataMacro` ☰
    `RunMacro` ☰
    `RunSavedImportExport` ☰
    → #doCmd-runSQL[`RunSQL`] ☰ Execute a DML (aka *action query) or DDL statement
    `Save` ☰
    `SearchForRecord` ☰
    `SelectObject` ☰
    `SendObject` ☰
    `SetDisplayedCategories` ☰
    → #doCmd-setFilter[`SetFilter`] ☰ Compare with → Microsoft/Office/Access/Object-Model/DoCmd/applyFilter[`ApplyFilter`]
    `SetMenuItem` ☰
    `SetOrderBy` ☰
    `SetParameter` ☰
    `SetProperty` ☰
    → #doCmd-SetWarnings[`SetWarnings`] ☰ Enable or disable warnings
    `ShowAllRecords` ☰
    `ShowToolbar` ☰
    `SingleStep` ☰
    → #doCmd-transfer[`TransferXXX`] ☰ `XXX` = `Database`, `SharePointList`, `Spreadsheet`, `SQLDatabase` or `Text`

  table }


}

{ openXXX / close #doCmd-open-close

  An access object is opened with `doCmd.openXXXX …` (`XXXX` being the object type) and closed with `doCmd.cloce acObjectId …`.

  { openForm / closeForm

  }

}
{ runCommand #doCmd-runCommand

 `doCmd.runCommand` runs one of the commands that is listed in the → https://docs.microsoft.com/en-us/office/vba/api/access.accommand[`acCommand`] enumeration.

  The following example → Microsoft/Office/Access/Object-Model/Form#acc-form-toggle-hdr-ftr[toggles the header and footer] of a → Microsoft/Office/Access/Object-Model/Form[form]:
code {
doCmd.runCmd acCmdFormHdrFtr
code }

}
{ runSQL #doCmd-runSQL

 `runSQL` executes an → development/databases/Access/SQL[SQL statement].

  { Suppress «You are about to append … row(s)» #runSQL-you-are-about

    If `runSQL` is used to execute an insert statement, by default, Access pops up a message box with a *You are about to append … row(s)* message:
    gh|about-MS-Office-object-model|/Access/DoCmd/img/You-are-about-to-append-1-row.png||

    In order to stop Access from displaying this message box, → #doCmd-setWarnings[`doCmd.setWarnings false`] must be executed beforehand.

  }
  { create view statement not supported

    `runSQL` cannot be used to create views.

  }

}
{ setFilter #doCmd-setFilter

  ? Remove the filter on the currently shown table:
code {
doCmd.setFilter ""
code }

}
{ setWarnings #doCmd-setWarnings

 `setWarnings false` might be executed to the → #runSQL-you-are-about[You are about to append … row(s)] message box.

  Compare with → Microsoft/Office/Access/Object-Model/Application#ms-object-model-application-displayAlerts[`application.displayAlerts`]

}
{ transfer… #doCmd-transfer

  There are a few `transfer…` commands that allow to export and import → development/Data from/to → development/databases/Access:
    • `transferDatabase`
    • `transferSharePointList`
    • `transferSpreadsheet`
    • `transferSQLDatabase`
    • `transferText`

  Under the hood, these methods use *Microsoft Access database engine* for the export and import, see
  → development/databases/OLE-DB/provider/Microsoft-Access-database-engine.

  A → development/languages/VBA example that demonstrates `doCmd.transferSpreadsheet` is → Microsoft/Office/Access/Object-Model/tests/export/excel-with-header[here].

  Compare these methods with `doCmd.outputTo …`.

}

sa:

  → Microsoft/Office/Access/Object-Model
