$ VBScript MS-Office App Creator

This page describes a lightweight → development/languages/VBScript library that I routinely use to create Office applications (Access, Excel or Word documents with → development/languages/VBA[Visual Basic for Applications] modules)
from the command line (→ Windows/dirs/Windows/System32/cmd_exe[`cmd.exe`] or → Windows/PowerShell).

The source code is → #office-app-creator-source-code[here (`create-MS-Office-app.vbs`)] or on → https://github.com/ReneNyffenegger/VBS-MS-Office-App-Creator[github].

{ Subs and Functions

  table { ll

    `compileApp(app)` ☰ Compiles the project. The function returns `true` if successful and `false` otherwise. See → Microsoft/Office/VBScript-App-Creator/examples/compileApp[this example] for a possible usage.
    → #createOfficeApp[`createOfficeApp(prod, fileName)`] ☰ Creates an Office document (`.docm`, `.xlsx`, `.xlsb` or `.accdb`, depending on the value of `prod` and or → development/filename-extensions[extension] of `fileName`). If the document alread exists, it is deleted.
    → #openOfficeApp[`openOfficeApp(prod, fileName)`] ☰ Opens an Office document. Unlike `createOfficeApp()`, no attempt is made to delete if it exists.
    → #insertModule[`insertModule(app, moduleFilePath, moduleName, moduleType)`] ☰ Add a → development/languages/VBA/language/module[VBA module] to the application. If module with same name already exists, it is replaced.
    `importVBAFile` ☰ Imports a → development/languages/VBA file.
   `insertSheet(wb, sheetName, codeName)` ☰ Adds a → Microsoft/Office/Excel/Object-Model/Worksheet and assigns `sheetName`  and `codeName` to the inserted sheet's name and code name, respectively. An exampe is → Microsoft/Office/VBScript-App-Creator/examples/Excel/insertSheet[here].
    → #addReference[`addReference(app, guid, major, minor)`] ☰ Add a reference to a → Windows/development/COM/type-library aka typelib.
    → #currentDir[`currentDir()`] ☰ Returns the path of the current directory with a trailing back slash (`\`)
    → #replaceThisWorkbookModule[`replaceThisWorkbookModule(app, moduleFilePath)`] ☰ Set the content of an Excel's `ThisWorkbook` module
    `addFormWithModule` ☰ Adds a *form* (`msForms.userForm`) and the corresponding VBA module, an example that demonstrates this functionality is → Microsoft/Office/VBScript-App-Creator/examples/form/basic[here].

  table }

  { createOfficeApp #createOfficeApp

  `createOfficeApp(prod, fileName)` creates an Office document or an → development/databases/Access database.

   The first parameter (`application`) is a string that determines what is to be created. Its value must be one of `word`, `excel` or `access`.
   -
   The second parameter (`fileName`) controls the filename of the document/database that is created. If the file already exists, it is deleted.

code {
set doc = createOfficeApp("word"  , "p:\ath\to\word\document.docm"   )
set xls = createOfficeApp("excel" , "p:\ath\to\excel\worksheet.xlsm" )
set acc = createOfficeApp("access", "p:\ath\to\access\database.accdb")
code }

  }
  { openOfficeApp #openOfficeApp

   `openOfficeApp(prod, fileName)` opens an Office document for further manipulation.

    The meaning of the parameters of `openOfficeApp(prod, fileName)` are the same as those of → #createOfficeApp[`createOfficeApp(prod, filename)`].

    Currently (version 0.03), only `prod = excel` is implemented.
code {
set xls = openOfficeApp("excel"  , "p:\ath\to\excel\worksheet.xlsm")
code }

  }
  { insertModule #insertModule

   `insertModule(app, moduleFilePath, moduleName, moduleType)` inserts a → development/languages/VBA/language/module[VBA module].

    `app` must be an application object
      • → Microsoft/Office/Word/Object-Model/Application[`Word.Application`],
      • → Microsoft/Office/Excel/Object-Model/Application[`Excel.Application`] or
      • `Access.Application`
     -
     For Word and Excel documents, the required application object is obtained by using the `.application` property on the object that is returned by `createOfficeApp(…)`.

    `moduleFilePath` is a string that locates the file path of the module that is to be inserted.

    `moduleName` is the name that will be assigned to the inserted module. If there is already a module with this name, it will be replaced.

    `moduleType` is an integer that describes what type of module is to be inserted. The possible values are `1` and `2`. They correspond to the constants `vbext_ct_StdModule` and `vbext_ct_ClassModule`.
    
     An → #office-app-creator-examples[example] that demonstrate how `insertModule()` replaces a module is → Microsoft/Office/VBScript-App-Creator/examples/Excel/add-module[here].

  }
  { addReference #addReference

   `addReference(app, guid, major, minor)` adds a reference to a → Windows/development/COM/type-library aka typelib. (See for example
   → Microsoft/Office/Visual-Basic-Editor/Object-Model#vbe-add-reference[adding a reference to a library programmatically]).

   `app` has the same meaning as in → #insertModule[`insertModule(…)`]

   `guid` is the → development/UUID-GUID[GUID] the uniquely identifies the type library whose reference is to be added.

   `major` and `minor` specify the type library's version.

  }
  { currentDir #currentDir

   `currentDir()` returns the current directory with a trailing backslash (`\`) so that it can be easily concatenated with the relative path names of files, especially in conjunction with inserting modules 
   (→ #insertModule[`insertModule()`])

  }
  { replaceThisWorkbookModule #replaceThisWorkbookModule

   `replaceThisWorksheetModuleModule(app, moduleFilePath)` is quite similar to `insertModule()` but can only be used for an Excel application in order to insert a `ThisWorksheet` module.

    See → Microsoft/Office/VBScript-App-Creator/examples/Excel/workbook_open[this example] that demonstrates this function.

  }

}
{ Examples #office-app-creator-examples

  The three *simple* examples for → Microsoft/Office/VBScript-App-Creator/examples/Access/simple[Access],
  → Microsoft/Office/VBScript-App-Creator/examples/Excel/simple[Excel] and
  → Microsoft/Office/VBScript-App-Creator/examples/Word[Word] are very similar: They create the respective Office document and
  insert a module, named `functions.bas` which has one `sub`, named `main` which calls `msgBox()` to demonstrate that the sub was called.
  -
  When done with the creation of the document, this `main()` sub is called.

  Generally, these examples need to be executed on the command line with
code {
P:\ath\to\example\dir> → Windows/dirs/Windows/System32/cscript_exe[cscript] create.wsf
code }

  → Microsoft/Office/VBScript-App-Creator/examples/Excel/callback[This example] demonstrates how an object can be passed to the → development/languages/VBA that is running in the application in order to receive messages.

  For Excel, there are also these additional examples:
    • → Microsoft/Office/VBScript-App-Creator/examples/Excel/workbook_open[`workbook_open()`]
    • → Microsoft/Office/VBScript-App-Creator/examples/Excel/worksheet_event[worksheet events],
    • → Microsoft/Office/VBScript-App-Creator/examples/Excel/add-module[add/replace modules] and
    • → Microsoft/Office/VBScript-App-Creator/examples/Excel/codeName[Change the `codename` property of a worksheet]

}
{ Source code #office-app-creator-source-code

  This is the source code of `create-MS-Office-app.vbs`:
  gh|VBS-MS-Office-App-Creator|/create-MS-Office-app.vbs||

}
{ History / Versions

  table { ll
    0.1 ☰ Initial version
    0.2 ☰ Excel: Determine file format value based on extension of filename (which allows to save `.xlsm` and `.xlsb` files). This change was needed to create a → Windows/dirs/Users/username/AppData/Roaming/Microsoft/Excel/XLSTART/Personal_xlsb Workbook (2020-06-19).
    0.3 ☰ Add → #openOfficeApp[`openOfficeApp()`] (2020-06-27)
    0.4 ☰ Improve comments (2020-07-13)
    0.5 ☰ Add parameter `update = false` when opening Excel → Microsoft/Office/Excel/Object-Model/Workbook[workbooks].
    0.6 ☰ Don't remove existing module, delete their contents and reload from file. This was needed to write into `Sheet…` VBA modules
    0.7 ☰ Turn relative into absolute paths in `insertModule` (2021-06-04)
    0.8 ☰ Rename `replaceThisWorksheetModule` to `replaceThisWorkbookModule` (2021-06-14)
    0.9 ☰ Add function `compileApp` (2021-06-16). See → Microsoft/Office/VBScript-App-Creator/examples/compileApp[this example].
    0.10 ☰ Add function `insertSheet` (2021-06-25). See → Microsoft/Office/VBScript-App-Creator/examples/Excel/insertSheet[this example].
    0.11 ☰ Cosmetic change (`dim comp` before the variable is used).
    0.12 ☰ Function `addFormWithModule`, an example that demonstrates this functionality is → Microsoft/Office/VBScript-App-Creator/examples/form/basic[here].
    0.13 ☰ Add function `importVBAFile`
  table }

}

sa:
  Creating an MS-Access database → development/databases/ADO/ADOX/objects/catalog/create-access-db[with ADOX and VBScript]

  → https://github.com/ReneNyffenegger/runVBAFilesInOffice
