$ Microsoft Office Versions

table { lr

 ~Office version~ ☰ ~Version id~
  Office 97   ☰  7.0
  Office 98   ☰  8.0
  Office 2000 ☰  9.0
  Office XP   ☰ 10.0
  Office 2003 ☰ 11.0
  Office 2007 ☰ 12.0
  Office 2010 ☰ 14.0
  Office 2013 ☰ 15.0
  Office 2016 ☰ 16.0

table }

The short version id is used to locate the relevant Office → Windows/registry/tree-structure/key[registry keys] under
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office, for example
  → Windows/registry/tree/HKEY_CURRENT_USER/Software/Microsoft/Office/application_version[`HKCU\Software\Microsoft\Office\16.0`] or
  → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/Office/application_version[`HKLM\Software\Microsoft\Office\16.0`]

The short version id (but only the first part such as `16`) is also used in the file system path
→ Windows/dirs/Program-Files/Common-Files/microsoft-shared/OFFICEn[`C:\Program Files\Common Files\microsoft shared\OFFICEn`].

{ Determining version id #office-determine-version

  { Visual Basic for Applications

     In → development/languages/VBA[VBA], the version id (such as `16.0`) is returned by → Microsoft/Office/Object-Model/Application#ms-object-model-applicaion-version[`application.version`].

  }
  { PowerShell + Registry

    The version id of the installed → Microsoft/Office[Office] applications can be queried from the → Windows/registry[registry]: they are stored as the
    → Windows/registry/tree-structure/default-value[default value] of the Application's → Windows/registry/tree/HKEY_CLASSES_ROOT/ProgId[Prog ID].

code {
→ Windows/PowerShell/language/statement/foreach[forEach] ($appId in 'Access', 'Excel', 'Lync', 'OneNote', 'Outlook', 'PowerPoint', 'Publisher', 'Visio', 'Word') {

   $regKey =  "hklm:\Software\Classes\$($appId).application\curVer"

   if (-not (→ Windows/PowerShell/command-inventory/noun/path/test[test-path] $regKey)) {
     $version = 'n/a'
   }
   else {
      $defaultValue = (→ Windows/PowerShell/command-inventory/noun/item/get[get-item] $regKey).getValue('')
    #
    # Get number from string that looks like »Excel.Application.16«
    #
      $version =  $defaultValue -replace '.*\.(\d+)', '$1'
   }

   → Windows/PowerShell/command-inventory/noun/output/write[write-output]('  {0,-10} {1,3}' → Windows/PowerShell/language/operator/f[-f] $appId, $version)

}
code }

  }

}
{ 2010

}
{ 2013 #office-2013

  Office 2013 introduced → Microsoft/Office/Click-to-Run[Click-to-Run] as an alternative to installing Office with the *Windows Installer* (MSI) technology.

}
{ 2016

  …

}
{ 2019

  Beginning with Office 2019, Office cannot be installed with MSI anymore, only *Click-to-Run* will be available.
  -
  Nevertheless, Office 2019 is a pertetually-licensed product similar to previous versions that receives regular security updates - yet now new features.

}
