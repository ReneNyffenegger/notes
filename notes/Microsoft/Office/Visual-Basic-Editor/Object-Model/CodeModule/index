$ VB Editor Object Model: CodeModule

The `codeModule` object represents the source code that is associated with a form, class or document and allows to change the source code programmatically.

In the → Microsoft/Office/Visual-Basic-Editor/Immediate-Window, a reference to a code module might be found with an expression such as
code {
application.VBE.activeVBProject.→ Microsoft/Office/Visual-Basic-Editor/Object-Model/VBComponent[vbComponents]("module10").codeModule
code }

{ Properties

  Properties of `codeModule` are
  table { ll
    `codePane` ☰
    `countOfDeclarationLines` ☰
    `countOflines` ☰ The number of lines in the source code
    `lines` ☰
    `parent` ☰
    `procBodyLine(procName, procKind)` ☰ returns the line number at which the → development/languages/VBA/language/subs-and-functions[sub, function] or property get, set or let procedure begins. `procType` is one of `vbext_pk_proc`, `vbext_pk_get`, `vbext_pk_let` or `vbext_pk_set`
    `procCountLines` ☰
    `procOfLine(line, procKind)` ☰ Returns the name of the procedure that «occupies» line number `line`. If `line` is larger than the number of lines in the code module, the function returns the name of the last function. See `procBodyLine` for `procKind`.
    `procStartLine(procName, procKind)` ☰
    `vbe` ☰
  table }

}
{ Methods

  Methods of `codeModule` are
  table { ll
    `addFromFile` ☰ Compare with `→ Microsoft/Office/Visual-Basic-Editor/Object-Model/VBComponent[vbComponents].import`
    `addFromString` ☰ Inserts a line at the current cursor position.
    → Microsoft/Office/Visual-Basic-Editor/Object-Model/CodeModule/createEventProc[`createEventProc`] ☰ `createEventProc("click", "labelFoo")` creates a procedure to catch the *click* event on the control *labelFoo* and returns the line number where the event procedure was inserted.
    `deleteLines` ☰ `deleteLines n` deletes line `n`. `deleteLines n, m` deletes `m` lines starting at line `n`. Note that line numbers are one-based.
    `find` ☰
    `insertLines` ☰
  table }

}

{ Inserting lines

  In order to append a line to the source code, `insertLines` needs to be used:
code {
dim mdl as codeModule
set mdl = application.VBE.ActiveVBProject.VBComponents("module10").codeModule
mdl.insertLines cm.countOfLines + 1, "' This line was added at " & format(now, "yyyy-mm-dd hh:nn:ss")
code }

  Unfortunately, `mdl` looses the reference to the code module object after executing `mdl.insertLines`

}

{ Changing a line

  The following sequence changes the text of the third line:

code {
dim mdl as codeModule
set mdl = …
→ development/languages/VBA/language/statements/set cm = application.VBE.ActiveVBProject.VBComponents("module10").codeModule
cm.replaceLine 3, " ' This line was changed programmatically"
code }

}

{ Delete entire code module

code {
dim mdl as codeModule
set mdl = …

if mdl.countOfLines > 0 then
   mdl.deleteLines 1, mdl.countOfLines
end if
code }

  Alternatively, the `if then` can be ommited by making sure there is always at least one line in the source code:
code {
mdl.insertLines 1, "'"
mdl.deleteLines 1, mdl.countOfLines
code }

}

sa:

  A *code module* might be associated with multiple → Microsoft/Office/Visual-Basic-Editor/Object-Model/CodePane[code panes].

  → Microsoft/Office/Excel/Object-Model/Hyperlink/followHyperlink[This example] demonstrates how the `codeMOdule` object is used to create a dynamic
  → development/languages/VBA/language/classes/event[event] handler for a → Microsoft/Office/Excel/Object-Model/Hyperlink[`hyperlink`] on a
  → Microsoft/Office/Excel/Object-Model/Worksheet[`worksheet`].

  → Microsoft/Office/Visual-Basic-Editor/Object-Model/VBComponent[`vbComponent`]

  The → Microsoft/Office/Visual-Basic-Editor/Object-Model[VB Editor object model]

  → Microsoft/Office/Visual-Basic-Editor/Object-Model/CodeModule/create-VBA-module-while-executing[This example] demonstrates how `CodeModuld` can be used to dynamically create
  a → development/languages/VBA/language/module[VBA module] and insert a → development/languages/VBA/language/subs-and-functions[sub] and call it with Excel's
  → Microsoft/Office/Excel/Object-Model/Application/run[`application.run()`] function.
