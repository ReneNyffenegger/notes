$ System.DateTime (struct)
@ System.DateTime

An instance of the `System.DateTime` represents
  • a point in time between 0001-01-01 and 9999-12-31
  • with an accuracy of 100 nanoseconds
  • without a reference to a → development/date-time/time-zone.

Each of these possible point in times is assigned a 64-bit number, called *tick*, which represents the number of 100-nonosecond intervals between Midnight January 1, 0001 and the point in time the instance of the struct
represents.


In → Windows/PowerShell, the current date-time is returned by the
→ Windows/PowerShell/command-inventory/noun/date/get[`get-date` cmdLet].

{ Creating a DateTime object in PowerShell

  A `DateTime` → Windows/PowerShell/language/object can be created in → Windows/PowerShell like so:
code {
$dt = → Windows/PowerShell/command-inventory/noun/object/new[new-object] → Microsoft/dot-net/namespaces-classes/System/DateTime[dateTime] 2020,03,15 , 14,53,18
code }

  It is also possible to crete a `DateTime` object with the
  → Microsoft/dot-net/namespaces-classes/System/Convert/ToDateTime[`System.Convert.ToDatetime()`] method.

}
{ String-formatting a DateTime

  The `ToString()` method takes a format string that allows to format the value of a  `DateTime` object.

  The following → development/languages/C-Sharp example shows a few format strings that are *culture-independent*:
  gh|.NET-API|/System/DateTime/ToString.cs||

  In → Windows/PowerShell,it is possible to format a `DateTime` object with the → Windows/PowerShell/language/operator/f[`-f` operator].
  gh|.NET-API|/System/DateTime/format.ps1||
 
}
{ Converting a UTC string to a local time #System-DateTime-convert-from-UTC-to-local

  In → Windows/PowerShell, a string that describes a point in time in → misc/UTC format can be converted to a local time like so:
code {
$utc   =  '2021-10-25T13:23:08.0966497Z'
$local = ([dateTime] $utc).ToLocalTime()

write-host $local
code }

}
{ Relation to file times

 *Ticks* that are used in `System.DateTime` are related to another Microsoft specific representation of point in times: *file times*.
  -
  A file time measures a point in time as the number of 100-nanosecond intervals («ticks») that have elapsed since midnight, January 1601, → misc/UTC[UTC] (as opposed to
  counting such intervals starting in the Year 1).

 `System.DateTime` offers → Microsoft/dot-net/namespaces-classes/System/DateTime/_FileTime[four methods to convert between file times and DateTimes].

}
{ Removing time information from a DateTime object

  With .NET 6, time related information (hours, minutes, seconds) can be «removed» from a `DateTime` object:
code {
var dt = DateOnly.FromDateTime(dt_hms);
code }
  


}

{ Fields, properties and methods

  table { ll

    `Add()` ☰
    `AddDays()` ☰
    `AddHours()` ☰
    `AddMilliseconds()` ☰
    `AddMinutes()` ☰
    `AddMonths()` ☰
    `AddSeconds()` ☰
    `AddTicks()` ☰
    `AddYears()` ☰
    `Compare()` ☰
    `CompareTo()` ☰
    `Date` ☰
    `Day` ☰
    `DayOfWeek` ☰
    `DayOfYear` ☰
    `DaysInMonth()` ☰
    `Equals()` ☰
    `FromBinary()` ☰
    `FromFileTime()` ☰
    `FromFileTimeUtc()` ☰
    `FromOADate()` ☰
    `GetDateTimeFormats()` ☰
    `GetHashCode()` ☰
    `GetTypeCode()` ☰
    `Hour` ☰
    `IsDaylightSavingTime()` ☰
    `IsLeapYear()` ☰
    `Kind` ☰ indicates whether the time represented by this instance is based on local time, → misc/UTC or neither.
    `MaxValue` ☰ one of the three fields
    `Millisecond` ☰
    `Minute` ☰
    `MinValue` ☰ one of the three fields
    `Month` ☰
    `Now` ☰
    `Parse()` ☰
    `ParseExact()` ☰
    `Second` ☰
    `SpecifyKind()` ☰
    `Subtract()` ☰
    `Ticks` ☰
    `TimeOfDay` ☰
    `ToBinary()` ☰
    `Today` ☰ A static property that evaluates to a `DateTime` that represents *today*.
    `ToFileTime()` ☰
    `ToFileTimeUtc()` ☰
    `ToLocalTime()` ☰
    `ToLongDateString()` ☰
    `ToLongTimeString()` ☰
    `ToOADate()` ☰
    `ToShortDateString()` ☰
    `ToShortTimeString()` ☰
    `ToString()` ☰
    `ToUniversalTime()` ☰
    `TryFormat()` ☰
    `TryParse()` ☰
    `TryParseExact()` ☰
    `UnixEpoch` ☰ one of the three fields
    `UtcNow` ☰
    `Year` ☰

  table }

}

sa:

 `System.DateTime` offers methods to convert between a DateTime and → Microsoft/dot-net/namespaces-classes/System/DateTime/_FileTime/_OLE-Automation[OLE Automation dates].

 → Microsoft/dot-net/namespaces-classes/System/DateTimeOffset[`System.DateTimeOffset`],
 → Microsoft/dot-net/namespaces-classes/System/TimeSpan[`System.TimeSpan`], `System.TimeZoneInfo`, `System.Diagnostics.Stopwatch`

  The → Windows/PowerShell/language/object/type/accelerators[PowerShell type accelerator] for `System.Datetime` is `[datetime]`.

  The Perl module → development/languages/Perl/modules/DateTime[`DateTime`]

  The → development/databases/SQL-Server/T-SQL/data-types[SQL Server data types] that are suited best to store a `DateTime` are
  → development/databases/SQL-Server/T-SQL/data-types/datetime[`datetime`] or
  → development/databases/SQL-Server/T-SQL/data-types/datetime2[`datetime2`] or
  → development/databases/SQL-Server/T-SQL/data-types/smalldatetime[`smalldatetime`].
