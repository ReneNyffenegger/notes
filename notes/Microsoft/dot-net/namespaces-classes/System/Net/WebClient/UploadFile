$ System.Net.WebClient - UploadFile()

The `UploadFile()` method of the → Microsoft/dot-net/namespaces-classes/System/Net/WebClient[`System.Net.WebClient`] class can be used to upload a file to a
remote server with a → development/web/HTTP POST request or an → development/web/FTP[FTP] STOR command.

{ PowerShell example #WebClient-upload-ps

  Apparently, when using the `Upload(address, fileName)` overload of `UploadFile`, `fileName` needs to be passed as *absolute* (full) path, otherwise
  an
   *Exception calling "UploadFile" with "2" arguments(s): "An exception occurred during a WebClient request."*
  error is thrown.
  -
  Therefore, the name of the file to be uploaded is assigned to variable using → Windows/PowerShell/command-inventory/noun/item/get[`get-item`] so that
  the full path can be passed with `$localFile.fullName`.

  The following simple → Windows/PowerShell example tries to demonstrate how a file can be uploaded to an FTP server:
  gh|.NET-API|/System/Net/WebClient/UploadFile.ps1||

}
{ Upload multiple files

 `UploadFile()` can be combined with a an iteration over files using → Windows/PowerShell/command-inventory/noun/childItem/get[`get-childItem`] and the
 → Windows/PowerShell/language/statement/foreach[`foreach` statement] to upload multiples files.
  gh|.NET-API|/System/Net/WebClient/UploadFiles.ps1||

  Because `get-childItem` returns → Microsoft/dot-net/namespaces-classes/System/IO/FileInfo[`System.IO.FileInfo`] objects, but I am interested in having a textual
  (string) representation of the files, I use → Windows/PowerShell/command-inventory/noun/path/split[`split-path -leaf …`] to get such strings.
  

}
{ Connection pooling

  Behind the scenes, as per → https://stackoverflow.com/a/49088223/180275[this stackoverflow answer],
  a connection pool is established so that no new connection needs to be opened every time when a file is uploaded. Although the answer is about
  → Microsoft/dot-net/namespaces-classes/System/Net/WebRequest[`System.Net.WebRequest`], its still relevant for `WebClient`, because it uses `WebRequest` internally.
  

}
