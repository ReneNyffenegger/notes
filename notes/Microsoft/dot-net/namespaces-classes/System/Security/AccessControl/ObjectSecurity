$ System.Security.AccessControl.ObjectSecurity (class)

? `System.Security.AccessControl.ObjectSecurity` allows to control *securable objects* without ACLs.

`ObjectSecurity` derives from → Microsoft/dot-net/namespaces-classes/System/Object[`System.Object`].


{ Methods and properties

  table { ll

    `AccessRightType` ☰
    `AccessRuleFactory()` ☰
    `AccessRulesModified` ☰
    `AccessRuleType` ☰
    `AreAccessRulesCanonical` ☰
    `AreAccessRulesProtected` ☰
    `AreAuditRulesCanonical` ☰
    `AreAuditRulesProtected` ☰
    `AuditRuleFactory()` ☰
    `AuditRulesModified` ☰
    `AuditRuleType` ☰
    `GetGroup()`, `GetOwner()`, `SetGroup()`, `SetOwner()` ☰ Get or set owner/primary group which are identified by an instance of → Microsoft/dot-net/namespaces-classes/System/Security/Principal/IdentityReference[`System.Security.Principal.IdentityReference`]
    `GetSecurityDescriptorBinaryForm()` ☰
    `GetSecurityDescriptorSddlForm()` ☰
    `GroupModified` ☰
    `IsContainer` ☰
    `IsDS` ☰ A `boolean` that indicates if the object is a directory. (*protected*).
    `IsSddlConversionSupported()` ☰
    `ModifyAccess()` ☰
    `ModifyAccessRule()` ☰
    `ModifyAudit()` ☰
    `ModifyAuditRule()` ☰
    `OwnerModified` ☰
    `Persist()` ☰
    `PurgeAccessRules()` ☰
    `PurgeAuditRules()` ☰
    `ReadLock()` ☰
    `ReadUnlock()` ☰
    `SecurityDescriptor` ☰
    `SetAccessRuleProtection()` ☰
    `SetAuditRuleProtection()` ☰
    `SetSecurityDescriptorBinaryForm()` ☰
    `SetSecurityDescriptorSddlForm()` ☰
    `WriteLock()` ☰
    `WriteUnlock()` ☰

  table }

}

