$ System.Security.Principal.WindowsIdentity (class)

`System.Security.Principal.WindowsIdentity` represents a → Windows/user-account[Windows user] (or more techically a *Windows NT security token*).

{ TODO

  Create a → Microsoft/dot-net/namespaces-classes/System/Security/Principal/WindowsPrincipal[`System.Security.Principal.WindowsPrincipal`] object from a `WindowsIdentity` object:
code {
$curIdentity = [System.Security.Principal.WindowsIdentity]::→ Microsoft/dot-net/namespaces-classes/System/Security/Principal/WindowsIdentity/GetCurrent[GetCurrent]()
$principal   = new-object System.Security.Principal.WindowsPrincipal $curIdentity
$principal.IsInRole([→ Microsoft/dot-net/namespaces-classes/System/Security/Principal/WindowsBuiltInRole[System.Security.Principal.WindowsBuiltInRole]]::User)
$principal.IsInRole([→ Microsoft/dot-net/namespaces-classes/System/Security/Principal/WindowsBuiltInRole[System.Security.Principal.WindowsBuiltInRole]]::Administrator)
code }

}


sa:

  The (static) method → Microsoft/dot-net/namespaces-classes/System/Security/Principal/WindowsIdentity/GetCurrent[`GetCurrent()`] returns a `WindowsIdentity` object that represents
  the current → Windows/user-account.

  The property → Microsoft/dot-net/namespaces-classes/System/Security/Principal/WindowsIdentity/AuthenticationType[`AuthenticationType`] indicates how a user
  was → Windows/security/authentication[authenticated].

  The property `.Claims` returns a list of → Microsoft/dot-net/namespaces-classes/System/Security/Claims/Claim[`System.Security.Claims.Claim`] objects.

  → Windows/user-account/group
