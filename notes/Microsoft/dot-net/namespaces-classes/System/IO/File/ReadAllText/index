$ System.IO.File::ReadAllText

`System.IO.File::ReadAllText` slurps the content of an entire file and returns it as a → Microsoft/dot-net/namespaces-classes/System/String[`System.String`] object.

The first parameter specifies the path to the file to be read.
-
The optional second parameter is a → Microsoft/dot-net/namespaces-classes/System/Text/Encoding[`System.Text.Encoding`] object that specifies the
file's development/Unicode/character-encoding[encoding].

{ Change a file's encoding #ReadAllText-change-encoding

 `ReadAllText` along with `WriteAllText` can be used to change the → development/Unicode/character-encoding[encoding] of a file:
code {
$absolute_path = → Windows/PowerShell/command-inventory/noun/path/convert[convert-path] .\readme.txt
$content = [IO.File]::ReadAllText($absolute_path, [System.Text.Encoding]::GetEncoding('iso-8859-1'))
[IO.File]::WriteAllText($absolute_path, $content, [Text.Encoding]::UTF8)
code }

}

sa:

  → Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllBytes-WriteAllBytes[`ReadAllBytes()` and `WriteAllBytes()`]

  → Microsoft/dot-net/namespaces-classes/System/Text/Encoding[`System.Text.Encoding`]

  The → Windows/PowerShell cmdlet → Windows/PowerShell/command-inventory/noun/content/get[`get-content`] allows to read the entire content of a file with
  the → Windows/PowerShell/command-inventory/noun/content/get#get-content-raw[`-raw`] parameter.

 `ReadAllText` in combination with `WriteAllText` might be used to → development/line-break#change-line-endings[change line endings] in a file from DOS convention to UNIX convention, or vice versa.
