$ System.IO.File (static class)
@ System.IO.File

`System.IO.File` only has static methods and allows for generic file related operations in a file system.
-
In contrast, → Microsoft/dot-net/namespaces-classes/System/IO/FileInfo[`System.IO.FileInfo`] represents a specific file.

{ Methods

  table { ll

    `AppendAllLines()`☰
    `AppendAllLinesAsync()`☰
    `AppendAllText()`☰
    `AppendAllTextAsync()`☰
    `AppendText()`☰
    `Copy()`☰
    `Create()`☰
    `CreateSymbolicLink()`☰
    `CreateText()`☰
    `Decrypt()`☰
    `Delete()`☰ Deletes a file. If it doesn't exist, no exception will be thrown.
    `Encrypt()`☰
    `Exists()`☰ Checks if a file exists.
    `GetAttributes()`☰
    `GetCreationTime()`☰
    `GetCreationTimeUtc()`☰
    `GetLastAccessTime()`☰
    `GetLastAccessTimeUtc()`☰
    `GetLastWriteTime()`☰
    `GetLastWriteTimeUtc()`☰
    `Move()`☰
    `Open()`☰
    `OpenHandle()`☰
    `OpenRead()`☰
    `OpenText()`☰
    `OpenWrite()`☰
    → Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllBytes-WriteAllBytes[`ReadAllBytes()`]☰
    `ReadAllBytesAsync()`☰
    `ReadAllLines()`☰
    `ReadAllLinesAsync()`☰
    → Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllText[`ReadAllText()`] ☰ Slurps the content of an entire file.
    `ReadAllTextAsync()`☰
    `ReadLines()`☰
    `Replace()`☰
    `ResolveLinkTarget()`☰
    `SetAttributes()`☰
    `SetCreationTime()`☰
    `SetCreationTimeUtc()`☰
    `SetLastAccessTime()`☰
    `SetLastAccessTimeUtc()`☰
    `SetLastWriteTime()`☰
    `SetLastWriteTimeUtc()`☰
    → Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllBytes-WriteAllBytes[`WriteAllBytes()`] ☰ Creates a new or overwrites an existing file, writes the specified byte array to the file, and then closes the file.
    `WriteAllBytesAsync()`☰
    `WriteAllLines()`☰
    `WriteAllLinesAsync()`☰
    `WriteAllText()`☰
    `WriteAllTextAsync()`☰

  table }

  Why is there no `WriteAllBytes()` method?

}

{ Exists #io-file-exists

  The method `Exists` checks if a file exists.

  Compare with the → Windows/PowerShell/command-inventory/noun/path/test#ps-test-path-exists[`test-path` cmdLet].

}
{ ReadAllText

  → Microsoft/dot-net/namespaces-classes/System/IO/File/ReadAllText[`ReadAllText`] slurps the content of an entire file.

}
{ Concatenating multiple files

  The following example concatenates multiple files in → Windows/PowerShell:
code {
PS: C:\> $a = [IO.File]::ReadAllText("$pwd\a.txt")
PS: C:\> $b = [IO.File]::ReadAllText("$pwd\b.txt")
PS: C:\> $c = [IO.File]::ReadAllText("$pwd\c.txt")
PS: C:\> [IO.File]::WriteAllText("$pwd\concatenated" , $a)
PS: C:\> [IO.File]::AppendAllText("$pwd\concatenated", $b)
PS: C:\> [IO.File]::AppendAllText("$pwd\concatenated", $c)
code }
 
  Of course, the canonical way would be something like the following, but is tends to mess things because it sometimes writes BOMs:
code {
→ Windows/PowerShell/command-inventory/noun/content/get a.txt,b.txt,c.txt | → Windows/PowerShell/command-inventory/noun/content/set concatenated.txt
code }

}
sa:
 `→ Microsoft/dot-net/namespaces-classes/System/IO/Path`
