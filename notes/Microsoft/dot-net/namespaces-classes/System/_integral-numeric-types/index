$ .NET: Integral numeric types
@ Integral numeric types

{ List of integral numeric types

  table { lll
    .NET Type ☰ → development/languages/C-Sharp/[C#] keyword ☰ → Windows/PowerShell/language/lexical-structure/token/literal[PowerShell literal] suffix
    `System.SByte`, → Microsoft/dot-net/namespaces-classes/System/Byte[`System.Byte`] ☰ `sbyte`, `byte` ☰ `y`, `uy`
   `System.Int16`, `System.UInt16` ☰ `short`, `ushort` ☰ `s`, `us`
    → Microsoft/dot-net/namespaces-classes/System/Int32[`System.Int32`], `System.UInt32` ☰ `int`, `uint` ☰ `u` (none for `System.UInt32`???)
    `System.Int64`, `System.UInt64` ☰ `long`, `ulong` ☰ `l`, `ul`
    → Microsoft/dot-net/namespaces-classes/System/IntPtr[`System.IntPtr`], `System.UIntPtr` ☰ `nint`, `nuint` ☰
  table }

}

{ Parse #dot-net-int-Parse

  Convert a hexadecimal string into an integral numeric type:
code {
[Uint32]::Parse('abcd', [→ Microsoft/dot-net/namespaces-classes/System/Globalization/NumberStyles[System.Globalization.NumberStyles]]::AllowHexSpecifier)
code }

   See also → Microsoft/dot-net/namespaces-classes/System/Convert/_HexString[`System.Convert.FromHexString`]

}
{ Converting to integral numeric types #dotnet-int-types-convert

  → Microsoft/dot-net/namespaces-classes/System/Convert[`System.Convert`] provides a few → Microsoft/dot-net/namespaces-classes/System/Convert#System-Convert-To[`To…()`] methods that allow
  to convert to integral types, as is demonstrated with the following → Windows/PowerShell statements:
code {
[System.Convert]::ToUInt64('   42 ')
[System.Convert]::ToUInt64('fedcba9876543210', 16) # Hexadecimal to Uint64
code }

}

sa:
  → Microsoft/dot-net/namespaces-classes/System/Numerics/BigInteger[`System.Numerics.BigInteger`]

  → Microsoft/dot-net/namespaces-classes/System/Decimal[`System.Decimal`]
