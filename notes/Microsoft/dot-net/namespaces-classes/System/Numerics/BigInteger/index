$ System.Numerics.BigInteger (struct)

`System.Numerics.BigInteger` represents a theoretically arbitrary large number

{ Properties and methods

  table { ll

   `Abs()` ☰
   `Add()` ☰
   `Compare()` ☰
   `CompareTo()` ☰
   `Divide()` ☰
   `DivRem()` ☰
   `Equals()` ☰
   `GetBitLength()` ☰
   `GetByteCount()` ☰
   `GetHashCode()` ☰
   `GreatestCommonDivisor()` ☰
   `IsEven` ☰
   `IsOne` ☰
   `IsPowerOfTwo` ☰
   `IsZero` ☰
   `Log()` ☰
   `Log10()` ☰
   `Max()` ☰
   `Min()` ☰
   `MinusOne` ☰
   `ModPow()` ☰
   `Multiply()` ☰
   `Negate()` ☰
   `One` ☰
   `Parse()` ☰ A `static` method to creates a `BigInteger` from a textual representation of a number. Compare with `ToString()`
   `Pow()` ☰
   `Remainder()` ☰
   `Sign` ☰
   `Subtract()` ☰
   `ToByteArray()` ☰
   `ToString()` ☰ Creates a textual representation of the big integer in different formats, for example `bigNum.ToString("X")` returns the number's hexadecimal representation. Compare with `Parse()`
   `TryFormat()` ☰
   `TryParse()` ☰
   `TryWriteBytes()` ☰
   `Zero` ☰

  table }

}
{ Inetersting ways to create a big integer

  There are multiple constructors for `BigInteger`. One interesting constructors  takes an array of bytes to construct the big integer
code {
[byte[]] $bytes = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
$bigInt = [System.Numerics.BigInteger]::new($bytes)
code }

  The first byte in the is the least signifcant, the last byte the most signifcant one:
code {
$bigInt.ToString("X")
0A090807060504030201
code }
  

  A big integer can alternatively be created from a textual representation of the number (i. e. a string) like so:
code {
$bigInt = [System.Numerics.BigInteger]::Parse("47390263963055590408705")
code }

}
{ PowerShell data type suffix for BigInteger

  In → Windows/PowerShell, the → Windows/PowerShell/language/lexical-structure/token/literal#ps-int-literal-datatype[data type suffix for integers] to indicate a `BigInteger` is `n`:
code {
PS C:\> (123456789012345678901234567890n).GetType().FullName
System.Numerics.BigInteger
code }

}

sa:

  → Microsoft/dot-net/namespaces-classes/System/_integral-numeric-types

  The → Windows/PowerShell/language/object/type/accelerators[PowerShell Type accelerator] for `BigInteger` is `[bigint]`.

  In → development/languages/Python 3, an → development/languages/Python/types/int[`int`] is unlimited as well.
