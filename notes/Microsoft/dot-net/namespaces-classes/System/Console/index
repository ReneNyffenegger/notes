$ System.Console (class)
@ System.Console

The `System.Console` class allows to programatically access → development/stdin-stdout-stderr in console applications.

{ Properties, methods and events

  table { ll

    `BackgroundColor`, `ForegroundColor` ☰ A member of the `→ Microsoft/dot-net/namespaces-classes/System/ConsoleColor` enum.
    → Microsoft/dot-net/namespaces-classes/System/Console/Beep[`Beep()`] ☰
    `BufferHeight`, `BufferWidth` ☰
    `CancelKeyPress` ☰ The only *event*: fired when `ctrl+C` or `ctrl+break` is pressed. See also `TreatControlCAsInput()`
    `CapsLock` ☰
    `Clear()` ☰
    `CursorLeft`, `CursorTop` ☰
    `CursorSize` ☰
    `CursorVisible` ☰
    `GetCursorPosition()` ☰
    `In`, `Out`, `Error` ☰ → development/stdin-stdout-stderr[stdin, stdout and stderr]. These streams are provided using (derivates of) `→ Microsoft/dot-net/namespaces-classes/System/IO/TextReader` and `→ Microsoft/dot-net/namespaces-classes/System/IO/TextWriter` objects.
    `InputEncoding`, `OutputEncoding` ☰ This value can be assigned instances of types derived from `→ Microsoft/dot-net/namespaces-classes/System/Text/Encoding`. See also using the PowerShell cmdlet `→ Windows/PowerShell/command-inventory/noun/string/select` to → Windows/PowerShell/command-inventory/noun/string/select#select-string-stdout[match lines in STDOUT that match] a given → development/regular-expressions.
    `IsErrorRedirected` ☰
    `IsInputRedirected` ☰
    `IsOutputRedirected` ☰
    `KeyAvailable` ☰
    `LargestWindowHeight` ☰
    `LargestWindowWidth` ☰
    `MoveBufferArea()` ☰
    `NumberLock` ☰
    `OpenStandardError()` ☰
    `OpenStandardInput()` ☰
    `OpenStandardOutput()` ☰
    `Read()` ☰
    `ReadKey()` ☰ Read one character (as instance of `System.ConsoleKeyInfo`) from input. Compare with `ReadLine()`
    `ReadLine()` ☰ Reads an entire line of input. Compare with `ReadKey()`
    `ResetColor()` ☰
    `SetBufferSize()` ☰
    `SetCursorPosition()` ☰
    `SetError()` ☰
    `SetIn()` ☰
    `SetOut()` ☰
    `SetWindowPosition()` ☰
    `SetWindowSize()` ☰
    `Title` ☰
    `TreatControlCAsInput` ☰ If set to `$true`, `Ctrl-C` can be read with `ReadKey()`. See also `CancelKeyPress`
    `WindowHeight` ☰
    `WindowLeft` ☰
    `WindowTop` ☰
    `WindowWidth` ☰
    `Write()` ☰
    `WriteLine()` ☰ Like `Write()`, but terminate with a → development/line-break[new line] character.

  table }

}

{ Encodings #dotnet-System_Console

  Input and output → development/Unicode/character-encoding[encodings] are controlled through the respective properties `InputEncoding` and `OutputEncoding` which need to be
  an instance of `→ Microsoft/dot-net/namespaces-classes/System/Text/Encoding`.

  Compare with the value of the → Windows/PowerShell/language/variable/preference/OutputEncoding[PowerShell preference variable `$OutputEncoding`].

}

sa:

  The → Windows/PowerShell/command-inventory/noun/host[PowerShell cmdLet noun `host`]

  → Windows/dirs/Windows/System32/conhost_exe[`conhost.exe`]
