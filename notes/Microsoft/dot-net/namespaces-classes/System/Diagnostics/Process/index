$ System.Diagnostics.Process (class)
@ System.Diagnostics.Process

`System.Diagnostics.Process` allows to control → Windows/development/process[processes].

`System.Diagnostics.Process` inherits from `→ Microsoft/dot-net/namespaces-classes/System/ComponentModel/Component`.

In → Windows/PowerShell, `S.D.Process` objects are returned by the → Windows/PowerShell/command-inventory/noun/process/get[`get-process` cmdLet].

{ Properties, methods and events

  table { ll

    `BasePriority` ☰
    `BeginErrorReadLine()` ☰
    `BeginOutputReadLine()` ☰
    `CancelErrorRead()` ☰
    `CancelOutputRead()` ☰
    `Close()` ☰
    `CloseMainWindow()` ☰
    `Dispose()` ☰
    `EnableRaisingEvents` ☰
    `EnterDebugMode()` ☰
    `ErrorDataReceived()` ☰ An *event*
    `ExitCode` ☰
    `Exited()` ☰ An *event*
    `ExitTime` ☰
    `GetCurrentProcess()` ☰
    `GetProcessById()` ☰
    `GetProcesses()` ☰
    `GetProcessesByName()` ☰
    `Handle` ☰
    `HandleCount` ☰
    `HasExited` ☰
    `Id` ☰
    `Kill()` ☰
    `LeaveDebugMode()` ☰
    `MachineName` ☰
    `MainModule` ☰ A `System.Diagnostics.ProcessModule` object that corresponds to module that was used to start the process. Can be `null`. Compare with the `Modules` property.
    `MainWindowHandle` ☰
    `MainWindowTitle` ☰
    `MaxWorkingSet` ☰
    `MinWorkingSet` ☰
    `Modules` ☰ Compare iwht the `MainModule` property.
    `NonpagedSystemMemorySize` ☰ *Deprecated* in favor of `NonpagedSystemMemorySize64`
    `NonpagedSystemMemorySize64` ☰ Amount of *nonpaged system memory* (bytes).  Compare with `PagedMemorySize64`
    `OnExited()` ☰
    `OutputDataReceived()` ☰ An *event*
    `PagedMemorySize` ☰
    `PagedMemorySize64` ☰
    `PagedSystemMemorySize` ☰
    `PagedSystemMemorySize64` ☰ Compare with `NonpagedSystemMemorySize64`
    `PeakPagedMemorySize` ☰
    `PeakPagedMemorySize64` ☰
    `PeakVirtualMemorySize` ☰
    `PeakVirtualMemorySize64` ☰
    `PeakWorkingSet` ☰ *Deprecated* in favor of `PeakWorkingSet64`
    `PeakWorkingSet64` ☰ The maximum amount of physical memory (bytes) that was allocated for the associated process since it was started.
    `PriorityBoostEnabled` ☰
    `PriorityClass` ☰
    `PrivateMemorySize` ☰ *Deprecated* in favor of `PrivateMemorySize64`
    `PrivateMemorySize64` ☰ Equivalent to a process's *Private Bytes* performance counter.
    `PrivilegedProcessorTime` ☰
    `ProcessName` ☰
    `ProcessorAffinity` ☰
    `Refresh()` ☰ Descards cached information in the process component.
    `Responding` ☰
    `SafeHandle` ☰
    `SessionId` ☰
    `StandardError` ☰
    `StandardInput` ☰
    `StandardOutput` ☰
    `Start()` ☰
    `StartInfo` ☰
    `StartTime` ☰
    `SynchronizingObject` ☰
    `Threads` ☰ `System.Diagnostics.ProcessThreadCollection`
    `ToString()` ☰
    `TotalProcessorTime` ☰ The amount of time that the process spent using the CPU. (`→ Microsoft/dot-net/namespaces-classes/System/TimeSpan`)
    `UserProcessorTime` ☰
    `VirtualMemorySize` ☰ *Deprecated* in favor of `VirtualMemorySize64`
    `VirtualMemorySize64` ☰ Total amount of virtual memory (bytes)
    → Microsoft/dot-net/namespaces-classes/System/Diagnostics/Process/WaitForExit[`WaitForExit()`] ☰
    `WaitForExitAsync()` ☰
    `WaitForInputIdle()` ☰
    `WorkingSet` ☰ *Deprecated* in favor of `WorkingSet64`.
    `WorkingSet64` ☰ Total amount of phyisical memory used (bytes).

  table }

}

sa:
  The  → Microsoft/dot-net/namespaces-classes/System/Diagnostics/Process/Start[`Start()`] method
