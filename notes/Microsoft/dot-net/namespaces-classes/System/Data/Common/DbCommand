$ System.Data.Common.DbCommand (class)
@ System.Data.Common.DbCommand

`System.Data.Common.DbCommand` represents an → development/databases/SQL/statement[SQL statement] or a stored procedure.
-
A special case is that the `DbCommand` text is just the name of table.
-
The type of the `DbCommand` can be queried with the `CommandType` property which returns a → Microsoft/dot-net/namespaces-classes/System/Data/CommandType[`System.Data.CommandType` enum].

If the `DbCommand` is used to query data (as is typically the case for a → development/databases/SQL/select[`select` statement], one of the following two method is needed:
  • `ExecuteReader()` (which returns a → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbDataReader[`System.Data.Common.DbDataReader`])
  • `ExecuteScalar()`

If the `DbCommand` does not return any data (for example in a DDL statement), the statement needs to be executed with `ExecuteNonQuery()`.

The derived class `System.Data.SqlClient.SqlCommand` additionally implements `XmlReader()` which returns an instance of → Microsoft/dot-net/namespaces-classes/System/Xml/XmlReader[`System.Xml.XmlReader`].

{ Parametrizing an DbCommand object #DbCommand-parameter

  A `DbCommand` object can be constructed in a «parameterized» way. This allows to execute the same `DbCommand` multiple times, each time with a different set of parameter-values.

  The benefits of parameterized `DbCommand` objects are:
    • it helps to prevent → development/databases/SQL/injection
    • a cached SQL execution plan can be reused

  Parameter-values are passed to a `DbCommand` using a → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbParameter[`System.Data.Common.DbParameter`] object.

  The format of parameter-placeholders is dependent on the Data provider:
  table { ll
    ~Data provider~ ☰ ~Format~
   → Microsoft/dot-net/namespaces-classes/System/Data/SqlClient[`System.Data.SqlClient`] ☰ `@paramName`
   `System.Data.OleDb`        ☰ `?`
   `System.Data.Odbc`         ☰ `?`
   → Microsoft/dot-net/namespaces-classes/System/Data/OracleClient[`System.Data.OracleClient`] ☰ `:paramName`
   → Microsoft/dot-net/namespaces-classes/MySql/Data/MySqlClient[`MySqlClient.Data.MySqlClient`] ☰ `?` is supported, `@` is preferred

  table }

}
{ ExecuteScalar() #DbCommand-ExecuteScalar

 `ExecuteScalar()` provides a convenient way to query a value from a single-row, single-column record set, typically an → development/databases/SQL/select/group-by/aggregate-functions[aggregate function].

  The following example counts the record in a table. For simplicity's sake, I have chosen a → development/Data/exchange/formats/CSV[CSV file] for the table and an
  → development/databases/OLE-DB/provider[OLE DB provider] to query from it.

  gh|.NET-API|/System/Data/Common/DbCommand/ExecuteScalar/countRecords.cs||

  For the record: the CSV with which I tested the program is:
  gh|.NET-API|/System/Data/Common/DbCommand/ExecuteScalar/data.csv||

}
{ ExecuteReader() #DbCommand-ExecuteReader

 `ExecuteReader()` returns an instance of → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbDataReader[`System.Data.Common.DbDataReader`].

  ExecuteReader has an overwritten method that takes an → Microsoft/dot-net/namespaces-classes/System/Data/CommandBehavior[`System.Data.CommandBehavior` enum] that influences the operation of `ExecuteReader()`.

}

sa:

  The `CreateCommand()` method of the → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbProviderFactory[`System.Data.Common.DbProviderFactory` class].

 `System.Data.Common.DbCommand` inherits from `→ Microsoft/dot-net/namespaces-classes/System/ComponentModel/Component`.
