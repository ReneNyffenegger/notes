$ System.Data.Common.DbDataReader (class)

An instance of `System.Data.Common.DbDataReader` is returned by the → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbCommand#DbCommand-ExecuteReader[`ExecuteReader()`] method of
→ Microsoft/dot-net/namespaces-classes/System/Data/Common/DbCommand[`System.Data.Common.DbCommand`].

Such a `DbDataReader` is used if the `DbCommand` represents an → development/databases/SQL/statement that returns values, typically a
→ development/databases/SQL/select[`select` statements]. The returned `DbDataReader` implements → Microsoft/dot-net/namespaces-classes/System/Collections/IEnumerable[`System.Collection.IEnumerable`], so the returned records
from the SQL statement can be iterated over with a → development/languages/C-Sharp/language/keywords/statement/iteration/foreach-in[`foreach` … `in`] statement.

An interesting method of the `DbDataReader` type is → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbDataReader/GetSchemaTable[`GetSchemaTable()`]: it returns the
→ development/Data/metadata about the columns of the queries resultset, notably column names and their data types.

{ Methods and properties

 `DbDataReader` is an abstract class, so these (or at least some of these) methods and properties must be overwritten in derived classes.

  table { ll

    `Close()` ☰
    `CloseAsync()` ☰
    `Depth` ☰
    `Dispose()` ☰
    `DisposeAsync()` ☰
    `FieldCount` ☰ Number of columns in the result set.
    `GetTYPE(pos)` ☰ Returns the value of `pos` as `TYPE`. `TYPE` is for example `Byte`, `Char`, `DataTime`, `Decimal`, `Double`, `Int16`, `Int32`, `Int64`, `String` etc.
    `GetBytes()` ☰
    `GetChars()` ☰
    `GetColumnSchemaAsync()` ☰
    `GetData()` ☰ Returns the nested data reader (also a `DbDataReader` object). Compare with `GetDbDataReader()`
    `GetDataTypeName(pos)` ☰ Returns the type of `pos` as string. Compare with `GetFieldType()`
    `GetDbDataReader()` ☰ Returns a `DbDataReader`. Compare with `GetData()`
    `GetEnumerator()` ☰ Returns a → Microsoft/dot-net/namespaces-classes/System/Collections/IEnumerator[`System.Collections.IEnumerator`].
    `GetFieldType(pos)` ☰ Returns a → Microsoft/dot-net/namespaces-classes/System/Type[`System.Type`] that corresponds to the type of `pos`. Compare with `GetDataTypeName()`
    `GetFieldValue<T>(pos)` ☰ Returns the value of `pos` as type `T`
    `GetFieldValueAsync()` ☰
    `GetName(pos)` ☰ Name of column `pos`
    `GetOrdinal(name)` ☰ Gets the column number that corresponds to the column whose name is `name`.
    `GetProviderSpecificFieldType()` ☰
    `GetProviderSpecificValue()` ☰
    `GetProviderSpecificValues()` ☰
    `GetSchemaTable()` ☰
    `GetSchemaTableAsync()` ☰
    `GetStream()` ☰ Returns a → Microsoft/dot-net/namespaces-classes/System/IO/Stream[`System.IO.Stream`]
    `GetTextReader()` ☰ Returns a → Microsoft/dot-net/namespaces-classes/System/IO/TextReader[`System.IO.TextReader`]
    `GetValue(pos)` ☰ Gets the value of `pos` as a → Microsoft/dot-net/namespaces-classes/System/Object[`System.Object`]
    `GetValues()` ☰
    `HasRows` ☰
    `IsClosed` ☰
    `IsDBNull(pos)` ☰ `true` if the corresponding value is an → development/databases/SQL/data-types/null[(SQL) null value].
    `IsDBNullAsync()` ☰
    `Item[]` ☰
    `NextResult()` ☰
    `NextResultAsync()` ☰
    `Read()` ☰
    `ReadAsync()` ☰
    `RecordsAffected` ☰
    `VisibleFieldCount` ☰

  table }

}

{ Example: iterating over SQL select statement result set

  The following simple → development/languages/C-Sharp[C#] program tries to demonstrate how a `DbDataReader` instance can be used to iterate over the result set
  of an → development/databases/SQL/statement.

  For simplicity reasons, this example uses a → development/Data/exchange/formats/CSV[CSV file] and the
  → development/databases/OLE-DB/provider/Microsoft-Access-database-engine to select from the CSV file. In the *real* world, of course, a more serious
  database would be used :)

  gh|.NET-API|/System/Data/Common/iterate.cs||

  For completeness' sake, this is the CSV file:
  gh|.NET-API|/System/Data/Common/data.csv||

}
sa:
  → Microsoft/dot-net/namespaces-classes/System/Data/OleDb/OleDbDataReader[`System.Data.OleDb.OleDbDataReader`]
