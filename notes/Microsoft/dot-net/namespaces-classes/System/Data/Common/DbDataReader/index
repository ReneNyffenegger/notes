$ System.Data.Common.DbDataReader (class)

An instance of `System.Data.Common.DbDataReader` is returned by the `ExecuteReader()` method of
→ Microsoft/dot-net/namespaces-classes/System/Data/Common/DbCommand[`System.Data.Common.DbCommand`].

Such a `DbDataReader` is used if the `DbCommand` represents an → development/databases/SQL/statement that returns values, that is typically a
→ development/databases/SQL/select[`select` statement]. The returned `DbDataReader` implements → Microsoft/dot-net/namespaces-classes/System/IDisposable[`IDisposable`], so the returned records
from the SQL statement can be iterated over with a → development/languages/C-Sharp/language/keywords/statement/iteration/foreach-in[`foreach` … `in`] statement.

An interesting method of the `DbDataReader` type is → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbDataReader/GetSchemaTable[`GetSchemaTable()`]: it returns the
→ development/Data/metadata about the columns of the queries resultset, notably column names and their data types.

{ Example: iterating over SQL select statement result set

  The following simple → development/languages/C-Sharp[C#] program tries to demonstrate how a `DbDataReader` instance can be used to iterate over the result set
  of an → development/databases/SQL/statement.

  For simplicity reasons, this example uses a → development/Data/exchange/formats/CSV[CSV file] and the
  → development/databases/OLE-DB/provider/Microsoft-Access-database-engine to select from the CSV file. In the *real* world, of course, a more serious
  database would be used :)

  gh|.NET-API|/System/Data/Common/iterate.cs||

  For completeness' sake, this is the CSV file:
  gh|.NET-API|/System/Data/Common/data.csv||

}
