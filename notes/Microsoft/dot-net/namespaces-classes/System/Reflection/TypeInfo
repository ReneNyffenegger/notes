$ System.Reflection.TypeInfo (class)
@ System.Reflection.TypeInfo

{ Properties and Methods


  table { ll
   `AsType()` ☰
   `DeclaredConstructors` ☰
   `DeclaredEvents` ☰ An `IEnumerable` returning `System.Reflection.EventInfo` objects
   `DeclaredFields` ☰ An `IEnumerable` returning `→ Microsoft/dot-net/namespaces-classes/System/Reflection/FieldInfo` objects
   `DeclaredMembers` ☰ An `IEnumerable` returning `System.Reflection.MemberInfo` objects
   `DeclaredMethods` ☰ An `IEnumerable` returning `System.Reflection.MethodInfo` objects
   `DeclaredNestedTypes` ☰ An `IEnumerable` returning `System.Reflection.TypeInfo` objects
   `DeclaredProperties` ☰  An `IEnumerable` returning `System.Reflection.PropertyInfo` objects
   `GenericTypeParameters` ☰ An array of `→ Microsoft/dot-net/namespaces-classes/System/Type` objects
   `GetDeclaredEvent()` ☰
   `GetDeclaredField()` ☰
   `GetDeclaredMethod()` ☰
   `GetDeclaredMethods()` ☰
   `GetDeclaredNestedType()` ☰
   `GetDeclaredProperty()` ☰
   `ImplementedInterfaces` ☰ An `IEnumerable` returning `→ Microsoft/dot-net/namespaces-classes/System/Type` objects
   `IsAssignableFrom()` ☰
  table }

}

sa:

  Using `S.R.TypeInfo` forces the → Microsoft/dot-net/assembly that contains the described type to be loaded. The base classs → Microsoft/dot-net/namespaces-classes/System/Type[`System.Type`] is more light weight and contains a reference
  to the type only

  The → development/languages/C-Sharp/language/operators/type-testing_cast/typeof[`typeof`] operator of → development/languages/C-Sharp[C#].

  The `DefinedTypes` property of → Microsoft/dot-net/namespaces-classes/System/Reflection/Assembly[`System.Reflection.Assembly`]
