$ PowerShell script to reflect a given type

code {
reflect.ps1  → Microsoft/dot-net/namespaces-classes/System/String[System.string]
reflect.ps1  [→ Microsoft/dot-net/namespaces-classes/System/Xml/XmlDocument[xml]]          # [xml] is a → Windows/PowerShell/language/object/type/accelerators[type accelerator]
reflect.ps1 ([→ Microsoft/dot-net/namespaces-classes/System/Int32[Int32]])
code }

{ reflect.ps1

  gh|scripts-and-utilities|/reflect.ps1||

}

{ History

  table { ll
    V0.2 ☰ Add `method-specifiers` to print a method's `public`, `static`, `private` specifiers.
  table }

}
{ TODO

  { Show out parameters

    The type of the parameters shown in the `foreach ‥ DeclaredConstructors` and `foreach ‥ DeclaredMethod`) loops may
    end in an ampersand which *sometimes* is the case if the parameter is an out-parameter.

    The script should specifically show out parameters with something like
code {
write-host ("    {0,-40} {1,3} {2}"  -f  $($param.name), $(if ($param.isOut) {'out'}), $($param.parameterType))
code }

  }
  { IsInterface not available in .NET Core

    The property `IsInterface` seems to be gone in .NET Core or PowerShell Core

  }
}

sa:
  The `→ Microsoft/dot-net/namespaces-classes/System/Reflection` namespace and the
  `→ Microsoft/dot-net/namespaces-classes/System/Type` class.

links:
  This → https://learn.microsoft.com/en-us/dotnet/api/system.reflection.propertyinfo?view=net-7.0[C# source code example]. 
