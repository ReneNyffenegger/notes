$ System.Type (abstract base class)
@ System.Type

`System.Type` is the root class and primary entry point for reflection in → Microsoft/dot-net. The class represents one of the following concepts
  • class
  • value type
  • array (→ Microsoft/dot-net/namespaces-classes/System/Array[`System.Array`])
  • interface
  • enumeration (→ Microsoft/dot-net/namespaces-classes/System/Enum[`System.Enum`])
  • delegate (→ Microsoft/dot-net/namespaces-classes/System/Delegate[`System.Delegate`])
  • constructed generic type and generic type definition
  • type arguments / parameters of such constructed generic types 

`System.Type` derives from → Microsoft/dot-net/namespaces-classes/System/Reflection/MemberInfo[`System.Reflection.MemberInfo`].

Because types are fundamental in → Microsoft/dot-net and each (→ Microsoft/dot-net/managed-code[managed]) object (instance) has a type, → Microsoft/dot-net/namespaces-classes/System/Object[`System.Object`] provides the method `GetType()` that returns a
`System.Type` that represents the type of the instance that `GetType()` was called on.
-
A (derived) `Type` instance is also retured by the → development/languages/C-Sharp[C#] operator `typeof`, the → development/languages/C-C-plus-plus/CPP operator `typeid` and the Visual Basic operator `GetType`.

{ Methods, Properties and Fields

  table { ll

    `Assembly` ☰
    `AssemblyQualifiedName` ☰
    `Attributes` ☰
    `BaseType` ☰ The type (i. e. another `System.Type` object) from which *this* type directly inherits. Compare with `IsSubclassOf()`
    `ContainsGenericParameters` ☰
    `DeclaringMethod` ☰
    `DeclaringType` ☰
    `DefaultBinder` ☰
    `Delimiter` ☰ A `static` field, defines the delimiter that seperates the names in the type's namespace. At least on Windows, the value is a dot (Check in PowerShell with `[System.Type]::Delimiter`)
    `EmptyTypes` ☰ Returns an empty array of `Type`
    `Equals()` ☰
    `FilterAttribute` ☰
    `FilterName` ☰
    `FilterNameIgnoreCase` ☰
    `FindInterfaces()` ☰
    `FindMembers()` ☰
    `FullName` ☰ The fully qualified name: namespace + type name (but without assembly name)
    `GenericParameterAttributes` ☰
    `GenericParameterPosition` ☰
    `GenericTypeArguments` ☰
    `GetArrayRank()` ☰
    `GetAttributeFlagsImpl()` ☰
    `GetConstructor()` ☰
    `GetConstructorImpl()` ☰
    `GetConstructors()` ☰
    `GetDefaultMembers()` ☰
    `GetElementType()` ☰
    `GetEnumName()` ☰
    `GetEnumNames()` ☰
    `GetEnumUnderlyingType()` ☰
    `GetEnumValues()` ☰
    `GetEnumValuesAsUnderlyingType()` ☰
    `GetEvent()` ☰
    `GetEvents()` ☰
    `GetField()` ☰
    `GetFields()` ☰
    `GetGenericArguments()` ☰
    `GetGenericParameterConstraints()` ☰
    `GetGenericTypeDefinition()` ☰
    `GetHashCode()` ☰
    `GetInterface()` ☰
    `GetInterfaceMap()` ☰
    `GetInterfaces()` ☰
    `GetMember()` ☰
    `GetMembers()` ☰ Returns an array of `→ Microsoft/dot-net/namespaces-classes/System/Reflection/MemberInfo` objects
    `GetMemberWithSameMetadataDefinitionAs()` ☰
    `GetMethod()` ☰
    `GetMethodImpl()` ☰
    `GetMethods()` ☰
    `GetNestedType()` ☰
    `GetNestedTypes()` ☰
    `GetProperties()` ☰
    `GetProperty()` ☰
    `GetPropertyImpl()` ☰
    `GetType()` ☰
    `GetTypeArray()` ☰
    `GetTypeCode()` ☰
    `GetTypeCodeImpl()` ☰
    `GetTypeFromCLSID()` ☰
    `GetTypeFromHandle()` ☰
    `GetTypeFromProgID()` ☰
    `GetTypeHandle()` ☰
    `GUID` ☰
    `HasElementType` ☰
    `HasElementTypeImpl()` ☰
    `InvokeMember()` ☰
    `IsAbstract` ☰
    `IsAnsiClass` ☰
    `IsArray` ☰
    `IsArrayImpl()` ☰
    `IsAssignableFrom()` ☰
    `IsAssignableTo()` ☰
    `IsAutoClass` ☰
    `IsAutoLayout` ☰
    `IsByRef` ☰
    `IsByRefImpl()` ☰
    `IsByRefLike` ☰
    `IsClass` ☰
    `IsCOMObject` ☰
    `IsCOMObjectImpl()` ☰
    `IsConstructedGenericType` ☰
    `IsContextful` ☰
    `IsContextfulImpl()` ☰
    `IsEnum` ☰
    `IsEnumDefined()` ☰
    `IsEquivalentTo()` ☰
    `IsExplicitLayout` ☰
    `IsGenericMethodParameter` ☰
    `IsGenericParameter` ☰
    `IsGenericType` ☰
    `IsGenericTypeDefinition` ☰
    `IsGenericTypeParameter` ☰
    `IsImport` ☰
    `IsInstanceOfType()` ☰
    `IsInterface` ☰
    `IsLayoutSequential` ☰
    `IsMarshalByRef` ☰
    `IsMarshalByRefImpl()` ☰
    `IsNested` ☰
    `IsNestedAssembly` ☰
    `IsNestedFamANDAssem` ☰
    `IsNestedFamily` ☰
    `IsNestedFamORAssem` ☰
    `IsNestedPrivate` ☰
    `IsNestedPublic` ☰
    `IsNotPublic` ☰
    `IsPointer` ☰
    `IsPointerImpl()` ☰
    `IsPrimitive` ☰
    `IsPrimitiveImpl()` ☰
    `IsPublic` ☰
    `IsSealed` ☰
    `IsSecurityCritical` ☰
    `IsSecuritySafeCritical` ☰
    `IsSecurityTransparent` ☰
    `IsSerializable` ☰
    `IsSignatureType` ☰
    `IsSpecialName` ☰
    `IsSubclassOf()` ☰ Compare with `BaseType`
    `IsSZArray` ☰
    `IsTypeDefinition` ☰
    `IsUnicodeClass` ☰
    `IsValueType` ☰
    `IsValueTypeImpl()` ☰
    `IsVariableBoundArray` ☰
    `IsVisible` ☰
    `MakeArrayType()` ☰
    `MakeByRefType()` ☰
    `MakeGenericMethodParameter()` ☰
    `MakeGenericSignatureType()` ☰
    `MakeGenericType()` ☰
    `MakePointerType()` ☰
    `MemberType` ☰
    `Missing` ☰
    `Module` ☰
    `Namespace` ☰
    `ReflectedType` ☰
    `ReflectionOnlyGetType()` ☰
    `StructLayoutAttribute` ☰
    `ToString()` ☰
    `TypeHandle` ☰
    `TypeInitializer` ☰
    `UnderlyingSystemType` ☰

  table }

}

{ GetTypeFromCLSID

  TODO: Compare with the method with the same name in `→ Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices/Marshal`.

}

sa:
  → Microsoft/dot-net/namespaces-classes/System/RuntimeType[`System.RuntimeType`] and
  → Microsoft/dot-net/namespaces-classes/System/Reflection/TypeInfo[`System.Reflection.TypeInfo`].

  An instance of the type that is described by an instance of `System.Type` can be created with the method `CreateInstance()` in the class → Microsoft/dot-net/namespaces-classes/System/Activator[`System.Activator`].

  The method → Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices/Marshal#dot-net-Marshal-SizeOf[`SizeOf`] of the
  class → Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices/Marshal[`System.Runtime.InteropServices.Marshal`].

  → Microsoft/dot-net/namespaces-classes/System/Type/InvokeMember[`InvokeMember`]

  → Microsoft/dot-net/namespaces-classes/System/Reflection/Assembly/GetTypes[`System.Reflection.Assembly::GetTypes()`] and
 `→ Microsoft/dot-net/namespaces-classes/System/Reflection/Assembly[Assembly]::GetExportedTypes()`.

