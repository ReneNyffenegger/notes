$ System.Management.Automation.PathIntrinsics (class)
@ System.Management.Automation.PathIntrinsics

{ Properties and Methods

  table { ll

   `Combine()` ☰ Combines two strings with a → Windows/PowerShell/language/provider[provider] specific path separator.
   `CurrentFileSystemLocation` ☰
   `CurrentLocation` ☰
   `CurrentProviderLocation()` ☰ `foreach ($p in → Windows/PowerShell/command-inventory/noun/psProvider/get){ "$p.name -> $($ExecutionContext.SessionState.Path.CurrentProviderLocation($p.name))" }`
   `GetResolvedProviderPathFromProviderPath()` ☰ Resolves a drive or provider qualified absolute or relative path that may contain wildcard characters into one or more provider-internal paths.
   `GetResolvedProviderPathFromPSPath()` ☰ Resolves a drive or provider qualified absolute or relative path that may contain wildcard characters into one or more provider-internal paths.
   `GetResolvedPSPathFromPSPath()` ☰ Resolves a drive or provider qualified absolute or relative path that may contain wildcard characters into one or more absolute drive or provider qualified paths
   `GetUnresolvedProviderPathFromPSPath()` ☰ Converts a drive or provider qualified absolute or relative path that may contain wildcard characters into one a provider-internal path still containing the wildcard characters.
   `IsProviderQualified()` ☰
   `IsPSAbsolute()` ☰
   `IsValid()` ☰
   `LocationStack()` ☰
   `NormalizeRelativePath()` ☰
   `ParseChildName()` ☰
   `ParseParent()` ☰
   `PopLocation()` ☰
   `PushCurrentLocation()` ☰
   `SetDefaultLocationStack()` ☰
   `SetLocation()` ☰

  table }

}

{ PowerShell

  In → Windows/PowerShell, an instance to `System.Management.Automation.PathIntrinsics` is returned by the expression
code {
→ Windows/PowerShell/language/variable/automatic/executionContext[$ExecutionContext].SessionState.Path
code }

code {
→ Windows/PowerShell/language/variable/automatic/executionContext[$ExecutionContext].SessionState.Path.CurrentLocation
→ Windows/PowerShell/language/variable/automatic/executionContext[$ExecutionContext].SessionState.Path.CurrentFileSystemLocation
→ Windows/PowerShell/language/variable/automatic/executionContext[$ExecutionContext].SessionState.Path.GetUnresolvedProviderPathFromPSPath(".\nonexist\foo.txt")
code }


}
{ CurrentProviderLocation #PathIntrinsics-CurrentProviderLocation

  Show the current location of → Windows/PowerShell/language/provider[providers]:
code {
$ExecutionContext.SessionState.Path.CurrentProviderLocation('Registry')
$ExecutionContext.SessionState.Path.CurrentProviderLocation('FileSystem')
code }

}
{ Combine

  `$ExecutionContext.SessionState.Path.Combine('foo\..', 'bar\baz')` evaluates to `foo\..\bar\baz`.

}
{ GetResolvedPSPathFromPSPath

 `GetResolvedPSPathFromPSPath` returns an ~absolute path~ that points to the same directory or file that the relative or absolute path that was passed as argument points to *if*
  that file or directory exists, otherwise, it throws an error:
code {
$ExecutionContext.SessionState.Path.GetResolvedPSPathFromPSPath('../../xyz')
code }

}
{ GetUnresolvedProviderPathFromPSPath

 `GetUnresolvedProviderPathFromPSPath` always returns an ~absolute path~, even if the file or directory does not exist:
code {
$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('path/that/does/../not/exist.txt')
code }

}
{ NormalizeRelativePath

code {
$ExecutionContext.SessionState.Path.NormalizeRelativePath("$home/foo/bar", $home)
code }

}
{  ParseChildName / ParseParent

  { ParseChildName

  `$ExecutionContext.SessionState.Path.ParseChildName('child/grand-child/grand-grand-child')` evaluates to `grand-grand-child`.

  }

  { ParseParent

  `ParseParent($dir, $root)` returns the parent directory of `$dir`.

   As per documentation, `$root` is optional and allows to set the top-most directory of the returned directory. If this functionality is not required,
   this parameter must be set to → Windows/PowerShell/language/variable/automatic/null[`$null`].

  `$ExecutionContext.SessionState.Path.ParseParent("$home/../maria/foo.txt", $home)` evaluates to `C:\Users\rene\..\maria`.

  `$ExecutionContext.SessionState.Path.ParseParent("C:\Users\maria\foo.txt", $home)` evaluates to `C:\Users\maria`.

  `$ExecutionContext.SessionState.Path.ParseParent("$home/../../maria/foo.txt", $null)` evaluates to `C:\Users\rene\..\..\maria`.

  }

}
{ Location stack

code {
$ExecutionContext.SessionState.Path.PushLocation('xyz')
$ExecutionContext.SessionState.Path.SetDefaultLocationStack('xyz')
$ExecutionContext.SessionState.Path.LocationStack('xyz')
$ExecutionContext.SessionState.Path.PopLocation('xyz')

$ExecutionContext.SessionState.Path.SetLocation(…)
code }

}


sa:
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/SessionState[`System.Management.Automation.SessionState`]

  The PowerShell cmdlet → Windows/PowerShell/command-inventory/noun/path/resolve[`resolve-path`]
