$ System.Management.Automation.ScriptBlock (class)
@ System.Management.Automation.ScriptBlock

A `System.Management.Automation.ScriptBlock` is a pre-compiled → Windows/PowerShell → Windows/PowerShell/language/scriptblock[script block]:
code {
PS C:\> $scriptBlock = { → Windows/PowerShell/command-inventory/noun/host/write[write-host] 'Hello world' }
PS C:\> $scriptBlock.GetType().FullName
System.Management.Automation.ScriptBlock
PS C:\> 1 .. 3 | → Windows/PowerShell/command-inventory/noun/object/forEach[forEach-object] $scriptBlock
Hello world
Hello world
Hello world
code }

{ Properties and Methods

  table {

   `Ast` ☰
   `Attributes` ☰
   `CheckRestrictedLanguage()` ☰
   `Create()` ☰
   `DebuggerHidden` ☰
   `File` ☰
   → #dotNet-ScriptBlock-GetNewClosure[`GetNewClosure()`] ☰
   `GetPowerShell()` ☰
   `GetSteppablePipeline()` ☰
   `Id` ☰
   `Invoke()` ☰
   `InvokeReturnAsIs()` ☰
   `InvokeWithContext()` ☰
   `IsConfiguration` ☰
   `IsFilter` ☰
   `Module` ☰
   `StartPosition` ☰
   `ToString()` ☰

  table }

  { GetNewClosure #dotNet-ScriptBlock-GetNewClosure

code {
$var = 'initial value for variable var'
$sb = {
   write-host "Script block is invoked"
   write-host "  var = $var"
   if (test-path variable:xyz) {
       write-host "  The variable xyz is defined, it's value is $xyz"
   }
   else {
       write-host "  The variable xyz is not defined"
   }
}

$sb_closure = $sb.GetNewClosure()


$var = 'changed value for variable var'
$xyz = 'Value for xyz'

& $sb
& $sb_closure
code }

    If this code is placed into a script and executed, it prints:
code {
Script block is invoked
  var = changed value for variable var
  The variable xyz is defined, it's value is Value for xyz
Script block is invoked
  var = initial value for variable var
  The variable xyz is not defined
code }

  }

}
