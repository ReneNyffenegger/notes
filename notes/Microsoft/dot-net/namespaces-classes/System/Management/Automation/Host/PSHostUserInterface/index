$ System.Management.Automation.Host.PSHostUserInterface (abstract class)
@ System.Management.Automation.Host.PSHostUserInterface

The «current» instance of `PSHostUserInterface` can be optained in the command line of PowerShell via `→ Windows/PowerShell/language/variable/automatic/host[$host].UI`:
code {
PS> $host.UI.GetType().FullName
code }

{ Properties and methods

  table { ll

    → #pshostuserinterface-prompt[`Prompt()]` ☰
    `PromptForChoice()` ☰
    `PromptForCredential()` ☰
    `RawUI` ☰ A reference to a `→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/Host/PSHostRawUserInterface` object.
    `ReadLine()` ☰
    `ReadLineAsSecureString()` ☰
    `SupportsVirtualTerminal` ☰ `true` if host supports VT100 like terminals
    `Write()` ☰
    `WriteDebugLine()` ☰
    `WriteErrorLine()` ☰
    `WriteInformation()` ☰
    `WriteLine()` ☰
    `WriteProgress()` ☰
    `WriteVerboseLine()` ☰
    `WriteWarningLine()` ☰

  table }

}

{ Prompt() #pshostuserinterface-prompt

code {
$caption = 'Data enter'
$message = 'Please enter the following information:'
$fieldDescriptions = [→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/Host/FieldDescription[System.Management.Automation.Host.FieldDescription][]] @(
    [System.Management.Automation.Host.FieldDescription]::new('valOne'  ),
    [System.Management.Automation.Host.FieldDescription]::new('valTwo'  ),
    [System.Management.Automation.Host.FieldDescription]::new('valThree')
)

$info = $host.UI.Prompt($message, $caption, $fieldDescriptions)
write-host "Val one: $($info.valOne), val two: $($info.valTwo) and val three: $($info.valThree)."
code }

}

sa:

 `→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/Host/PSHostRawUserInterface`
