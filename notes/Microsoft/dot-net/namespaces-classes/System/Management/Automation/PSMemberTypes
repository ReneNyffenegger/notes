$ System.Management.Automation.PSMemberTypes (enum)

The `System.Management.Automation.PSMemberTypes` enum is an enumeration (with `FlagsAttribute`) that enumerates the possible
member types with which a → Windows/PowerShell/language/object[PowerShell object] can be extended in the
→ Windows/PowerShell/language/object/Extended-Type-System or refer to a .NET member.

Compare with the → Windows/PowerShell/command-inventory/noun/member/get#ps-get-member-memberType[`-memberType`] option of the → Windows/PowerShell/command-inventory/noun/member/get[`get-member` cmdLet].

table { lrll
  ~Enum name~  ☰ ~Value~ ☰ ~Comment~ ☰ .NET member
  `AliasProperty`          ☰    1 ☰ An alias to another member ☰
  `CodeProperty`           ☰    2 ☰ Reference to a method ☰
  `Property`               ☰    4 ☰ A property from the BaseObject ☰ ✓
  `NoteProperty`           ☰    8 ☰ Name-value pair ☰
  `ScriptProperty`         ☰   16 ☰ A property defined by script language ☰
  `PropertySet`            ☰   32 ☰ Set of properties ☰
  `Method`                 ☰   64 ☰ A method from the BaseObject, or made accessible through an adapter ☰ ✓
  `CodeMethod`             ☰  128 ☰ A method that is implemented in a → Microsoft/dot-net/Common-Language-Runtime[CLR] language ☰
  `ScriptMethod`           ☰  256 ☰ A method that is implemented from a → Windows/PowerShell/script ☰
  `ParameterizedProperty`  ☰  512 ☰ A member that acts like a property that takes parameters. This is not consider to be a property or a method. ☰
  `MemberSet`              ☰ 1024 ☰ A set of members ☰
  `Event`                  ☰ 2048 ☰ All events ☰ ✓
  `Dynamic`                ☰ 4096 ☰ All dynamic members (where PowerShell cannot know the type of the member) ☰
  `InferredProperty`       ☰ 8192 ☰  ☰
table }

Combination of values:
table { lrl
  ~Enum name~  ☰ ~Value~ ☰
  `All`        ☰   16383 ☰ The combination of *all* properties (= 1+2+4+…+8192=16383)
  `Methods`    ☰     448 ☰ `Method`, `CodeMethod` and `ScriptMethod`
  `Properties` ☰    8223 ☰ `AliasProperty`, `CodeProperty`, `Property`, `NoteProperty`, `ScriptProperty` and `InferredProperty`
table }

{ AliasProperty #psMemberType-aliasProperty

code {
PS: 6 C:\Users\rene> → Windows/PowerShell/command-inventory/noun/process/get | → Windows/PowerShell/command-inventory/noun/member/get -memberType aliasProperty | → Windows/PowerShell/command-inventory/noun/object/select name, definition

Name    Definition
----    ----------
Handles Handles = Handlecount
Name    Name = ProcessName
NPM     NPM = NonpagedSystemMemorySize64
PM      PM = PagedMemorySize64
SI      SI = SessionId
VM      VM = VirtualMemorySize64
WS      WS = WorkingSet64
code }

}
{ scriptProperty #psMemberType-scriptProperty

code {
PS: 6 C:\Users\rene> → Windows/PowerShell/command-inventory/noun/process/get | → Windows/PowerShell/command-inventory/noun/member/get -memberType scriptProperty | → Windows/PowerShell/command-inventory/noun/object/select name, definition

Name           Definition
----           ----------
Company        System.Object Company {get=$this.Mainmodule.FileVersionInfo.CompanyName;}
CPU            System.Object CPU {get=$this.TotalProcessorTime.TotalSeconds;}
Description    System.Object Description {get=$this.Mainmodule.FileVersionInfo.FileDescription;}
FileVersion    System.Object FileVersion {get=$this.Mainmodule.FileVersionInfo.FileVersion;}
Path           System.Object Path {get=$this.Mainmodule.FileName;}
Product        System.Object Product {get=$this.Mainmodule.FileVersionInfo.ProductName;}
ProductVersion System.Object ProductVersion {get=$this.Mainmodule.FileVersionInfo.ProductVersion;}
code }

}
{ The .NET property types Property, Method and Events

  In most cases, a PowerShell object (which is an instance of → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSObject[`System.Management.Automation.PSObject`]) wraps
  a → Microsoft/dot-net object (See also the → Windows/PowerShell/language/object/Extended-Type-System). The members of the underlying .NET object have one of the object types `Method`, `Property` or `Event`. These are marked with a ✓ in the last column of the first table.

  Members with another member type are added to the PowerShell object and are independent from the underlying .NET object.
  -
  Such members can be added with the → Windows/PowerShell/command-inventory/noun/member/add[`add-member`] cmdLet. (See especially the
  → Windows/PowerShell/command-inventory/noun/member/add#add-member-memberType[`-memberType`] option of that cmdLet).

}

sa:
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMemberViewTypes[`System.Management.Automation.PSMemberViewTypes`]
