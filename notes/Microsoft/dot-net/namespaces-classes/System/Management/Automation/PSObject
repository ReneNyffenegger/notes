$ System.Management.Automation.PSObject (class)

Each → Windows/PowerShell/language/object[PowerShell object] is an instance of `System.Management.Automation.PSObject`.

Such a `PSObject` has the member `_immediateBaseObject` that contains a reference to the actual object, which can by any
→ Microsoft/dot-net object, that is manipulated through the PowerShell object.

A `PSObject`'s  → #PSObject-public-properties[public properties] can be accessed from a PowerShell object via its `psObject` property: `$MyPowerShellObject.psObject`.

`PSObject` is the central class that allows the → Windows/PowerShell/language/object/Extended-Type-System of → Windows/PowerShell.

{ PSObject, its base object and PSCustomObject #PSObject-BaseObject-and-PSCustomObject


  In the → https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/MshObject.cs[source code], `PSObject` has the following interesting snippets (*heavily* redacted by me for brevity) that
  I believe shed some light on how `PSObject` and `PSCustomObject` play together.

  In `PSObject`, the field `_immediateBaseObject` contains a reference to the object that a → Windows/PowerShell/language/object[PowerShell object] is storing (via `PSObject`).

  If the constructor of `PSObject` is called with an object (`public PSObject(object obj)`), the reference of `_immediateBaseObject` is set to that object by calling `CommonInitialization(obj)`.
  -
  However, if the constructor without argument (`public PSObject()`) is used to initialize a `PSObject` instance, `CommonInitialization()` is called with `PSCustomObject.SelfInstance`. This expression refers to
  the `PSCustomObject` singleton(?). Thus, `_immediateBaseObject` is initialized with a reference to `PSCustomObject`
  (see also → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCustomObject#PSCustomObject-definition[definition of `PSCustomObject`]).

  In summary, `PSCustomObject` is used to intialize the *base object* of `PSObject` in absence of any other .NET object. This indicates that the `PSObject` is just used to store one or more `NoteProperty` (?).

code {
public class PSObject : IFormattable, → Microsoft/dot-net/namespaces-classes/System/IComparable[IComparable], ISerializable, IDynamicMetaObjectProvider
{
    /// This is the main field in the class representing
    /// the → Microsoft/dot-net/namespaces-classes/System/Object[System.Object] we are encapsulating.
    private object _immediateBaseObject;


    /// Initializes a new instance of PSObject with an PSCustomObject BaseObject.
    public PSObject()
    {
        CommonInitialization(PSCustomObject.SelfInstance);
    }

    /// Initializes a new instance of PSObject wrapping obj (accessible through BaseObject).
    public PSObject(object obj)
    {
        CommonInitialization(obj);
    }

    private void CommonInitialization(object obj)
    {
        if (obj is PSCustomObject)
        {
            this.ImmediateBaseObjectIsEmpty = true;
        }

        _immediateBaseObject = obj;
    }


    /// Gets the object we are directly wrapping.
    ///    If the ImmediateBaseObject is another PSObject,
    ///    that PSObject will be returned.
    public object ImmediateBaseObject => _immediateBaseObject;


    /// Gets the object we are wrapping.
    ///    If the ImmediateBaseObject is another PSObject, this property
    ///    will return its BaseObject.
    public object BaseObject
    {
        get
        {
            object returnValue;
            PSObject mshObj = this;
            do
            {
                returnValue = mshObj._immediateBaseObject;
                mshObj = returnValue as PSObject;
            } while (mshObj != null);

            return returnValue;
        }
    }

}
code }

}
{ Public properties #PSObject-public-properties

  The `PSObject` class exhibits six `public` properties:
code {
//  Gets the member collection.
    public → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMemberInfoCollection-T[PSMemberInfoCollection]<→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMemberInfo[PSMemberInfo]> Members …

//  Gets the Property collection, or the members that are actually properties.
    public PSMemberInfoCollection<PSPropertyInfo> Properties …

//  Gets the Method collection, or the members that are actually methods.
    public PSMemberInfoCollection<PSMethodInfo> Methods

//  Gets the object we are directly wrapping.
// (If the ImmediateBaseObject is another PSObject, that PSObject will be returned.)
    public object ImmediateBaseObject => _immediateBaseObject;

//  Gets the object we are wrapping
// (If the ImmediateBaseObject is another PSObject, this property will return its BaseObject.)
    public object BaseObject …

//  Gets the type names collection initially containing the object type hierarchy.
    public Collection<string> TypeNames …
code }

  These properties can be accessed via a → Windows/PowerShell/language/object[PowerShell object's] `psObject` member:
code {
PS C:\> $obj = → Windows/PowerShell/command-inventory/noun/date/get[get-date]
PS C:\> $obj.psObject.Members
PS C:\> $obj.psObject.Properties
PS C:\> $obj.psObject.Methods
PS C:\> $obj.psObject.ImmediateBaseObject
PS C:\> $obj.psObject.BaseObject
PS C:\> $obj.psObject.TypeNames
code }

}
{ Difference to System.Management.Automation.PSCustomObject

  Jason Shirk provided a → https://stackoverflow.com/a/35965784/180275[helpful answer on StackOverflow] regarding the difference between a `PSObject` and a `PSCustomObject`. I believe the gist of his answer is the following:

  The `System..Management.Automation.PSObject` object wraps *other* objects. It is mostly used in → Windows/PowerShell to have a consistent object for different underlying object types
  ( → Microsoft/dot-net, → Windows/Management-Instrumentation[WMI], → Windows/development/COM[COM], ADSI, *property bags* etc…)

  If the wrapped object is a property bag, the property bag is stored in a → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCustomObject[`System.Management.Automation.PSCustomObject`] object.

}
{ TODO: fields

  The class has also the following interesting fields that should eventually be described:
code {
private WeakReference<TypeTable> _typeTable;
private AdapterSet _adapterSet;
private PSMemberInfoInternalCollection<PSMemberInfo> _instanceMembers;
private PSMemberInfoIntegratingCollection<→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMemberInfo[PSMemberInfo]> _members;
private PSMemberInfoIntegratingCollection<→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSPropertyInfo[PSPropertyInfo]> _properties;
private PSMemberInfoIntegratingCollection<→ Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMethodInfo[PSMethodInfo]> _methods;

private PSObjectFlags _flags;
code }

  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMemberInfo[`PSMemberInfo`] is the  base class for all members of a `PSObject`.
  -
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSPropertyInfo[`PSPropertyInfo`] is the  base class for all members of a `PSObject` that behave like a property.
  -
  → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSMethodInfo[`PSMethodInfo`] is the  base class for all members of a `PSObject` that behave like a method.

}

sa:
  → Windows/PowerShell/language/object/psObject


  The → Windows/PowerShell/language/object/type/accelerators[PowerShell type accelerator] for `System.Management.Automation.PSObject` is `[pscustomobject]` and `[psobject]`.

links:
  → https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/MshObject.cs[The source code of `PSObject`].
