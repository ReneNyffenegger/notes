$ System.Management.Automation.Cmdlet (abstract class)

`System.Management.Automation.Cmdlet` is the base class for all → Windows/PowerShell/language/cmdlet[PowerShell cmdLets].

`Cmdlet` derives from → Microsoft/dot-net/namespaces-classes/System/Management/Automation/Internal/InternalCommand[`System.Management.Automation.Internal.InternalCommand`].

{ Comparison Cmdlet to PSCmdlet

  The `Cmdlet` class provides some common functionality for → Windows/PowerShell/language/cmdlet[cmdLets], such as *object output* and *record processing*.
  -
  Thus, deriving a class from `Cmdlet` is the common way to create a user defined → Windows/PowerShell/language/cmdlet[cmdLet].

  A derived class is → Microsoft/dot-net/namespaces-classes/System/Management/Automation/PSCmdlet[`System.Management.Automation.PSCmdlet`]. If a cmdLet-class is
  derived from `PSCmdlet`, the cmdLet also has access to the *MSH runtime*, including variables in the session state, access to the host or information
  about the current cmdlet providers.

}
{ BeginProcessing(), ProcessRecord() and EndProcessing() methods #dotnet-cmdlet-Begin-Process-End

  When deriving a class from `Cmdlet` to create a new command, the three methods `BeginProcessing()`, `ProcessRecord()` and `EndProcessing()` can be overridden to
  initialize command execution, process each object that the command receives from the → Windows/PowerShell/pipeline, and clean up command execution.

  These three methods correspond to the → Windows/PowerShell/language/function/begin-process-end-block[`begin`, `process` and `end` blocks] in
  → Windows/PowerShell/language/function[PowerShell functions].

}
{ Write* methods #dotnet-cmdlet-Write_

  The `Cmdlet` has a few `Write*` methods:
    • `WriteCommandDetail`
    • `WriteDebug`
    • `WriteError` (Compare with the → #dotnet-cmdlet-ThrowTerminatingError[`ThrowTerminatingError`] method)
    • `WriteInformation`
    • `WriteObject`
    • `WriteProgress`
    • `WriteVerbose`
    • `WriteWarning`

  For example, the `WriteProgress` method accepts instances of `System.Managment.Automation.ProgressRecord`.

}
{ ThrowTerminatingError #dotnet-cmdlet-ThrowTerminatingError

  Calling `ThrowTerminatingError()` raises a → Windows/PowerShell/language/error-handling#ps-error-types[terminating error].

  Compare with → #dotnet-cmdlet-Write_[`WriteError()`] which allows the cmdlet to continue.

}
{ Simple C-Sharp example #cmdlet-cs-example

  The following simple source code demonstrates how a → Windows/PowerShell/language/cmdlet can be written in → development/languages/C-Sharp[C#]:
  gh|.NET-API|/System/Management/Automation/Cmdlet/Add-Strings.cs||

  The source code can be compiled with into a → Windows/development/Portable-Executable/DLL (`Add-Strings.dll`) with:
code {
csc.exe -r:"C:\Program Files (x86)\Reference Assemblies\Microsoft\WindowsPowerShell\3.0\system.management.automation.dll" -target:library Add-Strings.cs
code }

  This DLL must then be imported into a → Windows/PowerShell/session with
code {
→ Windows/PowerShell/command-inventory/noun/module/import[import-module] .\Add-Strings.cs
code }

  With this import, the cmdlet is available to be used:
code {
Add-Strings foo bar
code }

}
