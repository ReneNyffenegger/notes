$ System.Management.Automation.ParameterAttribute (class)

`System.Management.Automation.ParameterAttribute` allows to specify the attributes of parameters of → Windows/PowerShell/language/cmdlet[PowerShell cmdLets] or
→ Windows/PowerShell/language/function/parameter[PowerShell functions].

{ Attributes that can be set

  The attributes of the `ParameterAttribute` can be displayed in → Windows/PowerShell with reflection like so
code {
foreach ($prop in ([System.Management.Automation.ParameterAttribute].DeclaredProperties | → Windows/PowerShell/command-inventory/noun/object/sort[sort-object] Name) ) {
   "$($prop.Name) -- $($prop.PropertyType)"
}
code }

  With this method, the following attributes are found: 
  table { lll
  ~Name~ ☰ ~Type~ ☰ `Comment~
    DontShow ☰ bool ☰ Don't show in programming assisting tools like intellisense
    EffectiveAction ☰ → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ExperimentAction[ExperimentAction] ☰ 
    ExperimentAction ☰ → Microsoft/dot-net/namespaces-classes/System/Management/Automation/ExperimentAction[ExperimentAction] ☰ 
    ExperimentName ☰ string ☰ Short description (for example for a tool tip)
    HelpMessage ☰ string ☰
    HelpMessageBaseName ☰ string ☰
    HelpMessageResourceId ☰ string ☰
    Mandatory ☰ bool ☰ set to true to make parameter mandatory, otherwise, parameter is optional.
    ParameterSetName ☰ string ☰ Name of parameter set that parameter belongs to. Default `ParameterAttribute.AllParameterSets`
    Position ☰ int ☰ If not set, the parameter is a named parameter
    ToHide ☰ bool ☰ ?
    ToShow ☰ bool ☰ ?
    ValueFromPipeline ☰ bool ☰ 
    ValueFromPipelineByPropertyName ☰ bool ☰ if `true`: objects from the pipeline with an attribute that has the same name as the parameter provide the parameter's value
    ValueFromRemainingArguments ☰ bool ☰ if `true`: remaining arguments create an array as value for the parameter
  table }

}
