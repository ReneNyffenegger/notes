$ System.Collections.Generic.Dictionary<TKey, TValue> (class)

Note that there is no `System.Collections.Dictionary` type. However, there is a
→ Microsoft/dot-net/namespaces-classes/System/Collections/Hashtable[`System.Collections.Hashtable`] class
(which → https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md[Microsoft] does not recommand to use any longer).

{ Methods and properties

   table { ll
   `Add()` ☰ Adds a new key/value pair. Compare with `TryAdd()`
   `Clear()` ☰ Removes all key/value pairs. 
   `Comparer` ☰ Returns an `IEqualityComparer` which then can be used to check for key-equality.
   `ContainsKey()` ☰ Checks for the existence of a specific key.
   `ContainsValue()` ☰ Checks for the existence of a specific value.
   `Count` ☰ Number of key/value pairs in the dictionary.
   `EnsureCapacity()` ☰
   `GetEnumerator()` ☰ Returns an enumerator that can be used to iterate over all key/value pairs.
   `GetObjectData()` ☰
   `Item[]` ☰ Gets or sets the value for the specified key. Throws `KeyNotFoundException` if key does not exist.
   `Keys` ☰
   `OnDeserialization()` ☰
   `Remove()` ☰ Removes the given key/value pair
   `TrimExcess()` ☰
   `TryAdd()` ☰
   `TryGetValue()` ☰
   `Values` ☰
  table }

}

{ Creating a Dictionary in PowerShell

  Most of the time, an ordinary → Windows/PowerShell/language/type/hash-table[PowerShell hashtable] (which is created with `@{…}`) is sufficient if key/value pairs need to be stored in
  PowerShell.
  -
  However, if an explicit `Dictionary<TKey, TValue>` is needed, such an object can be created like so:
code {
$dict = → Windows/PowerShell/command-inventory/noun/object/new[new-object] 'System.Collections.Generic.Dictionary[String, Int]'
$dict['four'] = 4
$dict['nine'] = 9
$dict['five'] = 5

# $dict[ 7    ] ='seven' # Error: Cannot convert value "seven" to type "System.Int32" …

echo $dict['nine']
9
code }

}
{ Iterating over a Dictionary's keys in PowerShell

  The following example tries to demonstrate how it is possible to iterate over the keys of a `Dictionary<TKey,TValue>` object in PowerShell.

  gh|.NET-API|/System/Collections/Generic/Dictionary-TKey-TValue/iterate-keys-PS.ps1||

}
{ Iterating over key/value pairs in PowerShell

  Because a `Dictionary[TKey, TValue]` implements the → Microsoft/dot-net/namespaces-classes/System/Collections/Generic/IEnumerable-T[`IEnumerable<T>`] interface, the `GetEnumerator()` is implemented
  which allows to iterate over the dictionary's key/value pairs. In the `→ Windows/PowerShell/language/statement/foreach[foreach] $item in …` statement, the variable `$item` has the two properties `key` and `value` that
  allow to access the respective values:
  gh|.NET-API|/System/Collections/Generic/Dictionary-TKey-TValue/iterate-key-value-PS.ps1||

}
