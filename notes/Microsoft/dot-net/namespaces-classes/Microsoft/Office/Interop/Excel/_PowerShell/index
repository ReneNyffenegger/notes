$ Powershell + Microsoft.Office.Interop.Excel

{ Example

  This is a simple example that is supposed to demonstrate how → Microsoft/dot-net/namespaces-classes/Microsoft/Office/Interop/Excel[`Microsoft.Office.Interop.Excel`] can be
  used in → Windows/PowerShell:

  gh|.NET-API|/Microsoft/Office/Interop/Excel/PowerShell/simple.ps1||

}
{ Error message: Unable to cast COM object of type 'Microsoft.Office.Interop.Excel.ApplicationClass' to interface type 'Microsoft.Office.Interop.Excel._Application'

  On a company-laptop, I encountered the following error message:
  "
    Exception setting "Visible": "Unable to cast COM object of type 'Microsoft.Office.Interop.Excel.ApplicationClass' to interface type 'Microsoft.Office.Interop.Excel._Application'. This operation
    failed because the QueryInterface call on the COM component for the interface with IID '{000208D5-0000-0000-C000-000000000046}' failed due to the following error: Element not found. (Exception from
    HRESULT: 0x8002802B (TYPE_E_ELEMENTNOTFOUND)).
  "

  Some solutions to this problems are found in → https://stackoverflow.com/questions/28066719[this stackoverflow question].

}

sa:

  → https://stackoverflow.com/a/25135685/180275[This Stackoveflow answer] has some ideas that outline the necessary steps to have the Excel
  → Windows/development/process stopped that is spawned when using Interop Excel. Basically, it boils down to put all interop stuff into a
  → Windows/PowerShell/language/function and after calling the function to execute the following two statements outside of the function
code {
[→ Microsoft/dot-net/namespaces-classes/System/GC[System.GC]]::Collect()
[→ Microsoft/dot-net/namespaces-classes/System/GC[System.GC]]::WaitForPendingFinalizers()
code }

  `→ Windows/PowerShell/modules/personal/MS-Office#ps-mod-ms-office-get-msOfficeComObject[get-msOfficeComObject] excel`
