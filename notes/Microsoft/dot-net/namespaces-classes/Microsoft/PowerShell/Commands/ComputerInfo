$ Microsoft.PowerShell.Commands.ComputerInfo (class)
@ Microsoft.PowerShell.Commands.ComputerInfo

The `Microsoft.PowerShell.ComputerInfo.ComputerInfo` class stores system and operating system properties.

{ Properties

  table { ll

   `BiosBIOSVersion` ☰
   `BiosBuildNumber` ☰
   `BiosCaption` ☰
   `BiosCharacteristics` ☰ An array of `Uint16` that somehow defines the BIOS' supported characteristics.
   `BiosCodeSet` ☰
   `BiosCurrentLanguage` ☰
   `BiosDescription` ☰
   `BiosEmbeddedControllerMajorVersion` ☰
   `BiosEmbeddedControllerMinorVersion` ☰
   `BiosFirmwareType` ☰
   `BiosIdentificationCode` ☰
   `BiosInstallableLanguages` ☰
   `BiosInstallDate` ☰
   `BiosLanguageEdition` ☰
   `BiosListOfLanguages` ☰
   `BiosManufacturer` ☰
   `BiosName` ☰
   `BiosOtherTargetOS` ☰
   `BiosPrimaryBIOS` ☰
   `BiosReleaseDate` ☰
   `BiosSeralNumber` ☰
   `BiosSMBIOSBIOSVersion` ☰
   `BiosSMBIOSMajorVersion` ☰
   `BiosSMBIOSMinorVersion` ☰
   `BiosSMBIOSPresent` ☰
   `BiosSoftwareElementState` ☰
   `BiosStatus` ☰
   `BiosSystemBiosMajorVersion` ☰
   `BiosSystemBiosMinorVersion` ☰
   `BiosTargetOperatingSystem` ☰
   `BiosVersion` ☰
   `CsAdminPasswordStatus` ☰
   `CsAutomaticManagedPagefile` ☰
   `CsAutomaticResetBootOption` ☰
   `CsAutomaticResetCapability` ☰
   `CsBootOptionOnLimit` ☰
   `CsBootOptionOnWatchDog` ☰
   `CsBootROMSupported` ☰
   `CsBootStatus` ☰
   `CsBootupState` ☰
   `CsCaption` ☰
   `CsChassisBootupState` ☰
   `CsChassisSKUNumber` ☰
   `CsCurrentTimeZone` ☰ Compare with `OsCurrentTimeZone` and `TimeZone`
   `CsDaylightInEffect` ☰
   `CsDescription` ☰
   `CsDNSHostName` ☰
   `CsDomain` ☰
   `CsDomainRole` ☰
   `CsEnableDaylightSavingsTime` ☰
   `CsFrontPanelResetStatus` ☰
   `CsHypervisorPresent` ☰ `True` if a → development/hypervisor is present. Compare with `HyperVisorPresent`
   `CsInfraredSupported` ☰
   `CsInitialLoadInfo` ☰
   `CsInstallDate` ☰
   `CsKeyboardPasswordStatus` ☰
   `CsLastLoadInfo` ☰
   `CsManufacturer` ☰
   `CsModel` ☰
   `CsName` ☰
   `CsNetworkAdapters` ☰
   `CsNetworkServerModeEnabled` ☰
   `CsNumberOfLogicalProcessors` ☰
   `CsNumberOfProcessors` ☰
   `CsOEMStringArray` ☰
   `CsPartOfDomain` ☰
   `CsPauseAfterReset` ☰
   `CsPCSystemType` ☰
   `CsPCSystemTypeEx` ☰
   `CsPhyicallyInstalledMemory` ☰ This value is found via the WinAPI function `GetPhysicallyInstalledSystemMemory`. Compare with `CsTotalPhysicalMemory`
   `CsPowerManagementCapabilities` ☰
   `CsPowerManagementSupported` ☰
   `CsPowerOnPasswordStatus` ☰
   `CsPowerState` ☰
   `CsPowerSupplyState` ☰
   `CsPrimaryOwnerContact` ☰
   `CsPrimaryOwnerName` ☰
   `CsProcessors` ☰ An array of `Microsoft.PowerShell.commands.Processor` objects. See also → hardware/CPU
   `CsResetCapability` ☰
   `CsResetCount` ☰
   `CsResetLimit` ☰
   `CsRoles` ☰
   `CsStatus` ☰
   `CsSupportContactDescription` ☰
   `CsSystemFamily` ☰
   `CsSystemSKUNumber` ☰
   `CsSystemType` ☰ For example `x64-based PC`
   `CsThermalState` ☰
   `CsTotalPhysicalMemory` ☰ Compare with `CsPhyicallyInstalledMemory`, `OsTotalVirtualMemorySize`, `OsTotalVisibleMemorySize`, `OsTotalSwapSpaceSize`
   `CsUserName` ☰
   `CsWakeUpType` ☰
   `CsWorkgroup` ☰
   `DeviceGuardAvailableSecurityProperties` ☰
   `DeviceGuardCodeIntegrityPolicyEnforcementStatus` ☰
   `DeviceGuardRequiredSecurityProperties` ☰
   `DeviceGuardSecurityServicesConfigured` ☰
   `DeviceGuardSecurityServicesRunning` ☰
   `DeviceGuardSmartStatus` ☰
   `DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus` ☰
   `HyperVisorPresent` ☰ Compare with `CsHypervisorPresent`
   `HyperVRequirementDataExecutionPreventionAvailable` ☰
   `HyperVRequirementSecondLevelAddressTranslation` ☰
   `HyperVRequirementVirtualizationFirmwareEnabled` ☰
   `HyperVRequirementVMMonitorModeExtensions` ☰
   `KeyboardLayout` ☰
   `LogonServer` ☰
   `OsArchitecture` ☰
   `OsBootDevice` ☰
   `OsBuildNumber` ☰
   `OsBuildType` ☰
   `OsCodeSet` ☰
   `OsCountryCode` ☰
   `OsCSDVersion` ☰
   `OsCurrentTimeZone` ☰ Compare with `CsCurrentTimeZone` and `TimeZone`
   `OsDataExecutionPrevention32BitApplications` ☰
   `OsDataExecutionPreventionAvailable` ☰
   `OsDataExecutionPreventionDrivers` ☰
   `OsDataExecutionPreventionSupportPolicy` ☰
   `OsDebug` ☰
   `OsDistributed` ☰
   `OsEncryptionLevel` ☰
   `OsForegroundApplicationBoost` ☰
   `OsFreePhysicalMemory` ☰
   `OsFreeSpaceInPagingFiles` ☰
   `OsFreeVirtualMemory` ☰
   `OsHardwareAbstractionLayer` ☰
   `OsHotFixes` ☰ An array of `Microsoft.PowerShell.Commands.HotFix` objects which correspond to *Quick-Fix Engineering patches* («Hot fixes») that were applied to the OS.
   `OsInstallDate` ☰
   `OsInUseVirtualMemory` ☰ Compare with `OsTotalVirtualMemorySize`
   `OsLanguage` ☰
   `OsLastBootUpTime` ☰
   `OsLocalDateTime` ☰
   `OsLocale` ☰
   `OsLocaleID` ☰
   `OsManufacturer` ☰
   `OsMaxNumberOfProcesses` ☰
   `OsMaxProcessMemorySize` ☰
   `OsMuiLanguages` ☰
   `OsName` ☰
   `OsNumberOfLicensedUsers` ☰
   `OsNumberOfProcesses` ☰
   `OsNumberOfUsers` ☰
   `OsOperatingSystemSKU` ☰
   `OsOrganization` ☰
   `OsOtherTypeDescription` ☰
   `OsPAEEnabled` ☰
   `OsPagingFiles` ☰
   `OsPortableOperatingSystem` ☰
   `OsPrimary` ☰
   `OsProductSuites` ☰ An array of `Microsoft.PowerShell.Commands.OSProductSuite` objects which indicate licensed products that were added to the OS. Compare with `OsSuites`
   `OsProductType` ☰
   `OsRegisteredUser` ☰
   `OsSerialNumber` ☰
   `OsServerLevel` ☰
   `OsServicePackMajorVersion` ☰
   `OsServicePackMinorVersion` ☰
   `OsSizeStoredInPagingFiles` ☰
   `OsStatus` ☰
   `OsSuites` ☰ Compare with `OSProductSuites`
   `OsSystemDevice` ☰
   `OsSystemDirectory` ☰
   `OsSystemDrive` ☰
   `OsTotalSwapSpaceSize` ☰
   `OsTotalVirtualMemorySize` ☰ Compare with `CsTotalPhysicalMemory`, `OsInUseVirtualMemory`
   `OsTotalVisibleMemorySize` ☰
   `OsType` ☰ For example: `WINNT`
   `OsUptime` ☰ A `TimeSpan` whose duration corresponds to the last restart of the system and the current time
   `OsVersion` ☰ The → Windows/versions[operating system's version number]
   `OsWindowsDirectory` ☰ The so called windows directory (aka system root?), typically → Windows/dirs/Windows[`C:\Windows`]
   `PowerPlatformRole` ☰ A member of the `Microsoft.PowerShell.Commands.PowerPlatformRole` enum.
   `TimeZone` ☰ The system's current → development/date-time/time-zone, compare with `→ Windows/PowerShell/command-inventory/noun/timeZone/get`. Compare with `CsCurrentTimeZone` and `OsCurrentTimeZone`
   `WindowsBuildLabEx` ☰ A string, for example `22000.1.amd64fre.co_release.210604-1628`
   `WindowsCurrentVersion` ☰
   `WindowsEditionId` ☰ For example: `Core` or `ProfessionalWorkstation`
   `WindowsInstallationType` ☰ For example: `Client`
   `WindowsInstallDateFromRegistry` ☰
   `WindowsProductId` ☰
   `WindowsProductName` ☰ For example `Windows 10 Home` or `Windows 10 Pro for Workstations`
   `WindowsRegisteredOrganization` ☰
   `WindowsRegisteredOwner` ☰
   `WindowsSystemRoot` ☰
   `WindowsVersion` ☰

  table }

}

sa:
  `→ Windows/PowerShell/command-inventory/noun/computerInfo/get`
