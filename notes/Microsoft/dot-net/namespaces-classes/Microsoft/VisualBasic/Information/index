$ Microsoft.VisualBasic.Information (class)
@ Microsoft.VisualBasic.Information

The `Microsoft.VisualBasic.Information` class provides procedures used to return, test for and verify → development/Data.

{ Using the class in PowerShell

In order to use this class in → Windows/PowerShell, a reference to the `Microsoft.VisualBasic` assembly must be added:
code {
→ Windows/PowerShell/command-inventory/noun/type/add#add-type-assembly[add-type -assembly Microsoft.VisualBasic]
code }

}
{ Methods

  table { ll

    `Erl` ☰ Line number of last statement that was executed.
    `Err` ☰ An `Microsoft.VisualBasic.ErrObject` object that is used for error handling purposes.
    `IsArray` ☰
    `IsDate` ☰
    `IsDBNull` ☰ Checks if an expression evaluates to a `→ Microsoft/dot-net/namespaces-classes/System/DBNull` class. Compare with the `IsDBNull` method found in `→ Microsoft/dot-net/namespaces-classes/System/Data/Common/DbDataReader`.
    `IsError` ☰ Checks if an expression derives from `→ Microsoft/dot-net/namespaces-classes/System/Exception`.
    `IsNothing` ☰
    `IsNumeric` ☰
    `IsReference` ☰
    `LBound` ☰
    `QBColor` ☰
    `RGB` ☰
    `SystemTypeName` ☰
    `TypeName` ☰
    `UBound` ☰
    `VarType` ☰
    `VbTypeName` ☰

  table }

{ IsNumeric

 `IsNumeric(expr)` returns `true` if `expr` can be evaluated as a numerical value.

  gh|.NET-API|/Microsoft/VisualBasic/Information/IsNumeric.ps1||

}
{ TypeName #ms-vb-Information-TypeName

? `TypeName(…)` returns a → Windows/development/COM/object[COM object's] type name like → development/languages/VBA[VBA's] function
  → development/languages/VBA/functions/typeName[`typeName()`] does.

  In → Windows/PowerShell, `TypeName()` might be used like so:
code {
$comObj = [→ Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices/Marshal[System.Runtime.InteropServices.Marshal]]::GetActiveObject('Excel.Application')

#
#  Adding the Micrsoft.VisualBasic.Information type so that we can use its TypeName() function
#
  → Windows/PowerShell/command-inventory/noun/type/add[add-type]  -assemblyName Microsoft.VisualBasic
#
#   Alternatively, adding it with the path to the → Windows/development/Portable-Executable/DLL:
# → Windows/PowerShell/command-inventory/noun/type/add[add-type] -path '→ Windows/dirs/Program-Files-x86/Reference-Assemblies/Microsoft/Framework[C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework]\.NETFramework\v4.5\Microsoft.VisualBasic.dll'

[Microsoft.VisualBasic.Information]::TypeName($comObj.worksheets(1).shapes(1))

#
#  Creating an «alias» for the namespace:
#
$vbi = [Microsoft.VisualBasic.Information]
$vbi::TypeName($comObj.selection)
code }

  Instead of using a variable `$vbi` to refer to the `Microsoft.VisualBasic.Information` type, it also possible
  to → Microsoft/dot-net/namespaces-classes/System/Management/Automation/TypeAccelerators#ps-add-type-accelerator[add a type accelerator] for this type (so that the `TypeName()` can be invoked
  like so `[vbi]::TypeName()`)

  See also `→ Microsoft/dot-net/namespaces-classes/System/__ComObject`

}
}
