$ Microsoft.SqlServer.Dts.Runtime.Package (class)
@ Microsoft.SqlServer.Dts.Runtime.Package

`Microsoft.SqlServer.Dts.Runtime.Package` is a representation of a package container (a dtsx file?).

`Package` inherits from `Microsoft.SqlServer.Dts.Runtime.EventsProvider`.

`Package` objects can be obtained from the `Load…` methods of `→ Microsoft/dot-net/namespaces-classes/Microsoft/SqlServer/Dts/Runtime/Application`.

{ Properties and methods

  table { ll

    `AddDataTapPoint()` ☰
    `CertificateContext` ☰
    `CertificateObject` ☰
    `CheckpointFileName` ☰ Name of a file that contains a checkpoint, used for restarting a package.
    `CheckpointUsage` ☰
    `CheckSignature()` ☰
    `CheckSignatureOnLoad` ☰
    `ComputeExpressions()` ☰
    `Configurations` ☰ A `Microsoft.SqlServer.Dts.Runtime.Configurations` object.
    `Connections` ☰ A `→ Microsoft/dot-net/namespaces-classes/Microsoft/SqlServer/Dts/Runtime/Connections` object
    `CreationDate` ☰ A `→ Microsoft/dot-net/namespaces-classes/System/DateTime` object.
    `CreatorComputerName` ☰
    `CreatorName` ☰
    `DesignEvents` ☰ An object implementing the `Microsoft.SqlServer.Dts.Runtime.IDTSEvents` interface, specifies if the designer or third-party client should receive events during design time.
    `DesignTimeProperties` ☰ An → development/XML/DOM/nodes/document[XML document] that describes the *layout information* of the package (x and y coordinates, width and height of elements etc.). This information has no affect on the package's runtime behavior.
    `DumpDescriptor` ☰
    `DumpOnAnyError` ☰
    `EnableConfigurations` ☰
    `EnableDump` ☰
    `EncryptCheckpoints` ☰
    `Errors` ☰
    `Executables` ☰ A `Microsoft.SqlServer.Dts.Runtime.Executables` object which contains the collection of executables (`→ Microsoft/dot-net/namespaces-classes/Microsoft/SqlServer/Dts/Runtime/Executable`) in the package 
    `Execute()` ☰ Run the package and return a member of the `→ Microsoft/dot-net/namespaces-classes/Microsoft/SqlServer/Dts/Runtime/DTSExecResult` enumeration. `Execute()` calls implicitely `Validate()` method.
    `ExportConfigurationFile()` ☰ Creates an XML file that contains all deployable variables in the package.
    `ExtendedProperties` ☰
    `FailPackageOnFailure` ☰
    `FindReferencedObjects()` ☰
    `GetBreakpointTargets()` ☰
    `GetExecutionPath()` ☰
    `GetExpression()` ☰
    `GetObjectFromPackagePath()` ☰
    `GetPackagePath()` ☰
    `HasExpressions` ☰
    `IgnoreConfigurationsOnLoad` ☰
    `ImportConfigurationFile()` ☰
    `InteractiveMode` ☰
    `LoadFromXML()` ☰
    `LoadUserCertificateByHash()` ☰
    `LoadUserCertificateByName()` ☰
    `LogProviders` ☰
    `MaxConcurrentExecutables` ☰
    `OfflineMode` ☰
    `PackagePassword` ☰
    `PackagePriorityClass` ☰ A member of the `Microsoft.SqlServer.Dts.Runtime.DTSPriorityClass` which ultimately specifies the (Win32) → Windows/development/process/thread priority for the package.
    `PackageType` ☰ A member of the `→ Microsoft/dot-net/namespaces-classes/Microsoft/SqlServer/Dts/Runtime/DTSPackageType` enumeration which identifies the tool with which the package was created.
    `PackageUpgradeOptions` ☰
    `Parameters` ☰
    `PrecedenceConstraints` ☰
    `ProcessConfiguration()` ☰
    `Project` ☰
    `Properties` ☰
    `ProtectionLevel` ☰
    `RegenerateID()` ☰
    `SafeRecursiveProjectPackageExecution` ☰
    `SaveCheckpoints` ☰
    `SaveToXML()` ☰
    `SetExpression()` ☰
    `SuppressConfigurationWarnings` ☰
    `UpdateObjects` ☰
    `VersionBuild` ☰
    `VersionComments` ☰
    `VersionGUID` ☰
    `VersionMajor` ☰
    `VersionMinor` ☰
    `Warnings` ☰

  table }

}
