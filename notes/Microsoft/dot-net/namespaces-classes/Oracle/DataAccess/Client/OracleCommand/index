$ Oracle.DataAccess.Client.OracleCommand (class)
@ Oracle.DataAccess.Client.OracleCommand

`Oracle.DataAccess.Client.OracleCommand` represents an → development/databases/Oracle/SQL[(Oracle-) SQL statement].

`OracleCommand` derives from `→ Microsoft/dot-net/namespaces-classes/System/Data/Common/DbCommand`

{ BindByName #OracleCommand-BindByName

  The boolean property `BindByName` determines if the command's parameters (`→ Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client/OracleParameter`) are bound to the SQL statement's
  → development/databases/Oracle/SQL/statement/bind-variables positionally (default) or by name.

}
{ InitialLONGFetchSize #OracleCommand-InitialLONGFetchSize

  I found the `InitialLONGFetchSize` property to be *immensly* valuable when I needed to extract → development/databases/Oracle/SQL/data-types/raw[long raw] data from a table: if this
  value is set to `-1`, an → Microsoft/dot-net/ADO program can access the *entire* length of the binary data that is stored in a long raw, even if larger than 32 KB!
  
  See the → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Types/OracleBinary[`Oracle.DataAccess.Types.OracleBinary` class] for an example that demonstrates how long raws are extracted from tables.

}

sa:
  → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client/OracleCommand/ExecuteNonQuery[`ExecuteNonQuery()`]
