$ PowerShell example for Oracle.DataAccess.Client

This example tries to demonstrate how → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client[`Oracle.DataAccess.Client`] might be used in
→ Windows/PowerShell.

{ Add assembly to session

  Use → Windows/PowerShell/command-inventory/noun/type/add[`add-type`] to add the `Oracle.DataAccess.Client` → Microsoft/dot-net/assembly to the current
  → Windows/PowerShell/session:
  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/add-type.ps1||

}
{ Connect to Oracle

  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/connect.ps1||

}
{ Create a table

  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/create-table.ps1||

}
{ Insert data

  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/insert.ps1||

}
{ Commit

  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/commit.ps1||

  While this works, when working with Oracle databases, it is advisable to use `Oracle.DataAccess.Client.OracleTransaction` instead.

}
{ Select records 

  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/select.ps1||

}
{ Drop table

  Finnaly, the example table is dropped:
  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/drop-table.ps1||

}
{ Calling a function (stored procedure)

  When calling a → development/databases/Oracle/PL-SQL function, the parameter for the returned value
  must be → https://support.oracle.com/knowledge/Oracle%20Database%20Products/261084_1.html[added first]

  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/call-function.ps1||

  { Calling a function that returns a string

    When calling a function that returns a → development/databases/Oracle/SQL/data-types/varchar2[`varchar2`], the expected (maximum) size of the returned string must be set using the
    parameter's property `.Size`, otherwise, Oracle will throw the error message
   *ORA-06502: PL/SQL: numeric or value error: character string buffer too small*.

  }


}
{ Cleaning up

  It should be assumed that calling `Close()` on a connection also closes the → development/databases/Oracle/architecture/session.

  However, this is not so, and even calling `Dispose()` still leaves the session open.
  gh|.NET-API|/Oracle/DataAccess/Client/_example/PowerShell/clean-up.ps1||

}
 
sa:
  Using .NET/PowerShell to execute the Oracle stored procedure → development/databases/Oracle/installed/packages/dbms/utility/api/expand_sql_text/PowerShell[`dbms_sql_text.expand_sql_text`]
