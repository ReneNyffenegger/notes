$ ADO.NET

ADO.NET is found in the → Microsoft/dot-net/namespaces-classes/System/Data[`System.Data`] namespace. 
-
The central class is → Microsoft/dot-net/namespaces-classes/System/Data/DataTable[`System.Data.DataTable`], another class is
→ Microsoft/dot-net/namespaces-classes/System/Data/DataSet[`System.Data.DataSet`].

{ .NET Framework Data Providers #dot-net-data-provider

  A *.NET Framework Data Provider* establishes connections to a *data source* and executes (→ development/databases/SQL[SQL]-) statements («comamnds») on the data source via the connection.

  Depending on the *data source*, a *.NET Framework Data Provider* needs to be chosen. Some commonly seen providers are:
  table { lll
    ~Name~ ☰ ~Namesapace~ ☰ ~Comments~
    .NET Framework Data Provider for → development/databases/SQL-Server ☰ → Microsoft/dot-net/namespaces-classes/System/Data/SqlClient[`System.Data.SqlClient`] ☰
    .NET Framework Data Provider for → development/databases/OLE-DB ☰ → Microsoft/dot-net/namespaces-classes/System/Data/OleDb[`System.Data.OleDb`] ☰
    .NET Framework Data Provider for → development/databases/ODBC ☰ → Microsoft/dot-net/namespaces-classes/System/Data/Odbc[`System.Data.Odbc`] ☰
    .NET Framework Data Provider for → development/databases/Oracle ☰ → Microsoft/dot-net/namespaces-classes/System/Data/OracleClient[`System.Data.OracleClient`] ☰ → https://blogs.msdn.microsoft.com/adonet/2009/06/15/system-data-oracleclient-update/[deprecated]
    Oracle Data Provider for .NET ☰ → Microsoft/dot-net/namespaces-classes/Oracle/DataAccess/Client[`Oracle.DataAccess.Client`] ☰ 
    EntityClient Provider ☰ → Microsoft/dot-net/namespaces-classes/System/Data/EntityClient[`System.Data.EntityClient`] ☰ connect to *Entity Data Models (EDM)*.
    .NET Framework Data Provider for *SQL Server Compact 4.0.* ☰ `System.Data.SqlServerCe` ☰ 
  table }


  The main types/classes in a .NET Framework Data Provider are
  table { ll
    ~Base type~ ☰ ~Comment~ 
    → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbConnection[`System.Data.Common.DbConnection`] ☰ establish a connection to a data source and transport → development/Data from and to it.
    → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbCommand[`System.Data.Common.DbCommand`] ☰ send commands, typically → development/databases/SQL/statement[SQL statements] to a → development/databases[database] that the client is connect to using a `DbConnection`
    → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbDataReader[`System.Data.Common.DbDataReader`] ☰ process a `DbCommand` result set, typically a → development/databases/SQL-Server/sql/select[`select` statement]
    → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbDataAdapter[`System.Data.Common.DbDataAdapter`] ☰ fills a → Microsoft/dot-net/namespaces-classes/System/Data/DataSet[`System.Data.DataSet`] using a `DbConnection` and synchronizes changed → development/Data with the *data source* after updating it in the `DataSet`
  table }
  A .NET Framework Data Provider typically derives its types from these base classes.

  Other relevant types are:
    • → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbTransaction[`System.Data.Common.DbTransaction`]
    • `System.Data.Common.DbCommandBuilder`
    • `System.Data.Common.DbConnectionStringBuilder`
    • → Microsoft/dot-net/namespaces-classes/System/Data/Common/DbParameter[`System.Data.Common.DbParameter`]
    • `System.Data.Common.DbException`
    • `System.Data.Common.DBDataPermission` (note the uppercase `B`)
  

}
{ LINQ

  There are three ADO.NET LINQ technologies:
    • LINQ to DataSet
    • LINQ to → development/databases/SQL
    • LINQ to Entities

}
