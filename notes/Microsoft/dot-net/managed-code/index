$ .NET: Managed code
@ managed code

*Managed code* runs in and using the → Microsoft/dot-net/Common-Language-Runtime[Common Language Runtime (CLR)].

The CLR loads the (platform indipendent) MSIL that was produced by a .NET compiler and, as a second compilation step, turns it into (platform dependent) native code. (This second step is referred to
*Just in Time (JIT) compilation*).

{ Verification process #dotnet-mc-verification-process

  In order to run managed code, it must undergo a *verification process*. (It is possible, however, for the administrator to grant a permission to skip this process).

  This verification process checks if the code being verified does not try to access invalid memory addresses or perform other potentially dangerous actions.

  If the managed code passes the verification, it is said to be *type-safe*.
  -
  Tha advantage of type-safe code is that the → Microsoft/dot-net/Common-Language-Runtime[Common Language Runtime] is able to provide better isolation by not
  sacrificing performance.

}
{ Interaction with unmanaged code/memory

   → Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices/GCHandle[`System.Runtime.InteropServices.GCHandle`] provides a way to access managed objects from unmanaged memory.

  { Passing strings from managed to unmanaged code

    In order to pass strings from managed code to unmanaged code,
    → Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices/MarshalAsAttribute[`System.Runtime.InteropServices.MarshalAsAttribute`]
    is required because managed strings are stored differently in memory than unmanaged string.  

    With the `MarshalAsAttribute` instruction, the necessary conversion will be performed.

  }
}

sa:
  In order to → Windows/development/Debugging[debug] managed code, → Windows/dirs/Windows/Microsoft_NET/Framework64/vn_n_n/SOS_dll[`SOS.dll`] and
  → Windows/dirs/Windows/Microsoft_NET/Framework64/vn_n_n/mscordacwks_dll[`mscordacwks.dll`] is needed.
