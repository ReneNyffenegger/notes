$ Interoperability between managed and unmanaged code

The → Microsoft/dot-net/Common-Language-Runtime[CLR] provides two mechanisms for → Microsoft/dot-net/managed-code to interoperate with → Microsoft/dot-net/managed-code/un:
table { ll
  Platform invoke (P/Invoke) ☰ Managed code calls functions exported from an unmanaged library (→ Windows/development/Portable-Executable/DLL)
  COM interop ☰ Managed code interacts with → Windows/development/COM[Component Object Model] (COM) → Windows/development/COM/object]objects] through *interfaces*.
table }

The → Microsoft/dot-net namespace → Microsoft/dot-net/namespaces-classes/System/Runtime/InteropServices[`System.Runtime.InteropServices`] is central to *interop*.

{ Marshaler

  The task of the *interop marshaler* is to copy data from the CLR runtime heap to the unmanaged heap and vice versa in order to give the caller and callee the
  impression that they both work on the same data.

  The interop marshaler always attempts to free memory allocated by unmanaged code.
  -
  This behavior complies with COM memory management rules, but differs from the rules that governs (native) C/C++.

}
