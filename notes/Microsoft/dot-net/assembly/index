$ .NET assembly
@ assembly

A → Microsoft/dot-net assembly is the fundamental *reusable building block* of a *common runtime language* application: it exhibits a set of APIs, types and ressources that can be called or used by applications or other assemblies.

Assemblies are versionable and self-describing.

An assembly is created from one or more sources and compiled into
a → Windows/development/Portable-Executable/DLL or → Windows/development/Portable-Executable/EXE.

An assembly is stored in the → Windows/development/Portable-Executable[Portable Execution (PE)] format: either as an → Windows/development/Portable-Executable/EXE or
a → Windows/development/Portable-Executable/DLL.

An assembly contains instructions that are executable in the .NET runtime (as opposed to machine instructions that are executed directly on a CPU).

One or more assemblies can be packed into a *library*.

{ Assembly identity and strong name #assembly-name

  An *assembly identity* consists of an
    • assembly name (not fully qualified, obviously)
    • culture (→ development/web/RFC#rfc1766[RFC 1766] format)
    • version number
    • processor architecture (starting with .NET Framework 2.0)

  If the assembly identitity is augmented with the follwing information, it becomes a *strong name*:
    • public key
    • digital signature

  A strong name is required for an application to be put into the → Microsoft/dot-net/assembly/Global-Assembly-Cache.
  -
  A strong name can be given to an assembly with → Windows/dirs/Program-Files-x86/Microsoft-SDKs/Windows/version/bin/NETFX-version-Tools/sn_exe[`sn.exe`].
  
  See also → Microsoft/dot-net/assembly/signed[signed assemblies].

    In → Windows/PowerShell, some of these characteristics can be determined like so:
code {
PS C:\> [→ Microsoft/dot-net/namespaces-classes/System/Reflection/Assembly[System.Reflection.Assembly]] $assembly = $true.psObject.GetType().Assembly
PS C:\> $assembly.FullName

System.Management.Automation, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35

PS C:\> [System.Reflection.AssemblyName] $name = [System.Reflection.AssemblyName]::GetAssemblyName($assembly.Location)
PS C:\> $name.CultureInfo

LCID             Name             DisplayName
----             ----             -----------
127                               Invariant Language (Invariant Country)

PS C:\> $name.ProcessorArchitecture

MSIL

PS C:\> $name.Version

Major  Minor  Build  Revision
-----  -----  -----  --------
7      0      0      0
code }

   See also → Microsoft/dot-net/namespaces-classes/System/Reflection/AssemblyKeyNameAttribute[`System.Reflection.AssemblyKeyNameAttribute`] and
   → Microsoft/dot-net/namespaces-classes/System/Reflection/AssemblyKeyFileAttribute[`System.Reflection.AssemblyKeyFileAttribute`]

}
{ Assembly manifest

  Every assembly contains an *assembly manifest* which acts as a table of content for the assembly. The manifest stores:
    • The → #assembly-name[assembly's identity]
    • A file table with the name of all files that make up an assembly (other .exe, .dlls or ressource files, bitmaps, readme files etc)
    • An assembly reference list

  Additional version information about an assembly manifest can be defined with the
  → Microsoft/dot-net/namespaces-classes/System/Reflection/AssemblyInformationalVersionAttribute[`System.Reflection.AssemblyInformationalVersionAttribute`] attribute.

}
{ Finding the location of an assembly (PowerShell)

  In → Windows/PowerShell, the → Windows/file-system[file system] → Windows/development/Portable-Executable/DLL location of an assembly that contains a given type can be determined like so:
code {
PS C:\> [System.Data.SqlTypes.SqlDecimal].Assembly.Location
→ Windows/dirs/Windows/Microsoft_NET/assembly[C:\Windows\Microsoft.Net\assembly]\GAC_64\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll
code }
  

}
{ Show referenced assemblies

  In → Windows/PowerShell, the assemblies that an assembly references can be shown like so:
code {
PS C:\> $asmbl = [→ Microsoft/dot-net/namespaces-classes/System/Reflection/Assembly[System.Reflection.Assembly]]::LoadFrom("P:\ath\to\the\assembly.dll")
PS C:\> $asmbl.GetReferencedAssemblies()

Version        Name
-------        ----
4.0.0.0        mscorlib
4.0.0.0        System.Data
1.0.0.0        YetAnotherAssembly
4.0.0.0        System

PS C:\> $asmbl.GetReferencedAssemblies().forEach( {$_.FullName} )
mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
YetAnotherAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=aab5e62e1b5f9c79
System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
code }

  Alternatively, referenced assemblies can also be shown with the IL disassembler → Windows/dirs/Program-Files-x86/Microsoft-SDKs/Windows/version/bin/NETFX-version-Tools/ildasm_exe[`isldasm.exe`]:
code {
C:\> ildasm P:\ath\to\the\assembly.dll
code }
  After ildadsm has opened the assmbly, the referenced assemblies are shown when opening *Manifest*: they are labelled with `.assembly extern …`.

}
{ Mixed-mode assemblies

  Assemblies that were created with the C++/CLI compiler are referred to as *mixed-mode assemblies* because the contain both native and → Microsoft/dot-net/managed-code.
  
}

sa:
  → Windows/dirs/Windows/Microsoft_NET/assembly[`%windir%\Microsoft.NET\assembly`]

  The → Microsoft/dot-net classes
  → Microsoft/dot-net/namespaces-classes/System/Reflection/Assembly[`System.Reflection.Assembly`] and
  → Microsoft/dot-net/namespaces-classes/System/Reflection/AssemblyName[`System.Reflection.AssemblyName`]

  → Windows/registry/tree/HKEY_CLASSES_ROOT/Installer/Assemblies[`HKEY_CLASSES_ROOT\Installer\Assemblies`]
  -
  `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\Managed\User SID\Installer\Assemblies`
  -
  `HKCU\Software\Microsoft\Installer\Assemblies`

  → Windows/dirs/Program-Files-x86/Microsoft-SDKs/Windows/version/bin/NETFX-version-Tools/FUSLOGVW_exe[`FUSLOGVW.exe`], the assembly binding log viewer.

  → Windows/dirs/Program-Files-x86/Microsoft-SDKs/Windows/version/bin/NETFX-version-Tools/PEVerify_exe[`PEVerify.exe`] checks if an assembly contains *verifiably type-safe code*.

  → Windows/dirs/Program-Files-x86/Microsoft-SDKs/Windows/version/bin/NETFX-version-Tools/al_exe[`al.exe`] is the assembly linker
