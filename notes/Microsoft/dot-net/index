$ .NET

→ Microsoft/dot-net/assembly

{ App models

  An app can be created in various models:
    • Console
    • Windows Forms
    • Windows Presentation Foundation (WPF)
    • ASP.NET
    • ASP.NET Core

}
{ Namespaces

  table { ll

    System.EnterpriseServices      ☰ Access to → Windows/development/COM
    System.Runtime.InteropServices ☰ Access to → Windows/development/COM

  table }

}
{ NuGet

  NuGet is the package maneger for all .NET platforms.

}
{ PowerShell

  The → Windows/PowerShell/command-inventory/noun/type/add[`add-type` cmdLet] allows to load .NET framework classes.

  The → Windows/PowerShell/command-inventory/noun/object/new[`new-object` cmdLet] can be used to create an insance of a .NET Framework object.

}
{ TODO

  { .NET Framework Class Library (FCL)
  
    The .NET Framework Class Library (FCL) is organized into a hierarchy of *namespaces*. Two common namespaces are `System.*` and `Microsoft.*`.

    The FCL is comparable in scope with the standard libraries of → development/languages/Java.

    FCL implements the CLI Base Class Library (BCL) and other class libraries.

    FCL  consists of the following libraries:
      • BCL
      • Windows Forms
      • ASP.NET
      • Windows Presentation Foundation (WPF)
  }
  { Base Class Library (BCL)

    The BCL provides basic features such as namespaces and classes.

    BCL is the core of FCL.

    BCL is implemented in 
    → Windows/dirs/Windows/Microsoft_NET/Framework64/mscorlib_dll[`mscorlib.dll`],
    → Windows/dirs/Windows/Microsoft_NET/Framework64/System_dll[`System.dll`] and
    → Windows/dirs/Windows/Microsoft_NET/Framework64/System_Core_dll[`System.Core.dll`].

    A *Common Type System* (CTS) defines a set of *data types* that are shared by CTS-compliant languages.

  }
  { .NET Framework

    The .NET Framework only runs on → Windows based devices.

    The .NET Framework is constitued by a combination of BCL and FCL.

  }
  { .NET Core

    .NET Core is a re-implementation of .NET Framework that runs on multiple platforms (not only Windows).

    Multiple .NET Core versions can be installed on the same computer.

    .NET Core includes
      • ASP.NET Core
      • → Windows/development/Universal-Windows-Platform[Universal Windows Platform (UWP)]

    .NET Core was released in 2016

  }
  { Common Intermediate Language code (CIL)

    CIL is a an intermediate language that is abstracted from the hardware. It defines a (CPU and platform-independent, stack based, object-oriented) binary instruction set within
    the Common Language Infrastructure (CLI) specification.

    CIL is the product of a .NET compiler.

    CIL instructions are executed by a CLI-compatible runtime environment (such as the *Common Language Runtime*).

    When CIL is executed, the (platform-specific) VES compiles the CIL to *machine language* (just-in-time compilation).
    -
    It is also possible to use ahead-of-time compilation (→ Windows/dirs/Windows/Microsoft_NET/Framework64/vn_n_n/ngen_exe[`ngen.exe`]).

    Compiled CIL code is stored in → Microsoft/dot-net/assembly[CLI assemblies].

    CIL was formerly called *Microsoft intermediate language* (MSIL).

   *Roslyn* is the code name for a *.NET compiler platform* that features a compiler for C# and Visual Basic .NET. These compilers create CIL from the respective source files.

  }
  { Common Language Interface (CLI)

    The CLI is a specification that defines
      • CTS
      • Metadata (Which can be read with *reflection*)
      • Common Language Specification (CLS)
      • Virtual Execution System (VES)

    The VES loads and executes CLI-compatible programs, using the metadata to combine separately generated pieces of code at runtime.

    The *.NET Framework* is Microsoft's original implementation of the CLI.
    table { ll
      
      Specification (?) ☰ .NET Framework implementation
      Virtual Execution System (VES) ☰ Common Language Runtime
      Standard Libraries ☰ Framework Class Library

    table }

  }
  { Common Language Runtime (CLR)

    CLR is the virtual machine of the .NET Framework which runs all programs written for .NET. It offers
      • memory management
      • type safety
      • exception handlin
      • garbage collection
      • security
      • thread management

    These features make .NET programs *managed*.

    CLR implements the VES.

  }
  { .NET implemenations

     The four primary implementations are:
     table { ll
        .NET Framework ☰ The *original* framework, first released in 2002. Won't probably have a version 5.0
        .NET Core ☰ Re-implementation of .NET Framework. .NET Framework will be merged into .NET Core
        Xamarin(?) / Mono(?) ☰ Xamarin was started independently from → Microsoft. Microsoft bought Xamarin in 2016.
        → Windows/development/Universal-Windows-Platform[Universal Windows Platform (UWP)] ☰
     table }

  }
  { .NET Standard

?   .NET Standard is a library that combines the APIs of .NET Framework, .NET Core and Xamarin.

    .NET Standard was introduced by Microsoft in 2016.

  }
  { P/Invoke

    P/Invoke (Platform Invocation Services) is a feature of CLI implementations that allows to managed code to call native code.

?   P/Invoke seems to be .NET's equivalent for Java Native Interface.

    → http://www.pinvoke.net/ is a wiki containing P/Invoke signatures for a large number of standard → Windows/development/WinAPI[Windows APIs].

  }
  { Windows Presentation Foundation (WPF)

    ? WPF is a framework for UI creation, primarily intended for desktop client applications on Windows OS.

    ? WPF uses Extensible Application Markup Language (XAML).

  }
  { Windows Forms

    A GUI class library with the .NET Framework.

    Windows Forms is primarily targeted for desktop applications.

  }
  { ASP.NET

    Used to develop web applications.

?   ASP.NET has access to the CLR, so ASP.NET programs can be written in different .NET languages.

  }
  { ASP.NET Core

    ASP.NET Core is a re-implementation of ASP.NET. It runs on multiple platforms (OS X, → Windows, → Linux).

  }

}

sa:

  The presence of the → Windows/registry[registry] key → Windows/registry/tree/HKEY_LOCAL_MACHINE/Software/Microsoft/NET-Framework-Setup/NDP/v4/Full[`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDB\v4\Full`] indicates that
  the .NET Framework 4.5 or later is installed.

  → Windows/dirs/Windows/Microsoft_NET[`%SystemRoot%\Microsoft.NET`]

