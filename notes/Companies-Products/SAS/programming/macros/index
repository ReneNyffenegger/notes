$ SAS: macros
@ macros

Macros allow to write a program that writes another (or more) programs (sometimes referred to as *meta programming*)
-
Usually, the goal is to write macro statements that the macro processor turns into *standard SAS statements*.

Macros are especially useful to create variations of repetitive code.

→ Companies-Products/SAS/programming/macros/statements[Macro statements] start with a percent sign (`%`).

{ Define macro

code {
%macro macro_name [(parameters)]
  macro text
%mend macor_name;
code }

Invoking: `%macro_name`.

}
{ Compilation of a macro #sas-macro-compilation

  The compilation of a macro creates two things:
    • compiled macro statements
    • text

}
{ Comments

  Preferrably, comments in macros should be of the form `% comment text etc... ;` except when commenting macro parameters
  in which case `/* .... */` should be used.

}
{ Autocall libraries

  Macros should be stored in SAS *autocall libraries* in order for them to be in a standard location.

  On Unix and Windows, an autocall library is a (filesystem-)directory that stores macros.

  Macros in an autocall library are not → Companies-Products/SAS/programming/macros/compiling[compiled]. If not protected, their source can be looked at.
  -
  In contrast, the stored compiled macro library does not necessarily have the source code with it.

}
{ Displaying source code of a macro

  `%copy`: copies specified items from a macro library.
  
code {
%copy macro_name /<options> out='filename.txt'
code }

}
{ SASMACR

  The `SASMACR` catalog which is stored in `WORK` (with entry type `MACRO`) stores all compiled SAS macros.

}
{ Tokens with special meaning

  Some → Companies-Products/SAS/programming/compilation/tokens[tokens] have a special meaning to the → Companies-Products/SAS/programming/compilation/macro-processor:
    • Operators: + - * / < > = ¬ ^ | ~
    • Mnemonics: AND OR NOT EQ NE LE LT GE GT IN
    • Misc: blank , ; " ' ( ) #
    • Macro triggers: & %

  In order to work with text that contains such tokens, the text needs to be → Companies-Products/SAS/programming/macros/quoting[quoted].

}

sa:

  → Companies-Products/SAS/programming/macros/variables

  → Companies-Products/SAS/programming/macros/statements

  → Companies-Products/SAS/programming/macros/functions

  → Companies-Products/SAS/programming/macros/using

  → Companies-Products/SAS/programming/dictionary/macros

  Use the → Companies-Products/SAS/programming/dictionary/catalogs[dictionary.catalog] → Companies-Products/SAS/programming/dictionary[dictionary table] to
  → Companies-Products/SAS/programming/dictionary/catalogs/index#sas-dict-available-macros[select/show available macros].

  → Companies-Products/SAS/programming/macros/variables/automatic/sysmacroname[&sysmacroname]

  → Companies-Products/SAS/programming/macros/bool[Representation of booleans]

  → Companies-Products/SAS/programming/call-routines/execute/interaction-macro-datastep

  SAS stores some predefined macros in → Linux/fhs/usr/local/SAS/SASFoundation/9_x/sasautos[!SASROOT/sasautos].

  Personal → Companies-Products/SAS/macros
