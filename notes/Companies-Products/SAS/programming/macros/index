$ SAS: macros
@ macros

Macros allow to write a prgram that writes one (or more) programs (sometimes referred to as *meta programming*)
-
Usually, the goal is to write macro statements that the macro processor turns into *standard SAS statements*.

Macro statements start with a percent sign (`%`).


{ Macro variable #macro-variable

Macro variables start with an ampersand (`&`).

A macro variable does not belong to a → Companies-Products/SAS/data-sources/data-set.

The → Companies-Products/SAS/programming/data-types[data type] of a macro variable is character up to 64'000 characters.

If a macro variable is defined in a macro, it's scope is local. If it is defined in → Companies-Products/SAS/programming/open-code, its scope is global.

Within single quotes, macro variables are not expanded.

Macro variables are defined with the `%let` macro statement:
code {
%let macro_variable=value;
code }

}
{ Define macro

code {
%macro macro_name [(parameters)]
  macro text
%mend macor_name;
code }

Invoking: `%macro_name`.

}
{ Comments

  Preferrably, comments in macros should be of the form `% comment text etc... ;` except when commenting macro parameters
  in which case `/* .... */` should be used.

}
{ Autocall libraries

  Macros should be stored in SAS *autocall libraries* in order for them to be in a standard location.

}
{ Displaying source code of a macro

  `%copy`: copies specified items from a macro library.
  
code {
%copy macro_name /<options> out='filename.txt'
code }

}
{ SASMACR

  The `SASMACR` catalog which is stored in `WORK` (with entry type `MACRO`) stores all compiled SAS macros.

}
{ Tokens with special meaning

  Some tokens have a special meaning to the macro processor:
    • Operators: + - * / < > = ¬ ^ | ~
    • Mnemonics: AND OR NOT EQ NE LE LT GE GT IN
    • Misc: blank , ; " ' ( ) #
    • Macro triggers: & %

  In order to work with text that contains such tokens, the text needs to be → Companies-Products/SAS/programming/macros/quoting[quoted].

}
