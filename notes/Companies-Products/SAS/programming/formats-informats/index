$ SAS: informats / formats
@ informats and formats

~Informats~ specify how data is converted from a character-string representation to the SAS-internal (possibly
numerical) value when it is read (hence the ~in~ in *informat).
-
Usually (always?), the informat is ended with a dot.


Informats are defined with the `attrib` and `informat` statements, formats with `attrib` and `format` statements.

Every (in-)format ends in a dot in order to be able to distinguish them from a → Companies-Products/SAS/programming/variables[variable]. If the (in-)format starts with a `$` sign, it specifies
the character → Companies-Products/SAS/programming/data-types[data type].

{ Informats

  An ~informat~ defines how text is read into a → Companies-Products/SAS/programming/variables[variable]. If the variable is newly created, it also specifies its
  width and → Companies-Products/SAS/programming/data-types[data type].

}
{ Formats

  The ~format~, if applied to a → Companies-Products/SAS/programming/variables[variable], defines how the variable is printed (or formatted, or displayed). It does not change the value of the variable.
  The representation is always
  a → Companies-Products/SAS/programming/data-types[character data type].

  Formats can be created with → Companies-Products/SAS/programming/proc/format.

}

sa:


  → Companies-Products/SAS/programming/formats-informats/_[`N.M`] to format numbers.

  → Companies-Products/SAS/programming/formats-informats/numx[`numxN.M`] is like → Companies-Products/SAS/programming/formats-informats/_[`N.M`], yet with using commas instead of dots.

  → Companies-Products/SAS/programming/formats-informats/z[`zN.M`] to right align numbers (and pad them with zeroes on the left side).

  → Companies-Products/SAS/programming/formats-informats/ddmmyy[`ddmmyyXN`] to write → Companies-Products/SAS/programming/date[dates] as `18/09/2011`, `18.09.2011`, `180911` etc.

  → Companies-Products/SAS/programming/formats-informats/date[`dateN`] to write dates as `13-SEP-2017` or `13SEP17` etc.

  → Companies-Products/SAS/programming/formats-informats/is8601dt[`is8601dt`] to write dates in → misc/ISO/8601 format: `2016-08-24T06:13:07`.

  → Companies-Products/SAS/programming/formats-informats/weekdate[`weekdateN`] to write dates as *Wednesday, September 13, 2017*, *Wednesday, Sep 13, 2017*, *Wed, Sep 13, 2017*, *Wednesday* or *Wed*.

  → Companies-Products/SAS/programming/formats-informats/datetime[`datetimeN`] to display seconds past 1960 as `04JAN60:16:21:38` etc.

  → Companies-Products/SAS/programming/formats-informats/weekday[`weekday`] 

  → Companies-Products/SAS/programming/formats-informats/nldatm[`nldatm`]: → Companies-Products/SAS/programming/options/locale[locale] dependent date formatting.

  → Companies-Products/SAS/programming/formats-informats/worddate[`worddateN`] to write dates such as *September 18, 2011* or *Sep 18, 2011*.

  → Companies-Products/SAS/programming/formats-informats/percent[`percentN.M`] to format numbers as percentage.

  → Companies-Products/SAS/programming/formats-informats/best[`bestN.`] lets SAS choose the »best« representation.

  → Companies-Products/SAS/programming/formats-informats/hex[`hex.`] to convert between a hexadecimal representation of a string or number and the string/number itself.

  → Companies-Products/SAS/programming/formats-informats/binary[`binary.`] to represent a number in a binary representation (such as `0000101` for 5).

  → Companies-Products/SAS/programming/formats-informats/ib[`ibW.`] convert between numbers and their corresponding ascii (?) character (65 = `A` etc.).

  → Companies-Products/SAS/programming/formats-informats/words[`wordsN.`] to spell numbers.

  → Companies-Products/SAS/programming/formats-informats/comma[`commaN.M`]
  
  → Companies-Products/SAS/programming/statements/format,
  → Companies-Products/SAS/programming/functions/put,
  → Companies-Products/SAS/programming/functions/putn


