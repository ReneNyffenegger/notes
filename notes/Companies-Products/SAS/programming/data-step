$ SAS: data step
@ data step

A data step is a set of instructions (such as → Companies-Products/SAS/programming/statements[statements], → Companies-Products/SAS/programming/functions[functions] and
→ Companies-Products/SAS/programming/call-routines[call routines]) on how a → Companies-Products/SAS/data-sources/data-set is to be built. These instructuions are evaluated
by the *data step compiler*.

A data steps starts with `data` and optional *data set names*.

The data step is used to perform data manipulation:
an important purpose of the data step is to provide a means of reading external data and creating data sets for later use in procedures.

The data step language looks a bit like PL1.

Names to avoid for data sets: `_NULL_`, `_DATA_`, `_LAST_`.

{ Implied Loop of a Data Step

  ILDS (Implied Loop of a Data Step): The data step performs an (implied) loop: for each observation, a set of statements is executed.

  The automatically created variable `_n_` stores the iteration number of the loop. 


}
{ Writing Output

  By default, on the last line of execution on the step, data is automatically written to a data set.

  This can be overridden with an → Companies-Products/SAS/programming/statements/output[`OUTPUT`] statement somewhere in the data step.

  A → Companies-Products/SAS/programming/statements/delete[`DELETE`] statement returns to the start of the loop without writing any output.

  If the data step starts with `data _null_`, no data set is created.

}
{ Default naming of output data sets

  If the output data set is not explicitely named, SAS will name them `DATA1`, `DATA2`, `DATA3` …

}
{ Input buffer #sas-input-buffer

  If the data step's data source is a text file (rather than a → Companies-Products/SAS/programming/data-sets[data set]), the data is first read (linewise?) into the
  *input buffer*.
  - 
  Thus, the input buffer contains raw (or unparsed) data from the text file.

  The data in this buffer is then used to create the elements in the → #program-data-vector[PDV].

}
{ Program Data Vector (PDV) #program-data-vector

  The PDV is an in-memory storage area for all named variables of a data step.

  The PDV gets its data either from the → #sas-input-buffer[input buffer], from a → Companies-Products/SAS/programming/data-sets[data set] or from creating a → Companies-Products/SAS/programming/variables[variable].
  -
  Additionally, there are the two variables `_n_` and `_error_` which are automatically generated for all data steps.

  When the processing of an obesrvation finishes, the values within the PDV are written to the output destination (except for the automatic variables and the variables marked with `drop`).

}
{ Compilation and execution

  A data step is processed in two phases: first the compilation phase and then the execution phase.

  The compilation phase checks for the syntactical correctnes of the code and then creates the → #program-data-vector[PDV] and
  the decriptor portion of the output data set.

  The input data is then read during the execution phase.

}


sa:
  → Companies-Products/SAS/programming

  → Companies-Products/SAS/programming/procedural-step
