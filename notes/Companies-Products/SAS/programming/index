$ SAS Programming Language

The SAS program usually is *step oriented*: it consists of a series of
→ Companies-Products/SAS/programming/data-step or built-in
→ Companies-Products/SAS/programming/procedural-step[PROC steps].
-
A step passes data to the next step in a *data set*.

→ Companies-Products/SAS/programming/macros/variables[Macro variables] start with an ampersand (`&`),
→ Companies-Products/SAS/programming/macros/statements[macro names] start with a percent sign (`%`).

SAS has only two → Companies-Products/SAS/programming/data-types: real numbers and fixed length character strings.

Dates are stored as number of days since January 1st, 1960.

{ Fixed length character data

  Character data is fixed length.

  On the first occasion for the compiler to determine the length of character data, it assigns this
  length.

  In order to control the length of such character data deterministically, the `length` statement should be used:
code {
data ds_foo;
  length  bar $ 10 baz 4;

  bar = "…";
  baz =  22;

run;
code }

}
{ I/O

  Important statements for I/O are:
    • `FILENAME`
    • `INFILE`
    • `INPUT`: reads data from a buffer (default: `DATALINES`)
    • `FILE`
    • `PUT`: writes data to a buffer (default: `LOG`)

  A buffer can be thought as something that moves data from the → Companies-Products/SAS/programming/data-step#program-data-vector[PDV] to a file or from a file
  to the PDV.
}



sa:
  → Companies-Products/SAS/programming/data-step, → Companies-Products/SAS/programming/procedural-step

  → Companies-Products/SAS/programming/global-statements

  → Companies-Products/SAS/programming/formats-informats

  → Companies-Products/SAS/programming/code-snippets

  → Companies-Products/SAS/programming/functions/

  → Companies-Products/SAS/programming/call-routines[call routines]

  → Companies-Products/SAS/programming/literals

  → Companies-Products/SAS/programming/data-sets
  
  → Companies-Products/SAS/programming/operators

  → Companies-Products/SAS/programming/variables

