$ SAS statements: put
@ put

The `put` statement, by default, writes text into the → Companies-Products/SAS/log. The destination can be
changed with the → Companies-Products/SAS/programming/statements/file statement.

There are four put styles:
  • List put: data is seperated by spaces (`put var_one var_two`)
  • → #sas-column-put[Column put]: Specifes the columns where data goes (`put var_one 1-15 var_two 17-25`)
  • → #sas-formatted-put[Formatted put]: A format is associated with the variables (`put var_one mmddyy10. var_two yymmdd8.`)
  • → #sas-named-put[Named put]: the variable name ans value are both printed (`put var_one= var_two=`)

Note: there is also a → Companies-Products/SAS/programming/functions/[function] with the
name → Companies-Products/SAS/programming/functions/put. This function can be used
to convert between → Companies-Products/SAS/programming/data-types[data types].


{ Destination

  The destination of the text of a put statement by default goes
  to the → Companies-Products/SAS/log. It can be changed
  with the → Companies-Products/SAS/programming/statements/file[file statement].
  (See → Companies-Products/SAS/programming/statements/file#change-put-dest)

}
{ put all variables names with values

  gh|about-SAS|/programming/statements/put/__ALL__.sas||

}
{ Named put #sas-named-put

  The `put var=` idiom prints the name *and* the value of a variable:
  gh|about-SAS|/programming/statements/put/named-output.sas||

}
{ Column put #sas-column-put

  gh|about-SAS|/programming/statements/put/column/start-end.sas||

  In *column puts*, → Companies-Products/SAS/programming/formats-informats[formats] are not applied:
  gh|about-SAS|/programming/statements/put/column/format-not-applied.sas||

  
  Without explictitely stating the number of digits after the decimal point, *column put* will omit
  the decimal point and the decimals:
  gh|about-SAS|/programming/statements/put/column/decimal-point.sas||

}
{ Formatted put #sas-formatted-put

  With *formatted put*, a → Companies-Products/SAS/programming/formats-informats[format] can by dynamically applied to a
  → Companies-Products/SAS/programming/variables[variable] in a put statement:
  gh|about-SAS|/programming/statements/put/formatted/basic.sas||

}
{ Pointer control

  During the subsequent executions of `put` statement, SAS maintains a *column* and a *line pointer* that control where the output
  of the next put statement goes to.

  The column pointer is moved to a specific column with `@expression`. `expression` can be, for example a constant (`@42`), the value of a variable `@var` or the result
  of an expression within paranthesis: `@(foo+bar+3)`.
  -
  The column pointer can be moved relatively with `+expression`.

  The line pointer can be moved to a specific line with `#expression`.

  The line pointer is moved to the next line with `/`.

  { expression
  
    gh|about-SAS|/programming/statements/put/pointer-control/expression.sas||
  }

  { Absolute control
    gh|about-SAS|/programming/statements/put/pointer-control/absolute-column.sas||
  }

  { Relative columns
    gh|about-SAS|/programming/statements/put/pointer-control/relative-columns.sas||
  }

  { Holding the line
    gh|about-SAS|/programming/statements/put/pointer-control/hold-line.sas||
  }

  { Right aligned
    gh|about-SAS|/programming/statements/put/pointer-control/right-aligned.sas||
  }

}
{ Arrays

  Put elements of an array;
  gh|about-SAS|/programming/statements/put/values-of-array.sas||

}
{ Ampersand equal

  gh|about-SAS|/macro-processor/statements/put/ampersand-equal.sas||

}
{ Times

  gh|about-SAS|/programming/statements/put/times.sas||

}
{ Variable

  gh|about-SAS|/macro-processor/statements/put/variable.sas||

}

sa:

  → Companies-Products/SAS/programming/macros/statements/put

  → Companies-Products/SAS/programming/statements
