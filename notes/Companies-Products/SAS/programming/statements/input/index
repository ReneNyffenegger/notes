$ SAS statements: input
@ input

The `input` statement tells SAS how the (raw) input data looks like and how the data is to be associated with
→ Companies-Products/SAS/programming/data-step[variables].
-
Hence, this statement creates the bridge between external data and a representation that is useful within SAS processing.


code {
INPUT <user-specifications> <@ | @@>;
code }

Note: there is also a → Companies-Products/SAS/programming/functions/[function] with the
name → Companies-Products/SAS/programming/functions/input.

{ Styles

  There are four styles for the `input` statement:
    • List style: raw data is seperated by blanks
    • Column style: raw data has fixed column widths
    • Formatted style: uses *pointer control*
    • Named style

}

{ Missover

  gh|about-SAS|/programming/statements/input/missover.sas||

}

{ _infile_

  gh|about-SAS|/programming/statements/input/_infile_.sas||

}
{ Columns

  gh|about-SAS|/programming/statements/input/columns.sas||

}
{ At

  gh|about-SAS|/programming/statements/input/at.sas||

}
{ base_n-base_m-notation.sas

  gh|about-SAS|/programming/statements/input/base_n-base_m-notation.sas||

}
{ relative-column-pointer.sas

  gh|about-SAS|/programming/statements/input/relative-column-pointer.sas||

}
{ length-of-variables.sas

  gh|about-SAS|/programming/statements/input/length-of-variables.sas||

}
{ array.sas

  gh|about-SAS|/programming/statements/input/array.sas||

}
{ in.sas

  gh|about-SAS|/programming/statements/array/in.sas||

}

sa:

  → Companies-Products/SAS/programming/statements, especially
  → Companies-Products/SAS/programming/statements/infile

  With the → Companies-Products/SAS/programming/statements/datalines[datalines statement], it possible to read data that is stored *with the program source* rather
  than reading external data.

  → Companies-Products/SAS/programming/statements/put
