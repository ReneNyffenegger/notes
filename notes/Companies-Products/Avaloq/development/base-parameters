$ Avaloq base parameters

`avq.obj_collect`: behaviour of colecctions

{ Tables

  See
    → Companies-Products/Avaloq/development/tables/base#avq-tab-base_par and
    → Companies-Products/Avaloq/development/tables/base#avq-tab-base_par_item

}
{ Portfolio desk

  Base parameters relevant for the portfolio → Companies-Products/Avaloq/desk[desk] are
    • avq.portf
    • avq.portf_screen

}
{ avq.pos_list.ignore_corrupt_pos

  Used to re-calculate a position → Companies-Products/Avaloq/pillars[pillar] even if the underlying data is corrupt.

}
{ Accessing the values of base parameters

  With → Companies-Products/Avaloq/development/Avaloq-script[Avaloq script]:
code {
l_val_1 :=  avq$base_par_NAME_OF_PARAMETER.ITEM;
l_val_2 := tq84$base_par_NAME_OF_PARAMETER.ITEM;
code }

}
{ Tasks

  → Companies-Products/Avaloq/tasks[Tasks] 48 (Base Parameter Item Lookup).

}
{ Source type

  Customization takes place with → Companies-Products/Avaloq/development/tables/code/src/type[source type] `BASE PAR DEF`. 

code {
[base par def 1.0]
base par tq84.foo_bar

  naming
    dfltlang       "Foo bar parameter"

  descn            "Foo bar parameter"

  properties

  items
    item_abc       "Item a bee cee"
      naming
        dfltlang   "Base parameter item abc"
        german     "Eine hoffentlich schlaue Übersetzung"

        descn      "Description for this base parameter"

end base par
code }

  Apparently, after compilation, the result is stored in the `out_text_norm` table.

}
{ TODO

  → Companies-Products/Avaloq/development/tables/code/src/type[Source type] `BASE PAR INTF`.

  → development/databases/Oracle/PL-SQL[PL/SQL]  packages `base_par_intf#` and `base_par#`.
  -
  `base_par_intf#` can apparently be used to get and/or modify the value of a base parameter.
code {
begin
  base_par_intf#.base_par#set_val(
    i_intl_id  => 'tq84$forest',
    i_item     => 'material'   ,
    i_val      => 'wood'
  );
end;
/
code }

}
