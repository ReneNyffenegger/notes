$ Avaloq: report writer

With *report writer*, it's possible to create reports. Data from within Avaloq can be extracted, consolidated, aggregated and finally desplayed on paper or screen.
-
However, for an experienced → development/databases/SQL[SQL] developper, it usually easier and faster to create such reports with SQL itself.

{ Report definition

  A report definition consists of a
    • Hierarchical datamart definition (aka report datamart)
    • Layout definition

}
{ Flat data marts #avq-flat-datamart

  A flat → development/Data/mart[datamart] is produced by → Companies-Products/Avaloq/tasks[tasks]. In → development/databases/SQL[SQL]-terms, this product is
  non-normalized.
  -
  In the realm of report writer, a task can almost be used synonymously with SQL query (SQL `select` statement).

  The result of the flat datamart task is described in a *flat datamart definition*, which is a → Companies-Products/Avaloq/development/DDIC.
  -
  This definition specifies the data (fields etc.) that the task returns. This data is the (non-normalized) basis for the report.

  The flat datamart itself is defined by a → Companies-Products/Avaloq/development/DDIC[DDIC] (such as `dtm_pos_list`).

}
{ Hierarchical datamart definition

  The hiarachical datamart definition specifies how the data returned by the flat data mart needs to be consolidated (grouped and sorted)
  and aggregated (sums, counts etc.)

  Apparently, Avaloq calls a hierarchical datamart *report datamart*.

  The → Companies-Products/Avaloq/development/sources[source] type for hierarchical datamarts is `REP DTM`.

}
{ Layout definitions

  The layout definition specifies how the data that is prepared by the hierarchical datamart will be displayed.jw

  A layout definition is a → Companies-Products/Avaloq/development/sources[source] of one of the following → Companies-Products/Avaloq/development/tables/code/src/type[source types]:
    • REP SCREEN (Report is displayed in → Companies-Products/Avaloq/SmartClient).
    • REP PRINT (produces → development/languages/PostScript)
    • REP FILE
    • REP SCRIPT (which creates an executable → Companies-Products/Avaloq/development/Avaloq-script[script]).
    • REP TABLE (usually to create a → Companies-Products/Avaloq/pillars[pillar]).

}
{ Example script

code {
[Report 2.0]

--     Name.
--     It constists of (at least) two parts, seperated by a dot:
--       o underlying task (definition) and
--       o name of the layout.
report task_pos_list.pos  

naming dfltlang 'Position list by name'

print layout
      format A4
      orientation landscape
      border left 20 top 20 bottom 20 right 20
      font 'Arial' 9
      …

      on column head
         …

      on report head
         font 'Arial-Bold' 9

      if top.seq_nr is null then -- No data found
         column left session.text('LABEL.NO_DATA_FOUND');
      else
         column left rep_lib.title(task_exec);
      end if;

      linefeed
      pagepbreak

end layout
end report
code }

}

{ TODO

  To create a report with report writer, apparently a datamart → Companies-Products/Avaloq/development/DDIC[DDIC] is needed.

  → Companies-Products/Avaloq/development/tables[Table] `code_cons_fct` lists consolidation functions. User defined functions can apparently be added.jw

}
