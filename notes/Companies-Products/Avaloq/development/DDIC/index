$ Avaloq data dictionary
@ DDIC

A DDIC is the interface/API for → Companies-Products/Avaloq/development/Avaloq-script[Avaloq script] to read and modify
→ Companies-Products/Avaloq/order[orders] and → Companies-Products/Avaloq/object[objects].

Every → Companies-Products/Avaloq/development/tables/code[code table] is associated with a DDIC.


{ Components

  A data dictionary has three essential components:
    • data fields (simple and indexed)
    • methods
    • constructor

  Fields allow to create »chains«, for example according to the → Companies-Products/Avaloq/object/model[object model] from position to
  bp:
code {
  bp_name := some_pos.cont.bp.name;
code }

  { List fields

    The items in an indexed data field can be iterated over with a `for … loop`.

    Further methods are:
      • `list`
      • `count`
      • `get` / `set`
      • `clear`: remove all itemas
      • `add`
      • `rmv(ix)`: removes an item (`ix` between 1 and `.count`)
      • `rmv_item(…)`: removes an item that meets a condition

  }

}
{ Datatypes

  Base types: the usual → Companies-Products/Avaloq/development/Avaloq-script[Avaloq script types]: `text`, `number`, `date`, `long`, `boolean`.

  Id (or reference) types: primarky keys of tables such as → Companies-Products/Avaloq/development/tables/code[code tables] or business objects (`obj_bp` etc).

}
{ Methods

  • `do`
  • `new` (the constructor)
  • …

  Apparently, DDICs can inherit methods also from parent DDICs.

}
{ Types of DDICs

  • Memory (`mem_...`): come with a constructor
  • Table: to access *one* row in a table.
  • Datamart (`dtm_...`) - temporarly used by → Companies-Products/Avaloq/development/report-writer[report writer].
  • Pillar: to create → Companies-Products/Avaloq/pillars[pillars].

  Additionally, there are the two special DDICs
    • → Companies-Products/Avaloq/development/DDIC/session[`session`] and
    • `lookup` (For example `lookup.date(to_char(session.today) || ' 3v')`)

}
{ Examples of DDICS

  • `mem_doc_bp`
  • `doc_bp`
  • `obj_bp`
  • `dtm_doc_stex`

  The `extn` DDIC allows to access an → Companies-Products/Avaloq/object/attributes[object's attributes]:
code {
cust_type := obj_bp(some_id).extn.bp_custr_type;
code }
`bp_custr_type` is the *intl_id* of, for example, a → Companies-Products/Avaloq/object/attributes/class[classification].

Apparently, the `extn` is a more modern approach to be used instead of
code {
cust_type := obj_bp(some_id).classif_list(ref_date => l_date, obj_classif => …).class_id;
code }

TODO:
code {
l_bp_sym := mem_doc_bp(some_wfc_action_id, some_obj_id).key('bp_sym');
code }

  { Constant DDICs

    Properties of → Companies-Products/Avaloq/object/attributes/class[classes] in → Companies-Products/Avaloq/development/tables#avq-tab_code_obj_class[code_obj_class] can be read with the so called
    *constant DDIC*:
code {
class_val = code_obj_classif_OBJ_TYPE_INTL_ID_CLASSIFICATION.INTL_ID_CLASS.FIELD; /* FIELD might be "activ" etc. */
code }

  }

}
{ Task execution

  DDICs used for task execution are
    • task_exec (starting tasks)
    • task_exec_rw (querying state of tasks)

}
{ Constructor (new)

  The constructor (`new`) is only available for the memory layer.

}
{ Doc vs Mem Doc vs Obj layer

  ~Mem doc~ layer (or order memory layer): Used for → Companies-Products/Avaloq/order[order] and → Companies-Products/Avaloq/object[object] mutation.

  ~doc~ layer (or order persistence layer): stores orders, allows for history.
  -
  Order go from *mem doc* to *doc* when the → Companies-Products/Avaloq/order/workflow[workflow] action *store* is executed.

  The ~obj layer~ (or kernel layer) stores objects.
  -
  The obj layer distinguishes between *static kernel data* (such as BPs, containers or assets) and *positions and bookings*.

}
{ There is more than one way to do it

  The following five constructs are equivalent:
code {
pos.asset.class('ass_type').intl_id = 'fwd_fx'
pos.asset.class('ass_type').id = 12345 /*fwd_fx*/
pos.asset.class('ass_type').id = lookup.code('code_obj_class','fwd_fx')
pos.asset.class_id('ass_type') = 12345 /*fwd_fx*/
pos.asset.class_id('ass_type') = mdb_asset.fwd_fx
code }

  However, the latter two seem to have a *tiny* performance benefit.


}
{ TODO

  Task 923.

  → Companies-Products/Avaloq/tasks[Tasks] 9924 (DDIC value sampler) and
  1031 (Table compare) allow to summarize DDIC and table changes and the resulting
  impacts.

  → Companies-Products/Avaloq/development/tables#avq-tab-meta_script_stmt.

}
sa:
  A pominent example of DDICs are the → Companies-Products/Avaloq/development/report-writer#avq-flat-datamart[flat datamart definitions].
