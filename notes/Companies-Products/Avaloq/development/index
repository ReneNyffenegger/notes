$ Avaloq development stuff

  → Companies-Products/Avaloq/development/oracle-schemas[Oracle schemas]

  Apparently, the special date *31.12.4712* is used as *max date* in Avaloq.

{ TODO

  Collections: dynamic vs static.

  Customisation: Parametrisation + scripting

  ABS = Avaloq Banking System.

  OMD = Object Modelling Devinition

  Open vs closed security (Open: evertyhing available by default, access must be restricted. Closed: everything is forbiddedn by default, access must be granted).

  `out_text_norm` apparently stores translations for → Companies-Products/Avaloq/order/workflow[workflow] status and actions.

  { Container

    Assetes can be structured with containers into different portfolios. (Positions)

  }
  { Position

    A position belongs to one container.

    It represents the quantity of one asset.

    The value of postions can be shown by balancing it.

  }
  { Booking

    Generated by a transaction order.

    A booking changes a (money account and interim account)? position.

  }
  { Pillars

    • Position pillar
    • Balance pillar
    • Collateration pillar
    • … ?

    The balance pillar (to show the balance) needs position and possibly balance pillar.

  }
  { Balances

    Creating a balance structure with `balstru#.put`.

  }
  { Orders

    *Static data* orders vs *transaction* orders.

    Static data orders modify objects.

    Transactional orders generate *events*.

  }
  { Extensions

    { Keys

      *Single value* keys vs *mutli value* keys.


    }
    { Classifications

       *Single value* vs *multi value* classification.

      (Also) used for calculating costs, reporting, booking rules, workflow
      

    }
    { Additions
  
      Data types
        • text
        • code_const


      Tables relevant for additions:
        • code_obj_add
        • code_doc_add
        • code_const_type
        • code_const
        • out_text_norm

    }
    { Remarks

      Only informational purpose. Contain context free text.

      Remarks feature a *valid to* date.

    }
  }
  { Adding access code to an object

    Use `sec_admin_intf#.obj#add_access`.

  }
  { Rules

    `RULE_KIND`: Only one rule set can be active for each rule kind.

    A rule set is a group of rules that belong together.

    Used in
      • Workflow
      • Costs
      • Accounting
      • Default accounts
      • Default field values

  }
  { Workflow

    A workflow action triggers a change of the workflow status

    For each workflow status, exactly one event status can be defined

     A change in the event status triggers the Book Engine.

     Tables needed:
       • WFC_STATUS
       • WFC_ACTION
       • WFC_RULE_LD
       • WFC_RULE

     Linking access code to workflow action in table `SEC_ACTION_ACCESS`.


  }
  { Order validations

    Order validations check data in subwindows.

    They are triggered by workflow actions.

    Error codes stored in `code_ui_err.*`

  }
  { LD_* tables

    LD_* table = loader tables, for example `LD_MD` (market data), `LD_MD_DIRECT` and `LD_MP`.

  }
  { Source types

     `CODE_SRC_TYPE`
     -
     Sources whose corresponding record in the column `REV_` of `CODE_SRC_TYPE` is a `+` can be reverse compiled.

    • REP DTM: Report datamart
    • …

  }
  { Background proceses (BGP)


    Started and ended in either
      • ICE (instance tab)
      • Central services desk

  }
  { Forms

    Field types:
      • Text
      • Label
      • Obj
      • Code
      • Screen report
      • …

  }
  { Colletion types

    Some collection types allow to use the `select * from table(…)` construct:
code {
begin
  for r in (select * from table(k.t_char250_varray256(  123456, 789, 1111, 222, 333 ))) loop
    dbms_output.put_line(r.column_value);
  end loop;
end;
/
code }


  }

}
