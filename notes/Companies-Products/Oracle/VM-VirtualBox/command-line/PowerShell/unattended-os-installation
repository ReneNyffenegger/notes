$ VirtualBox: Unattended OS installation with PowerShell

{ Variables #vbox-unattended-variables

  Before the unattended installation is started, a few → Windows/PowerShell/language/variable[variables] are defined.
  -
  Note the two values for `$userName` and `$fullUserName`.

  This → Windows/PowerShell/script[script] must be → Windows/PowerShell/language/operator/dot[dot sourced] so that the defined variables are set in the *current* scope as opposed to the child code.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/variables.ps1||

}
{ Remove last creation

  I already might have created a → Companies-Products/Oracle/VM-VirtualBox/virtual-machine with the same name, especially when testing this scenario. So delete this 

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/remove-vm.ps1||

}
{ Detect OS of given .iso

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/detect.ps1||
  
  The output of this command includes a line with the *OS TypeId* of the iso's operating system:
code {
...
    OS TypeId    = WindowsNT_64
...
code }

  I'd think I should be using this value for the parameter `--ostype` when creating the virtual machine definition file, but it turns aout that `Windows10_64` is better.

  BTW, a list of supported OS types can be shown with
code {
→ Windows/dirs/Program-Files/Oracle/VirtualBox/VBoxManage_exe/list ostypes
code }

}
{ Create the virtual machine definition file

  The following step creates a new *XML virtual machine definition file* with the file extension `.vbox`.

  In this example, the file created is `$vmPath\$vmName.vbox`.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/createvm.ps1||

}
{ Add a hard disk

  A hard disk is needed. The `--size` parameter is in megabytes.
  -
  The value of this parameter is set in `variables.ps`

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/create-hd.ps1||

  This step creates the `.vdi` file `$vmPath\hard-drive.vdi`.

}
{ Add SATA controller and attach hard disk to it

  The hard disk needs a → hardware/SATA storage controller to which it can be attached.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/create-sata.ps1||

}
{ Add IDE controller and virtual DVD drive

  The `.iso` file with the OS to be installed needs to be mounted via an IDE controller.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/create-ide.ps1||

}
{ Enable APIC

  I/O → hardware/APIC[APIC] is enabled for the → hardware/PC/motherboard of the virtual machine.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/enable-apic.ps1||

}
{ Specify boot order of devices

  Configure the boot device order for the VM.

  A virtual machine has 4 slots from which it tries to boot from. The following command specifies their order:

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/boot-device-order.ps1||

}
{ Memory

  → hardware/memory[Memory] is needed by both, the → hardware/RAM and video processor. Their sizes can be specified in one go with the `--memory` and `--vram` options of `VBoxManage modifyvm`:
  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/allocate-memory.ps1||

}
{ Specify (host) location of a shared folder #vbox-unattended-shared-folder

  In order to be able to exchange files between the guest and the host, the (already existing) folder on the host is specified:

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/prepare-shared-folder.ps1||

}
{ Enable clipboard content sharing

  Allow → Windows/clipboard[clipboard] content to be shared between host and guest in both directions.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/clipboard-mode.ps1||

}
{ VBoxSVGA

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/vboxsvga.ps1||

}
{ Specify an unattended installation

  I specify the desire for an unattended installation of the operating system.

  The `--post-install-command` specifies a command to be executed by `A:\VBOXPOST.CMD` after it has executed `E:\vboxadditions\VBoxWindowsAdditions.exe /S`.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/install.ps1||

  TODO: the previous command should proably include the `--install-additions` option.

}
{ List virtual machines

  The new virtual machine is shown to be registered.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/list-vms.ps1||

}
{ Remove menus

  I don't want any menus in the the window that shows the content of the virtual machine.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/remove-menues.ps1||

}
{ Start the virtual machine

  The unattended installation is triggered by starting the unattended installation.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/start-vm.ps1||

}
{ Specify the size of the screen

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/video-mode-hint.ps1||

  I also tried the following commands to specify the screen size, yet without any positive result:
code {
VBoxManage setextradata $vmName CustomVideoMode             1600x900x32
VBoxManage controlvm    $vmName setvideomodehint            1920 1080 32
VBoxManage controlvm    $vmName setscreenlayout primary 0 0 1600 1200 24
code }

}
{ Wait for installation to be finished

  The following command waits until the specified property is set. It is supposed to be set *after* the installation of the VirtualBox is finished. However, in my environment, it turned out that the property
  was always set before Windows was installed. So, the idea is good, but the implementation is imperfect.

  gh|about-VirtualBox|/command-line/PowerShell/unattended-os-installation/wait-for-finished-installation.ps1||

  The property that was set is also visible with
code {
VBoxManage guestproperty enumerate $vmName 
code }

}
{ TODO

  Set the number of → hardware/CPU[CPUs]:
code {
$nofCPU = 4
VBoxManage modifyvm $vmName --cpus $nofCPU
code }
 
  Should → hardware/ACPI be enabled by default (compare `VBoxManage modifyvm --acpi [on|off]`)

  Should nested VT-x/AMD-v be enabled?

  Should 3D acceleration be turned on?

}
{ Next steps

  After installing an OS, its → Companies-Products/Oracle/VM-VirtualBox/command-line/PowerShell/setting-up-environment[environment might be set up].

}
