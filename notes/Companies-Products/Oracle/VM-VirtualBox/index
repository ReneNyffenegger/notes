$ Oracle VM VirtualBox

VirtualBox provides a *x86 processor* in a virtual environment. Thus, only x86 based operating systems are supported.
-
The virtual processor corresponds to the host's actual processor. This is different from → hardware/QEMU where the processor is emulated (or imitated).

{ Enabling BIOS/UEFI

  In order to be able to use virtualization, *VT-x* must be enabled in the → hardware/BIOS[BIOS] or → hardware/UEFI[UEFI].

}
{ Some command line examples

  VirtualBox can be configured from the command line.

  { List all available and running virtual machines

code {
→ Windows/dirs/Program-Files/Oracle/VirtualBox/VBoxManage_exe[VBoxManage] list vms
→ Windows/dirs/Program-Files/Oracle/VirtualBox/VBoxManage_exe[VBoxManage] list runningvms
code }

  }
  { Starting and shutting down a virtual machine

    Starting the → Companies-Products/Oracle/VM-VirtualBox/virtual-machine whose name is *lnx*:
code {
→ Windows/dirs/Program-Files/Oracle/VirtualBox/VBoxManage_exe[VBoxManage] startvm lnx
code }

    After starting the virtual machine, it probably needs to be resumed:
code {
VBoxManage controlvm lnx resume
code }

    The virtual machine can be shut down the hard way:
code {
VBoxManage controlvm lnx poweroff
code }

  }
  { Adding a custom screen resolution

    It seems that, at least when running on a Windows host, the virtual box only has some predefined screen resolutions: *1600x1200*, *1280x1024*, *1152x864*, *1024x768* and *800x600*.

    These predefined resolutions can be extended with a *custom video mode* . First, the → Companies-Products/Oracle/VM-VirtualBox/virtual-machine must be stopped.
    Then (within → Windows/dirs/Windows/System32/cmd_exe), `VBoxManage.exe` can be executed:
code {
"c:\Program Files\Oracle\VBoxManage.exe" setextradata "VIRTUAL BOX NAME HERE" CustomVideoMode 1600x900x32
code }

  }

}
{ Guest additions

  A *guest addition* improves the guest operating system (notably: screen resolution and mouse control).

  Guest additions are installed *within* the guest OS, not on the host OS.

}
{ Arch Linux #arch-linux

  Apparently, under → Linux/distributions/arch[Arch Linux], VirtualBox is loaded through/via/by the `vboxdrv` → Linux/kernel/module which
  must be loaded before any virtual machine can run.
  -
  This modules is installed with
  -
  `sudo pacman -S virtualbox`
  -
  and then loaded with
  -
  `→ Linux/shell/commands/modprobe vboxdrv`.
  -
  *Optional* (but recommended) modules are: `vboxnetadp`, `vboxnetflt` and `vboxpci`. (See also
  → Linux/fhs/etc/modules-load_d/virtualbox_conf)

  The user who wants to use the VirtualBox must be member of the `vboxusers` group:
  -
  `gpasswd -a $USER vboxusers`

  Apparently, the executable to start the VirtualBox, `virtualbox`, must be installed seperatly:
  -
  `sudo pacman -S virtualbox`

  TODO: Apparently, it cannot hurt to also install `virtualbox-guest-iso`.

  TODO: does it also need `sudo pacman -S virtualbox-host-modules-arch`?

}
{ Windows / Hyper-V

  As per some comments that I found in the vast depths of the Internet, VirtualBox cannot be run on → Windows/versions/10 if → Windows/optional-features/Hyper-V is active because Hyper-V does not release *VT-x* once it has acquired it.
  -
  Apparently though, VirtualBox and VMWare *can* coexist.

  However, at least with VirtualBox version six, there seems to be an experimental feature where VirtualBox detects → Windows/optional-features/Hyper-V and uses it if it finds it.
  Such a configuration is indicated by a CPU icon in the VM window status bar.
  -
  Apparently, the interaction with Hyper-V leads to performance degradation.

  An advantage of VirtualBox over Hyper-V is that it is free and also runs on a Windows home edition.

}
{ Host key

  Pressing the *host key* un-captures the keyboard (and the mouse?). (With a caputured keyboard, all keyboard events, even alt/tab, go to the guest OS.

  The currently assigned host key is shown in the bottom-status bar on the right side.

}
{ Python API

  VirtualBox comes with two → development/languages/Python APIs
    • One for its → development/web/service, and
    • one for the → Windows/development/COM (or XPCOM) API

}
{ Components

  table { ll

    IPRT ☰  A portable runtime library which abstracts file access, threading, and string manipulation. Whenever Oracle VM VirtualBox accesses host operating features, it does so through this library for cross-platform portability.
    VMM  ☰ The *Virtual Machine Monitor*, which is the heart of the → development/hypervisor.
    EM   ☰ The *Execution Manager* controls execution of guest code.
    TRPM ☰ The *Trap Manager* intercepts and processes guest traps and exceptions.
    HM   ☰ The *Hardware Acceleration Manager* provides support for VT-x and AMD-V.
    GIM  ☰ The *Guest Interface Manager* provides support for various paravirtualization interfaces to the guest.
    PDM  ☰ The *Pluggable Device Manager* is an abstract interface between the VMM and emulated devices which separates device implementations from VMM internals and makes it easy to add new emulated devices. Through PDM, third-party developers can add new virtual devices to Oracle VM VirtualBox without having to change Oracle VM VirtualBox itself.
    PGM  ☰ The *Page Manager* is a component that controls guest paging.  
    TM   ☰ The *Time Manager* handles timers and all aspects of time inside guests.
    CFGM ☰ The *Configuration Manager* provides a tree structure which holds configuration settings for the VM and all emulated devices.
    SSM  ☰ The *Saved State Manager* saves and loads → Companies-Products/Oracle/VM-VirtualBox/virtual-machine state.
    VUSB ☰ The *Virtual → hardware/USB layer* which separates emulated USB controllers from the controllers on the host and from USB devices. This component also enables remote USB.
    DBGF  ☰ The *Debug Facility* is a built-in VM debugger.

  table }

}

sa:
 → Windows/dirs/Program-Files/Oracle/VirtualBox

 Error message → Companies-Products/Oracle/VM-VirtualBox/Windows/Failed-to-open-session-for-the-virtual-box[Failed to open a session for the virtual machine]
